<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Containers/Set.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('dc/d09/_set_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Set.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Deque.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00012"></a><span class="lineno"><a class="line" href="../../d6/daa/classxii_set_base.htm">   12</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase</a></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keyword">struct </span>Node;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keyword">struct </span>NilNode</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    xiiUInt16 m_uiLevel  = 0;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    Node*     m_pParent  = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    Node*     m_pLink[2] = {<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  };</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keyword">struct </span>Node : <span class="keyword">public</span> NilNode</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    KeyType m_Key;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  };</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">   33</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">Iterator</a></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">using</span> iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">using</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">value_type</a>        = <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a9df1aeea82d0a65143c4d34fb2609298">Iterator</a>;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">using</span> difference_type   = std::ptrdiff_t;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">using</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">pointer</a>           = <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">Iterator</a>*;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">using</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">reference</a>         = <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">Iterator</a>&amp;;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    XII_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a9df1aeea82d0a65143c4d34fb2609298">   44</a></span>&#160;    XII_ALWAYS_INLINE <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a9df1aeea82d0a65143c4d34fb2609298">Iterator</a>() :</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      m_pElement(nullptr)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    {</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a16c8795a2f2e24260e7f31f65ac8c6b8">   50</a></span>&#160;    XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a16c8795a2f2e24260e7f31f65ac8c6b8">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != <span class="keyword">nullptr</span>); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#acbf9837f2eef76e272bf378bad01e482">   53</a></span>&#160;    XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#acbf9837f2eef76e272bf378bad01e482">operator==</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement == it2.m_pElement); }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a05d82a02a7c37898af676bafc5faaab0">   56</a></span>&#160;    XII_FORCE_INLINE <span class="keyword">const</span> KeyType&amp; <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a05d82a02a7c37898af676bafc5faaab0">Key</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      XII_ASSERT_DEBUG(<a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a16c8795a2f2e24260e7f31f65ac8c6b8">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;key&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordflow">return</span> m_pElement-&gt;m_Key;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#abb3e7ab1c21ad836b216ad5f1cff6674">   63</a></span>&#160;    XII_ALWAYS_INLINE <span class="keyword">const</span> KeyType&amp; <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#abb3e7ab1c21ad836b216ad5f1cff6674">operator*</a>() { <span class="keywordflow">return</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a05d82a02a7c37898af676bafc5faaab0">Key</a>(); }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a5440c12ecad16e887607a6496a5d32f1">Next</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">void</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a9217295e49a112b28cbf16e15f04cfde">Prev</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#acab2506ab4c40533bb459bec10fc0c14">   72</a></span>&#160;    XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#acab2506ab4c40533bb459bec10fc0c14">operator++</a>() { <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a5440c12ecad16e887607a6496a5d32f1">Next</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#aa4e998d4517a3347721b1cd31cf24acc">   75</a></span>&#160;    XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#aa4e998d4517a3347721b1cd31cf24acc">operator--</a>() { <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a9217295e49a112b28cbf16e15f04cfde">Prev</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase</a>&lt;KeyType, Comparer&gt;;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    XII_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a9df1aeea82d0a65143c4d34fb2609298">Iterator</a>(Node* pInit) :</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      m_pElement(pInit)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    Node* m_pElement;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  };</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <a class="code" href="../../d6/daa/classxii_set_base.htm#af3c54e2d35affe8f0e9582bccbda0350">xiiSetBase</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <a class="code" href="../../d6/daa/classxii_set_base.htm#af3c54e2d35affe8f0e9582bccbda0350">xiiSetBase</a>(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; cc, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <a class="code" href="../../d6/daa/classxii_set_base.htm#abcb763cd04848b5d61818421b60de4e8">~xiiSetBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a949710a7061f08ce30ec98e73c62002d">operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; rhs); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#ab3d6ef2b492e4b048201e9897a956533">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  xiiUInt32 <a class="code" href="../../d6/daa/classxii_set_base.htm#a612883c7cb7fab407d11aa6f2889b130">GetCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a0d39b63f88f77dfff248b0586c9f9c24">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  Iterator <a class="code" href="../../d6/daa/classxii_set_base.htm#ae94d47ef967975a5a4b2f2a0fb953dd7">GetIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  Iterator <a class="code" href="../../d6/daa/classxii_set_base.htm#ab5dd55c4e09e2e15e987db19cb64eaf1">GetLastIterator</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  Iterator <a class="code" href="../../d6/daa/classxii_set_base.htm#a0c684120db5132a2037d0defbe2d70c1">Insert</a>(CompatibleKeyType&amp;&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a945ed5e59fddd5c68117a7f741533498">Remove</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  Iterator <a class="code" href="../../d6/daa/classxii_set_base.htm#a945ed5e59fddd5c68117a7f741533498">Remove</a>(<span class="keyword">const</span> Iterator&amp; pos); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  Iterator <a class="code" href="../../d6/daa/classxii_set_base.htm#a45edcd7f67a240a03dcf35f4b6b9ca8c">Find</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a8f118b4eae296d75dbbb6b8636bee278">Contains</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a4d24016c241584f27553d730d435b9b0">ContainsSet</a>(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; operand) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  Iterator <a class="code" href="../../d6/daa/classxii_set_base.htm#af80f696c31de05176cebb0a1cf1649cf">LowerBound</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  Iterator <a class="code" href="../../d6/daa/classxii_set_base.htm#aa22e1e00a492c0735196cdb2a4e36c39">UpperBound</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a01f1d41d54c7ca40a4effee6f6d446e2">Union</a>(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; operand); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a5b05f30fd73f5b58ed6fa05ee29f18e9">Difference</a>(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; operand); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a7f9b3ee58fb5f2d0f35c7a7177e64afb">Intersection</a>(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; operand); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="../../d6/daa/classxii_set_base.htm#ae7171c020b43c3aa116ba8351bbfe8fa">  159</a></span>&#160;  <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* <a class="code" href="../../d6/daa/classxii_set_base.htm#ae7171c020b43c3aa116ba8351bbfe8fa">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.<a class="code" href="../../d1/d7d/classxii_deque_base.htm#ac6bd66726793b411f2df0cfdb23dfbaa">GetAllocator</a>(); }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#a348a90c29b37356ebec0d54391b9819e">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="../../d6/daa/classxii_set_base.htm#ad442d03eea8de7d9c91c3e0c1f6cdc35">  165</a></span>&#160;  xiiUInt64 <a class="code" href="../../d6/daa/classxii_set_base.htm#ad442d03eea8de7d9c91c3e0c1f6cdc35">GetHeapMemoryUsage</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.<a class="code" href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">GetHeapMemoryUsage</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../d6/daa/classxii_set_base.htm#abf5022e8a572d2c29d19a984ae01af7e">Swap</a>(<a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  Node* Internal_Find(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  Node* Internal_LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  Node* Internal_UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keywordtype">void</span> Constructor();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  Node* AcquireNode(CompatibleKeyType&amp;&amp; key, xiiUInt16 uiLevel, Node* pParent);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keywordtype">void</span> ReleaseNode(Node* pNode);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  Node* SkewNode(Node* root);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  Node* SplitNode(Node* root);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  Node* <a class="code" href="../../d6/daa/classxii_set_base.htm#a0c684120db5132a2037d0defbe2d70c1">Insert</a>(Node* root, CompatibleKeyType&amp;&amp; key, Node*&amp; pInsertedNode);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  Node* <a class="code" href="../../d6/daa/classxii_set_base.htm#a945ed5e59fddd5c68117a7f741533498">Remove</a>(Node* root, <span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keywordtype">bool</span>&amp; bRemoved);</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  Node* GetLeftMost() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  Node* GetRightMost() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keywordtype">void</span> SwapNilNode(Node*&amp; pCurNode, NilNode* pOld, NilNode* pNew);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  Node* m_pRoot;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  NilNode m_NilNode;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  xiiUInt32 m_uiCount;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;Node, xiiNullAllocatorWrapper, false&gt;</a> m_Elements;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  Node* m_pFreeElementStack;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  Comparer m_Comparer;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;};</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer = xiiCompareHelper&lt;KeyType&gt;, <span class="keyword">typename</span> AllocatorWrapper = xiiDefaultAllocatorWrapper&gt;</div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="../../d6/d31/classxii_set.htm">  229</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/d31/classxii_set.htm">xiiSet</a> : <span class="keyword">public</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase</a>&lt;KeyType, Comparer&gt;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;{</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <a class="code" href="../../d6/d31/classxii_set.htm">xiiSet</a>();</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <span class="keyword">explicit</span> <a class="code" href="../../d6/d31/classxii_set.htm">xiiSet</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <a class="code" href="../../d6/d31/classxii_set.htm">xiiSet</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <a class="code" href="../../d6/d31/classxii_set.htm">xiiSet</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d31/classxii_set.htm">xiiSet&lt;KeyType, Comparer, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  <a class="code" href="../../d6/d31/classxii_set.htm">xiiSet</a>(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; other);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d6/d31/classxii_set.htm">xiiSet&lt;KeyType, Comparer, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;};</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a> begin(<a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordflow">return</span> ref_container.<a class="code" href="../../d6/daa/classxii_set_base.htm#ae94d47ef967975a5a4b2f2a0fb953dd7">GetIterator</a>();</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a> begin(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;{</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d6/daa/classxii_set_base.htm#ae94d47ef967975a5a4b2f2a0fb953dd7">GetIterator</a>();</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;}</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a> cbegin(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;{</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d6/daa/classxii_set_base.htm#ae94d47ef967975a5a4b2f2a0fb953dd7">GetIterator</a>();</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a> end(<a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a> end(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;}</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a> cend(<span class="keyword">const</span> <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;{</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase&lt;KeyType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Implementation/Set_inl.h&gt;</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_a5440c12ecad16e887607a6496a5d32f1"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a5440c12ecad16e887607a6496a5d32f1">xiiSetBase::Iterator::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the set. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> Set_inl.h:10</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_a16c8795a2f2e24260e7f31f65ac8c6b8"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a16c8795a2f2e24260e7f31f65ac8c6b8">xiiSetBase::Iterator::IsValid</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition:</b> Set.h:50</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a4d24016c241584f27553d730d435b9b0"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a4d24016c241584f27553d730d435b9b0">xiiSetBase::ContainsSet</a></div><div class="ttdeci">bool ContainsSet(const xiiSetBase&lt; KeyType, Comparer &gt; &amp;operand) const</div><div class="ttdoc">Checks whether all keys of the given set are in the container.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:268</div></div>
<div class="ttc" id="aclassxii_set_base_htm_abf5022e8a572d2c29d19a984ae01af7e"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#abf5022e8a572d2c29d19a984ae01af7e">xiiSetBase::Swap</a></div><div class="ttdeci">void Swap(xiiSetBase&lt; KeyType, Comparer &gt; &amp;other)</div><div class="ttdoc">Swaps this map with the other one.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:777</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_aa4e998d4517a3347721b1cd31cf24acc"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#aa4e998d4517a3347721b1cd31cf24acc">xiiSetBase::Iterator::operator--</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator--()</div><div class="ttdoc">Shorthand for 'Prev'.</div><div class="ttdef"><b>Definition:</b> Set.h:75</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_abb3e7ab1c21ad836b216ad5f1cff6674"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#abb3e7ab1c21ad836b216ad5f1cff6674">xiiSetBase::Iterator::operator*</a></div><div class="ttdeci">const XII_ALWAYS_INLINE KeyType &amp; operator*()</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Set.h:63</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm">xiiSetBase::Iterator</a></div><div class="ttdoc">Base class for all iterators.</div><div class="ttdef"><b>Definition:</b> Set.h:33</div></div>
<div class="ttc" id="aclassxii_set_base_htm"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm">xiiSetBase</a></div><div class="ttdoc">A set container that only stores whether an element resides in it or not. Similar to STL::set.</div><div class="ttdef"><b>Definition:</b> Set.h:12</div></div>
<div class="ttc" id="aclassxii_set_base_htm_af3c54e2d35affe8f0e9582bccbda0350"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#af3c54e2d35affe8f0e9582bccbda0350">xiiSetBase::xiiSetBase</a></div><div class="ttdeci">xiiSetBase(const Comparer &amp;comparer, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Initializes the set to be empty.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:128</div></div>
<div class="ttc" id="aclassxii_set_htm"><div class="ttname"><a href="../../d6/d31/classxii_set.htm">xiiSet</a></div><div class="ttdef"><b>Definition:</b> Set.h:229</div></div>
<div class="ttc" id="aclassxii_set_base_htm_af80f696c31de05176cebb0a1cf1649cf"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#af80f696c31de05176cebb0a1cf1649cf">xiiSetBase::LowerBound</a></div><div class="ttdeci">Iterator LowerBound(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns an Iterator to the element with a key equal or larger than the given key. Returns an invalid ...</div></div>
<div class="ttc" id="aclassxii_set_base_htm_abcb763cd04848b5d61818421b60de4e8"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#abcb763cd04848b5d61818421b60de4e8">xiiSetBase::~xiiSetBase</a></div><div class="ttdeci">~xiiSetBase()</div><div class="ttdoc">Destroys all elements in the set.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:144</div></div>
<div class="ttc" id="aclassxii_set_base_htm_ae7171c020b43c3aa116ba8351bbfe8fa"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#ae7171c020b43c3aa116ba8351bbfe8fa">xiiSetBase::GetAllocator</a></div><div class="ttdeci">xiiAllocatorBase * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition:</b> Set.h:159</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a0c684120db5132a2037d0defbe2d70c1"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a0c684120db5132a2037d0defbe2d70c1">xiiSetBase::Insert</a></div><div class="ttdeci">Iterator Insert(CompatibleKeyType &amp;&amp;key)</div><div class="ttdoc">Inserts the key into the tree and returns an Iterator to it. O(log n) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:377</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a612883c7cb7fab407d11aa6f2889b130"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a612883c7cb7fab407d11aa6f2889b130">xiiSetBase::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of elements currently stored in the set. O(1) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:184</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a348a90c29b37356ebec0d54391b9819e"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a348a90c29b37356ebec0d54391b9819e">xiiSetBase::operator==</a></div><div class="ttdeci">bool operator==(const xiiSetBase&lt; KeyType, Comparer &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:710</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ac6bd66726793b411f2df0cfdb23dfbaa"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ac6bd66726793b411f2df0cfdb23dfbaa">xiiDequeBase::GetAllocator</a></div><div class="ttdeci">xiiAllocatorBase * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition:</b> Deque.h:167</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a949710a7061f08ce30ec98e73c62002d"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a949710a7061f08ce30ec98e73c62002d">xiiSetBase::operator=</a></div><div class="ttdeci">void operator=(const xiiSetBase&lt; KeyType, Comparer &gt; &amp;rhs)</div><div class="ttdoc">Copies all keys from the given set into this one.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:150</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_a05d82a02a7c37898af676bafc5faaab0"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a05d82a02a7c37898af676bafc5faaab0">xiiSetBase::Iterator::Key</a></div><div class="ttdeci">const XII_FORCE_INLINE KeyType &amp; Key() const</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Set.h:56</div></div>
<div class="ttc" id="aclassxii_deque_htm"><div class="ttname"><a href="../../d8/df8/classxii_deque.htm">xiiDeque&lt; Node, xiiNullAllocatorWrapper, false &gt;</a></div></div>
<div class="ttc" id="aclassxii_set_base_htm_ab3d6ef2b492e4b048201e9897a956533"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#ab3d6ef2b492e4b048201e9897a956533">xiiSetBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether there are no elements in the set. O(1) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:178</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_acab2506ab4c40533bb459bec10fc0c14"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#acab2506ab4c40533bb459bec10fc0c14">xiiSetBase::Iterator::operator++</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition:</b> Set.h:72</div></div>
<div class="ttc" id="aclassxii_set_base_htm_ab5dd55c4e09e2e15e987db19cb64eaf1"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#ab5dd55c4e09e2e15e987db19cb64eaf1">xiiSetBase::GetLastIterator</a></div><div class="ttdeci">Iterator GetLastIterator() const</div><div class="ttdoc">Returns a constant Iterator to the very last element. For reverse traversal.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:197</div></div>
<div class="ttc" id="aclassxii_set_base_htm_ad442d03eea8de7d9c91c3e0c1f6cdc35"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#ad442d03eea8de7d9c91c3e0c1f6cdc35">xiiSetBase::GetHeapMemoryUsage</a></div><div class="ttdeci">xiiUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> Set.h:165</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a7f9b3ee58fb5f2d0f35c7a7177e64afb"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a7f9b3ee58fb5f2d0f35c7a7177e64afb">xiiSetBase::Intersection</a></div><div class="ttdeci">void Intersection(const xiiSetBase&lt; KeyType, Comparer &gt; &amp;operand)</div><div class="ttdoc">Makes this set the intersection of itself and the operand.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:364</div></div>
<div class="ttc" id="aclassxii_allocator_base_htm"><div class="ttname"><a href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:21</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_a9217295e49a112b28cbf16e15f04cfde"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a9217295e49a112b28cbf16e15f04cfde">xiiSetBase::Iterator::Prev</a></div><div class="ttdeci">void Prev()</div><div class="ttdoc">Advances the iterator to the previous element in the set. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> Set_inl.h:61</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a0d39b63f88f77dfff248b0586c9f9c24"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a0d39b63f88f77dfff248b0586c9f9c24">xiiSetBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destroys all elements in the set and resets its size to zero.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:159</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a8f118b4eae296d75dbbb6b8636bee278"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a8f118b4eae296d75dbbb6b8636bee278">xiiSetBase::Contains</a></div><div class="ttdeci">bool Contains(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Checks whether the given key is in the container.</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a945ed5e59fddd5c68117a7f741533498"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a945ed5e59fddd5c68117a7f741533498">xiiSetBase::Remove</a></div><div class="ttdeci">bool Remove(const CompatibleKeyType &amp;key)</div><div class="ttdoc">Erases the element with the given key, if it exists. O(log n) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:390</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a5b05f30fd73f5b58ed6fa05ee29f18e9"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a5b05f30fd73f5b58ed6fa05ee29f18e9">xiiSetBase::Difference</a></div><div class="ttdeci">void Difference(const xiiSetBase&lt; KeyType, Comparer &gt; &amp;operand)</div><div class="ttdoc">Makes this set the difference of itself and the operand, i.e. subtracts operand.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:355</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_abe5332bb093bdfed4202c5fdd3739a12"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">xiiDequeBase::GetHeapMemoryUsage</a></div><div class="ttdeci">xiiUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:979</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_a9df1aeea82d0a65143c4d34fb2609298"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#a9df1aeea82d0a65143c4d34fb2609298">xiiSetBase::Iterator::Iterator</a></div><div class="ttdeci">XII_ALWAYS_INLINE Iterator()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition:</b> Set.h:44</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a01f1d41d54c7ca40a4effee6f6d446e2"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a01f1d41d54c7ca40a4effee6f6d446e2">xiiSetBase::Union</a></div><div class="ttdeci">void Union(const xiiSetBase&lt; KeyType, Comparer &gt; &amp;operand)</div><div class="ttdoc">Makes this set the union of itself and the operand.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:346</div></div>
<div class="ttc" id="aclassxii_set_base_htm_ae94d47ef967975a5a4b2f2a0fb953dd7"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#ae94d47ef967975a5a4b2f2a0fb953dd7">xiiSetBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator() const</div><div class="ttdoc">Returns a constant Iterator to the very first element.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:191</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a45edcd7f67a240a03dcf35f4b6b9ca8c"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a45edcd7f67a240a03dcf35f4b6b9ca8c">xiiSetBase::Find</a></div><div class="ttdeci">Iterator Find(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found....</div></div>
<div class="ttc" id="astructxii_set_base_1_1_iterator_htm_acbf9837f2eef76e272bf378bad01e482"><div class="ttname"><a href="../../dd/d12/structxii_set_base_1_1_iterator.htm#acbf9837f2eef76e272bf378bad01e482">xiiSetBase::Iterator::operator==</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool operator==(const typename xiiSetBase&lt; KeyType, Comparer &gt;::Iterator &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> Set.h:53</div></div>
<div class="ttc" id="aclassxii_set_base_htm_aa22e1e00a492c0735196cdb2a4e36c39"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#aa22e1e00a492c0735196cdb2a4e36c39">xiiSetBase::UpperBound</a></div><div class="ttdeci">Iterator UpperBound(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns an Iterator to the element with a key that is LARGER than the given key. Returns an invalid i...</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_7f59ab18dbc50035dfc0ee7070867286.htm">Containers</a></li><li class="navelem"><b>Set.h</b></li>
    <li class="footer">Generated on Tue Apr 30 2024 17:34:30 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

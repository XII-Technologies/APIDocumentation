<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiStandardInputDevice Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('dc/de5/classxii_standard_input_device.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="../../d4/d71/classxii_standard_input_device-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiStandardInputDevice Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="dynheader">
Inheritance diagram for xiiStandardInputDevice:</div>
<div class="dyncontent">
<div class="center"><img src="../../d7/d75/classxii_standard_input_device__inherit__graph.png" border="0" usemap="#xii_standard_input_device_inherit__map" alt="Inheritance graph"/></div>
<map name="xii_standard_input_device_inherit__map" id="xii_standard_input_device_inherit__map">
<area shape="rect" title=" " alt="" coords="33,393,207,420"/>
<area shape="rect" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm" title="This is the base class for all input devices that handle mouse and keyboard input." alt="" coords="10,319,230,345"/>
<area shape="rect" href="../../d7/db1/classxii_input_device.htm" title="The base class for all input device types." alt="" coords="62,244,178,271"/>
<area shape="rect" href="../../dc/d54/classxii_enumerable.htm" title=" " alt="" coords="5,155,235,196"/>
<area shape="rect" href="../../dc/d71/classxii_reflected_class.htm" title="All classes that should be dynamically reflectable, need to be derived from this base class." alt="" coords="53,80,187,107"/>
<area shape="rect" href="../../d2/d38/classxii_no_base.htm" title="Dummy type to pass to templates and macros that expect a base type for a class that has no base." alt="" coords="76,5,164,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9fd05f676fdf28966a9b4100457ec7a3"><td class="memItemLeft" align="right" valign="top"><a id="a9fd05f676fdf28966a9b4100457ec7a3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiStandardInputDevice</b> (xiiUInt32 uiWindowNumber)</td></tr>
<tr class="separator:a9fd05f676fdf28966a9b4100457ec7a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6e039e1c43cf6a99916f8d90f0ea945"><td class="memItemLeft" align="right" valign="top"><a id="ad6e039e1c43cf6a99916f8d90f0ea945"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>WindowMessage</b> (android_app *pAndroidApp, xiiInt32 iCommand)</td></tr>
<tr class="separator:ad6e039e1c43cf6a99916f8d90f0ea945"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a419e6d3312601a9df8a2659123fd6c26"><td class="memItemLeft" align="right" valign="top"><a id="a419e6d3312601a9df8a2659123fd6c26"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>InputEventMessage</b> (android_app *pAndroidApp, AInputEvent *pInputEvent)</td></tr>
<tr class="separator:a419e6d3312601a9df8a2659123fd6c26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae9be3b4a2958bb769a315aa5b4db3c13"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#ae9be3b4a2958bb769a315aa5b4db3c13">SetClipMouseCursor</a> (<a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:ae9be3b4a2958bb769a315aa5b4db3c13"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <a href="../../dc/de5/classxii_standard_input_device.htm#ae9be3b4a2958bb769a315aa5b4db3c13">More...</a><br /></td></tr>
<tr class="separator:ae9be3b4a2958bb769a315aa5b4db3c13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaafa0727c408afb31a00a43e4effa865"><td class="memItemLeft" align="right" valign="top"><a id="aaafa0727c408afb31a00a43e4effa865"></a>
virtual <a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#aaafa0727c408afb31a00a43e4effa865">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:aaafa0727c408afb31a00a43e4effa865"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not. <br /></td></tr>
<tr class="separator:aaafa0727c408afb31a00a43e4effa865"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8605058e174271e4564c1d9939be5b0"><td class="memItemLeft" align="right" valign="top"><a id="aa8605058e174271e4564c1d9939be5b0"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#aa8605058e174271e4564c1d9939be5b0">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:aa8605058e174271e4564c1d9939be5b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window. <br /></td></tr>
<tr class="separator:aa8605058e174271e4564c1d9939be5b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc9b0001df86dbf518fa7e6d799b2594"><td class="memItemLeft" align="right" valign="top"><a id="adc9b0001df86dbf518fa7e6d799b2594"></a>
virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#adc9b0001df86dbf518fa7e6d799b2594">GetShowMouseCursor</a> () const override</td></tr>
<tr class="memdesc:adc9b0001df86dbf518fa7e6d799b2594"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse cursor is shown. <br /></td></tr>
<tr class="separator:adc9b0001df86dbf518fa7e6d799b2594"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fd05f676fdf28966a9b4100457ec7a3"><td class="memItemLeft" align="right" valign="top"><a id="a9fd05f676fdf28966a9b4100457ec7a3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiStandardInputDevice</b> (xiiUInt32 uiWindowNumber)</td></tr>
<tr class="separator:a9fd05f676fdf28966a9b4100457ec7a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="memItemLeft" align="right" valign="top"><a id="aff6644ea78ff4e2ff5c84c3c9bf6453b"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#aff6644ea78ff4e2ff5c84c3c9bf6453b">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window. <br /></td></tr>
<tr class="separator:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">SetClipMouseCursor</a> (<a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <a href="../../dc/de5/classxii_standard_input_device.htm#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">More...</a><br /></td></tr>
<tr class="separator:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34009ec703e13d2a1adf569a1a606abf"><td class="memItemLeft" align="right" valign="top"><a id="a34009ec703e13d2a1adf569a1a606abf"></a>
virtual <a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a34009ec703e13d2a1adf569a1a606abf">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a34009ec703e13d2a1adf569a1a606abf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not. <br /></td></tr>
<tr class="separator:a34009ec703e13d2a1adf569a1a606abf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a81f843193e48bec4c1dab57621e21ebe"><td class="memItemLeft" align="right" valign="top"><a id="a81f843193e48bec4c1dab57621e21ebe"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiStandardInputDevice</b> (ABI::Windows::UI::Core::ICoreWindow *coreWindow)</td></tr>
<tr class="separator:a81f843193e48bec4c1dab57621e21ebe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">SetClipMouseCursor</a> (<a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <a href="../../dc/de5/classxii_standard_input_device.htm#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">More...</a><br /></td></tr>
<tr class="separator:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34009ec703e13d2a1adf569a1a606abf"><td class="memItemLeft" align="right" valign="top"><a id="a34009ec703e13d2a1adf569a1a606abf"></a>
virtual <a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a34009ec703e13d2a1adf569a1a606abf">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a34009ec703e13d2a1adf569a1a606abf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not. <br /></td></tr>
<tr class="separator:a34009ec703e13d2a1adf569a1a606abf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="memItemLeft" align="right" valign="top"><a id="aff6644ea78ff4e2ff5c84c3c9bf6453b"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#aff6644ea78ff4e2ff5c84c3c9bf6453b">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window. <br /></td></tr>
<tr class="separator:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a99bfe508e67741cfc9b0d8a1f828d9"><td class="memItemLeft" align="right" valign="top"><a id="a9a99bfe508e67741cfc9b0d8a1f828d9"></a>
virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a9a99bfe508e67741cfc9b0d8a1f828d9">GetShowMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a9a99bfe508e67741cfc9b0d8a1f828d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse cursor is shown. <br /></td></tr>
<tr class="separator:a9a99bfe508e67741cfc9b0d8a1f828d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9fd05f676fdf28966a9b4100457ec7a3"><td class="memItemLeft" align="right" valign="top"><a id="a9fd05f676fdf28966a9b4100457ec7a3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiStandardInputDevice</b> (xiiUInt32 uiWindowNumber)</td></tr>
<tr class="separator:a9fd05f676fdf28966a9b4100457ec7a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70e100ece049d2d16373b0079a00e45f"><td class="memItemLeft" align="right" valign="top"><a id="a70e100ece049d2d16373b0079a00e45f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a70e100ece049d2d16373b0079a00e45f">WindowMessage</a> (xiiMinWindows::HWND pWnd, xiiMinWindows::UINT msg, xiiMinWindows::WPARAM wparam, xiiMinWindows::LPARAM lparam)</td></tr>
<tr class="memdesc:a70e100ece049d2d16373b0079a00e45f"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function needs to be called by all Windows functions, to pass the input information through to this input device. <br /></td></tr>
<tr class="separator:a70e100ece049d2d16373b0079a00e45f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">SetClipMouseCursor</a> (<a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a> mode) override</td></tr>
<tr class="memdesc:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches.  <a href="../../dc/de5/classxii_standard_input_device.htm#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">More...</a><br /></td></tr>
<tr class="separator:a9b8b0ebbb222d3ce4a9b9c148b9d0f15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34009ec703e13d2a1adf569a1a606abf"><td class="memItemLeft" align="right" valign="top"><a id="a34009ec703e13d2a1adf569a1a606abf"></a>
virtual <a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a34009ec703e13d2a1adf569a1a606abf">GetClipMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a34009ec703e13d2a1adf569a1a606abf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse is confined to the application window or not. <br /></td></tr>
<tr class="separator:a34009ec703e13d2a1adf569a1a606abf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="memItemLeft" align="right" valign="top"><a id="aff6644ea78ff4e2ff5c84c3c9bf6453b"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#aff6644ea78ff4e2ff5c84c3c9bf6453b">SetShowMouseCursor</a> (bool bShow) override</td></tr>
<tr class="memdesc:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shows or hides the mouse cursor inside the application window. <br /></td></tr>
<tr class="separator:aff6644ea78ff4e2ff5c84c3c9bf6453b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a99bfe508e67741cfc9b0d8a1f828d9"><td class="memItemLeft" align="right" valign="top"><a id="a9a99bfe508e67741cfc9b0d8a1f828d9"></a>
virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a9a99bfe508e67741cfc9b0d8a1f828d9">GetShowMouseCursor</a> () const override</td></tr>
<tr class="memdesc:a9a99bfe508e67741cfc9b0d8a1f828d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the mouse cursor is shown. <br /></td></tr>
<tr class="separator:a9a99bfe508e67741cfc9b0d8a1f828d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classxii_input_device_mouse_keyboard"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classxii_input_device_mouse_keyboard')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm">xiiInputDeviceMouseKeyboard</a></td></tr>
<tr class="memitem:a62fe8488bbdcddc21628786101f069f2 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="memItemLeft" align="right" valign="top"><a id="a62fe8488bbdcddc21628786101f069f2"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#a62fe8488bbdcddc21628786101f069f2">SetMouseSpeed</a> (const <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2</a> &amp;vScale)</td></tr>
<tr class="memdesc:a62fe8488bbdcddc21628786101f069f2 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the scaling factor that is applied on all (relative) mouse input. <br /></td></tr>
<tr class="separator:a62fe8488bbdcddc21628786101f069f2 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c01af86243bd21752fc68b3658a5166 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="memItemLeft" align="right" valign="top"><a id="a0c01af86243bd21752fc68b3658a5166"></a>
<a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#a0c01af86243bd21752fc68b3658a5166">GetMouseSpeed</a> () const</td></tr>
<tr class="memdesc:a0c01af86243bd21752fc68b3658a5166 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the scaling factor that is applied on all (relative) mouse input. <br /></td></tr>
<tr class="separator:a0c01af86243bd21752fc68b3658a5166 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af10365827bba9ca2caade68e7db9c0f5 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="memItemLeft" align="right" valign="top"><a id="af10365827bba9ca2caade68e7db9c0f5"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#af10365827bba9ca2caade68e7db9c0f5">IsFocused</a> ()</td></tr>
<tr class="memdesc:af10365827bba9ca2caade68e7db9c0f5 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if the associated <a class="el" href="../../d2/d13/classxii_window.htm" title="A simple abstraction for platform specific window creation.">xiiWindow</a> has focus. <br /></td></tr>
<tr class="separator:af10365827bba9ca2caade68e7db9c0f5 inherit pub_methods_classxii_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classxii_input_device"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classxii_input_device')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d7/db1/classxii_input_device.htm">xiiInputDevice</a></td></tr>
<tr class="memitem:aa1b45a240189f6f5fe1d1562f8bbb7f5 inherit pub_methods_classxii_input_device"><td class="memItemLeft" align="right" valign="top"><a id="aa1b45a240189f6f5fe1d1562f8bbb7f5"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/db1/classxii_input_device.htm#aa1b45a240189f6f5fe1d1562f8bbb7f5">xiiInputDevice</a> ()</td></tr>
<tr class="memdesc:aa1b45a240189f6f5fe1d1562f8bbb7f5 inherit pub_methods_classxii_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. <br /></td></tr>
<tr class="separator:aa1b45a240189f6f5fe1d1562f8bbb7f5 inherit pub_methods_classxii_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d0a4e7a1fee77cdba940a2179600c36 inherit pub_methods_classxii_input_device"><td class="memItemLeft" align="right" valign="top"><a id="a4d0a4e7a1fee77cdba940a2179600c36"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/db1/classxii_input_device.htm#a4d0a4e7a1fee77cdba940a2179600c36">GetInputSlotState</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSlot) const</td></tr>
<tr class="memdesc:a4d0a4e7a1fee77cdba940a2179600c36 inherit pub_methods_classxii_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to query current input values for the given slot. <br /></td></tr>
<tr class="separator:a4d0a4e7a1fee77cdba940a2179600c36 inherit pub_methods_classxii_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15dbf12f97646a010591fd4c17bef015 inherit pub_methods_classxii_input_device"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/db1/classxii_input_device.htm#a15dbf12f97646a010591fd4c17bef015">HasDeviceBeenUsedLastFrame</a> () const</td></tr>
<tr class="memdesc:a15dbf12f97646a010591fd4c17bef015 inherit pub_methods_classxii_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the device was 'used' during the last frame, ie. when it generated input due to some user interaction.  <a href="../../d7/db1/classxii_input_device.htm#a15dbf12f97646a010591fd4c17bef015">More...</a><br /></td></tr>
<tr class="separator:a15dbf12f97646a010591fd4c17bef015 inherit pub_methods_classxii_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classxii_reflected_class"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classxii_reflected_class')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../dc/d71/classxii_reflected_class.htm">xiiReflectedClass</a></td></tr>
<tr class="memitem:a1faaa412c7d2f4d506ebe3656dadb429 inherit pub_methods_classxii_reflected_class"><td class="memItemLeft" align="right" valign="top"><a id="a1faaa412c7d2f4d506ebe3656dadb429"></a>
virtual const <a class="el" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetDynamicRTTI</b> () const</td></tr>
<tr class="separator:a1faaa412c7d2f4d506ebe3656dadb429 inherit pub_methods_classxii_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e0f7cbc734bb4dd62b0d583bbbe2ade inherit pub_methods_classxii_reflected_class"><td class="memItemLeft" align="right" valign="top"><a id="a8e0f7cbc734bb4dd62b0d583bbbe2ade"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/d71/classxii_reflected_class.htm#a8e0f7cbc734bb4dd62b0d583bbbe2ade">IsInstanceOf</a> (const <a class="el" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a> *pType) const</td></tr>
<tr class="memdesc:a8e0f7cbc734bb4dd62b0d583bbbe2ade inherit pub_methods_classxii_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:a8e0f7cbc734bb4dd62b0d583bbbe2ade inherit pub_methods_classxii_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0a423d0f813feb28b200d9a9756eab8 inherit pub_methods_classxii_reflected_class"><td class="memTemplParams" colspan="2"><a id="ac0a423d0f813feb28b200d9a9756eab8"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac0a423d0f813feb28b200d9a9756eab8 inherit pub_methods_classxii_reflected_class"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../dc/d71/classxii_reflected_class.htm#ac0a423d0f813feb28b200d9a9756eab8">IsInstanceOf</a> () const</td></tr>
<tr class="memdesc:ac0a423d0f813feb28b200d9a9756eab8 inherit pub_methods_classxii_reflected_class"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the type of this instance is of the given type or derived from it. <br /></td></tr>
<tr class="separator:ac0a423d0f813feb28b200d9a9756eab8 inherit pub_methods_classxii_reflected_class"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ab115630f92b78ec59d6aff3fd7c6d50a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#ab115630f92b78ec59d6aff3fd7c6d50a">LocalizeButtonDisplayNames</a> ()</td></tr>
<tr class="memdesc:ab115630f92b78ec59d6aff3fd7c6d50a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calling this function will 'translate' most key names from English to the OS language, by querying that information from the OS.  <a href="../../dc/de5/classxii_standard_input_device.htm#ab115630f92b78ec59d6aff3fd7c6d50a">More...</a><br /></td></tr>
<tr class="separator:ab115630f92b78ec59d6aff3fd7c6d50a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classxii_input_device_mouse_keyboard"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classxii_input_device_mouse_keyboard')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm">xiiInputDeviceMouseKeyboard</a></td></tr>
<tr class="memitem:a4fa684e516001c33e9f4016613b3f9f1 inherit pub_static_methods_classxii_input_device_mouse_keyboard"><td class="memItemLeft" align="right" valign="top"><a id="a4fa684e516001c33e9f4016613b3f9f1"></a>
static xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#a4fa684e516001c33e9f4016613b3f9f1">GetWindowNumberMouseIsOver</a> ()</td></tr>
<tr class="memdesc:a4fa684e516001c33e9f4016613b3f9f1 inherit pub_static_methods_classxii_input_device_mouse_keyboard"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of the <a class="el" href="../../d2/d13/classxii_window.htm" title="A simple abstraction for platform specific window creation.">xiiWindow</a> over which the mouse moved last. <br /></td></tr>
<tr class="separator:a4fa684e516001c33e9f4016613b3f9f1 inherit pub_static_methods_classxii_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classxii_no_base"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classxii_no_base')"><img src="../../closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="../../d2/d38/classxii_no_base.htm">xiiNoBase</a></td></tr>
<tr class="memitem:ac03a1d9fba3babf7db68227be61737e6 inherit pub_static_methods_classxii_no_base"><td class="memItemLeft" align="right" valign="top"><a id="ac03a1d9fba3babf7db68227be61737e6"></a>
static const <a class="el" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetStaticRTTI</b> ()</td></tr>
<tr class="separator:ac03a1d9fba3babf7db68227be61737e6 inherit pub_static_methods_classxii_no_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a098e37bd0c864280379f5c0ee480c6ab"><td class="memItemLeft" align="right" valign="top"><a id="a098e37bd0c864280379f5c0ee480c6ab"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a098e37bd0c864280379f5c0ee480c6ab">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a098e37bd0c864280379f5c0ee480c6ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use. <br /></td></tr>
<tr class="separator:a098e37bd0c864280379f5c0ee480c6ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7beed68d46f706284fca9f78d5bed09a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a7beed68d46f706284fca9f78d5bed09a">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a7beed68d46f706284fca9f78d5bed09a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <a href="../../dc/de5/classxii_standard_input_device.htm#a7beed68d46f706284fca9f78d5bed09a">More...</a><br /></td></tr>
<tr class="separator:a7beed68d46f706284fca9f78d5bed09a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ac7a3c447aa9a5e8d47eafde61fe9e6"><td class="memItemLeft" align="right" valign="top"><a id="a8ac7a3c447aa9a5e8d47eafde61fe9e6"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a8ac7a3c447aa9a5e8d47eafde61fe9e6">ResetInputSlotValues</a> () override</td></tr>
<tr class="memdesc:a8ac7a3c447aa9a5e8d47eafde61fe9e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../de/d43/classxii_input_manager.htm" title="The central class to set up and query the state of all input.">xiiInputManager</a> is finished with the current frame update. <br /></td></tr>
<tr class="separator:a8ac7a3c447aa9a5e8d47eafde61fe9e6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55efe645bd9cf2a57673f066bca09bdb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a55efe645bd9cf2a57673f066bca09bdb">UpdateInputSlotValues</a> () override</td></tr>
<tr class="memdesc:a55efe645bd9cf2a57673f066bca09bdb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to query the state of the hardware to update the input slots.  <a href="../../dc/de5/classxii_standard_input_device.htm#a55efe645bd9cf2a57673f066bca09bdb">More...</a><br /></td></tr>
<tr class="separator:a55efe645bd9cf2a57673f066bca09bdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10aea4757047e42d105bb73e233843e2"><td class="memItemLeft" align="right" valign="top"><a id="a10aea4757047e42d105bb73e233843e2"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a10aea4757047e42d105bb73e233843e2">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a10aea4757047e42d105bb73e233843e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use. <br /></td></tr>
<tr class="separator:a10aea4757047e42d105bb73e233843e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a965a691bb94742eed52472b3705dabbe"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a965a691bb94742eed52472b3705dabbe">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a965a691bb94742eed52472b3705dabbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <a href="../../dc/de5/classxii_standard_input_device.htm#a965a691bb94742eed52472b3705dabbe">More...</a><br /></td></tr>
<tr class="separator:a965a691bb94742eed52472b3705dabbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8716d3a827a64b0b5b99f2966e09b2f"><td class="memItemLeft" align="right" valign="top"><a id="ad8716d3a827a64b0b5b99f2966e09b2f"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#ad8716d3a827a64b0b5b99f2966e09b2f">ResetInputSlotValues</a> () override</td></tr>
<tr class="memdesc:ad8716d3a827a64b0b5b99f2966e09b2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../de/d43/classxii_input_manager.htm" title="The central class to set up and query the state of all input.">xiiInputManager</a> is finished with the current frame update. <br /></td></tr>
<tr class="separator:ad8716d3a827a64b0b5b99f2966e09b2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18c8ebe2ee79494d490c8b727595f5fb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a18c8ebe2ee79494d490c8b727595f5fb">UpdateInputSlotValues</a> () override</td></tr>
<tr class="memdesc:a18c8ebe2ee79494d490c8b727595f5fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to query the state of the hardware to update the input slots.  <a href="../../dc/de5/classxii_standard_input_device.htm#a18c8ebe2ee79494d490c8b727595f5fb">More...</a><br /></td></tr>
<tr class="separator:a18c8ebe2ee79494d490c8b727595f5fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_methods_classxii_input_device"><td colspan="2" onclick="javascript:toggleInherit('pro_methods_classxii_input_device')"><img src="../../closed.png" alt="-"/>&#160;Protected Member Functions inherited from <a class="el" href="../../d7/db1/classxii_input_device.htm">xiiInputDevice</a></td></tr>
<tr class="memitem:aaddc20f247e6cfdbacae3623a4903cde inherit pro_methods_classxii_input_device"><td class="memItemLeft" align="right" valign="top"><a id="aaddc20f247e6cfdbacae3623a4903cde"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/db1/classxii_input_device.htm#aaddc20f247e6cfdbacae3623a4903cde">UpdateHardwareState</a> (<a class="el" href="../../d7/dc1/structxii_time.htm">xiiTime</a> tTimeDifference)</td></tr>
<tr class="memdesc:aaddc20f247e6cfdbacae3623a4903cde inherit pro_methods_classxii_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function is called once after <a class="el" href="../../de/d43/classxii_input_manager.htm#a70fb780c23c64f655c51a51ad4fbed87" title="Updates the state of the input manager. This should be called exactly once each frame.">xiiInputManager::Update</a> with the same time delta value. It allows to update hardware state, such as the vibration of gamepad motors. <br /></td></tr>
<tr class="separator:aaddc20f247e6cfdbacae3623a4903cde inherit pro_methods_classxii_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a10aea4757047e42d105bb73e233843e2"><td class="memItemLeft" align="right" valign="top"><a id="a10aea4757047e42d105bb73e233843e2"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a10aea4757047e42d105bb73e233843e2">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a10aea4757047e42d105bb73e233843e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use. <br /></td></tr>
<tr class="separator:a10aea4757047e42d105bb73e233843e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a965a691bb94742eed52472b3705dabbe"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a965a691bb94742eed52472b3705dabbe">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a965a691bb94742eed52472b3705dabbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <a href="../../dc/de5/classxii_standard_input_device.htm#a965a691bb94742eed52472b3705dabbe">More...</a><br /></td></tr>
<tr class="separator:a965a691bb94742eed52472b3705dabbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10aea4757047e42d105bb73e233843e2"><td class="memItemLeft" align="right" valign="top"><a id="a10aea4757047e42d105bb73e233843e2"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a10aea4757047e42d105bb73e233843e2">InitializeDevice</a> () override</td></tr>
<tr class="memdesc:a10aea4757047e42d105bb73e233843e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this if you need to do device specific initialization before the first use. <br /></td></tr>
<tr class="separator:a10aea4757047e42d105bb73e233843e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a965a691bb94742eed52472b3705dabbe"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a965a691bb94742eed52472b3705dabbe">RegisterInputSlots</a> () override</td></tr>
<tr class="memdesc:a965a691bb94742eed52472b3705dabbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to register all the input slots that this device exposes.  <a href="../../dc/de5/classxii_standard_input_device.htm#a965a691bb94742eed52472b3705dabbe">More...</a><br /></td></tr>
<tr class="separator:a965a691bb94742eed52472b3705dabbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8716d3a827a64b0b5b99f2966e09b2f"><td class="memItemLeft" align="right" valign="top"><a id="ad8716d3a827a64b0b5b99f2966e09b2f"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm#ad8716d3a827a64b0b5b99f2966e09b2f">ResetInputSlotValues</a> () override</td></tr>
<tr class="memdesc:ad8716d3a827a64b0b5b99f2966e09b2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this, if you need to reset certain input slot values to zero, after the <a class="el" href="../../de/d43/classxii_input_manager.htm" title="The central class to set up and query the state of all input.">xiiInputManager</a> is finished with the current frame update. <br /></td></tr>
<tr class="separator:ad8716d3a827a64b0b5b99f2966e09b2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_static_methods_classxii_input_device"><td colspan="2" onclick="javascript:toggleInherit('pro_static_methods_classxii_input_device')"><img src="../../closed.png" alt="-"/>&#160;Static Protected Member Functions inherited from <a class="el" href="../../d7/db1/classxii_input_device.htm">xiiInputDevice</a></td></tr>
<tr class="memitem:a9048f4cf891f562e76aff5a61e517aa1 inherit pro_static_methods_classxii_input_device"><td class="memItemLeft" align="right" valign="top"><a id="a9048f4cf891f562e76aff5a61e517aa1"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/db1/classxii_input_device.htm#a9048f4cf891f562e76aff5a61e517aa1">RegisterInputSlot</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sName, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sDefaultDisplayName, <a class="el" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags</a>&lt; <a class="el" href="../../db/db7/structxii_input_slot_flags.htm">xiiInputSlotFlags</a> &gt; SlotFlags)</td></tr>
<tr class="memdesc:a9048f4cf891f562e76aff5a61e517aa1 inherit pro_static_methods_classxii_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="../../d7/db1/classxii_input_device.htm#a9048f4cf891f562e76aff5a61e517aa1" title="Calls RegisterInputSlot() on the xiiInputManager and passes the parameters through.">RegisterInputSlot()</a> on the <a class="el" href="../../de/d43/classxii_input_manager.htm" title="The central class to set up and query the state of all input.">xiiInputManager</a> and passes the parameters through. <br /></td></tr>
<tr class="separator:a9048f4cf891f562e76aff5a61e517aa1 inherit pro_static_methods_classxii_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classxii_input_device_mouse_keyboard"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classxii_input_device_mouse_keyboard')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm">xiiInputDeviceMouseKeyboard</a></td></tr>
<tr class="memitem:a22f5fe7de41384c624a293cd6d665da5 inherit pro_attribs_classxii_input_device_mouse_keyboard"><td class="memItemLeft" align="right" valign="top"><a id="a22f5fe7de41384c624a293cd6d665da5"></a>
<a class="el" href="../../d7/dc1/structxii_time.htm">xiiTime</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_DoubleClickTime</b> = <a class="el" href="../../d7/dc1/structxii_time.htm#a350c072ea062ba8ed19357dac5047955">xiiTime::Milliseconds</a>(500)</td></tr>
<tr class="separator:a22f5fe7de41384c624a293cd6d665da5 inherit pro_attribs_classxii_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classxii_input_device"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classxii_input_device')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../d7/db1/classxii_input_device.htm">xiiInputDevice</a></td></tr>
<tr class="memitem:a021b3a0a8d651c7c2ff15daf5c6b8075 inherit pro_attribs_classxii_input_device"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d6/df7/classxii_map.htm">xiiMap</a>&lt; <a class="el" href="../../df/dfb/structxii_hybrid_string.htm">xiiString</a>, float &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/db1/classxii_input_device.htm#a021b3a0a8d651c7c2ff15daf5c6b8075">m_InputSlotValues</a></td></tr>
<tr class="memdesc:a021b3a0a8d651c7c2ff15daf5c6b8075 inherit pro_attribs_classxii_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores all the values for all input slots that this device handles.  <a href="../../d7/db1/classxii_input_device.htm#a021b3a0a8d651c7c2ff15daf5c6b8075">More...</a><br /></td></tr>
<tr class="separator:a021b3a0a8d651c7c2ff15daf5c6b8075 inherit pro_attribs_classxii_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4ae32315fa6f5f45481e3b34683c253 inherit pro_attribs_classxii_input_device"><td class="memItemLeft" align="right" valign="top"><a id="ac4ae32315fa6f5f45481e3b34683c253"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/db1/classxii_input_device.htm#ac4ae32315fa6f5f45481e3b34683c253">m_uiLastCharacter</a></td></tr>
<tr class="memdesc:ac4ae32315fa6f5f45481e3b34683c253 inherit pro_attribs_classxii_input_device"><td class="mdescLeft">&#160;</td><td class="mdescRight">If this input device type handles character input, it should write the last typed character into this variable. The <a class="el" href="../../de/d43/classxii_input_manager.htm" title="The central class to set up and query the state of all input.">xiiInputManager</a> calls RetrieveLastCharacter() to query what the user typed last. <br /></td></tr>
<tr class="separator:ac4ae32315fa6f5f45481e3b34683c253 inherit pro_attribs_classxii_input_device"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classxii_enumerable"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classxii_enumerable')"><img src="../../closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="../../dc/d54/classxii_enumerable.htm">xiiEnumerable&lt; xiiInputDevice, xiiReflectedClass &gt;</a></td></tr>
<tr class="memitem:afe563009387fc95276982bb4b87094e0 inherit pro_attribs_classxii_enumerable"><td class="memItemLeft" align="right" valign="top"><a id="afe563009387fc95276982bb4b87094e0"></a>
<a class="el" href="../../dc/d54/classxii_enumerable.htm">xiiEnumerable</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pNextInstance</b></td></tr>
<tr class="separator:afe563009387fc95276982bb4b87094e0 inherit pro_attribs_classxii_enumerable"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_static_attribs_classxii_input_device_mouse_keyboard"><td colspan="2" onclick="javascript:toggleInherit('pro_static_attribs_classxii_input_device_mouse_keyboard')"><img src="../../closed.png" alt="-"/>&#160;Static Protected Attributes inherited from <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm">xiiInputDeviceMouseKeyboard</a></td></tr>
<tr class="memitem:ac10941737d5126a535bce7392ae68e95 inherit pro_static_attribs_classxii_input_device_mouse_keyboard"><td class="memItemLeft" align="right" valign="top"><a id="ac10941737d5126a535bce7392ae68e95"></a>
static xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><b>s_iMouseIsOverWindowNumber</b> = -1</td></tr>
<tr class="separator:ac10941737d5126a535bce7392ae68e95 inherit pro_static_attribs_classxii_input_device_mouse_keyboard"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ab115630f92b78ec59d6aff3fd7c6d50a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab115630f92b78ec59d6aff3fd7c6d50a">&#9670;&nbsp;</a></span>LocalizeButtonDisplayNames()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStandardInputDevice::LocalizeButtonDisplayNames </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Calling this function will 'translate' most key names from English to the OS language, by querying that information from the OS. </p>
<p>The OS translation might not always be perfect for all keys. The translation can change when the user changes the keyboard layout. So if he switches from an English layout to a German layout, <a class="el" href="../../dc/de5/classxii_standard_input_device.htm#ab115630f92b78ec59d6aff3fd7c6d50a" title="Calling this function will &#39;translate&#39; most key names from English to the OS language,...">LocalizeButtonDisplayNames()</a> should be called again, to update the display names, if that is required. </p>

</div>
</div>
<a id="a965a691bb94742eed52472b3705dabbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a965a691bb94742eed52472b3705dabbe">&#9670;&nbsp;</a></span>RegisterInputSlots() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d7/db1/classxii_input_device.htm#a9048f4cf891f562e76aff5a61e517aa1" title="Calls RegisterInputSlot() on the xiiInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d7/db1/classxii_input_device.htm#accb25b55755a4846a568b367b6a67718">xiiInputDevice</a>.</p>

</div>
</div>
<a id="a7beed68d46f706284fca9f78d5bed09a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7beed68d46f706284fca9f78d5bed09a">&#9670;&nbsp;</a></span>RegisterInputSlots() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d7/db1/classxii_input_device.htm#a9048f4cf891f562e76aff5a61e517aa1" title="Calls RegisterInputSlot() on the xiiInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d7/db1/classxii_input_device.htm#accb25b55755a4846a568b367b6a67718">xiiInputDevice</a>.</p>

</div>
</div>
<a id="a965a691bb94742eed52472b3705dabbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a965a691bb94742eed52472b3705dabbe">&#9670;&nbsp;</a></span>RegisterInputSlots() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d7/db1/classxii_input_device.htm#a9048f4cf891f562e76aff5a61e517aa1" title="Calls RegisterInputSlot() on the xiiInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d7/db1/classxii_input_device.htm#accb25b55755a4846a568b367b6a67718">xiiInputDevice</a>.</p>

</div>
</div>
<a id="a965a691bb94742eed52472b3705dabbe"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a965a691bb94742eed52472b3705dabbe">&#9670;&nbsp;</a></span>RegisterInputSlots() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiStandardInputDevice::RegisterInputSlots </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">private</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to register all the input slots that this device exposes. </p>
<p>This is called once during initialization. It needs to call <a class="el" href="../../d7/db1/classxii_input_device.htm#a9048f4cf891f562e76aff5a61e517aa1" title="Calls RegisterInputSlot() on the xiiInputManager and passes the parameters through.">RegisterInputSlot()</a> once for every input slot that this device exposes to the system. </p>

<p>Implements <a class="el" href="../../d7/db1/classxii_input_device.htm#accb25b55755a4846a568b367b6a67718">xiiInputDevice</a>.</p>

</div>
</div>
<a id="a9b8b0ebbb222d3ce4a9b9c148b9d0f15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">&#9670;&nbsp;</a></span>SetClipMouseCursor() <span class="overload">[1/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">xiiMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#ad581683c61806c4ab293d14ed795d63d">xiiInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a9b8b0ebbb222d3ce4a9b9c148b9d0f15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">&#9670;&nbsp;</a></span>SetClipMouseCursor() <span class="overload">[2/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">xiiMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#ad581683c61806c4ab293d14ed795d63d">xiiInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="ae9be3b4a2958bb769a315aa5b4db3c13"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae9be3b4a2958bb769a315aa5b4db3c13">&#9670;&nbsp;</a></span>SetClipMouseCursor() <span class="overload">[3/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">xiiMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#ad581683c61806c4ab293d14ed795d63d">xiiInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a9b8b0ebbb222d3ce4a9b9c148b9d0f15"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9b8b0ebbb222d3ce4a9b9c148b9d0f15">&#9670;&nbsp;</a></span>SetClipMouseCursor() <span class="overload">[4/4]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiStandardInputDevice::SetClipMouseCursor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm#a51632608e9a4abf58928d6ca9b4c92bd">xiiMouseCursorClipMode::Enum</a>&#160;</td>
          <td class="paramname"><em>mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will trap the mouse inside the application window. Should usually be enabled, to prevent accidental task switches. </p>
<p>Especially on multi-monitor systems, the mouse can easily leave the application window (even in fullscreen mode). Do NOT use this function when you have multiple windows and require absolute mouse positions.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d0/d59/structxii_mouse_cursor_clip_mode.htm" title="Specifies how to restrict movement of the Operating System mouse.">xiiMouseCursorClipMode</a> </dd></dl>

<p>Implements <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#ad581683c61806c4ab293d14ed795d63d">xiiInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a55efe645bd9cf2a57673f066bca09bdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55efe645bd9cf2a57673f066bca09bdb">&#9670;&nbsp;</a></span>UpdateInputSlotValues() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStandardInputDevice::UpdateInputSlotValues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to query the state of the hardware to update the input slots. </p>
<dl class="section note"><dt>Note</dt><dd>This function might be called multiple times before <a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a8ac7a3c447aa9a5e8d47eafde61fe9e6" title="Override this, if you need to reset certain input slot values to zero, after the xiiInputManager is f...">ResetInputSlotValues()</a> is called. This will be the case when <a class="el" href="../../de/d43/classxii_input_manager.htm#a8136ed34dffe1ddbd193876cd27eb372" title="Makes sure that hardware input is processed at this moment, which allows to do this more often than U...">xiiInputManager::PollHardware</a> is used to make more frequent hardware updates than input is actually processed. Just make sure to always accumulate delta values (such as mouse move values) and don't expect <a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a8ac7a3c447aa9a5e8d47eafde61fe9e6" title="Override this, if you need to reset certain input slot values to zero, after the xiiInputManager is f...">ResetInputSlotValues()</a> to be called in tandem with this function and it will be fine. </dd></dl>

<p>Reimplemented from <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#a1792e55fcd468b3f2bccf31d56ef3543">xiiInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<a id="a18c8ebe2ee79494d490c8b727595f5fb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18c8ebe2ee79494d490c8b727595f5fb">&#9670;&nbsp;</a></span>UpdateInputSlotValues() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiStandardInputDevice::UpdateInputSlotValues </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">override</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this, if you need to query the state of the hardware to update the input slots. </p>
<dl class="section note"><dt>Note</dt><dd>This function might be called multiple times before <a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a8ac7a3c447aa9a5e8d47eafde61fe9e6" title="Override this, if you need to reset certain input slot values to zero, after the xiiInputManager is f...">ResetInputSlotValues()</a> is called. This will be the case when <a class="el" href="../../de/d43/classxii_input_manager.htm#a8136ed34dffe1ddbd193876cd27eb372" title="Makes sure that hardware input is processed at this moment, which allows to do this more often than U...">xiiInputManager::PollHardware</a> is used to make more frequent hardware updates than input is actually processed. Just make sure to always accumulate delta values (such as mouse move values) and don't expect <a class="el" href="../../dc/de5/classxii_standard_input_device.htm#a8ac7a3c447aa9a5e8d47eafde61fe9e6" title="Override this, if you need to reset certain input slot values to zero, after the xiiInputManager is f...">ResetInputSlotValues()</a> to be called in tandem with this function and it will be fine. </dd></dl>

<p>Reimplemented from <a class="el" href="../../dd/d1a/classxii_input_device_mouse_keyboard.htm#a1792e55fcd468b3f2bccf31d56ef3543">xiiInputDeviceMouseKeyboard</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Core/System/Implementation/Android/<a class="el" href="../../de/d3b/_input_device__android_8h_source.htm">InputDevice_android.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Core/System/Implementation/uwp/<a class="el" href="../../d4/d85/_input_device__uwp_8h_source.htm">InputDevice_uwp.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Core/System/Implementation/Win/<a class="el" href="../../d4/dfe/_input_device__win32_8h_source.htm">InputDevice_win32.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Core/System/Implementation/null/<a class="el" href="../../d9/deb/_input_device__null_8h_source.htm">InputDevice_null.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Core/System/Implementation/Android/InputDevice_android.inl</li>
<li>/home/runner/work/XII/XII/Source/Engine/Core/System/Implementation/null/InputDevice_null.inl</li>
<li>/home/runner/work/XII/XII/Source/Engine/Core/System/Implementation/uwp/InputDevice_uwp.inl</li>
<li>/home/runner/work/XII/XII/Source/Engine/Core/System/Implementation/Win/InputDevice_win32.inl</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dc/de5/classxii_standard_input_device.htm">xiiStandardInputDevice</a></li>
    <li class="footer">Generated on Mon Aug 21 2023 23:33:34 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

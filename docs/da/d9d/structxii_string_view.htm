<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiStringView Struct Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('da/d9d/structxii_string_view.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../df/d6e/structxii_string_view-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiStringView Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> represent a read-only sub-string of a larger string, as it can store a dedicated string end position. It derives from <a class="el" href="../../d2/d29/structxii_string_base.htm" title="Base class for strings, which implements all read-only string functions.">xiiStringBase</a> and thus provides a large set of functions for search and comparisons.  
 <a href="../../da/d9d/structxii_string_view.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d79/_string_view_8h_source.htm">StringView.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for xiiStringView:</div>
<div class="dyncontent">
<div class="center"><img src="../../d7/df9/structxii_string_view__inherit__graph.png" border="0" usemap="#xii_string_view_inherit__map" alt="Inheritance graph"/></div>
<map name="xii_string_view_inherit__map" id="xii_string_view_inherit__map">
<area shape="rect" title="xiiStringView represent a read&#45;only sub&#45;string of a larger string, as it can store a dedicated string..." alt="" coords="13,80,121,107"/>
<area shape="rect" href="../../d5/d12/structxii_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="5,5,128,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a380b787e24537254a4ab610a62ea8999"><td class="memItemLeft" align="right" valign="top"><a id="a380b787e24537254a4ab610a62ea8999"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = <a class="el" href="../../de/d81/structxii_string_iterator.htm">xiiStringIterator</a></td></tr>
<tr class="separator:a380b787e24537254a4ab610a62ea8999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac567b2e6a712abf53a7016b9ed1e8a16"><td class="memItemLeft" align="right" valign="top"><a id="ac567b2e6a712abf53a7016b9ed1e8a16"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = <a class="el" href="../../de/d81/structxii_string_iterator.htm">xiiStringIterator</a></td></tr>
<tr class="separator:ac567b2e6a712abf53a7016b9ed1e8a16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a63b1a23be128c07cf0a12a51fcec6384"><td class="memItemLeft" align="right" valign="top"><a id="a63b1a23be128c07cf0a12a51fcec6384"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d8/d78/structxii_string_reverse_iterator.htm">xiiStringReverseIterator</a></td></tr>
<tr class="separator:a63b1a23be128c07cf0a12a51fcec6384"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae58aff3b50fc508fe0b31c26b0a3027b"><td class="memItemLeft" align="right" valign="top"><a id="ae58aff3b50fc508fe0b31c26b0a3027b"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d8/d78/structxii_string_reverse_iterator.htm">xiiStringReverseIterator</a></td></tr>
<tr class="separator:ae58aff3b50fc508fe0b31c26b0a3027b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1ee8c00c115424c7f8cb1d58581714c2"><td class="memItemLeft" align="right" valign="top"><a id="a1ee8c00c115424c7f8cb1d58581714c2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>XII_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:a1ee8c00c115424c7f8cb1d58581714c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6f955408eb663e55c62fb0a57bb0743"><td class="memItemLeft" align="right" valign="top"><a id="aa6f955408eb663e55c62fb0a57bb0743"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView</a> ()</td></tr>
<tr class="memdesc:aa6f955408eb663e55c62fb0a57bb0743"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor creates an invalid view. <br /></td></tr>
<tr class="separator:aa6f955408eb663e55c62fb0a57bb0743"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11bc8362eb79f9b0625ec4ae4b9ff331"><td class="memItemLeft" align="right" valign="top"><a id="a11bc8362eb79f9b0625ec4ae4b9ff331"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a11bc8362eb79f9b0625ec4ae4b9ff331">xiiStringView</a> (char *pStart)</td></tr>
<tr class="memdesc:a11bc8362eb79f9b0625ec4ae4b9ff331"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a string view starting at the given position, ending at the next '\0' terminator. <br /></td></tr>
<tr class="separator:a11bc8362eb79f9b0625ec4ae4b9ff331"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ffbd30bf885378bd4b44b93b5100de6"><td class="memTemplParams" colspan="2"><a id="a0ffbd30bf885378bd4b44b93b5100de6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0ffbd30bf885378bd4b44b93b5100de6"><td class="memTemplItemLeft" align="right" valign="top">constexpr&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a0ffbd30bf885378bd4b44b93b5100de6">xiiStringView</a> (T pStart, typename std::enable_if&lt; std::is_same&lt; T, const char * &gt;::value, xiiInt32 &gt;::type *=0)</td></tr>
<tr class="memdesc:a0ffbd30bf885378bd4b44b93b5100de6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a string view starting at the given position, ending at the next '\0' terminator. <br /></td></tr>
<tr class="separator:a0ffbd30bf885378bd4b44b93b5100de6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3a213a684430abe114f9b852d849a8f"><td class="memTemplParams" colspan="2"><a id="ae3a213a684430abe114f9b852d849a8f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae3a213a684430abe114f9b852d849a8f"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ae3a213a684430abe114f9b852d849a8f">xiiStringView</a> (const T &amp;&amp;str, typename std::enable_if&lt; std::is_same&lt; T, const char * &gt;::value==false &amp;&amp;std::is_convertible&lt; T, const char * &gt;::value, xiiInt32 &gt;::type *=0)</td></tr>
<tr class="memdesc:ae3a213a684430abe114f9b852d849a8f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a string view from any class / struct which is implicitly convertible to const char *. <br /></td></tr>
<tr class="separator:ae3a213a684430abe114f9b852d849a8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3875ca0d5a318c8234cdcaf9d8e1cff"><td class="memItemLeft" align="right" valign="top"><a id="af3875ca0d5a318c8234cdcaf9d8e1cff"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#af3875ca0d5a318c8234cdcaf9d8e1cff">xiiStringView</a> (const char *pStart, const char *pEnd)</td></tr>
<tr class="memdesc:af3875ca0d5a318c8234cdcaf9d8e1cff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a string view for the range from pStart to pEnd. <br /></td></tr>
<tr class="separator:af3875ca0d5a318c8234cdcaf9d8e1cff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9195d941dbf5f53d05e9c2ea8a6d823e"><td class="memItemLeft" align="right" valign="top"><a id="a9195d941dbf5f53d05e9c2ea8a6d823e"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a9195d941dbf5f53d05e9c2ea8a6d823e">xiiStringView</a> (const char *pStart, xiiUInt32 uiLength)</td></tr>
<tr class="memdesc:a9195d941dbf5f53d05e9c2ea8a6d823e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a string view for the range from pStart to pStart + uiLength. <br /></td></tr>
<tr class="separator:a9195d941dbf5f53d05e9c2ea8a6d823e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa078cfd3014e5f668bc5b1241b55f766"><td class="memTemplParams" colspan="2"><a id="aa078cfd3014e5f668bc5b1241b55f766"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:aa078cfd3014e5f668bc5b1241b55f766"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#aa078cfd3014e5f668bc5b1241b55f766">xiiStringView</a> (const char(&amp;str)[N])</td></tr>
<tr class="memdesc:aa078cfd3014e5f668bc5b1241b55f766"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a string view from a string literal. <br /></td></tr>
<tr class="separator:aa078cfd3014e5f668bc5b1241b55f766"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aee7d14fa0f5ffcc238afdcce83e835"><td class="memTemplParams" colspan="2"><a id="a8aee7d14fa0f5ffcc238afdcce83e835"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a8aee7d14fa0f5ffcc238afdcce83e835"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a8aee7d14fa0f5ffcc238afdcce83e835">xiiStringView</a> (char(&amp;str)[N])</td></tr>
<tr class="memdesc:a8aee7d14fa0f5ffcc238afdcce83e835"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct a string view from a fixed size buffer. <br /></td></tr>
<tr class="separator:a8aee7d14fa0f5ffcc238afdcce83e835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad34523dff4fda71d3161df5e1813bf0f"><td class="memItemLeft" align="right" valign="top"><a id="ad34523dff4fda71d3161df5e1813bf0f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ad34523dff4fda71d3161df5e1813bf0f">operator++</a> ()</td></tr>
<tr class="memdesc:ad34523dff4fda71d3161df5e1813bf0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Advances the start to the next character, unless the end of the range was reached. <br /></td></tr>
<tr class="separator:ad34523dff4fda71d3161df5e1813bf0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b2ce9419f867fd41b7bebd3cc1d54e3"><td class="memItemLeft" align="right" valign="top"><a id="a9b2ce9419f867fd41b7bebd3cc1d54e3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a9b2ce9419f867fd41b7bebd3cc1d54e3">operator+=</a> (xiiUInt32 d)</td></tr>
<tr class="memdesc:a9b2ce9419f867fd41b7bebd3cc1d54e3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Advances the start forwards by d characters. Does not move it beyond the range's end. <br /></td></tr>
<tr class="separator:a9b2ce9419f867fd41b7bebd3cc1d54e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a373800cf0e25aaf35ca2fcc23a73103f"><td class="memItemLeft" align="right" valign="top"><a id="a373800cf0e25aaf35ca2fcc23a73103f"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a373800cf0e25aaf35ca2fcc23a73103f">GetCharacter</a> () const</td></tr>
<tr class="memdesc:a373800cf0e25aaf35ca2fcc23a73103f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the first pointed to character in Utf32 encoding. <br /></td></tr>
<tr class="separator:a373800cf0e25aaf35ca2fcc23a73103f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf924e23fd9bf647a96f8e5550037493"><td class="memItemLeft" align="right" valign="top"><a id="abf924e23fd9bf647a96f8e5550037493"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#abf924e23fd9bf647a96f8e5550037493">IsValid</a> () const</td></tr>
<tr class="memdesc:abf924e23fd9bf647a96f8e5550037493"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the current string pointed to is non empty. <br /></td></tr>
<tr class="separator:abf924e23fd9bf647a96f8e5550037493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7164e5b303b2c2a553b30a9a8826225"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ae7164e5b303b2c2a553b30a9a8826225">GetData</a> (<a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;ref_sTempStorage) const</td></tr>
<tr class="memdesc:ae7164e5b303b2c2a553b30a9a8826225"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data as a zero-terminated string.  <a href="../../da/d9d/structxii_string_view.htm#ae7164e5b303b2c2a553b30a9a8826225">More...</a><br /></td></tr>
<tr class="separator:ae7164e5b303b2c2a553b30a9a8826225"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad238901b4ca0413dd5d8e28728c38144"><td class="memItemLeft" align="right" valign="top">xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ad238901b4ca0413dd5d8e28728c38144">GetElementCount</a> () const</td></tr>
<tr class="memdesc:ad238901b4ca0413dd5d8e28728c38144"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bytes from the start position up to its end.  <a href="../../da/d9d/structxii_string_view.htm#ad238901b4ca0413dd5d8e28728c38144">More...</a><br /></td></tr>
<tr class="separator:ad238901b4ca0413dd5d8e28728c38144"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae78b5a1542b1486c767d3f95c0bfd774"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ae78b5a1542b1486c767d3f95c0bfd774">SetStartPosition</a> (const char *szCurPos)</td></tr>
<tr class="memdesc:ae78b5a1542b1486c767d3f95c0bfd774"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to set the start position to a different value.  <a href="../../da/d9d/structxii_string_view.htm#ae78b5a1542b1486c767d3f95c0bfd774">More...</a><br /></td></tr>
<tr class="separator:ae78b5a1542b1486c767d3f95c0bfd774"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a65d3c651c35878985c1a637a45ce9bd1"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a> () const</td></tr>
<tr class="memdesc:a65d3c651c35878985c1a637a45ce9bd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the start of the view range.  <a href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">More...</a><br /></td></tr>
<tr class="separator:a65d3c651c35878985c1a637a45ce9bd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3e949949e0bfaa74f35eacd56e040a6"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a> () const</td></tr>
<tr class="memdesc:aa3e949949e0bfaa74f35eacd56e040a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the end of the view range. This will point to the byte AFTER the last character.  <a href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">More...</a><br /></td></tr>
<tr class="separator:aa3e949949e0bfaa74f35eacd56e040a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84867e3b724dda616e405bf562ca7c75"><td class="memItemLeft" align="right" valign="top"><a id="a84867e3b724dda616e405bf562ca7c75"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a84867e3b724dda616e405bf562ca7c75">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a84867e3b724dda616e405bf562ca7c75"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a84867e3b724dda616e405bf562ca7c75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3eed1e0fcd7aa1a0af2ecab95c7870df"><td class="memItemLeft" align="right" valign="top"><a id="a3eed1e0fcd7aa1a0af2ecab95c7870df"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a3eed1e0fcd7aa1a0af2ecab95c7870df">IsEqual</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther) const</td></tr>
<tr class="memdesc:a3eed1e0fcd7aa1a0af2ecab95c7870df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string view with the other string view for equality. <br /></td></tr>
<tr class="separator:a3eed1e0fcd7aa1a0af2ecab95c7870df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae727f5c345e7420c72dfcc7fc032bcd2"><td class="memItemLeft" align="right" valign="top"><a id="ae727f5c345e7420c72dfcc7fc032bcd2"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ae727f5c345e7420c72dfcc7fc032bcd2">IsEqual_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther) const</td></tr>
<tr class="memdesc:ae727f5c345e7420c72dfcc7fc032bcd2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string view with the other string view for equality. <br /></td></tr>
<tr class="separator:ae727f5c345e7420c72dfcc7fc032bcd2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a013ef4d7264d817a3da61d5ad5e8435d"><td class="memItemLeft" align="right" valign="top"><a id="a013ef4d7264d817a3da61d5ad5e8435d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a013ef4d7264d817a3da61d5ad5e8435d">IsEqualN</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a013ef4d7264d817a3da61d5ad5e8435d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a013ef4d7264d817a3da61d5ad5e8435d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9cc6410017d56bf099a30cfd83bc57e"><td class="memItemLeft" align="right" valign="top"><a id="aa9cc6410017d56bf099a30cfd83bc57e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#aa9cc6410017d56bf099a30cfd83bc57e">IsEqualN_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:aa9cc6410017d56bf099a30cfd83bc57e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:aa9cc6410017d56bf099a30cfd83bc57e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6b5f4c7fdc35fa1aad794a36299c5f0"><td class="memItemLeft" align="right" valign="top"><a id="ab6b5f4c7fdc35fa1aad794a36299c5f0"></a>
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ab6b5f4c7fdc35fa1aad794a36299c5f0">Compare</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther) const</td></tr>
<tr class="memdesc:ab6b5f4c7fdc35fa1aad794a36299c5f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:ab6b5f4c7fdc35fa1aad794a36299c5f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18557d7a7ef5c94ceedc229b0943b893"><td class="memItemLeft" align="right" valign="top">xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a18557d7a7ef5c94ceedc229b0943b893">CompareN</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a18557d7a7ef5c94ceedc229b0943b893"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa37ae842ddaf3243a98b1206b77f2e5f"><td class="memItemLeft" align="right" valign="top"><a id="aa37ae842ddaf3243a98b1206b77f2e5f"></a>
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#aa37ae842ddaf3243a98b1206b77f2e5f">Compare_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther) const</td></tr>
<tr class="memdesc:aa37ae842ddaf3243a98b1206b77f2e5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:aa37ae842ddaf3243a98b1206b77f2e5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62d1844c99c73e919f58845d5d533ca5"><td class="memItemLeft" align="right" valign="top">xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a62d1844c99c73e919f58845d5d533ca5">CompareN_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a62d1844c99c73e919f58845d5d533ca5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5348af2124e5d51b5576bfc6eb5de4d"><td class="memItemLeft" align="right" valign="top"><a id="ac5348af2124e5d51b5576bfc6eb5de4d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ac5348af2124e5d51b5576bfc6eb5de4d">StartsWith</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:ac5348af2124e5d51b5576bfc6eb5de4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:ac5348af2124e5d51b5576bfc6eb5de4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab31f6dc792051eb0eb10d7a7a86ef835"><td class="memItemLeft" align="right" valign="top"><a id="ab31f6dc792051eb0eb10d7a7a86ef835"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ab31f6dc792051eb0eb10d7a7a86ef835">StartsWith_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:ab31f6dc792051eb0eb10d7a7a86ef835"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:ab31f6dc792051eb0eb10d7a7a86ef835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1f708598da36589b6f78a310a64d1d8"><td class="memItemLeft" align="right" valign="top"><a id="ab1f708598da36589b6f78a310a64d1d8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ab1f708598da36589b6f78a310a64d1d8">EndsWith</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:ab1f708598da36589b6f78a310a64d1d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:ab1f708598da36589b6f78a310a64d1d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52fd2d8486836117adc183c9f734f536"><td class="memItemLeft" align="right" valign="top"><a id="a52fd2d8486836117adc183c9f734f536"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a52fd2d8486836117adc183c9f734f536">EndsWith_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:a52fd2d8486836117adc183c9f734f536"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a52fd2d8486836117adc183c9f734f536"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a920ad2368fb87570a10038dc7a8fbfc6"><td class="memItemLeft" align="right" valign="top"><a id="a920ad2368fb87570a10038dc7a8fbfc6"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a920ad2368fb87570a10038dc7a8fbfc6">ComputeCharacterPosition</a> (xiiUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:a920ad2368fb87570a10038dc7a8fbfc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:a920ad2368fb87570a10038dc7a8fbfc6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9706d7a4588e097bc3a96ab8c5300b47"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a9706d7a4588e097bc3a96ab8c5300b47">FindSubString</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a9706d7a4588e097bc3a96ab8c5300b47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add36efb6913d48b3790d40e696adbe49"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#add36efb6913d48b3790d40e696adbe49">FindSubString_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:add36efb6913d48b3790d40e696adbe49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd522c6e9fbbf1e84b093a1144234f30"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#afd522c6e9fbbf1e84b093a1144234f30">FindLastSubString</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:afd522c6e9fbbf1e84b093a1144234f30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8039b53aaae2915ce6a1beb70b6b5566"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a8039b53aaae2915ce6a1beb70b6b5566">FindLastSubString_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a8039b53aaae2915ce6a1beb70b6b5566"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac23be670eac6bd7a7447da462d473e5"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#aac23be670eac6bd7a7447da462d473e5">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:aac23be670eac6bd7a7447da462d473e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41b297cbe0d7f5f5a077c7a75014f3bc"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a41b297cbe0d7f5f5a077c7a75014f3bc">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a41b297cbe0d7f5f5a077c7a75014f3bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a120bd6ca8a7ba4af7bff7dfa40eb4375"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a120bd6ca8a7ba4af7bff7dfa40eb4375">Shrink</a> (xiiUInt32 uiShrinkCharsFront, xiiUInt32 uiShrinkCharsBack)</td></tr>
<tr class="memdesc:a120bd6ca8a7ba4af7bff7dfa40eb4375"><td class="mdescLeft">&#160;</td><td class="mdescRight">Shrinks the view range by uiShrinkCharsFront characters at the front and by uiShrinkCharsBack characters at the back.  <a href="../../da/d9d/structxii_string_view.htm#a120bd6ca8a7ba4af7bff7dfa40eb4375">More...</a><br /></td></tr>
<tr class="separator:a120bd6ca8a7ba4af7bff7dfa40eb4375"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13022b4950ea182e3d50ecdf2d3d953b"><td class="memItemLeft" align="right" valign="top"><a id="a13022b4950ea182e3d50ecdf2d3d953b"></a>
<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a13022b4950ea182e3d50ecdf2d3d953b">GetShrunk</a> (xiiUInt32 uiShrinkCharsFront, xiiUInt32 uiShrinkCharsBack=0) const</td></tr>
<tr class="memdesc:a13022b4950ea182e3d50ecdf2d3d953b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a sub-string that is shrunk at the start and front by the given amount of characters (not bytes!). <br /></td></tr>
<tr class="separator:a13022b4950ea182e3d50ecdf2d3d953b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21212f66212bf8d7c5786193208d2c0d"><td class="memItemLeft" align="right" valign="top"><a id="a21212f66212bf8d7c5786193208d2c0d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a21212f66212bf8d7c5786193208d2c0d">ChopAwayFirstCharacterUtf8</a> ()</td></tr>
<tr class="memdesc:a21212f66212bf8d7c5786193208d2c0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Identical to 'Shrink(1, 0)' in functionality, but slightly more efficient. <br /></td></tr>
<tr class="separator:a21212f66212bf8d7c5786193208d2c0d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04c31dcdc0ed0e95641c70d57db8e97e"><td class="memItemLeft" align="right" valign="top"><a id="a04c31dcdc0ed0e95641c70d57db8e97e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a04c31dcdc0ed0e95641c70d57db8e97e">ChopAwayFirstCharacterAscii</a> ()</td></tr>
<tr class="memdesc:a04c31dcdc0ed0e95641c70d57db8e97e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="../../da/d9d/structxii_string_view.htm#a21212f66212bf8d7c5786193208d2c0d" title="Identical to &#39;Shrink(1, 0)&#39; in functionality, but slightly more efficient.">ChopAwayFirstCharacterUtf8()</a>, but assumes that the first character is ASCII and thus exactly one byte in length. Asserts that this is the case. More efficient than <a class="el" href="../../da/d9d/structxii_string_view.htm#a21212f66212bf8d7c5786193208d2c0d" title="Identical to &#39;Shrink(1, 0)&#39; in functionality, but slightly more efficient.">ChopAwayFirstCharacterUtf8()</a>, if it is known that the first character is ASCII. <br /></td></tr>
<tr class="separator:a04c31dcdc0ed0e95641c70d57db8e97e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8e3cab7b427f8f870b367d23a5066b6"><td class="memItemLeft" align="right" valign="top"><a id="ab8e3cab7b427f8f870b367d23a5066b6"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ab8e3cab7b427f8f870b367d23a5066b6">Trim</a> (const char *szTrimChars)</td></tr>
<tr class="memdesc:ab8e3cab7b427f8f870b367d23a5066b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and end that appear in the given strings by adjusting the begin and end of the view. <br /></td></tr>
<tr class="separator:ab8e3cab7b427f8f870b367d23a5066b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecc3e4dfa07b682a2366f476bd091564"><td class="memItemLeft" align="right" valign="top"><a id="aecc3e4dfa07b682a2366f476bd091564"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#aecc3e4dfa07b682a2366f476bd091564">Trim</a> (const char *szTrimCharsStart, const char *szTrimCharsEnd)</td></tr>
<tr class="memdesc:aecc3e4dfa07b682a2366f476bd091564"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and/or end that appear in the given strings by adjusting the begin and end of the view. <br /></td></tr>
<tr class="separator:aecc3e4dfa07b682a2366f476bd091564"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72cfec4f6beea1842358a4d9bc39d7ba"><td class="memItemLeft" align="right" valign="top"><a id="a72cfec4f6beea1842358a4d9bc39d7ba"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a72cfec4f6beea1842358a4d9bc39d7ba">TrimWordStart</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sWord)</td></tr>
<tr class="memdesc:a72cfec4f6beea1842358a4d9bc39d7ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string starts with the given word (case insensitive), it is removed and the function returns true. <br /></td></tr>
<tr class="separator:a72cfec4f6beea1842358a4d9bc39d7ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15957b2b568f11473a2309ee8923b53e"><td class="memItemLeft" align="right" valign="top"><a id="a15957b2b568f11473a2309ee8923b53e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a15957b2b568f11473a2309ee8923b53e">TrimWordEnd</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sWord)</td></tr>
<tr class="memdesc:a15957b2b568f11473a2309ee8923b53e"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string ends with the given word (case insensitive), it is removed and the function returns true. <br /></td></tr>
<tr class="separator:a15957b2b568f11473a2309ee8923b53e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33cac6de00c81d6edaa589bbf71e56d3"><td class="memTemplParams" colspan="2"><a id="a33cac6de00c81d6edaa589bbf71e56d3"></a>
template&lt;typename Container &gt; </td></tr>
<tr class="memitem:a33cac6de00c81d6edaa589bbf71e56d3"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a33cac6de00c81d6edaa589bbf71e56d3">Split</a> (bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</td></tr>
<tr class="memdesc:a33cac6de00c81d6edaa589bbf71e56d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the given container with <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a>'s which represent each found substring. If bReturnEmptyStrings is true, even empty strings between separators are returned. Output must be a container that stores <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a>'s and provides the functions 'Clear' and 'Append'. szSeparator1 to szSeparator6 are strings which act as separators and indicate where to split the string. This string itself will not be modified. <br /></td></tr>
<tr class="separator:a33cac6de00c81d6edaa589bbf71e56d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4266e56cca259e4a6890dd66e939ed59"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d81/structxii_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a4266e56cca259e4a6890dd66e939ed59">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:a4266e56cca259e4a6890dd66e939ed59"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <a href="../../da/d9d/structxii_string_view.htm#a4266e56cca259e4a6890dd66e939ed59">More...</a><br /></td></tr>
<tr class="separator:a4266e56cca259e4a6890dd66e939ed59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5e3e49fb7629a8306fb22d5bc661934"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/d78/structxii_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ad5e3e49fb7629a8306fb22d5bc661934">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:ad5e3e49fb7629a8306fb22d5bc661934"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <a href="../../da/d9d/structxii_string_view.htm#ad5e3e49fb7629a8306fb22d5bc661934">More...</a><br /></td></tr>
<tr class="separator:ad5e3e49fb7629a8306fb22d5bc661934"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad25f355d81eea946ad8eeb9d5a4a1efb"><td class="memItemLeft" align="right" valign="top"><a id="ad25f355d81eea946ad8eeb9d5a4a1efb"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#ad25f355d81eea946ad8eeb9d5a4a1efb">HasAnyExtension</a> () const</td></tr>
<tr class="memdesc:ad25f355d81eea946ad8eeb9d5a4a1efb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path has any file extension. <br /></td></tr>
<tr class="separator:ad25f355d81eea946ad8eeb9d5a4a1efb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1be23d8e4dfa4ba3dfadbbd2418f816d"><td class="memItemLeft" align="right" valign="top"><a id="a1be23d8e4dfa4ba3dfadbbd2418f816d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a1be23d8e4dfa4ba3dfadbbd2418f816d">HasExtension</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sExtension) const</td></tr>
<tr class="memdesc:a1be23d8e4dfa4ba3dfadbbd2418f816d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path ends with the given extension. szExtension should start with a '.' for performance reasons, but it will work without a '.' too. <br /></td></tr>
<tr class="separator:a1be23d8e4dfa4ba3dfadbbd2418f816d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11b91399b06812b6d608aef8e3964eee"><td class="memItemLeft" align="right" valign="top"><a id="a11b91399b06812b6d608aef8e3964eee"></a>
<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a11b91399b06812b6d608aef8e3964eee">GetFileExtension</a> () const</td></tr>
<tr class="memdesc:a11b91399b06812b6d608aef8e3964eee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file extension of the given path. Will be empty, if the path does not end with a proper extension. <br /></td></tr>
<tr class="separator:a11b91399b06812b6d608aef8e3964eee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c1119f4913054a557031e4ba7411ad"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a79c1119f4913054a557031e4ba7411ad">GetFileName</a> () const</td></tr>
<tr class="memdesc:a79c1119f4913054a557031e4ba7411ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file name of a path, excluding the path and extension.  <a href="../../da/d9d/structxii_string_view.htm#a79c1119f4913054a557031e4ba7411ad">More...</a><br /></td></tr>
<tr class="separator:a79c1119f4913054a557031e4ba7411ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67a676b1b1f7614560561942bb4449fd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a67a676b1b1f7614560561942bb4449fd">GetFileNameAndExtension</a> () const</td></tr>
<tr class="memdesc:a67a676b1b1f7614560561942bb4449fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the substring that represents the file name including the file extension.  <a href="../../da/d9d/structxii_string_view.htm#a67a676b1b1f7614560561942bb4449fd">More...</a><br /></td></tr>
<tr class="separator:a67a676b1b1f7614560561942bb4449fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afab8553c059317de4e68b853baeeaf69"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#afab8553c059317de4e68b853baeeaf69">GetFileDirectory</a> () const</td></tr>
<tr class="memdesc:afab8553c059317de4e68b853baeeaf69"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the directory of the given file, which is the substring up to the last path separator.  <a href="../../da/d9d/structxii_string_view.htm#afab8553c059317de4e68b853baeeaf69">More...</a><br /></td></tr>
<tr class="separator:afab8553c059317de4e68b853baeeaf69"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabda4ffb3e6a4f79ef28350f3c4b2e60"><td class="memItemLeft" align="right" valign="top"><a id="aabda4ffb3e6a4f79ef28350f3c4b2e60"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#aabda4ffb3e6a4f79ef28350f3c4b2e60">IsAbsolutePath</a> () const</td></tr>
<tr class="memdesc:aabda4ffb3e6a4f79ef28350f3c4b2e60"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents an absolute path on the current OS. <br /></td></tr>
<tr class="separator:aabda4ffb3e6a4f79ef28350f3c4b2e60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72d66473cd8705f3b4be58bc272cfc96"><td class="memItemLeft" align="right" valign="top"><a id="a72d66473cd8705f3b4be58bc272cfc96"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a72d66473cd8705f3b4be58bc272cfc96">IsRelativePath</a> () const</td></tr>
<tr class="memdesc:a72d66473cd8705f3b4be58bc272cfc96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a relative path on the current OS. <br /></td></tr>
<tr class="separator:a72d66473cd8705f3b4be58bc272cfc96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a726a70be8acbf11a794dac256b9d9f9d"><td class="memItemLeft" align="right" valign="top"><a id="a726a70be8acbf11a794dac256b9d9f9d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a726a70be8acbf11a794dac256b9d9f9d">IsRootedPath</a> () const</td></tr>
<tr class="memdesc:a726a70be8acbf11a794dac256b9d9f9d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a 'rooted' path. See <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a> for details. <br /></td></tr>
<tr class="separator:a726a70be8acbf11a794dac256b9d9f9d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bec6094e495c1e25b46d9c7f38a7db6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../da/d9d/structxii_string_view.htm#a4bec6094e495c1e25b46d9c7f38a7db6">GetRootedPathRootName</a> () const</td></tr>
<tr class="memdesc:a4bec6094e495c1e25b46d9c7f38a7db6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the root name from a rooted path.  <a href="../../da/d9d/structxii_string_view.htm#a4bec6094e495c1e25b46d9c7f38a7db6">More...</a><br /></td></tr>
<tr class="separator:a4bec6094e495c1e25b46d9c7f38a7db6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a69ef71a9de8eeaef98bab87a4e3440"><td class="memTemplParams" colspan="2"><a id="a7a69ef71a9de8eeaef98bab87a4e3440"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7a69ef71a9de8eeaef98bab87a4e3440"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiStringView</b> (T pStart, typename std::enable_if&lt; std::is_same&lt; T, const char * &gt;::value, xiiInt32 &gt;::type *)</td></tr>
<tr class="separator:a7a69ef71a9de8eeaef98bab87a4e3440"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28a2f3964fd87986372e2ba31a36c4c1"><td class="memTemplParams" colspan="2"><a id="a28a2f3964fd87986372e2ba31a36c4c1"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a28a2f3964fd87986372e2ba31a36c4c1"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiStringView</b> (const char(&amp;str)[N])</td></tr>
<tr class="separator:a28a2f3964fd87986372e2ba31a36c4c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20bc837bd121cfbc7b93a2068f789a30"><td class="memTemplParams" colspan="2"><a id="a20bc837bd121cfbc7b93a2068f789a30"></a>
template&lt;size_t N&gt; </td></tr>
<tr class="memitem:a20bc837bd121cfbc7b93a2068f789a30"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiStringView</b> (char(&amp;str)[N])</td></tr>
<tr class="separator:a20bc837bd121cfbc7b93a2068f789a30"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> represent a read-only sub-string of a larger string, as it can store a dedicated string end position. It derives from <a class="el" href="../../d2/d29/structxii_string_base.htm" title="Base class for strings, which implements all read-only string functions.">xiiStringBase</a> and thus provides a large set of functions for search and comparisons. </p>
<p>Attention: <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> does not store string data itself. It only stores pointers into memory. For example, when you get a <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> to a <a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a>, the <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> instance will point to the exact same memory, enabling you to iterate over it (read-only). That means that a <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> is only valid as long as its source data is not modified. Once you make any kind of modification to the source data, you should not continue using the <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> to that data anymore, as it might now point into invalid memory. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a18557d7a7ef5c94ceedc229b0943b893"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a18557d7a7ef5c94ceedc229b0943b893">&#9670;&nbsp;</a></span>CompareN()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiInt32 xiiStringView::CompareN </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sOther</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiCharsToCompare</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compares up to a given number of characters of this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. </p>

</div>
</div>
<a id="a62d1844c99c73e919f58845d5d533ca5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a62d1844c99c73e919f58845d5d533ca5">&#9670;&nbsp;</a></span>CompareN_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiInt32 xiiStringView::CompareN_NoCase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sOther</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiCharsToCompare</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Compares up to a given number of characters of this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. </p>

</div>
</div>
<a id="afd522c6e9fbbf1e84b093a1144234f30"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afd522c6e9fbbf1e84b093a1144234f30">&#9670;&nbsp;</a></span>FindLastSubString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringView::FindLastSubString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a pointer to the last occurrence of szStringToFind, or nullptr if none was found. szStartSearchAt allows to start searching at the end of the string (if it is nullptr) or at an earlier position. </p>

</div>
</div>
<a id="a8039b53aaae2915ce6a1beb70b6b5566"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8039b53aaae2915ce6a1beb70b6b5566">&#9670;&nbsp;</a></span>FindLastSubString_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringView::FindLastSubString_NoCase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a pointer to the last occurrence of szStringToFind, or nullptr if none was found. Case insensitive. szStartSearchAt allows to start searching at the end of the string (if it is nullptr) or at an earlier position. </p>

</div>
</div>
<a id="a9706d7a4588e097bc3a96ab8c5300b47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9706d7a4588e097bc3a96ab8c5300b47">&#9670;&nbsp;</a></span>FindSubString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringView::FindSubString </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a pointer to the first occurrence of szStringToFind, or nullptr if none was found. To find the next occurrence, use a <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> which points to the next position and call FindSubString again. </p>

</div>
</div>
<a id="add36efb6913d48b3790d40e696adbe49"></a>
<h2 class="memtitle"><span class="permalink"><a href="#add36efb6913d48b3790d40e696adbe49">&#9670;&nbsp;</a></span>FindSubString_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringView::FindSubString_NoCase </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sStringToFind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns a pointer to the first occurrence of szStringToFind, or nullptr if none was found. Case insensitive. To find the next occurrence, use a <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> which points to the next position and call FindSubString again. </p>

</div>
</div>
<a id="aac23be670eac6bd7a7447da462d473e5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aac23be670eac6bd7a7447da462d473e5">&#9670;&nbsp;</a></span>FindWholeWord()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringView::FindWholeWord </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Searches for the word szSearchFor. If IsDelimiterCB returns true for both characters in front and back of the word, the position is returned. Otherwise nullptr. </p>

</div>
</div>
<a id="a41b297cbe0d7f5f5a077c7a75014f3bc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a41b297cbe0d7f5f5a077c7a75014f3bc">&#9670;&nbsp;</a></span>FindWholeWord_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringView::FindWholeWord_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Searches for the word szSearchFor. If IsDelimiterCB returns true for both characters in front and back of the word, the position is returned. Otherwise nullptr. Ignores case. </p>

</div>
</div>
<a id="ae7164e5b303b2c2a553b30a9a8826225"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae7164e5b303b2c2a553b30a9a8826225">&#9670;&nbsp;</a></span>GetData()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringView::GetData </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;&#160;</td>
          <td class="paramname"><em>ref_sTempStorage</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the data as a zero-terminated string. </p>
<p>The string will be copied to <em>tempStorage</em> and the pointer to that is returned. If you really need the raw pointer to the <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> memory or are absolutely certain that the view points to a zero-terminated string, you can use </p>

</div>
</div>
<a id="ad238901b4ca0413dd5d8e28728c38144"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad238901b4ca0413dd5d8e28728c38144">&#9670;&nbsp;</a></span>GetElementCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiStringView::GetElementCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of bytes from the start position up to its end. </p>
<dl class="section note"><dt>Note</dt><dd>Note that the element count (bytes) may be larger than the number of characters in that string, due to Utf8 encoding. </dd></dl>

</div>
</div>
<a id="aa3e949949e0bfaa74f35eacd56e040a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa3e949949e0bfaa74f35eacd56e040a6">&#9670;&nbsp;</a></span>GetEndPointer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* xiiStringView::GetEndPointer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the end of the view range. This will point to the byte AFTER the last character. </p>
<p>That means it might point to the '\0' terminator, UNLESS the view only represents a sub-string of a larger string. Accessing the value at 'GetEnd' has therefore no real use. </p>

</div>
</div>
<a id="afab8553c059317de4e68b853baeeaf69"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afab8553c059317de4e68b853baeeaf69">&#9670;&nbsp;</a></span>GetFileDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> xiiStringView::GetFileDirectory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the directory of the given file, which is the substring up to the last path separator. </p>
<p>If the path already ends in a path separator, and thus points to a folder, instead of a file, the unchanged path is returned. "path/to/file" -&gt; "path/to/" "path/to/folder/" -&gt; "path/to/folder/" "filename" -&gt; "" "/file_at_root_level" -&gt; "/" </p>

</div>
</div>
<a id="a79c1119f4913054a557031e4ba7411ad"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a79c1119f4913054a557031e4ba7411ad">&#9670;&nbsp;</a></span>GetFileName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> xiiStringView::GetFileName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the file name of a path, excluding the path and extension. </p>
<p>If the path already ends with a path separator, the result will be empty. </p>

</div>
</div>
<a id="a67a676b1b1f7614560561942bb4449fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a67a676b1b1f7614560561942bb4449fd">&#9670;&nbsp;</a></span>GetFileNameAndExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> xiiStringView::GetFileNameAndExtension </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the substring that represents the file name including the file extension. </p>
<p>Returns an empty string, if sPath already ends in a path separator, or is empty itself. </p>

</div>
</div>
<a id="ad5e3e49fb7629a8306fb22d5bc661934"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad5e3e49fb7629a8306fb22d5bc661934">&#9670;&nbsp;</a></span>GetIteratorBack()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d8/d78/structxii_string_reverse_iterator.htm">xiiStringView::reverse_iterator</a> xiiStringView::GetIteratorBack </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to this string, which points to the very last character (NOT the end). </p>
<p>Note that this iterator will only be valid as long as this string lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<a id="a4266e56cca259e4a6890dd66e939ed59"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4266e56cca259e4a6890dd66e939ed59">&#9670;&nbsp;</a></span>GetIteratorFront()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../de/d81/structxii_string_iterator.htm">xiiStringView::iterator</a> xiiStringView::GetIteratorFront </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns an iterator to this string, which points to the very first character. </p>
<p>Note that this iterator will only be valid as long as this string lives. Once the original string is destroyed, all iterators to them will point into invalid memory. </p>

</div>
</div>
<a id="a4bec6094e495c1e25b46d9c7f38a7db6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bec6094e495c1e25b46d9c7f38a7db6">&#9670;&nbsp;</a></span>GetRootedPathRootName()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> xiiStringView::GetRootedPathRootName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Extracts the root name from a rooted path. </p>
<p>":MyRoot" -&gt; "MyRoot" ":MyRoot\folder" -&gt; "MyRoot" ":\MyRoot\folder" -&gt; "MyRoot" ":/MyRoot\folder" -&gt; "MyRoot" Returns an empty string, if the path is not rooted. </p>

</div>
</div>
<a id="a65d3c651c35878985c1a637a45ce9bd1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a65d3c651c35878985c1a637a45ce9bd1">&#9670;&nbsp;</a></span>GetStartPointer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char* xiiStringView::GetStartPointer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the start of the view range. </p>
<dl class="section note"><dt>Note</dt><dd>Be careful to not use this and assume the view will be zero-terminated. Use GetData(xiiStringBuilder&amp;) instead to be safe. </dd></dl>

</div>
</div>
<a id="ae78b5a1542b1486c767d3f95c0bfd774"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae78b5a1542b1486c767d3f95c0bfd774">&#9670;&nbsp;</a></span>SetStartPosition()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XII_ALWAYS_INLINE void xiiStringView::SetStartPosition </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szCurPos</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Allows to set the start position to a different value. </p>
<p>Must be between the current start and end range. </p>

</div>
</div>
<a id="a120bd6ca8a7ba4af7bff7dfa40eb4375"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a120bd6ca8a7ba4af7bff7dfa40eb4375">&#9670;&nbsp;</a></span>Shrink()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStringView::Shrink </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsFront</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsBack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Shrinks the view range by uiShrinkCharsFront characters at the front and by uiShrinkCharsBack characters at the back. </p>
<p>Thus reduces the range of the view to a smaller sub-string. The current position is clamped to the new start of the range. The new end position is clamped to the new start of the range. If more characters are removed from the range, than it actually contains, the view range will become 'empty' and its state will be set to invalid, however no error or assert will be triggered. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/<a class="el" href="../../d0/d79/_string_view_8h_source.htm">StringView.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/Implementation/StringView.cpp</li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d8/d9e/_string_view__inl_8h_source.htm">StringView_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></li>
    <li class="footer">Generated on Fri Nov 17 2023 03:01:34 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

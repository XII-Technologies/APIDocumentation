<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: xiiAngleTemplate&lt; Type &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d3/ddb/classxii_angle_template.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../d2/d65/classxii_angle_template-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">xiiAngleTemplate&lt; Type &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Wrapper class for a safe usage and conversions of angles.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d18/_angle_8h_source.htm">Angle.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aff58892aaeeb0fce15a37d1f3ba207e8" id="r_aff58892aaeeb0fce15a37d1f3ba207e8"><td class="memItemLeft" align="right" valign="top"><a id="aff58892aaeeb0fce15a37d1f3ba207e8" name="aff58892aaeeb0fce15a37d1f3ba207e8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>XII_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:aff58892aaeeb0fce15a37d1f3ba207e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8520af3ae2399283c66b78844af96692" id="r_a8520af3ae2399283c66b78844af96692"><td class="memItemLeft" align="right" valign="top"><a id="a8520af3ae2399283c66b78844af96692" name="a8520af3ae2399283c66b78844af96692"></a>
constexpr&#160;</td><td class="memItemRight" valign="bottom"><b>xiiAngleTemplate</b> ()</td></tr>
<tr class="memdesc:a8520af3ae2399283c66b78844af96692"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard constructor, initializing with 0. <br /></td></tr>
<tr class="separator:a8520af3ae2399283c66b78844af96692"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0981cd78050c0ee3b82197d6572d56be" id="r_a0981cd78050c0ee3b82197d6572d56be"><td class="memItemLeft" align="right" valign="top"><a id="a0981cd78050c0ee3b82197d6572d56be" name="a0981cd78050c0ee3b82197d6572d56be"></a>
constexpr Type&#160;</td><td class="memItemRight" valign="bottom"><b>GetDegree</b> () const</td></tr>
<tr class="memdesc:a0981cd78050c0ee3b82197d6572d56be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the degree value. (Performs a conversion) <br /></td></tr>
<tr class="separator:a0981cd78050c0ee3b82197d6572d56be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afaebb218561104c8b89d645dab3d8ded" id="r_afaebb218561104c8b89d645dab3d8ded"><td class="memItemLeft" align="right" valign="top"><a id="afaebb218561104c8b89d645dab3d8ded" name="afaebb218561104c8b89d645dab3d8ded"></a>
constexpr Type&#160;</td><td class="memItemRight" valign="bottom"><b>GetRadian</b> () const</td></tr>
<tr class="memdesc:afaebb218561104c8b89d645dab3d8ded"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the radian value. (No need for any conversion) <br /></td></tr>
<tr class="separator:afaebb218561104c8b89d645dab3d8ded"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c04e712d33e5efe72b0084f14c921ec" id="r_a9c04e712d33e5efe72b0084f14c921ec"><td class="memItemLeft" align="right" valign="top"><a id="a9c04e712d33e5efe72b0084f14c921ec" name="a9c04e712d33e5efe72b0084f14c921ec"></a>
XII_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>SetRadian</b> (Type fRadian)</td></tr>
<tr class="memdesc:a9c04e712d33e5efe72b0084f14c921ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the radian value. (No need for any conversion) <br /></td></tr>
<tr class="separator:a9c04e712d33e5efe72b0084f14c921ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e9e308308a55e19b03dbf5a3fed8c66" id="r_a7e9e308308a55e19b03dbf5a3fed8c66"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a7e9e308308a55e19b03dbf5a3fed8c66">NormalizeRange</a> ()</td></tr>
<tr class="memdesc:a7e9e308308a55e19b03dbf5a3fed8c66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Brings the angle into the range of 0 degree - 360 degree.  <br /></td></tr>
<tr class="separator:a7e9e308308a55e19b03dbf5a3fed8c66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61b9cffe96c9937c13122e97f23417f9" id="r_a61b9cffe96c9937c13122e97f23417f9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a61b9cffe96c9937c13122e97f23417f9">GetNormalizedRange</a> () const</td></tr>
<tr class="memdesc:a61b9cffe96c9937c13122e97f23417f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an equivalent angle with range between 0 degree - 360 degree.  <br /></td></tr>
<tr class="separator:a61b9cffe96c9937c13122e97f23417f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b5342a182d1fdedc3db8a49cd4a2e21" id="r_a2b5342a182d1fdedc3db8a49cd4a2e21"><td class="memItemLeft" align="right" valign="top"><a id="a2b5342a182d1fdedc3db8a49cd4a2e21" name="a2b5342a182d1fdedc3db8a49cd4a2e21"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqualSimple</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; rhs, <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; epsilon) const</td></tr>
<tr class="memdesc:a2b5342a182d1fdedc3db8a49cd4a2e21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality check with epsilon. Simple check without normalization. 360 degree will equal 0 degree, but 720 will not. <br /></td></tr>
<tr class="separator:a2b5342a182d1fdedc3db8a49cd4a2e21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad395aa30c07355b4af56067d542d6514" id="r_ad395aa30c07355b4af56067d542d6514"><td class="memItemLeft" align="right" valign="top"><a id="ad395aa30c07355b4af56067d542d6514" name="ad395aa30c07355b4af56067d542d6514"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqualNormalized</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; rhs, <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; epsilon) const</td></tr>
<tr class="memdesc:ad395aa30c07355b4af56067d542d6514"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality check with epsilon that uses normalized angles. Will recognize 720 degree == 0 degree. <br /></td></tr>
<tr class="separator:ad395aa30c07355b4af56067d542d6514"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2313b33bd14978a15f3d2740ff29b17d" id="r_a2313b33bd14978a15f3d2740ff29b17d"><td class="memItemLeft" align="right" valign="top"><a id="a2313b33bd14978a15f3d2740ff29b17d" name="a2313b33bd14978a15f3d2740ff29b17d"></a>
constexpr <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>operator-</b> () const</td></tr>
<tr class="separator:a2313b33bd14978a15f3d2740ff29b17d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eb6a2f631f4836e7a378fb5d06882b3" id="r_a2eb6a2f631f4836e7a378fb5d06882b3"><td class="memItemLeft" align="right" valign="top"><a id="a2eb6a2f631f4836e7a378fb5d06882b3" name="a2eb6a2f631f4836e7a378fb5d06882b3"></a>
constexpr <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>operator+</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; r) const</td></tr>
<tr class="separator:a2eb6a2f631f4836e7a378fb5d06882b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0360a2aece2df1ecedc05df93b71a439" id="r_a0360a2aece2df1ecedc05df93b71a439"><td class="memItemLeft" align="right" valign="top"><a id="a0360a2aece2df1ecedc05df93b71a439" name="a0360a2aece2df1ecedc05df93b71a439"></a>
constexpr <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>operator-</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; r) const</td></tr>
<tr class="separator:a0360a2aece2df1ecedc05df93b71a439"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00b2710d242ebe0ea32381dad716f05a" id="r_a00b2710d242ebe0ea32381dad716f05a"><td class="memItemLeft" align="right" valign="top"><a id="a00b2710d242ebe0ea32381dad716f05a" name="a00b2710d242ebe0ea32381dad716f05a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; r)</td></tr>
<tr class="separator:a00b2710d242ebe0ea32381dad716f05a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24e2b35d6d02d7cd2a50a6af54fb456d" id="r_a24e2b35d6d02d7cd2a50a6af54fb456d"><td class="memItemLeft" align="right" valign="top"><a id="a24e2b35d6d02d7cd2a50a6af54fb456d" name="a24e2b35d6d02d7cd2a50a6af54fb456d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator-=</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; r)</td></tr>
<tr class="separator:a24e2b35d6d02d7cd2a50a6af54fb456d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac70506b1265e798bf0b2511ebedbed78" id="r_ac70506b1265e798bf0b2511ebedbed78"><td class="memItemLeft" align="right" valign="top"><a id="ac70506b1265e798bf0b2511ebedbed78" name="ac70506b1265e798bf0b2511ebedbed78"></a>
constexpr bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator==</b> (const <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; &amp;r) const</td></tr>
<tr class="separator:ac70506b1265e798bf0b2511ebedbed78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d865a93bb4935eb89e708967a5962f8" id="r_a1d865a93bb4935eb89e708967a5962f8"><td class="memItemLeft" align="right" valign="top"><a id="a1d865a93bb4935eb89e708967a5962f8" name="a1d865a93bb4935eb89e708967a5962f8"></a>
constexpr std::partial_ordering&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;=&gt;</b> (const <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; &amp;r) const</td></tr>
<tr class="separator:a1d865a93bb4935eb89e708967a5962f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a7da06216380b9e6d3e6f04570afb9a2c" id="r_a7da06216380b9e6d3e6f04570afb9a2c"><td class="memItemLeft" align="right" valign="top"><a id="a7da06216380b9e6d3e6f04570afb9a2c" name="a7da06216380b9e6d3e6f04570afb9a2c"></a>
static constexpr XII_ALWAYS_INLINE Type&#160;</td><td class="memItemRight" valign="bottom"><b>DegToRadMultiplier</b> ()</td></tr>
<tr class="memdesc:a7da06216380b9e6d3e6f04570afb9a2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the constant to multiply with an angle in degree to convert it to radians. <br /></td></tr>
<tr class="separator:a7da06216380b9e6d3e6f04570afb9a2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad83b7c65f38f601d03f3d0c7fbcefc5" id="r_aad83b7c65f38f601d03f3d0c7fbcefc5"><td class="memItemLeft" align="right" valign="top"><a id="aad83b7c65f38f601d03f3d0c7fbcefc5" name="aad83b7c65f38f601d03f3d0c7fbcefc5"></a>
static constexpr XII_ALWAYS_INLINE Type&#160;</td><td class="memItemRight" valign="bottom"><b>RadToDegMultiplier</b> ()</td></tr>
<tr class="memdesc:aad83b7c65f38f601d03f3d0c7fbcefc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the constant to multiply with an angle in degree to convert it to radians. <br /></td></tr>
<tr class="separator:aad83b7c65f38f601d03f3d0c7fbcefc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a125b34adf00dc677204d2a7a5904b2ab" id="r_a125b34adf00dc677204d2a7a5904b2ab"><td class="memItemLeft" align="right" valign="top"><a id="a125b34adf00dc677204d2a7a5904b2ab" name="a125b34adf00dc677204d2a7a5904b2ab"></a>
static constexpr Type&#160;</td><td class="memItemRight" valign="bottom"><b>DegToRad</b> (Type f)</td></tr>
<tr class="memdesc:a125b34adf00dc677204d2a7a5904b2ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts an angle in degree to radians. <br /></td></tr>
<tr class="separator:a125b34adf00dc677204d2a7a5904b2ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56b7439a2dd2efc94c847a302a32b820" id="r_a56b7439a2dd2efc94c847a302a32b820"><td class="memItemLeft" align="right" valign="top"><a id="a56b7439a2dd2efc94c847a302a32b820" name="a56b7439a2dd2efc94c847a302a32b820"></a>
static constexpr Type&#160;</td><td class="memItemRight" valign="bottom"><b>RadToDeg</b> (Type f)</td></tr>
<tr class="memdesc:a56b7439a2dd2efc94c847a302a32b820"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts an angle in radians to degree. <br /></td></tr>
<tr class="separator:a56b7439a2dd2efc94c847a302a32b820"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20f03d2b167cd57eb9239d59a8c5c299" id="r_a20f03d2b167cd57eb9239d59a8c5c299"><td class="memItemLeft" align="right" valign="top"><a id="a20f03d2b167cd57eb9239d59a8c5c299" name="a20f03d2b167cd57eb9239d59a8c5c299"></a>
static constexpr <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MakeZero</b> ()</td></tr>
<tr class="memdesc:a20f03d2b167cd57eb9239d59a8c5c299"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a zero initialized angle. Same as a default constructed object. <br /></td></tr>
<tr class="separator:a20f03d2b167cd57eb9239d59a8c5c299"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad54cb856684d34910eaa24e78e90c71f" id="r_ad54cb856684d34910eaa24e78e90c71f"><td class="memItemLeft" align="right" valign="top"><a id="ad54cb856684d34910eaa24e78e90c71f" name="ad54cb856684d34910eaa24e78e90c71f"></a>
static constexpr <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MakeFromDegree</b> (Type fDegree)</td></tr>
<tr class="memdesc:ad54cb856684d34910eaa24e78e90c71f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an instance of xiiAngleTemplate&lt;Type&gt; that was initialized from degree. (Performs a conversion) <br /></td></tr>
<tr class="separator:ad54cb856684d34910eaa24e78e90c71f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c40ebf5138d287759bf494db230a5b2" id="r_a9c40ebf5138d287759bf494db230a5b2"><td class="memItemLeft" align="right" valign="top"><a id="a9c40ebf5138d287759bf494db230a5b2" name="a9c40ebf5138d287759bf494db230a5b2"></a>
static constexpr <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MakeFromRadian</b> (Type fRadian)</td></tr>
<tr class="memdesc:a9c40ebf5138d287759bf494db230a5b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an instance of xiiAngleTemplate&lt;Type&gt; that was initialized from radian. (No need for any conversion) <br /></td></tr>
<tr class="separator:a9c40ebf5138d287759bf494db230a5b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b19be99c551b7a895730631b2e600e8" id="r_a1b19be99c551b7a895730631b2e600e8"><td class="memItemLeft" align="right" valign="top">static constexpr <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a1b19be99c551b7a895730631b2e600e8">AngleBetween</a> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; a, <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; b)</td></tr>
<tr class="memdesc:a1b19be99c551b7a895730631b2e600e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the smallest angle between the two given angles. The angle will always be a positive value.  <br /></td></tr>
<tr class="separator:a1b19be99c551b7a895730631b2e600e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Type&gt;<br />
class xiiAngleTemplate&lt; Type &gt;</div><p>Wrapper class for a safe usage and conversions of angles. </p>
<p>Uses radian internally. Will <b>not</b> automatically keep its range between 0 degree - 360 degree (0 - 2PI) but you can call NormalizeRange to do so. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a1b19be99c551b7a895730631b2e600e8" name="a1b19be99c551b7a895730631b2e600e8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b19be99c551b7a895730631b2e600e8">&#9670;&#160;</a></span>AngleBetween()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">XII_FORCE_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;::AngleBetween </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;</td>          <td class="paramname"><span class="paramname"><em>a</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;</td>          <td class="paramname"><span class="paramname"><em>b</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Computes the smallest angle between the two given angles. The angle will always be a positive value. </p>
<dl class="section note"><dt>Note</dt><dd>The two angles must be in the same range. E.g. they should be either normalized or at least the absolute angle between them should not be more than 180 degree. </dd></dl>

</div>
</div>
<a id="a61b9cffe96c9937c13122e97f23417f9" name="a61b9cffe96c9937c13122e97f23417f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a61b9cffe96c9937c13122e97f23417f9">&#9670;&#160;</a></span>GetNormalizedRange()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;::GetNormalizedRange </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns an equivalent angle with range between 0 degree - 360 degree. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a7e9e308308a55e19b03dbf5a3fed8c66" title="Brings the angle into the range of 0 degree - 360 degree.">NormalizeRange()</a> </dd></dl>

</div>
</div>
<a id="a7e9e308308a55e19b03dbf5a3fed8c66" name="a7e9e308308a55e19b03dbf5a3fed8c66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e9e308308a55e19b03dbf5a3fed8c66">&#9670;&#160;</a></span>NormalizeRange()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;::NormalizeRange </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Brings the angle into the range of 0 degree - 360 degree. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a61b9cffe96c9937c13122e97f23417f9" title="Returns an equivalent angle with range between 0 degree - 360 degree.">GetNormalizedRange()</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Math/<a class="el" href="../../da/d18/_angle_8h_source.htm">Angle.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Math/Implementation/<a class="el" href="../../dd/d0f/_angle__inl_8h_source.htm">Angle_inl.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Math/Implementation/<a class="el" href="../../d6/dd4/_math__inl_8h_source.htm">Math_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:02:14 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>

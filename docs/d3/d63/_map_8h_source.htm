<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Containers/Map.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d3/d63/_map_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Map.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Deque.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="../../d6/d86/classxii_map_base.htm">    6</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer, <span class="keywordtype">bool</span> REVERSE&gt;</div>
<div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">   10</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keyword">using</span> iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">value_type</a>        = <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keyword">using</span> difference_type   = std::ptrdiff_t;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">pointer</a>           = <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>*;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">reference</a>         = <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>&amp;;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  XII_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a0dfd3ddedcd2aafc909afe80f9fc6022">   21</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a0dfd3ddedcd2aafc909afe80f9fc6022">xiiMapBaseConstIteratorBase</a>() :</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    m_pElement(nullptr)</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  {</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abd893cb6933f0d410b0839016aadc8f3">   27</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abd893cb6933f0d410b0839016aadc8f3">IsValid</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement != <span class="keyword">nullptr</span>); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a493b92a67cfae28271919842652c8b7e">   30</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a493b92a67cfae28271919842652c8b7e">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&amp; it2)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pElement == it2.m_pElement); }</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#ac6a2aef8d059fdb1d66da3866873c5c3">   33</a></span>&#160;  XII_FORCE_INLINE <span class="keyword">const</span> KeyType&amp; <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#ac6a2aef8d059fdb1d66da3866873c5c3">Key</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    XII_ASSERT_DEBUG(<a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abd893cb6933f0d410b0839016aadc8f3">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;key&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">return</span> m_pElement-&gt;m_Key;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abb409b73dbd000d50de012c0c16932af">   40</a></span>&#160;  XII_FORCE_INLINE <span class="keyword">const</span> ValueType&amp; <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abb409b73dbd000d50de012c0c16932af">Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    XII_ASSERT_DEBUG(<a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abd893cb6933f0d410b0839016aadc8f3">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> m_pElement-&gt;m_Value;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a3019bad10cbef34e185bfbaeafd58366">   47</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&amp; <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a3019bad10cbef34e185bfbaeafd58366">operator*</a>() { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#afd02b0808337bf40d697331411d2b650">Next</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordtype">void</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a3a458abb13a1fbf0418f502a653012d9">Prev</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a8b3c223f1fed2b1ed0d808f4fb1c3b87">   56</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a8b3c223f1fed2b1ed0d808f4fb1c3b87">operator++</a>() { <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#afd02b0808337bf40d697331411d2b650">Next</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abe0ecc00af0be13ca303c2eae07efbb1">   59</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abe0ecc00af0be13ca303c2eae07efbb1">operator--</a>() { <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a3a458abb13a1fbf0418f502a653012d9">Prev</a>(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordtype">void</span> Advance(<span class="keyword">const</span> xiiInt32 dir0, <span class="keyword">const</span> xiiInt32 dir1);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt;KeyType, ValueType, Comparer&gt;;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  XII_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a0dfd3ddedcd2aafc909afe80f9fc6022">xiiMapBaseConstIteratorBase</a>(<span class="keyword">typename</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::Node</a>* pInit) :</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    m_pElement(pInit)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  {</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  }</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keyword">typename</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::Node</a>* m_pElement;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00074"></a><span class="lineno"><a class="line" href="../../da/d83/structxii_map_base_const_iterator_base_1_1_pointer.htm">   74</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../da/d83/structxii_map_base_const_iterator_base_1_1_pointer.htm">Pointer</a></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  {</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    std::pair&lt;const KeyType&amp;, const ValueType&amp;&gt;        value;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">const</span> std::pair&lt;const KeyType&amp;, const ValueType&amp;&gt;* operator-&gt;()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> &amp;value; }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  };</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../da/d83/structxii_map_base_const_iterator_base_1_1_pointer.htm">Pointer</a> operator-&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../da/d83/structxii_map_base_const_iterator_base_1_1_pointer.htm">Pointer</a>{.value = {<a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#ac6a2aef8d059fdb1d66da3866873c5c3">Key</a>(), <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abb409b73dbd000d50de012c0c16932af">Value</a>()}};</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  }</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="comment">// This function is used to return the values for structured bindings.</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="comment">// The number and type of each slot are defined in the inl file.</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  std::tuple_element_t&lt;Index, xiiMapBaseConstIteratorBase&gt;&amp; get()<span class="keyword"> const</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span> constexpr (Index == 0)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      return <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#ac6a2aef8d059fdb1d66da3866873c5c3">Key</a>();</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    if constexpr (Index == 1)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      return <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abb409b73dbd000d50de012c0c16932af">Value</a>();</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;};</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;template &lt;typename KeyType, typename ValueType, typename Comparer, <span class="keywordtype">bool</span> REVERSE&gt;</div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="../../d3/d1e/structxii_map_base_iterator_base.htm">   99</a></span>&#160;struct <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase</a> : public <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keyword">using</span> iterator_category = std::forward_iterator_tag;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">value_type</a>        = <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keyword">using</span> difference_type   = std::ptrdiff_t;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">pointer</a>           = <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>*;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">reference</a>         = <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, REVERSE&gt;</a>&amp;;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  XII_DECLARE_POD_TYPE();</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="../../d3/d1e/structxii_map_base_iterator_base.htm#a3e8ba28ac071e7e401b447ddf6061256">  110</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm#a3e8ba28ac071e7e401b447ddf6061256">xiiMapBaseIteratorBase</a>() :</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;()</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="../../d3/d1e/structxii_map_base_iterator_base.htm#a7245180459c3206998600d6cbc0d6f65">  116</a></span>&#160;  XII_FORCE_INLINE ValueType&amp; <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm#a7245180459c3206998600d6cbc0d6f65">Value</a>()</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    XII_ASSERT_DEBUG(this-&gt;<a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abd893cb6933f0d410b0839016aadc8f3">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> this-&gt;m_pElement-&gt;m_Value;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="../../d3/d1e/structxii_map_base_iterator_base.htm#a26aa6a56edc0922ba51e28aaae8777a5">  123</a></span>&#160;  XII_FORCE_INLINE ValueType&amp; <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm#a26aa6a56edc0922ba51e28aaae8777a5">Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    XII_ASSERT_DEBUG(this-&gt;<a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abd893cb6933f0d410b0839016aadc8f3">IsValid</a>(), <span class="stringliteral">&quot;Cannot access the &#39;value&#39; of an invalid iterator.&quot;</span>);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> this-&gt;m_pElement-&gt;m_Value;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="../../d3/d1e/structxii_map_base_iterator_base.htm#ac8c625e060a7aa12aa38e6ccf87f2202">  130</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase</a>&amp; <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm#ac8c625e060a7aa12aa38e6ccf87f2202">operator*</a>() { <span class="keywordflow">return</span> *<span class="keyword">this</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt;KeyType, ValueType, Comparer&gt;;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  XII_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase</a>(<span class="keyword">typename</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::Node</a>* pInit) :</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;(pInit)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="comment">// These functions are used to return the values for structured bindings.</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="comment">// The number and type of type of each slot are defined in the inl file.</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keyword">template</span> &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  std::tuple_element_t&lt;Index, xiiMapBaseIteratorBase&gt;&amp; get()</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> constexpr (Index == 0)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      return <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;::<a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#ac6a2aef8d059fdb1d66da3866873c5c3">Key</a>();</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    if constexpr (Index == 1)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      return <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abb409b73dbd000d50de012c0c16932af">Value</a>();</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  template &lt;std::<span class="keywordtype">size_t</span> Index&gt;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  std::tuple_element_t&lt;Index, <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase</a>&gt;&amp; get()<span class="keyword"> const</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">if</span> constexpr (Index == 0)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      return <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&lt;KeyType, ValueType, Comparer, REVERSE&gt;::<a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#ac6a2aef8d059fdb1d66da3866873c5c3">Key</a>();</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    if constexpr (Index == 1)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      return <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abb409b73dbd000d50de012c0c16932af">Value</a>();</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;};</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;template &lt;typename KeyType, typename ValueType, typename Comparer&gt;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;class <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">using</span> ConstIterator        = <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keyword">using</span> ConstReverseIterator = <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase&lt;KeyType, ValueType, Comparer, true&gt;</a>;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keyword">using</span> Iterator        = <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, false&gt;</a>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keyword">using</span> ReverseIterator = <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase&lt;KeyType, ValueType, Comparer, true&gt;</a>;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keyword">friend</span> ConstIterator;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keyword">friend</span> ConstReverseIterator;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keyword">friend</span> Iterator;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keyword">friend</span> ReverseIterator;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keyword">struct </span>Node;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keyword">struct </span>NilNode</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    Node*    m_pParent  = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    Node*    m_pLink[2] = {<span class="keyword">nullptr</span>, <span class="keyword">nullptr</span>};</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    xiiUInt8 m_uiLevel  = 0;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  };</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <span class="keyword">struct </span>Node : <span class="keyword">public</span> NilNode</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  {</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    KeyType   m_Key;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    ValueType m_Value;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  };</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; cc, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  ~<a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keywordtype">bool</span> IsEmpty() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  xiiUInt32 GetCount() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keywordtype">void</span> Clear(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  Iterator GetIterator(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  ReverseIterator GetReverseIterator(); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  ConstIterator GetIterator() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  ConstReverseIterator GetReverseIterator() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType, <span class="keyword">typename</span> CompatibleValueType&gt;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  Iterator Insert(CompatibleKeyType&amp;&amp; key, CompatibleValueType&amp;&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keywordtype">bool</span> Remove(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  Iterator Remove(<span class="keyword">const</span> Iterator&amp; pos); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  Iterator FindOrAdd(CompatibleKeyType&amp;&amp; key, <span class="keywordtype">bool</span>* out_pExisted = <span class="keyword">nullptr</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  ValueType&amp; operator[](<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keywordtype">bool</span> TryGetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType&amp; out_value) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordtype">bool</span> TryGetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keyword">const</span> ValueType*&amp; out_pValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  <span class="keywordtype">bool</span> TryGetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key, ValueType*&amp; out_pValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="keyword">const</span> ValueType* GetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  ValueType* GetValue(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keyword">const</span> ValueType&amp; GetValueOrDefault(<span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keyword">const</span> ValueType&amp; defaultValue) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  Iterator Find(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  Iterator LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  Iterator UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  ConstIterator Find(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  <span class="keywordtype">bool</span> Contains(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  ConstIterator LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  ConstIterator UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="../../d6/d86/classxii_map_base.htm#ab2fd6d4223ca42409cf0a33299f58438">  321</a></span>&#160;  <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* <a class="code" href="../../d6/d86/classxii_map_base.htm#ab2fd6d4223ca42409cf0a33299f58438">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.GetAllocator(); }</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a493b92a67cfae28271919842652c8b7e">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="../../d6/d86/classxii_map_base.htm#a0127200a605bcedf21568f6d6b5c6ea3">  327</a></span>&#160;  xiiUInt64 <a class="code" href="../../d6/d86/classxii_map_base.htm#a0127200a605bcedf21568f6d6b5c6ea3">GetHeapMemoryUsage</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Elements.GetHeapMemoryUsage(); } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  <span class="keywordtype">void</span> Swap(<a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; other); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  Node* Internal_Find(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  Node* Internal_LowerBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  Node* Internal_UpperBound(<span class="keyword">const</span> CompatibleKeyType&amp; key) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  <span class="keywordtype">void</span> Constructor();</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  Node* AcquireNode(CompatibleKeyType&amp;&amp; key, ValueType&amp;&amp; value, xiiUInt8 uiLevel, Node* pParent);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keywordtype">void</span> ReleaseNode(Node* pNode);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <span class="comment">// \brief Red-Black Tree stuff(Anderson Tree to be exact).</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="comment">// Code taken from here: http://eternallyconfuzzled.com/tuts/datastructures/jsw_tut_andersson.aspx</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  Node* SkewNode(Node* root);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  Node* SplitNode(Node* root);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="keywordtype">void</span>  Insert(<span class="keyword">const</span> KeyType&amp; key, <span class="keyword">const</span> ValueType&amp; value, Node*&amp; pInsertedNode);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  Node* Remove(Node* root, <span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keywordtype">bool</span>&amp; bRemoved);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  Node* GetLeftMost() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  Node* GetRightMost() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <span class="keywordtype">void</span> SwapNilNode(Node*&amp; pCurNode, NilNode* pOld, NilNode* pNew);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  Node* m_pRoot;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  Node* m_pFreeElementStack;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  NilNode m_NilNode;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  <a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;Node, xiiNullAllocatorWrapper, false&gt;</a> m_Elements;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  xiiUInt32 m_uiCount;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  Comparer m_Comparer;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;};</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160; </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer = xiiCompareHelper&lt;KeyType&gt;, <span class="keyword">typename</span> AllocatorWrapper = xiiDefaultAllocatorWrapper&gt;</div>
<div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="../../d6/df7/classxii_map.htm">  389</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/df7/classxii_map.htm">xiiMap</a> : <span class="keyword">public</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt;KeyType, ValueType, Comparer&gt;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;{</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <a class="code" href="../../d6/df7/classxii_map.htm">xiiMap</a>();</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keyword">explicit</span> <a class="code" href="../../d6/df7/classxii_map.htm">xiiMap</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator);</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  <a class="code" href="../../d6/df7/classxii_map.htm">xiiMap</a>(<span class="keyword">const</span> Comparer&amp; comparer, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  <a class="code" href="../../d6/df7/classxii_map.htm">xiiMap</a>(<span class="keyword">const</span> <a class="code" href="../../d6/df7/classxii_map.htm">xiiMap&lt;KeyType, ValueType, Comparer, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  <a class="code" href="../../d6/df7/classxii_map.htm">xiiMap</a>(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; other);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d6/df7/classxii_map.htm">xiiMap&lt;KeyType, ValueType, Comparer, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; rhs);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;};</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a> begin(<a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;{</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <span class="keywordflow">return</span> ref_container.<a class="code" href="../../d6/d86/classxii_map_base.htm#a9882892562b88132844077c2d6cc811e">GetIterator</a>();</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;}</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> begin(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;{</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d6/d86/classxii_map_base.htm#a9882892562b88132844077c2d6cc811e">GetIterator</a>();</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;}</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> cbegin(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;{</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d6/d86/classxii_map_base.htm#a9882892562b88132844077c2d6cc811e">GetIterator</a>();</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a> end(<a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; ref_container)</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;{</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::Iterator</a>();</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;}</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160; </div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> end(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;{</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a>();</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;}</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a> cend(<span class="keyword">const</span> <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; container)</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;{</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">typename</span> <a class="code" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;::ConstIterator</a>();</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Implementation/Map_inl.h&gt;</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a></div><div class="ttdoc">Base class for all iterators.</div><div class="ttdef"><b>Definition:</b> Map.h:10</div></div>
<div class="ttc" id="astructxii_map_base_iterator_base_htm_a3e8ba28ac071e7e401b447ddf6061256"><div class="ttname"><a href="../../d3/d1e/structxii_map_base_iterator_base.htm#a3e8ba28ac071e7e401b447ddf6061256">xiiMapBaseIteratorBase::xiiMapBaseIteratorBase</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiMapBaseIteratorBase()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition:</b> Map.h:110</div></div>
<div class="ttc" id="aclassxii_map_base_htm_ab2fd6d4223ca42409cf0a33299f58438"><div class="ttname"><a href="../../d6/d86/classxii_map_base.htm#ab2fd6d4223ca42409cf0a33299f58438">xiiMapBase::GetAllocator</a></div><div class="ttdeci">xiiAllocatorBase * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition:</b> Map.h:321</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_ac6a2aef8d059fdb1d66da3866873c5c3"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#ac6a2aef8d059fdb1d66da3866873c5c3">xiiMapBaseConstIteratorBase::Key</a></div><div class="ttdeci">const XII_FORCE_INLINE KeyType &amp; Key() const</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Map.h:33</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_a493b92a67cfae28271919842652c8b7e"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a493b92a67cfae28271919842652c8b7e">xiiMapBaseConstIteratorBase::operator==</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool operator==(const xiiMapBaseConstIteratorBase &amp;it2) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> Map.h:30</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_a8b3c223f1fed2b1ed0d808f4fb1c3b87"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a8b3c223f1fed2b1ed0d808f4fb1c3b87">xiiMapBaseConstIteratorBase::operator++</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition:</b> Map.h:56</div></div>
<div class="ttc" id="astructxii_map_base_iterator_base_htm"><div class="ttname"><a href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase</a></div><div class="ttdoc">Forward Iterator to iterate over all elements in sorted order.</div><div class="ttdef"><b>Definition:</b> Map.h:99</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_a3019bad10cbef34e185bfbaeafd58366"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a3019bad10cbef34e185bfbaeafd58366">xiiMapBaseConstIteratorBase::operator*</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiMapBaseConstIteratorBase &amp; operator*()</div><div class="ttdoc">Returns '*this' to enable foreach.</div><div class="ttdef"><b>Definition:</b> Map.h:47</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_a3a458abb13a1fbf0418f502a653012d9"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a3a458abb13a1fbf0418f502a653012d9">xiiMapBaseConstIteratorBase::Prev</a></div><div class="ttdeci">void Prev()</div><div class="ttdoc">Advances the iterator to the previous element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> Map_inl.h:71</div></div>
<div class="ttc" id="aclassxii_map_base_htm"><div class="ttname"><a href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a></div><div class="ttdoc">An associative container. Similar to STL::map.</div><div class="ttdef"><b>Definition:</b> Map.h:6</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_a0dfd3ddedcd2aafc909afe80f9fc6022"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#a0dfd3ddedcd2aafc909afe80f9fc6022">xiiMapBaseConstIteratorBase::xiiMapBaseConstIteratorBase</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiMapBaseConstIteratorBase()</div><div class="ttdoc">Constructs an invalid iterator.</div><div class="ttdef"><b>Definition:</b> Map.h:21</div></div>
<div class="ttc" id="aclassxii_map_htm"><div class="ttname"><a href="../../d6/df7/classxii_map.htm">xiiMap</a></div><div class="ttdef"><b>Definition:</b> Map.h:389</div></div>
<div class="ttc" id="astructxii_map_base_iterator_base_htm_ac8c625e060a7aa12aa38e6ccf87f2202"><div class="ttname"><a href="../../d3/d1e/structxii_map_base_iterator_base.htm#ac8c625e060a7aa12aa38e6ccf87f2202">xiiMapBaseIteratorBase::operator*</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiMapBaseIteratorBase &amp; operator*()</div><div class="ttdoc">Returns '*this' to enable foreach.</div><div class="ttdef"><b>Definition:</b> Map.h:130</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_abe0ecc00af0be13ca303c2eae07efbb1"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abe0ecc00af0be13ca303c2eae07efbb1">xiiMapBaseConstIteratorBase::operator--</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator--()</div><div class="ttdoc">Shorthand for 'Prev'.</div><div class="ttdef"><b>Definition:</b> Map.h:59</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_abd893cb6933f0d410b0839016aadc8f3"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abd893cb6933f0d410b0839016aadc8f3">xiiMapBaseConstIteratorBase::IsValid</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition:</b> Map.h:27</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_1_1_pointer_htm"><div class="ttname"><a href="../../da/d83/structxii_map_base_const_iterator_base_1_1_pointer.htm">xiiMapBaseConstIteratorBase::Pointer</a></div><div class="ttdef"><b>Definition:</b> Map.h:74</div></div>
<div class="ttc" id="aclassxii_deque_htm"><div class="ttname"><a href="../../d8/df8/classxii_deque.htm">xiiDeque&lt; Node, xiiNullAllocatorWrapper, false &gt;</a></div></div>
<div class="ttc" id="astructxii_map_base_iterator_base_htm_a7245180459c3206998600d6cbc0d6f65"><div class="ttname"><a href="../../d3/d1e/structxii_map_base_iterator_base.htm#a7245180459c3206998600d6cbc0d6f65">xiiMapBaseIteratorBase::Value</a></div><div class="ttdeci">XII_FORCE_INLINE ValueType &amp; Value()</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Map.h:116</div></div>
<div class="ttc" id="aclassxii_map_base_htm_a0127200a605bcedf21568f6d6b5c6ea3"><div class="ttname"><a href="../../d6/d86/classxii_map_base.htm#a0127200a605bcedf21568f6d6b5c6ea3">xiiMapBase::GetHeapMemoryUsage</a></div><div class="ttdeci">xiiUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> Map.h:327</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_afd02b0808337bf40d697331411d2b650"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#afd02b0808337bf40d697331411d2b650">xiiMapBaseConstIteratorBase::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> Map_inl.h:58</div></div>
<div class="ttc" id="astructxii_map_base_iterator_base_htm_a26aa6a56edc0922ba51e28aaae8777a5"><div class="ttname"><a href="../../d3/d1e/structxii_map_base_iterator_base.htm#a26aa6a56edc0922ba51e28aaae8777a5">xiiMapBaseIteratorBase::Value</a></div><div class="ttdeci">XII_FORCE_INLINE ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Map.h:123</div></div>
<div class="ttc" id="astructxii_map_base_const_iterator_base_htm_abb409b73dbd000d50de012c0c16932af"><div class="ttname"><a href="../../db/d2e/structxii_map_base_const_iterator_base.htm#abb409b73dbd000d50de012c0c16932af">xiiMapBaseConstIteratorBase::Value</a></div><div class="ttdeci">const XII_FORCE_INLINE ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> Map.h:40</div></div>
<div class="ttc" id="aclassxii_allocator_base_htm"><div class="ttname"><a href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:21</div></div>
<div class="ttc" id="aclassxii_map_base_htm_a9882892562b88132844077c2d6cc811e"><div class="ttname"><a href="../../d6/d86/classxii_map_base.htm#a9882892562b88132844077c2d6cc811e">xiiMapBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an Iterator to the very first element.</div><div class="ttdef"><b>Definition:</b> Map_inl.h:203</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_7f59ab18dbc50035dfc0ee7070867286.htm">Containers</a></li><li class="navelem"><b>Map.h</b></li>
    <li class="footer">Generated on Wed Jun 12 2024 18:05:49 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

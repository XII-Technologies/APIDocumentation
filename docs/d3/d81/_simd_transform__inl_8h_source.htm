<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: /home/runner/work/XII/XII/Source/Engine/Foundation/SimdMath/Implementation/SimdTransform_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d3/d81/_simd_transform__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">SimdTransform_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span>XII_ALWAYS_INLINE <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a226f87d3716d175d504ffb5d244da9c7">xiiSimdTransform::xiiSimdTransform</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="foldopen" id="foldopen00005" data-start="{" data-end="}">
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a54ce28a86a511fe08c10ab780c0ab49e">    5</a></span>XII_ALWAYS_INLINE <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a226f87d3716d175d504ffb5d244da9c7">xiiSimdTransform::xiiSimdTransform</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; vPosition, <span class="keyword">const</span> <a class="code hl_class" href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a>&amp; qRotation, <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; vScale) :</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  m_Position(vPosition), m_Rotation(qRotation), m_Scale(vScale)</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>{</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>}</div>
</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="foldopen" id="foldopen00010" data-start="{" data-end="}">
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a3a34c7b168ae05e8557b564f4b9fa2de">   10</a></span>XII_ALWAYS_INLINE <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a226f87d3716d175d504ffb5d244da9c7">xiiSimdTransform::xiiSimdTransform</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a>&amp; qRotation) :</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>  m_Rotation(qRotation)</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>{</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>  m_Position.SetZero();</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>  m_Scale.Set(1.0f);</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>}</div>
</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="foldopen" id="foldopen00017" data-start="{" data-end="}">
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a329c84430a19bdef7c35fa8a02ff0fc0">   17</a></span><span class="keyword">inline</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a329c84430a19bdef7c35fa8a02ff0fc0">xiiSimdTransform::Make</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; vPosition, <span class="keyword">const</span> <a class="code hl_class" href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a>&amp; qRotation <span class="comment">/*= xiiSimdQuat::IdentityQuaternion()*/</span>, <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; vScale <span class="comment">/*= xiiSimdVec4f(1.0f)*/</span>)</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>{</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> res;</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  res.m_Position = vPosition;</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>  res.m_Rotation = qRotation;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  res.m_Scale    = vScale;</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>}</div>
</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span> </div>
<div class="foldopen" id="foldopen00026" data-start="{" data-end="}">
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a6aa228c063c63565ba54e3bb5ee8d565">   26</a></span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a6aa228c063c63565ba54e3bb5ee8d565">xiiSimdTransform::MakeIdentity</a>()</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>{</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> res;</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  res.m_Position.SetZero();</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  res.m_Rotation = <a class="code hl_function" href="../../db/dda/classxii_simd_quat.htm#a9fdedb31f3bd4ded9d917f0b37e1afe9">xiiSimdQuat::MakeIdentity</a>();</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  res.m_Scale.Set(1.0f);</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span>}</div>
</div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span> </div>
<div class="foldopen" id="foldopen00035" data-start="{" data-end="}">
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a17a8cb84d2cb7d9e061a9827b4c5c8ac">   35</a></span><span class="keyword">inline</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a17a8cb84d2cb7d9e061a9827b4c5c8ac">xiiSimdTransform::MakeLocalTransform</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; globalTransformParent, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; globalTransformChild)</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>{</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a>  invRot   = -globalTransformParent.m_Rotation;</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> invScale = globalTransformParent.m_Scale.GetReciprocal();</div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> res;</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  res.m_Position = (invRot * (globalTransformChild.m_Position - globalTransformParent.m_Position)).CompMul(invScale);</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  res.m_Rotation = invRot * globalTransformChild.m_Rotation;</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  res.m_Scale    = invScale.CompMul(globalTransformChild.m_Scale);</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>}</div>
</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span> </div>
<div class="foldopen" id="foldopen00047" data-start="{" data-end="}">
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#aacb0c30ed4145963004d80f68159fd82">   47</a></span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#aacb0c30ed4145963004d80f68159fd82">xiiSimdTransform::MakeGlobalTransform</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; globalTransformParent, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; localTransformChild)</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>{</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  <span class="keywordflow">return</span> globalTransformParent * localTransformChild;</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>}</div>
</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="foldopen" id="foldopen00052" data-start="{" data-end="}">
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a7f1aee0ce353ff3277f3369c8efa4c97">   52</a></span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d2/d73/classxii_simd_float.htm">xiiSimdFloat</a> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a7f1aee0ce353ff3277f3369c8efa4c97">xiiSimdTransform::GetMaxScale</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <span class="keywordflow">return</span> m_Scale.Abs().HorizontalMax&lt;3&gt;();</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>}</div>
</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="foldopen" id="foldopen00057" data-start="{" data-end="}">
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a3fe68df22b85058b3a7a9a1ab4399cdf">   57</a></span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a3fe68df22b85058b3a7a9a1ab4399cdf">xiiSimdTransform::ContainsNegativeScale</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>  <span class="keywordflow">return</span> (m_Scale.x() * m_Scale.y() * m_Scale.z()) &lt; <a class="code hl_function" href="../../d2/d73/classxii_simd_float.htm#a855c939748bf29055a7189a9e9ca6c6f">xiiSimdFloat::MakeZero</a>();</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>}</div>
</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="foldopen" id="foldopen00062" data-start="{" data-end="}">
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a139b9f86cb719f12fdcf9f546c4fa087">   62</a></span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a139b9f86cb719f12fdcf9f546c4fa087">xiiSimdTransform::ContainsUniformScale</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d73/classxii_simd_float.htm">xiiSimdFloat</a> fEpsilon = xiiMath::DefaultEpsilon&lt;float&gt;();</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>  <span class="keywordflow">return</span> m_Scale.x().IsEqual(m_Scale.y(), fEpsilon) &amp;&amp; m_Scale.x().IsEqual(m_Scale.z(), fEpsilon);</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>}</div>
</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="foldopen" id="foldopen00068" data-start="{" data-end="}">
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a99564c931c7661a5fa10364b517d4f30">   68</a></span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a99564c931c7661a5fa10364b517d4f30">xiiSimdTransform::IsEqual</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; rhs, <span class="keyword">const</span> <a class="code hl_class" href="../../d2/d73/classxii_simd_float.htm">xiiSimdFloat</a>&amp; fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  <span class="keywordflow">return</span> m_Position.IsEqual(rhs.m_Position, fEpsilon).AllSet&lt;3&gt;() &amp;&amp; m_Rotation.<a class="code hl_function" href="../../db/dda/classxii_simd_quat.htm#a31b655bab69cff6ac12286038391f4bb">IsEqualRotation</a>(rhs.m_Rotation, fEpsilon) &amp;&amp;</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>    m_Scale.IsEqual(rhs.m_Scale, fEpsilon).AllSet&lt;3&gt;();</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>}</div>
</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="foldopen" id="foldopen00074" data-start="{" data-end="}">
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#af2281dd18f9cd49cfdb13011a957f32a">   74</a></span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#af2281dd18f9cd49cfdb13011a957f32a">xiiSimdTransform::Invert</a>()</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>{</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  (*this) = <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a2076e065de02d176453287aed1765dca">GetInverse</a>();</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>}</div>
</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span> </div>
<div class="foldopen" id="foldopen00079" data-start="{" data-end="}">
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a2076e065de02d176453287aed1765dca">   79</a></span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a2076e065de02d176453287aed1765dca">xiiSimdTransform::GetInverse</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  <a class="code hl_class" href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a>  invRot   = -m_Rotation;</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>  <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> invScale = m_Scale.GetReciprocal();</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>  <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> invPos   = invRot * (invScale.CompMul(-m_Position));</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span> </div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a226f87d3716d175d504ffb5d244da9c7">xiiSimdTransform</a>(invPos, invRot, invScale);</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>}</div>
</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span> </div>
<div class="foldopen" id="foldopen00088" data-start="{" data-end="}">
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#ad35ddd29bb1eca1fe3c4a5575d7d1e04">   88</a></span>XII_FORCE_INLINE <a class="code hl_class" href="../../d4/d8d/classxii_simd_mat4f.htm">xiiSimdMat4f</a> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#ad35ddd29bb1eca1fe3c4a5575d7d1e04">xiiSimdTransform::GetAsMat4</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  <a class="code hl_class" href="../../d4/d8d/classxii_simd_mat4f.htm">xiiSimdMat4f</a> result = m_Rotation.<a class="code hl_function" href="../../db/dda/classxii_simd_quat.htm#a0ea87662d83ed3ae4ec5bfc732d1391d">GetAsMat4</a>();</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span> </div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  result.m_col0 *= m_Scale.x();</div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  result.m_col1 *= m_Scale.y();</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  result.m_col2 *= m_Scale.z();</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span>  result.m_col3 = m_Position;</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  result.m_col3.SetW(1.0f);</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span> </div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>  <span class="keywordflow">return</span> result;</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>}</div>
</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> xiiSimdTransform::TransformPosition(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> scaled  = m_Scale.CompMul(v);</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> rotated = m_Rotation * scaled;</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  <span class="keywordflow">return</span> m_Position + rotated;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>}</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> xiiSimdTransform::TransformDirection(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> scaled = m_Scale.CompMul(v);</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  <span class="keywordflow">return</span> m_Rotation * scaled;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>}</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a> operator*(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; t, <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; v)</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>{</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="keywordflow">return</span> t.TransformPosition(v);</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>}</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span><span class="keyword">inline</span> <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> operator*(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; rhs)</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>{</div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span>  <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> t;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  t.m_Position = (lhs.m_Rotation * rhs.m_Position.CompMul(lhs.m_Scale)) + lhs.m_Position;</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  t.m_Rotation = lhs.m_Rotation * rhs.m_Rotation;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  t.m_Scale    = lhs.m_Scale.CompMul(rhs.m_Scale);</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span>  <span class="keywordflow">return</span> t;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>}</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="foldopen" id="foldopen00130" data-start="{" data-end="}">
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#a5dc4e3a0f916113a4f5c9ee4b5620a16">  130</a></span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a5dc4e3a0f916113a4f5c9ee4b5620a16">xiiSimdTransform::operator*=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; other)</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>{</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  (*this) = (*this) * other;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>}</div>
</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> operator*(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_class" href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a>&amp; q)</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>{</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> t;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span>  t.m_Position = lhs.m_Position;</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  t.m_Rotation = lhs.m_Rotation * q;</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  t.m_Scale    = lhs.m_Scale;</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="keywordflow">return</span> t;</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>}</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> operator*(<span class="keyword">const</span> <a class="code hl_class" href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a>&amp; q, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; rhs)</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>{</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> t;</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  t.m_Position = rhs.m_Position;</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  t.m_Rotation = q * rhs.m_Rotation;</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>  t.m_Scale    = rhs.m_Scale;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  <span class="keywordflow">return</span> t;</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>}</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="foldopen" id="foldopen00153" data-start="{" data-end="}">
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno"><a class="line" href="../../d8/d43/classxii_simd_transform.htm#ac4d1194d46c590a77d77ad760be2e244">  153</a></span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_function" href="../../d8/d43/classxii_simd_transform.htm#a5dc4e3a0f916113a4f5c9ee4b5620a16">xiiSimdTransform::operator*=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a>&amp; q)</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>{</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  m_Rotation = m_Rotation * q;</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>}</div>
</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> operator+(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; v)</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>{</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> t;</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span> </div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  t.m_Position = lhs.m_Position + v;</div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  t.m_Rotation = lhs.m_Rotation;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>  t.m_Scale    = lhs.m_Scale;</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="keywordflow">return</span> t;</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>}</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> operator-(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; v)</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>{</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a> t;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  t.m_Position = lhs.m_Position - v;</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  t.m_Rotation = lhs.m_Rotation;</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  t.m_Scale    = lhs.m_Scale;</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="keywordflow">return</span> t;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>}</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdTransform::operator+=(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; v)</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>{</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  m_Position += v;</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>}</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span> </div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdTransform::operator-=(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a>&amp; v)</div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>{</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>  m_Position -= v;</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>}</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; rhs)</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>{</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  <span class="keywordflow">return</span> (lhs.m_Position == rhs.m_Position).AllSet&lt;3&gt;() &amp;&amp; lhs.m_Rotation == rhs.m_Rotation &amp;&amp; (lhs.m_Scale == rhs.m_Scale).AllSet&lt;3&gt;();</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span>}</div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span> </div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; lhs, <span class="keyword">const</span> <a class="code hl_class" href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a>&amp; rhs)</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>{</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  <span class="keywordflow">return</span> !(lhs == rhs);</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>}</div>
<div class="ttc" id="aclassxii_simd_float_htm"><div class="ttname"><a href="../../d2/d73/classxii_simd_float.htm">xiiSimdFloat</a></div><div class="ttdef"><b>Definition</b> SimdFloat.h:7</div></div>
<div class="ttc" id="aclassxii_simd_float_htm_a855c939748bf29055a7189a9e9ca6c6f"><div class="ttname"><a href="../../d2/d73/classxii_simd_float.htm#a855c939748bf29055a7189a9e9ca6c6f">xiiSimdFloat::MakeZero</a></div><div class="ttdeci">static xiiSimdFloat MakeZero()</div><div class="ttdoc">Creates a xiiSimdFloat that is initialized to zero.</div><div class="ttdef"><b>Definition</b> FPUFloat_inl.h:36</div></div>
<div class="ttc" id="aclassxii_simd_mat4f_htm"><div class="ttname"><a href="../../d4/d8d/classxii_simd_mat4f.htm">xiiSimdMat4f</a></div><div class="ttdoc">A 4x4 matrix class.</div><div class="ttdef"><b>Definition</b> SimdMat4f.h:7</div></div>
<div class="ttc" id="aclassxii_simd_quat_htm"><div class="ttname"><a href="../../db/dda/classxii_simd_quat.htm">xiiSimdQuat</a></div><div class="ttdef"><b>Definition</b> SimdQuat.h:6</div></div>
<div class="ttc" id="aclassxii_simd_quat_htm_a0ea87662d83ed3ae4ec5bfc732d1391d"><div class="ttname"><a href="../../db/dda/classxii_simd_quat.htm#a0ea87662d83ed3ae4ec5bfc732d1391d">xiiSimdQuat::GetAsMat4</a></div><div class="ttdeci">xiiSimdMat4f GetAsMat4() const</div><div class="ttdoc">Returns the Quaternion as a matrix.</div><div class="ttdef"><b>Definition</b> SimdQuat_inl.h:58</div></div>
<div class="ttc" id="aclassxii_simd_quat_htm_a31b655bab69cff6ac12286038391f4bb"><div class="ttname"><a href="../../db/dda/classxii_simd_quat.htm#a31b655bab69cff6ac12286038391f4bb">xiiSimdQuat::IsEqualRotation</a></div><div class="ttdeci">bool IsEqualRotation(const xiiSimdQuat &amp;qOther, const xiiSimdFloat &amp;fEpsilon) const</div><div class="ttdoc">Determines whether this and qOther represent the same rotation. This is a rather slow operation.</div><div class="ttdef"><b>Definition</b> SimdQuat.cpp:82</div></div>
<div class="ttc" id="aclassxii_simd_quat_htm_a9fdedb31f3bd4ded9d917f0b37e1afe9"><div class="ttname"><a href="../../db/dda/classxii_simd_quat.htm#a9fdedb31f3bd4ded9d917f0b37e1afe9">xiiSimdQuat::MakeIdentity</a></div><div class="ttdeci">static const xiiSimdQuat MakeIdentity()</div><div class="ttdoc">Static function that returns a quaternion that represents the identity rotation (none).</div><div class="ttdef"><b>Definition</b> SimdQuat_inl.h:10</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm">xiiSimdTransform</a></div><div class="ttdef"><b>Definition</b> SimdTransform.h:6</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a139b9f86cb719f12fdcf9f546c4fa087"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a139b9f86cb719f12fdcf9f546c4fa087">xiiSimdTransform::ContainsUniformScale</a></div><div class="ttdeci">bool ContainsUniformScale() const</div><div class="ttdoc">Returns whether this transform contains uniform scaling.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:62</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a17a8cb84d2cb7d9e061a9827b4c5c8ac"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a17a8cb84d2cb7d9e061a9827b4c5c8ac">xiiSimdTransform::MakeLocalTransform</a></div><div class="ttdeci">static xiiSimdTransform MakeLocalTransform(const xiiSimdTransform &amp;globalTransformParent, const xiiSimdTransform &amp;globalTransformChild)</div><div class="ttdoc">Creates a transform that is the local transformation needed to get from the parent's transform to the...</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:35</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a2076e065de02d176453287aed1765dca"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a2076e065de02d176453287aed1765dca">xiiSimdTransform::GetInverse</a></div><div class="ttdeci">xiiSimdTransform GetInverse() const</div><div class="ttdoc">Returns the inverse of this transform.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:79</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a226f87d3716d175d504ffb5d244da9c7"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a226f87d3716d175d504ffb5d244da9c7">xiiSimdTransform::xiiSimdTransform</a></div><div class="ttdeci">xiiSimdTransform()</div><div class="ttdoc">Default constructor: Does not do any initialization.</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a329c84430a19bdef7c35fa8a02ff0fc0"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a329c84430a19bdef7c35fa8a02ff0fc0">xiiSimdTransform::Make</a></div><div class="ttdeci">static xiiSimdTransform Make(const xiiSimdVec4f &amp;vPosition, const xiiSimdQuat &amp;qRotation=xiiSimdQuat::MakeIdentity(), const xiiSimdVec4f &amp;vScale=xiiSimdVec4f(1.0f))</div><div class="ttdoc">Creates a transform from the given position, rotation and scale.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:17</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a3fe68df22b85058b3a7a9a1ab4399cdf"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a3fe68df22b85058b3a7a9a1ab4399cdf">xiiSimdTransform::ContainsNegativeScale</a></div><div class="ttdeci">bool ContainsNegativeScale() const</div><div class="ttdoc">Returns whether this transform contains negative scaling aka mirroring.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:57</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a5dc4e3a0f916113a4f5c9ee4b5620a16"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a5dc4e3a0f916113a4f5c9ee4b5620a16">xiiSimdTransform::operator*=</a></div><div class="ttdeci">void operator*=(const xiiSimdTransform &amp;other)</div><div class="ttdoc">Concatenates the two transforms. This is the same as a matrix multiplication, thus not commutative.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:130</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a6aa228c063c63565ba54e3bb5ee8d565"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a6aa228c063c63565ba54e3bb5ee8d565">xiiSimdTransform::MakeIdentity</a></div><div class="ttdeci">static xiiSimdTransform MakeIdentity()</div><div class="ttdoc">Creates an identity transform.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:26</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a7f1aee0ce353ff3277f3369c8efa4c97"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a7f1aee0ce353ff3277f3369c8efa4c97">xiiSimdTransform::GetMaxScale</a></div><div class="ttdeci">xiiSimdFloat GetMaxScale() const</div><div class="ttdoc">Returns the scale component with maximum magnitude.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:52</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_a99564c931c7661a5fa10364b517d4f30"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#a99564c931c7661a5fa10364b517d4f30">xiiSimdTransform::IsEqual</a></div><div class="ttdeci">bool IsEqual(const xiiSimdTransform &amp;rhs, const xiiSimdFloat &amp;fEpsilon) const</div><div class="ttdoc">Equality Check with epsilon.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:68</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_aacb0c30ed4145963004d80f68159fd82"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#aacb0c30ed4145963004d80f68159fd82">xiiSimdTransform::MakeGlobalTransform</a></div><div class="ttdeci">static xiiSimdTransform MakeGlobalTransform(const xiiSimdTransform &amp;globalTransformParent, const xiiSimdTransform &amp;localTransformChild)</div><div class="ttdoc">Creates a transform that is the global transform, that is reached by applying the child's local trans...</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:47</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_ad35ddd29bb1eca1fe3c4a5575d7d1e04"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#ad35ddd29bb1eca1fe3c4a5575d7d1e04">xiiSimdTransform::GetAsMat4</a></div><div class="ttdeci">xiiSimdMat4f GetAsMat4() const</div><div class="ttdoc">Returns the transformation as a matrix.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:88</div></div>
<div class="ttc" id="aclassxii_simd_transform_htm_af2281dd18f9cd49cfdb13011a957f32a"><div class="ttname"><a href="../../d8/d43/classxii_simd_transform.htm#af2281dd18f9cd49cfdb13011a957f32a">xiiSimdTransform::Invert</a></div><div class="ttdeci">void Invert()</div><div class="ttdoc">Inverts this transform.</div><div class="ttdef"><b>Definition</b> SimdTransform_inl.h:74</div></div>
<div class="ttc" id="aclassxii_simd_vec4f_htm"><div class="ttname"><a href="../../d3/da5/classxii_simd_vec4f.htm">xiiSimdVec4f</a></div><div class="ttdoc">A 4-component SIMD vector class.</div><div class="ttdef"><b>Definition</b> SimdVec4f.h:8</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6571b00f9c254a01b1735d75b2065daf.htm">SimdMath</a></li><li class="navelem"><a class="el" href="../../dir_421677d30b51fc7bb4bb6333857496b6.htm">Implementation</a></li><li class="navelem"><b>SimdTransform_inl.h</b></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:02:12 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>

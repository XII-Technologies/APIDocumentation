<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: xiiTask Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d3/d9b/classxii_task.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d8/d43/classxii_task-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">xiiTask Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p>Base class for custom tasks.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d5/dc5/_task_8h_source.htm">Task.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for xiiTask:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../d7/d6e/classxii_task__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ae03e7f23e33858f7ab2e687d3d4ee265" id="r_ae03e7f23e33858f7ab2e687d3d4ee265"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae03e7f23e33858f7ab2e687d3d4ee265">ConfigureTask</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sTaskName, xiiTaskNesting nestingMode, <a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskFinishedCallback</a> callback=<a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskFinishedCallback</a>())</td></tr>
<tr class="memdesc:ae03e7f23e33858f7ab2e687d3d4ee265"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the most important task properties. This has to be done before the task is added to a task group for the first time.  <br /></td></tr>
<tr class="separator:ae03e7f23e33858f7ab2e687d3d4ee265"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6fd03e64c6b45d06433def2d14b759b" id="r_aa6fd03e64c6b45d06433def2d14b759b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa6fd03e64c6b45d06433def2d14b759b">SetMultiplicity</a> (xiiUInt32 uiMultiplicity)</td></tr>
<tr class="memdesc:aa6fd03e64c6b45d06433def2d14b759b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the multiplicity of this task.  <br /></td></tr>
<tr class="separator:aa6fd03e64c6b45d06433def2d14b759b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af549d5e2dace8b610deb700610daabdb" id="r_af549d5e2dace8b610deb700610daabdb"><td class="memItemLeft" align="right" valign="top">xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af549d5e2dace8b610deb700610daabdb">GetMultiplicity</a> () const</td></tr>
<tr class="separator:af549d5e2dace8b610deb700610daabdb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bfaf2e965bc45fe5710ceb4aea4d0d1" id="r_a5bfaf2e965bc45fe5710ceb4aea4d0d1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a5bfaf2e965bc45fe5710ceb4aea4d0d1">IsTaskFinished</a> () const</td></tr>
<tr class="memdesc:a5bfaf2e965bc45fe5710ceb4aea4d0d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the task has been finished. This includes being canceled.  <br /></td></tr>
<tr class="separator:a5bfaf2e965bc45fe5710ceb4aea4d0d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34c951a3a9f72e4b5674aedeed5848a9" id="r_a34c951a3a9f72e4b5674aedeed5848a9"><td class="memItemLeft" align="right" valign="top"><a id="a34c951a3a9f72e4b5674aedeed5848a9" name="a34c951a3a9f72e4b5674aedeed5848a9"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>HasBeenCanceled</b> () const</td></tr>
<tr class="memdesc:a34c951a3a9f72e4b5674aedeed5848a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Can be used inside an overridden 'Execute' function to terminate execution prematurely. <br /></td></tr>
<tr class="separator:a34c951a3a9f72e4b5674aedeed5848a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classxii_ref_counted"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classxii_ref_counted')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d3/dd0/classxii_ref_counted.htm">xiiRefCounted</a></td></tr>
<tr class="memitem:a3a0e5c6ed7ac22eb6b7fd2454c641724 inherit pub_methods_classxii_ref_counted" id="r_a3a0e5c6ed7ac22eb6b7fd2454c641724"><td class="memItemLeft" align="right" valign="top">
virtual&#160;</td><td class="memItemRight" valign="bottom"><b>~xiiRefCounted</b> ()=default</td></tr>
<tr class="memdesc:a3a0e5c6ed7ac22eb6b7fd2454c641724 inherit pub_methods_classxii_ref_counted"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a virtual destructor. <br /></td></tr>
<tr class="separator:a3a0e5c6ed7ac22eb6b7fd2454c641724 inherit pub_methods_classxii_ref_counted"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classxii_ref_counting_impl"><td colspan="2" onclick="javascript:dynsection.toggleInherit('pub_methods_classxii_ref_counting_impl')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d7/df4/classxii_ref_counting_impl.htm">xiiRefCountingImpl</a></td></tr>
<tr class="memitem:ab0609d4d40055d689e72fd792239b4b4 inherit pub_methods_classxii_ref_counting_impl" id="r_ab0609d4d40055d689e72fd792239b4b4"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiRefCountingImpl</b> ()=default</td></tr>
<tr class="memdesc:ab0609d4d40055d689e72fd792239b4b4 inherit pub_methods_classxii_ref_counting_impl"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:ab0609d4d40055d689e72fd792239b4b4 inherit pub_methods_classxii_ref_counting_impl"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9f56997f73ff0e780d1f5b4c7b47f49 inherit pub_methods_classxii_ref_counting_impl" id="r_ab9f56997f73ff0e780d1f5b4c7b47f49"><td class="memItemLeft" align="right" valign="top">
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiRefCountingImpl</b> (const <a class="el" href="../../d7/df4/classxii_ref_counting_impl.htm">xiiRefCountingImpl</a> &amp;rhs)</td></tr>
<tr class="separator:ab9f56997f73ff0e780d1f5b4c7b47f49 inherit pub_methods_classxii_ref_counting_impl"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad2594133c630abd15739894ef67c38b7 inherit pub_methods_classxii_ref_counting_impl" id="r_ad2594133c630abd15739894ef67c38b7"><td class="memItemLeft" align="right" valign="top">
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d7/df4/classxii_ref_counting_impl.htm">xiiRefCountingImpl</a> &amp;rhs)</td></tr>
<tr class="separator:ad2594133c630abd15739894ef67c38b7 inherit pub_methods_classxii_ref_counting_impl"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af89a37294bfebe74f2f43c492d2c14c3 inherit pub_methods_classxii_ref_counting_impl" id="r_af89a37294bfebe74f2f43c492d2c14c3"><td class="memItemLeft" align="right" valign="top">
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><b>AddRef</b> () const</td></tr>
<tr class="memdesc:af89a37294bfebe74f2f43c492d2c14c3 inherit pub_methods_classxii_ref_counting_impl"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increments the reference counter. Returns the new reference count. <br /></td></tr>
<tr class="separator:af89a37294bfebe74f2f43c492d2c14c3 inherit pub_methods_classxii_ref_counting_impl"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cef7cdc6931aad7337348db21f38c64 inherit pub_methods_classxii_ref_counting_impl" id="r_a2cef7cdc6931aad7337348db21f38c64"><td class="memItemLeft" align="right" valign="top">
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><b>ReleaseRef</b> () const</td></tr>
<tr class="memdesc:a2cef7cdc6931aad7337348db21f38c64 inherit pub_methods_classxii_ref_counting_impl"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decrements the reference counter. Returns the new reference count. <br /></td></tr>
<tr class="separator:a2cef7cdc6931aad7337348db21f38c64 inherit pub_methods_classxii_ref_counting_impl"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ae4990ae83e124ddc5e1fa69261f88f inherit pub_methods_classxii_ref_counting_impl" id="r_a1ae4990ae83e124ddc5e1fa69261f88f"><td class="memItemLeft" align="right" valign="top">
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsReferenced</b> () const</td></tr>
<tr class="memdesc:a1ae4990ae83e124ddc5e1fa69261f88f inherit pub_methods_classxii_ref_counting_impl"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the reference count is greater than 0, false otherwise. <br /></td></tr>
<tr class="separator:a1ae4990ae83e124ddc5e1fa69261f88f inherit pub_methods_classxii_ref_counting_impl"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f7119c376cfcd3e1d4a0264a1b3f218 inherit pub_methods_classxii_ref_counting_impl" id="r_a9f7119c376cfcd3e1d4a0264a1b3f218"><td class="memItemLeft" align="right" valign="top">
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><b>GetRefCount</b> () const</td></tr>
<tr class="memdesc:a9f7119c376cfcd3e1d4a0264a1b3f218 inherit pub_methods_classxii_ref_counting_impl"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the current reference count. <br /></td></tr>
<tr class="separator:a9f7119c376cfcd3e1d4a0264a1b3f218 inherit pub_methods_classxii_ref_counting_impl"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pro-methods" name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ae86de0539cc6ab496ecef3917a0b7565" id="r_ae86de0539cc6ab496ecef3917a0b7565"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#ae86de0539cc6ab496ecef3917a0b7565">Execute</a> ()</td></tr>
<tr class="memdesc:ae86de0539cc6ab496ecef3917a0b7565"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to implement the task's supposed functionality.  <br /></td></tr>
<tr class="separator:ae86de0539cc6ab496ecef3917a0b7565"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1516532d9cffd0e5124411663e775e4" id="r_af1516532d9cffd0e5124411663e775e4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af1516532d9cffd0e5124411663e775e4">ExecuteWithMultiplicity</a> (xiiUInt32 uiInvocation) const</td></tr>
<tr class="memdesc:af1516532d9cffd0e5124411663e775e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override this to implement the task's supposed functionality.  <br /></td></tr>
<tr class="separator:af1516532d9cffd0e5124411663e775e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:aa90fa0eb294b05800bc7197a92208cf8" id="r_aa90fa0eb294b05800bc7197a92208cf8"><td class="memItemLeft" align="right" valign="top"><a id="aa90fa0eb294b05800bc7197a92208cf8" name="aa90fa0eb294b05800bc7197a92208cf8"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>xiiTaskSystem</b></td></tr>
<tr class="separator:aa90fa0eb294b05800bc7197a92208cf8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Base class for custom tasks. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ae03e7f23e33858f7ab2e687d3d4ee265" name="ae03e7f23e33858f7ab2e687d3d4ee265"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae03e7f23e33858f7ab2e687d3d4ee265">&#9670;&#160;</a></span>ConfigureTask()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTask::ConfigureTask </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></td>          <td class="paramname"><span class="paramname"><em>sTaskName</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiTaskNesting</td>          <td class="paramname"><span class="paramname"><em>nestingMode</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskFinishedCallback</a></td>          <td class="paramname"><span class="paramname"><em>callback</em></span><span class="paramdefsep"> = </span><span class="paramdefval"><a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskFinishedCallback</a>()</span>&#160;)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the most important task properties. This has to be done before the task is added to a task group for the first time. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">sTaskName</td><td>Will be displayed in profiling tools and is useful for debugging.</td></tr>
    <tr><td class="paramname">nestingMode</td><td>See xiiTaskNesting</td></tr>
    <tr><td class="paramname">Callback</td><td>A callback to execute when the task is finished (or canceled). The most common use case for this is to deallocate the task at that time. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae86de0539cc6ab496ecef3917a0b7565" name="ae86de0539cc6ab496ecef3917a0b7565"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae86de0539cc6ab496ecef3917a0b7565">&#9670;&#160;</a></span>Execute()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiTask::Execute </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to implement the task's supposed functionality. </p>
<p>This function is called for tasks that do not use multiplicity. They are executed a single time for each time they are added to the <a class="el" href="../../d1/dc7/classxii_task_system.htm" title="This system allows to automatically distribute tasks onto a number of worker threads.">xiiTaskSystem</a>. </p>

<p>Reimplemented in <a class="el" href="../../dd/dc9/class_array_ptr_task.htm#ad75a86a3ec86ccaf55b22247249611b9">ArrayPtrTask&lt; ElemType &gt;</a>, <a class="el" href="../../d2/d35/classxii_after_save_document_task.htm#ad961839b994d0e176d875d17c8d440a0">xiiAfterSaveDocumentTask</a>, <a class="el" href="../../d5/deb/classxii_delegate_task.htm#a48fb65a2db29ac5494e52bf159b52ceb">xiiDelegateTask&lt; T &gt;</a>, <a class="el" href="../../d9/d9c/classxii_delegate_task_3_01void_01_4.htm#a21f63531c91600fc4e50094554e8611a">xiiDelegateTask&lt; void &gt;</a>, <a class="el" href="../../d1/d0e/classxii_resource_manager_worker_data_load.htm#a90f43cad405e64431fa8ac5d45f2b50d">xiiResourceManagerWorkerDataLoad</a>, <a class="el" href="../../d5/d53/classxii_resource_manager_worker_update_content.htm#a0a827fb7673dbcbbbeaacc25ab3fe13f">xiiResourceManagerWorkerUpdateContent</a>, <a class="el" href="../../de/d97/classxii_save_document_task.htm#a3299df509e6ff5d8f19a1a1c604aa266">xiiSaveDocumentTask</a>, and <a class="el" href="../../dd/d69/classxii_update_task.htm#ac4106cfa091378156b50c7d235f74e8a">xiiUpdateTask</a>.</p>

</div>
</div>
<a id="af1516532d9cffd0e5124411663e775e4" name="af1516532d9cffd0e5124411663e775e4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af1516532d9cffd0e5124411663e775e4">&#9670;&#160;</a></span>ExecuteWithMultiplicity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void xiiTask::ExecuteWithMultiplicity </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32</td>          <td class="paramname"><span class="paramname"><em>uiInvocation</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Override this to implement the task's supposed functionality. </p>
<p>This function is called for tasks that use multiplicity. A task that uses multiplicity is automatically run N times by the <a class="el" href="../../d1/dc7/classxii_task_system.htm" title="This system allows to automatically distribute tasks onto a number of worker threads.">xiiTaskSystem</a>, each time with an increasing invocation index. This allows to have a single task to handle something, but then decide dynamically how often to execute it, to subdivide the workload into multiple pieces. Since the same task is executed multiple times in parallel, tasks with multiplicity should not have any mutable state, which is why this function is const. </p>

<p>Reimplemented in <a class="el" href="../../dd/dc9/class_array_ptr_task.htm#a784fceb6babe6a6920059a0bfca1c47c">ArrayPtrTask&lt; ElemType &gt;</a>.</p>

</div>
</div>
<a id="af549d5e2dace8b610deb700610daabdb" name="af549d5e2dace8b610deb700610daabdb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af549d5e2dace8b610deb700610daabdb">&#9670;&#160;</a></span>GetMultiplicity()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiTask::GetMultiplicity </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#aa6fd03e64c6b45d06433def2d14b759b" title="Changes the multiplicity of this task.">SetMultiplicity</a> </dd></dl>

</div>
</div>
<a id="a5bfaf2e965bc45fe5710ceb4aea4d0d1" name="a5bfaf2e965bc45fe5710ceb4aea4d0d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5bfaf2e965bc45fe5710ceb4aea4d0d1">&#9670;&#160;</a></span>IsTaskFinished()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiTask::IsTaskFinished </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the task has been finished. This includes being canceled. </p>
<dl class="section note"><dt>Note</dt><dd>This function is only reliable when you KNOW that the task has not been reused. So that limits its usage to the time frame while the task is in use, and it should only be queried by code that actually manages when to reuse the task. If other code needs to be able to check whether a task is finished, you should give it the <a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm" title="Given out by xiiTaskSystem::CreateTaskGroup to identify a task group.">xiiTaskGroupID</a> of the task's group. That one can be used to query whether the group has finished, even minutes later. </dd></dl>

</div>
</div>
<a id="aa6fd03e64c6b45d06433def2d14b759b" name="aa6fd03e64c6b45d06433def2d14b759b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6fd03e64c6b45d06433def2d14b759b">&#9670;&#160;</a></span>SetMultiplicity()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTask::SetMultiplicity </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32</td>          <td class="paramname"><span class="paramname"><em>uiMultiplicity</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Changes the multiplicity of this task. </p>
<p>This has to be set before the task is scheduled, ie. before the task group that the task belongs to has all its dependencies fulfilled and has its tasks queued for execution. It is allowed to change the multiplicity after the task is added to the <a class="el" href="../../d1/dc7/classxii_task_system.htm" title="This system allows to automatically distribute tasks onto a number of worker threads.">xiiTaskSystem</a>, as long as the calling code guarantees to set this value in time.</p>
<p>A task that has a multiplicity of zero (the default) will have its <a class="el" href="#ae86de0539cc6ab496ecef3917a0b7565" title="Override this to implement the task&#39;s supposed functionality.">Execute()</a> function called exactly once. A task with a multiplicity of N will have its <a class="el" href="#af1516532d9cffd0e5124411663e775e4" title="Override this to implement the task&#39;s supposed functionality.">ExecuteWithMultiplicity()</a> function called exactly N times, potentially in parallel on multiple threads. Since N can be dynamically decided each frame, one can dynamically scale the amount of parallelism according to the workload. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/<a class="el" href="../../d5/dc5/_task_8h_source.htm">Task.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/<b>Task.cpp</b></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d3/d9b/classxii_task.htm">xiiTask</a></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:02:17 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>

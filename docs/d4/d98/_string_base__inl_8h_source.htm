<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Strings/Implementation/StringBase_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d4/d98/_string_base__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StringBase_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;XII_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;Derived&gt;::InternalGetData</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <span class="keywordflow">return</span> pDerived-&gt;GetData();</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;XII_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;Derived&gt;::InternalGetDataEnd</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keywordflow">return</span> pDerived-&gt;GetData() + pDerived-&gt;GetElementCount();</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;}</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;Derived&gt;::InternalGetElementCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keyword">const</span> Derived* pDerived = <span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Derived*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  <span class="keywordflow">return</span> pDerived-&gt;GetElementCount();</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;}</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00025"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a52ad52604f0b98226a0342393b8db662">   25</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a52ad52604f0b98226a0342393b8db662">xiiStringBase&lt;Derived&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#acb10982c595d5619ce53fdd89313202f">xiiStringUtils::IsNullOrEmpty</a>(InternalGetData()) || (InternalGetData() == InternalGetDataEnd());</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;}</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a5bf41eb3d6781a8aaff8a4d2f7f4df4f">   31</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a5bf41eb3d6781a8aaff8a4d2f7f4df4f">xiiStringBase&lt;Derived&gt;::StartsWith</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#afb2538341d8cd31778bebdff947e2a59">xiiStringUtils::StartsWith</a>(InternalGetData(), sStartsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sStartsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#aa4d582fedf5b825d1efd0dde2b25b556">   37</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#aa4d582fedf5b825d1efd0dde2b25b556">xiiStringBase&lt;Derived&gt;::StartsWith_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#aad408d8e65febe01930e200bfd6f73dd">xiiStringUtils::StartsWith_NoCase</a>(InternalGetData(), sStartsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sStartsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a59e350b8f45c88d18eacebc160e1b07f">   43</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a59e350b8f45c88d18eacebc160e1b07f">xiiStringBase&lt;Derived&gt;::EndsWith</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a45aff821fa89198e5f80f8b3754e35c8">xiiStringUtils::EndsWith</a>(InternalGetData(), sEndsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sEndsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a4016efe160cf9159193586c907d382d6">   49</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a4016efe160cf9159193586c907d382d6">xiiStringBase&lt;Derived&gt;::EndsWith_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#af760d3c50a964ef80a077e3a6c5c24f1">xiiStringUtils::EndsWith_NoCase</a>(InternalGetData(), sEndsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sEndsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#aa5238f8a363653f249eaaa5a97dc036d">   55</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm#aa5238f8a363653f249eaaa5a97dc036d">xiiStringBase&lt;Derived&gt;::FindSubString</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    szStartSearchAt = InternalGetData();</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  XII_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a0fa20e8fc3fdb98e0166ff5c1b6e83e8">xiiStringUtils::FindSubString</a>(szStartSearchAt, sStringToFind.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sStringToFind.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a1bc02e9477b8b4db57f52cb9fe5ed2cb">   66</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm#a1bc02e9477b8b4db57f52cb9fe5ed2cb">xiiStringBase&lt;Derived&gt;::FindSubString_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    szStartSearchAt = InternalGetData();</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  XII_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a1599c3f5fdec4d37af5595733e8a5cc5">xiiStringUtils::FindSubString_NoCase</a>(szStartSearchAt, sStringToFind.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sStringToFind.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#afad820068dbab7f0c94f8d34a4308600">   77</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm#afad820068dbab7f0c94f8d34a4308600">xiiStringBase&lt;Derived&gt;::FindLastSubString</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;    szStartSearchAt = InternalGetDataEnd();</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  XII_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()),</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                 <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a6b62f46028e90e2256247df03c4fcf80">xiiStringUtils::FindLastSubString</a>(InternalGetData(), sStringToFind.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), szStartSearchAt, InternalGetDataEnd(), sStringToFind.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;}</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a4ff1da418cd57f629e049c0cab04673c">   89</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm#a4ff1da418cd57f629e049c0cab04673c">xiiStringBase&lt;Derived&gt;::FindLastSubString_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    szStartSearchAt = InternalGetDataEnd();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  XII_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a8e6aad91c372195c7e565e3f281b55f9">xiiStringUtils::FindLastSubString_NoCase</a>(InternalGetData(), sStringToFind.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), szStartSearchAt, InternalGetDataEnd(), sStringToFind.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a5f5893d90cc94a9a187f08fa6c13ec34">  100</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm#a5f5893d90cc94a9a187f08fa6c13ec34">xiiStringBase&lt;Derived&gt;::FindWholeWord</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    szStartSearchAt = InternalGetData();</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  XII_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a071d71ef59f164b0c6039b7477c6c5ba">xiiStringUtils::FindWholeWord</a>(szStartSearchAt, szSearchFor, isDelimiterCB, InternalGetDataEnd());</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#ad5005429360824b1798bef85dea712cd">  111</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm#ad5005429360824b1798bef85dea712cd">xiiStringBase&lt;Derived&gt;::FindWholeWord_NoCase</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  <span class="keywordflow">if</span> (szStartSearchAt == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    szStartSearchAt = InternalGetData();</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  XII_ASSERT_DEV((szStartSearchAt &gt;= InternalGetData()) &amp;&amp; (szStartSearchAt &lt;= InternalGetDataEnd()), <span class="stringliteral">&quot;The given pointer to start searching at is not inside this strings valid range.&quot;</span>);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a914bb1b6d798187f4884d153f22d8946">xiiStringUtils::FindWholeWord_NoCase</a>(szStartSearchAt, szSearchFor, isDelimiterCB, InternalGetDataEnd());</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;}</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">  122</a></span>&#160;xiiInt32 <a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">xiiStringBase&lt;Derived&gt;::Compare</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#ac7f20a820fd23caf6e017547438cc44d">xiiStringUtils::Compare</a>(InternalGetData(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;}</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a3d435ef63aff0219d0f0668f37eef0a2">  128</a></span>&#160;xiiInt32 <a class="code" href="../../d2/d29/structxii_string_base.htm#a3d435ef63aff0219d0f0668f37eef0a2">xiiStringBase&lt;Derived&gt;::CompareN</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#aea128505cffde358c09361a71b9f8cb7">xiiStringUtils::CompareN</a>(InternalGetData(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), uiCharsToCompare, InternalGetDataEnd(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;}</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a8aff83ea5b80b6dc110a9e2924fedc7b">  134</a></span>&#160;xiiInt32 <a class="code" href="../../d2/d29/structxii_string_base.htm#a8aff83ea5b80b6dc110a9e2924fedc7b">xiiStringBase&lt;Derived&gt;::Compare_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a5304362cc805b0ae9cc78b00e056521f">xiiStringUtils::Compare_NoCase</a>(InternalGetData(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00140"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a66531b825a9378c78a6e2b411fe991d1">  140</a></span>&#160;xiiInt32 <a class="code" href="../../d2/d29/structxii_string_base.htm#a66531b825a9378c78a6e2b411fe991d1">xiiStringBase&lt;Derived&gt;::CompareN_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a80aa4948244d9ec7aec070ebd2ff5dd4">xiiStringUtils::CompareN_NoCase</a>(InternalGetData(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), uiCharsToCompare, InternalGetDataEnd(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00146"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">  146</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">xiiStringBase&lt;Derived&gt;::IsEqual</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a39bb50553ad3fbca2c342abbca08fee5">xiiStringUtils::IsEqual</a>(InternalGetData(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a546fd06f96d7467ecbfe3f1c6d7a2d68">  152</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a546fd06f96d7467ecbfe3f1c6d7a2d68">xiiStringBase&lt;Derived&gt;::IsEqualN</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a09ca4eeaceb90374a7e6af19b56eec25">xiiStringUtils::IsEqualN</a>(InternalGetData(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), uiCharsToCompare, InternalGetDataEnd(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;}</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#aec455922ec33da6c7a57d5a9d8475c11">  158</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#aec455922ec33da6c7a57d5a9d8475c11">xiiStringBase&lt;Derived&gt;::IsEqual_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a1dc8270bac3a9e25cc33ddbe2e54befd">xiiStringUtils::IsEqual_NoCase</a>(InternalGetData(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), InternalGetDataEnd(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;}</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a43ff7190c8ec4e85d323b1a08e2093da">  164</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a43ff7190c8ec4e85d323b1a08e2093da">xiiStringBase&lt;Derived&gt;::IsEqualN_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare)<span class="keyword"> const</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a53cc8803004fb5a140dc5ff761a450ee">xiiStringUtils::IsEqualN_NoCase</a>(InternalGetData(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), uiCharsToCompare, InternalGetDataEnd(), sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#ae818af714c3eb8b52272c05b44d75b22">  170</a></span>&#160;<span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../d2/d29/structxii_string_base.htm#ae818af714c3eb8b52272c05b44d75b22">xiiStringBase&lt;Derived&gt;::ComputeCharacterPosition</a>(xiiUInt32 uiCharacterIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* pos = InternalGetData();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <a class="code" href="../../de/d05/classxii_unicode_utils.htm#ae3e0d757861751b2c145821e42cb7815">xiiUnicodeUtils::MoveToNextUtf8</a>(pos, InternalGetDataEnd(), uiCharacterIndex);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordflow">return</span> pos;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a66c88bf405b01062374937660dbb0cf5">  178</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="../../de/d81/structxii_string_iterator.htm">xiiStringBase&lt;Derived&gt;::iterator</a> <a class="code" href="../../d2/d29/structxii_string_base.htm#a66c88bf405b01062374937660dbb0cf5">xiiStringBase&lt;Derived&gt;::GetIteratorFront</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordflow">return</span> begin(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;}</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a540637e5f22defeb32af069704c700d8">  184</a></span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d8/d78/structxii_string_reverse_iterator.htm">xiiStringBase&lt;Derived&gt;::reverse_iterator</a> <a class="code" href="../../d2/d29/structxii_string_base.htm#a540637e5f22defeb32af069704c700d8">xiiStringBase&lt;Derived&gt;::GetIteratorBack</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keywordflow">return</span> rbegin(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;}</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;{</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">IsEqual</a>(rhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#a6d45f20d65204861deb1bed94305408a">GetView</a>());</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">IsEqual</a>(lhs);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;{</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;{</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keywordflow">return</span> !lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;}</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;{</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keywordflow">return</span> !rhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">IsEqual</a>(lhs);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;}</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;{</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keywordflow">return</span> !lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(rhs) &lt; 0;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;}</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(lhs) &gt; 0;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(rhs) &lt; 0;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;{</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(rhs) &gt; 0;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(lhs) &lt; 0;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;}</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;{</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(rhs) &gt; 0;</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;}</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;{</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#ac7f20a820fd23caf6e017547438cc44d">xiiStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &lt;= 0;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;{</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(lhs) &gt;= 0;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;}</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;{</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(rhs) &lt;= 0;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;}</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs, <span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;{</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#ac7f20a820fd23caf6e017547438cc44d">xiiStringUtils::Compare</a>(lhs.InternalGetData(), rhs.InternalGetData(), lhs.InternalGetDataEnd(), rhs.InternalGetDataEnd()) &gt;= 0;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;}</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedRhs&gt;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <span class="keywordtype">char</span>* lhs, <span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedRhs&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;{</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="keywordflow">return</span> rhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(lhs) &lt;= 0;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;}</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<span class="keyword">const</span> <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;</a>&amp; lhs, <span class="keyword">const</span> <span class="keywordtype">char</span>* rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;{</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a>(rhs) &gt;= 0;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> DerivedLhs&gt;</div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a654d0fd5e7d4f179cc8df5cbce2aab50">  298</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt;DerivedLhs&gt;::operator</a> <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(InternalGetData(), InternalGetElementCount());</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;}</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a6d45f20d65204861deb1bed94305408a">  304</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> <a class="code" href="../../d2/d29/structxii_string_base.htm#a6d45f20d65204861deb1bed94305408a">xiiStringBase&lt;Derived&gt;::GetView</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(InternalGetData(), InternalGetElementCount());</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;}</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00311"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a3c8e89db84402b1901a58bd0c7faaaac">  311</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a3c8e89db84402b1901a58bd0c7faaaac">xiiStringBase&lt;Derived&gt;::Split</a>(<span class="keywordtype">bool</span> bReturnEmptyStrings, Container&amp; ref_output, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator1, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator2 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator3 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator4 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator5 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator6 <span class="comment">/*= nullptr*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  GetView().Split(bReturnEmptyStrings, ref_output, szSeparator1, szSeparator2, szSeparator3, szSeparator4, szSeparator5, szSeparator6);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;}</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00317"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#abdf4b32536d34fd6e30a2343504b5f61">  317</a></span>&#160;<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> <a class="code" href="../../d2/d29/structxii_string_base.htm#abdf4b32536d34fd6e30a2343504b5f61">xiiStringBase&lt;Derived&gt;::GetRootedPathRootName</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="keywordflow">return</span> GetView().<a class="code" href="../../da/d9d/structxii_string_view.htm#a4bec6094e495c1e25b46d9c7f38a7db6">GetRootedPathRootName</a>();</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00323"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#acebb3080896bb6ff7ef2ab5d17332678">  323</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#acebb3080896bb6ff7ef2ab5d17332678">xiiStringBase&lt;Derived&gt;::IsRootedPath</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordflow">return</span> GetView().IsRootedPath();</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;}</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00329"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a080a07482e950dd521c144ad5e5df772">  329</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a080a07482e950dd521c144ad5e5df772">xiiStringBase&lt;Derived&gt;::IsRelativePath</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keywordflow">return</span> GetView().IsRelativePath();</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160; </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a101e9caaeb85898455be66067f6cbf24">  335</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a101e9caaeb85898455be66067f6cbf24">xiiStringBase&lt;Derived&gt;::IsAbsolutePath</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordflow">return</span> GetView().IsAbsolutePath();</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;}</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00341"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a6daecf61eb300775ecaced2e95c1ed54">  341</a></span>&#160;<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> <a class="code" href="../../d2/d29/structxii_string_base.htm#a6daecf61eb300775ecaced2e95c1ed54">xiiStringBase&lt;Derived&gt;::GetFileDirectory</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  <span class="keywordflow">return</span> GetView().<a class="code" href="../../da/d9d/structxii_string_view.htm#afab8553c059317de4e68b853baeeaf69">GetFileDirectory</a>();</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;}</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00347"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a3fae3e4e1da823bd30d5322872eda70e">  347</a></span>&#160;<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> <a class="code" href="../../d2/d29/structxii_string_base.htm#a3fae3e4e1da823bd30d5322872eda70e">xiiStringBase&lt;Derived&gt;::GetFileNameAndExtension</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  <span class="keywordflow">return</span> GetView().<a class="code" href="../../da/d9d/structxii_string_view.htm#a67a676b1b1f7614560561942bb4449fd">GetFileNameAndExtension</a>();</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;}</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00353"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#acadc8a4b5aab5156ac33af352c7f3410">  353</a></span>&#160;<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> <a class="code" href="../../d2/d29/structxii_string_base.htm#acadc8a4b5aab5156ac33af352c7f3410">xiiStringBase&lt;Derived&gt;::GetFileName</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;  <span class="keywordflow">return</span> GetView().<a class="code" href="../../da/d9d/structxii_string_view.htm#a79c1119f4913054a557031e4ba7411ad">GetFileName</a>();</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;}</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a1ef1a78330f1b3a875e5979dc640f3e2">  359</a></span>&#160;<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> <a class="code" href="../../d2/d29/structxii_string_base.htm#a1ef1a78330f1b3a875e5979dc640f3e2">xiiStringBase&lt;Derived&gt;::GetFileExtension</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  <span class="keywordflow">return</span> GetView().<a class="code" href="../../da/d9d/structxii_string_view.htm#a11b91399b06812b6d608aef8e3964eee">GetFileExtension</a>();</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;}</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00365"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a37dd75fbe694bc0d922d50a4ec0ff277">  365</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a37dd75fbe694bc0d922d50a4ec0ff277">xiiStringBase&lt;Derived&gt;::HasExtension</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sExtension)<span class="keyword"> const</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="keywordflow">return</span> GetView().HasExtension(sExtension);</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;}</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Derived&gt;</div>
<div class="line"><a name="l00371"></a><span class="lineno"><a class="line" href="../../d2/d29/structxii_string_base.htm#a492be752bac284a275f78166b67e1406">  371</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d2/d29/structxii_string_base.htm#a492be752bac284a275f78166b67e1406">xiiStringBase&lt;Derived&gt;::HasAnyExtension</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="keywordflow">return</span> GetView().HasAnyExtension();</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructxii_string_base_htm_ad5005429360824b1798bef85dea712cd"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#ad5005429360824b1798bef85dea712cd">xiiStringBase::FindWholeWord_NoCase</a></div><div class="ttdeci">const char * FindWholeWord_NoCase(const char *szSearchFor, xiiStringUtils::XII_CHARACTER_FILTER isDelimiterCB, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:111</div></div>
<div class="ttc" id="astructxii_string_base_htm_a540637e5f22defeb32af069704c700d8"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a540637e5f22defeb32af069704c700d8">xiiStringBase::GetIteratorBack</a></div><div class="ttdeci">reverse_iterator GetIteratorBack() const</div><div class="ttdoc">Returns an iterator to this string, which points to the very last character (NOT the end).</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:184</div></div>
<div class="ttc" id="astructxii_string_base_htm_a080a07482e950dd521c144ad5e5df772"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a080a07482e950dd521c144ad5e5df772">xiiStringBase::IsRelativePath</a></div><div class="ttdeci">bool IsRelativePath() const</div><div class="ttdoc">Returns true, if the given path represents a relative path on the current OS.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:329</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a6b62f46028e90e2256247df03c4fcf80"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a6b62f46028e90e2256247df03c4fcf80">xiiStringUtils::FindLastSubString</a></div><div class="ttdeci">static const char * FindLastSubString(const char *szSource, const char *szStringToFind, const char *szStartSearchAt=nullptr, const char *pSourceEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the last occurrence of szStringToFind in szSource before szStartSearchAt.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:651</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a09ca4eeaceb90374a7e6af19b56eec25"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a09ca4eeaceb90374a7e6af19b56eec25">xiiStringUtils::IsEqualN</a></div><div class="ttdeci">static bool IsEqualN(const char *pString1, const char *pString2, xiiUInt32 uiCharsToCompare, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise) up to the n-th character.</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:128</div></div>
<div class="ttc" id="astructxii_string_base_htm_a101e9caaeb85898455be66067f6cbf24"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a101e9caaeb85898455be66067f6cbf24">xiiStringBase::IsAbsolutePath</a></div><div class="ttdeci">bool IsAbsolutePath() const</div><div class="ttdoc">Returns true, if the given path represents an absolute path on the current OS.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:335</div></div>
<div class="ttc" id="astructxii_string_base_htm_a5bf41eb3d6781a8aaff8a4d2f7f4df4f"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a5bf41eb3d6781a8aaff8a4d2f7f4df4f">xiiStringBase::StartsWith</a></div><div class="ttdeci">bool StartsWith(xiiStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:31</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_af760d3c50a964ef80a077e3a6c5c24f1"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#af760d3c50a964ef80a077e3a6c5c24f1">xiiStringUtils::EndsWith_NoCase</a></div><div class="ttdeci">static bool EndsWith_NoCase(const char *szString, const char *szEndsWith, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:579</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a39bb50553ad3fbca2c342abbca08fee5"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a39bb50553ad3fbca2c342abbca08fee5">xiiStringUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const char *pString1, const char *pString2, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:123</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a071d71ef59f164b0c6039b7477c6c5ba"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a071d71ef59f164b0c6039b7477c6c5ba">xiiStringUtils::FindWholeWord</a></div><div class="ttdeci">static const char * FindWholeWord(const char *szString, const char *szSearchFor, XII_CHARACTER_FILTER isDelimiterCB, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches szString for the word szSearchFor. If IsDelimiterCB returns true for both characters in fron...</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:694</div></div>
<div class="ttc" id="aclassxii_unicode_utils_htm_ae3e0d757861751b2c145821e42cb7815"><div class="ttname"><a href="../../de/d05/classxii_unicode_utils.htm#ae3e0d757861751b2c145821e42cb7815">xiiUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static void MoveToNextUtf8(const char *&amp;ref_szUtf8, xiiUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:197</div></div>
<div class="ttc" id="astructxii_string_base_htm"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm">xiiStringBase</a></div><div class="ttdoc">Base class for strings, which implements all read-only string functions.</div><div class="ttdef"><b>Definition:</b> StringBase.h:13</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a0fa20e8fc3fdb98e0166ff5c1b6e83e8"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a0fa20e8fc3fdb98e0166ff5c1b6e83e8">xiiStringUtils::FindSubString</a></div><div class="ttdeci">static const char * FindSubString(const char *szSource, const char *szStringToFind, const char *pSourceEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:612</div></div>
<div class="ttc" id="astructxii_string_base_htm_a492be752bac284a275f78166b67e1406"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a492be752bac284a275f78166b67e1406">xiiStringBase::HasAnyExtension</a></div><div class="ttdeci">bool HasAnyExtension() const</div><div class="ttdoc">Checks whether the given path has any file extension.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:371</div></div>
<div class="ttc" id="astructxii_string_base_htm_a66c88bf405b01062374937660dbb0cf5"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a66c88bf405b01062374937660dbb0cf5">xiiStringBase::GetIteratorFront</a></div><div class="ttdeci">iterator GetIteratorFront() const</div><div class="ttdoc">Returns an iterator to this string, which points to the very first character.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:178</div></div>
<div class="ttc" id="astructxii_string_base_htm_a52ad52604f0b98226a0342393b8db662"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a52ad52604f0b98226a0342393b8db662">xiiStringBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether the string is an empty string.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:25</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a80aa4948244d9ec7aec070ebd2ff5dd4"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a80aa4948244d9ec7aec070ebd2ff5dd4">xiiStringUtils::CompareN_NoCase</a></div><div class="ttdeci">static xiiInt32 CompareN_NoCase(const char *pString1, const char *pString2, xiiUInt32 uiCharsToCompare, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares the first uiCharsToCompare characters of the two strings for equality, case-insensitive.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:369</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a1dc8270bac3a9e25cc33ddbe2e54befd"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a1dc8270bac3a9e25cc33ddbe2e54befd">xiiStringUtils::IsEqual_NoCase</a></div><div class="ttdeci">static bool IsEqual_NoCase(const char *pString1, const char *pString2, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:133</div></div>
<div class="ttc" id="astructxii_string_base_htm_a6d45f20d65204861deb1bed94305408a"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a6d45f20d65204861deb1bed94305408a">xiiStringBase::GetView</a></div><div class="ttdeci">xiiStringView GetView() const</div><div class="ttdoc">Returns a string view to this string's data.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:304</div></div>
<div class="ttc" id="astructxii_string_view_htm_afab8553c059317de4e68b853baeeaf69"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#afab8553c059317de4e68b853baeeaf69">xiiStringView::GetFileDirectory</a></div><div class="ttdeci">xiiStringView GetFileDirectory() const</div><div class="ttdoc">Returns the directory of the given file, which is the substring up to the last path separator.</div><div class="ttdef"><b>Definition:</b> StringView.cpp:231</div></div>
<div class="ttc" id="astructxii_string_base_htm_a6daecf61eb300775ecaced2e95c1ed54"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a6daecf61eb300775ecaced2e95c1ed54">xiiStringBase::GetFileDirectory</a></div><div class="ttdeci">xiiStringView GetFileDirectory() const</div><div class="ttdoc">Returns the directory of the given file, which is the substring up to the last path separator.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:341</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_aad408d8e65febe01930e200bfd6f73dd"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#aad408d8e65febe01930e200bfd6f73dd">xiiStringUtils::StartsWith_NoCase</a></div><div class="ttdeci">static bool StartsWith_NoCase(const char *szString, const char *szStartsWith, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:539</div></div>
<div class="ttc" id="astructxii_string_view_htm_a11b91399b06812b6d608aef8e3964eee"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a11b91399b06812b6d608aef8e3964eee">xiiStringView::GetFileExtension</a></div><div class="ttdeci">xiiStringView GetFileExtension() const</div><div class="ttdoc">Returns the file extension of the given path. Will be empty, if the path does not end with a proper e...</div><div class="ttdef"><b>Definition:</b> StringView.cpp:216</div></div>
<div class="ttc" id="astructxii_string_base_htm_a8aff83ea5b80b6dc110a9e2924fedc7b"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a8aff83ea5b80b6dc110a9e2924fedc7b">xiiStringBase::Compare_NoCase</a></div><div class="ttdeci">xiiInt32 Compare_NoCase(xiiStringView sOther) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:134</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a8e6aad91c372195c7e565e3f281b55f9"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a8e6aad91c372195c7e565e3f281b55f9">xiiStringUtils::FindLastSubString_NoCase</a></div><div class="ttdeci">static const char * FindLastSubString_NoCase(const char *szSource, const char *szStringToFind, const char *szStartSearchAt=nullptr, const char *pSourceEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the last occurrence of szStringToFind in szSource before szStartSearchAt....</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:673</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_ac7f20a820fd23caf6e017547438cc44d"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#ac7f20a820fd23caf6e017547438cc44d">xiiStringUtils::Compare</a></div><div class="ttdeci">static xiiInt32 Compare(const char *pString1, const char *pString2, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares two strings for equality.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:263</div></div>
<div class="ttc" id="astructxii_string_base_htm_ae818af714c3eb8b52272c05b44d75b22"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#ae818af714c3eb8b52272c05b44d75b22">xiiStringBase::ComputeCharacterPosition</a></div><div class="ttdeci">const char * ComputeCharacterPosition(xiiUInt32 uiCharacterIndex) const</div><div class="ttdoc">Computes the pointer to the n-th character in the string. This is a linear search from the start.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:170</div></div>
<div class="ttc" id="astructxii_string_base_htm_a9c217f8e171dabae88d440998890ba18"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">xiiStringBase::IsEqual</a></div><div class="ttdeci">bool IsEqual(xiiStringView sOther) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:146</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a53cc8803004fb5a140dc5ff761a450ee"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a53cc8803004fb5a140dc5ff761a450ee">xiiStringUtils::IsEqualN_NoCase</a></div><div class="ttdeci">static bool IsEqualN_NoCase(const char *pString1, const char *pString2, xiiUInt32 uiCharsToCompare, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive) up to the n-th character.</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:138</div></div>
<div class="ttc" id="astructxii_string_base_htm_a3d435ef63aff0219d0f0668f37eef0a2"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a3d435ef63aff0219d0f0668f37eef0a2">xiiStringBase::CompareN</a></div><div class="ttdeci">xiiInt32 CompareN(xiiStringView sOther, xiiUInt32 uiCharsToCompare) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:128</div></div>
<div class="ttc" id="astructxii_string_base_htm_aec455922ec33da6c7a57d5a9d8475c11"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#aec455922ec33da6c7a57d5a9d8475c11">xiiStringBase::IsEqual_NoCase</a></div><div class="ttdeci">bool IsEqual_NoCase(xiiStringView sOther) const</div><div class="ttdoc">Compares this string with the other string for equality.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:158</div></div>
<div class="ttc" id="astructxii_string_base_htm_acadc8a4b5aab5156ac33af352c7f3410"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#acadc8a4b5aab5156ac33af352c7f3410">xiiStringBase::GetFileName</a></div><div class="ttdeci">xiiStringView GetFileName() const</div><div class="ttdoc">Returns the file name of a path, excluding the path and extension.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:353</div></div>
<div class="ttc" id="astructxii_string_view_htm"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></div><div class="ttdoc">xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...</div><div class="ttdef"><b>Definition:</b> StringView.h:23</div></div>
<div class="ttc" id="astructxii_string_base_htm_aa5238f8a363653f249eaaa5a97dc036d"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#aa5238f8a363653f249eaaa5a97dc036d">xiiStringBase::FindSubString</a></div><div class="ttdeci">const char * FindSubString(xiiStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:55</div></div>
<div class="ttc" id="astructxii_string_base_htm_abdf4b32536d34fd6e30a2343504b5f61"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#abdf4b32536d34fd6e30a2343504b5f61">xiiStringBase::GetRootedPathRootName</a></div><div class="ttdeci">xiiStringView GetRootedPathRootName() const</div><div class="ttdoc">Extracts the root name from a rooted path.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:317</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_afb2538341d8cd31778bebdff947e2a59"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#afb2538341d8cd31778bebdff947e2a59">xiiStringUtils::StartsWith</a></div><div class="ttdeci">static bool StartsWith(const char *szString, const char *szStartsWith, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:515</div></div>
<div class="ttc" id="astructxii_string_view_htm_a67a676b1b1f7614560561942bb4449fd"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a67a676b1b1f7614560561942bb4449fd">xiiStringView::GetFileNameAndExtension</a></div><div class="ttdeci">xiiStringView GetFileNameAndExtension() const</div><div class="ttdoc">Returns the substring that represents the file name including the file extension.</div><div class="ttdef"><b>Definition:</b> StringView.cpp:226</div></div>
<div class="ttc" id="astructxii_string_iterator_htm"><div class="ttname"><a href="../../de/d81/structxii_string_iterator.htm">xiiStringIterator</a></div><div class="ttdoc">STL forward iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition:</b> StringIterator.h:7</div></div>
<div class="ttc" id="astructxii_string_base_htm_a43ff7190c8ec4e85d323b1a08e2093da"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a43ff7190c8ec4e85d323b1a08e2093da">xiiStringBase::IsEqualN_NoCase</a></div><div class="ttdeci">bool IsEqualN_NoCase(xiiStringView sOther, xiiUInt32 uiCharsToCompare) const</div><div class="ttdoc">Compares up to a given number of characters of this string with the other string for equality....</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:164</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a45aff821fa89198e5f80f8b3754e35c8"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a45aff821fa89198e5f80f8b3754e35c8">xiiStringUtils::EndsWith</a></div><div class="ttdeci">static bool EndsWith(const char *szString, const char *szEndsWith, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:563</div></div>
<div class="ttc" id="astructxii_string_base_htm_acebb3080896bb6ff7ef2ab5d17332678"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#acebb3080896bb6ff7ef2ab5d17332678">xiiStringBase::IsRootedPath</a></div><div class="ttdeci">bool IsRootedPath() const</div><div class="ttdoc">Returns true, if the given path represents a 'rooted' path. See xiiFileSystem for details.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:323</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a5304362cc805b0ae9cc78b00e056521f"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a5304362cc805b0ae9cc78b00e056521f">xiiStringUtils::Compare_NoCase</a></div><div class="ttdeci">static xiiInt32 Compare_NoCase(const char *pString1, const char *pString2, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares two strings for equality, case-insensitive.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:335</div></div>
<div class="ttc" id="astructxii_string_base_htm_a5f5893d90cc94a9a187f08fa6c13ec34"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a5f5893d90cc94a9a187f08fa6c13ec34">xiiStringBase::FindWholeWord</a></div><div class="ttdeci">const char * FindWholeWord(const char *szSearchFor, xiiStringUtils::XII_CHARACTER_FILTER isDelimiterCB, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:100</div></div>
<div class="ttc" id="astructxii_string_base_htm_a66531b825a9378c78a6e2b411fe991d1"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a66531b825a9378c78a6e2b411fe991d1">xiiStringBase::CompareN_NoCase</a></div><div class="ttdeci">xiiInt32 CompareN_NoCase(xiiStringView sOther, xiiUInt32 uiCharsToCompare) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:140</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a914bb1b6d798187f4884d153f22d8946"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a914bb1b6d798187f4884d153f22d8946">xiiStringUtils::FindWholeWord_NoCase</a></div><div class="ttdeci">static const char * FindWholeWord_NoCase(const char *szString, const char *szSearchFor, XII_CHARACTER_FILTER isDelimiterCB, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches szString for the word szSearchFor. If IsDelimiterCB returns true for both characters in fron...</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:724</div></div>
<div class="ttc" id="astructxii_string_base_htm_a1ef1a78330f1b3a875e5979dc640f3e2"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a1ef1a78330f1b3a875e5979dc640f3e2">xiiStringBase::GetFileExtension</a></div><div class="ttdeci">xiiStringView GetFileExtension() const</div><div class="ttdoc">Returns the file extension of the given path. Will be empty, if the path does not end with a proper e...</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:359</div></div>
<div class="ttc" id="astructxii_string_reverse_iterator_htm"><div class="ttname"><a href="../../d8/d78/structxii_string_reverse_iterator.htm">xiiStringReverseIterator</a></div><div class="ttdoc">STL reverse iterator used by all string classes. Iterates over unicode characters....</div><div class="ttdef"><b>Definition:</b> StringIterator.h:162</div></div>
<div class="ttc" id="astructxii_string_view_htm_a79c1119f4913054a557031e4ba7411ad"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a79c1119f4913054a557031e4ba7411ad">xiiStringView::GetFileName</a></div><div class="ttdeci">xiiStringView GetFileName() const</div><div class="ttdoc">Returns the file name of a path, excluding the path and extension.</div><div class="ttdef"><b>Definition:</b> StringView.cpp:221</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_acb10982c595d5619ce53fdd89313202f"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#acb10982c595d5619ce53fdd89313202f">xiiStringUtils::IsNullOrEmpty</a></div><div class="ttdeci">static constexpr bool IsNullOrEmpty(const T *pString)</div><div class="ttdoc">Returns true, if the given string is a nullptr pointer or a string that immediately terminates with a...</div></div>
<div class="ttc" id="astructxii_string_view_htm_a4bec6094e495c1e25b46d9c7f38a7db6"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a4bec6094e495c1e25b46d9c7f38a7db6">xiiStringView::GetRootedPathRootName</a></div><div class="ttdeci">xiiStringView GetRootedPathRootName() const</div><div class="ttdoc">Extracts the root name from a rooted path.</div><div class="ttdef"><b>Definition:</b> StringView.cpp:251</div></div>
<div class="ttc" id="astructxii_string_base_htm_a37dd75fbe694bc0d922d50a4ec0ff277"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a37dd75fbe694bc0d922d50a4ec0ff277">xiiStringBase::HasExtension</a></div><div class="ttdeci">bool HasExtension(xiiStringView sExtension) const</div><div class="ttdoc">Checks whether the given path ends with the given extension. szExtension should start with a '....</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:365</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_af474cd805cbd076c00d508adacd057bd"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a></div><div class="ttdeci">bool(*)(xiiUInt32 uiChar) XII_CHARACTER_FILTER</div><div class="ttdoc">Function Definition for a function that determines whether a (Utf32) character belongs to a certain c...</div><div class="ttdef"><b>Definition:</b> StringUtils.h:206</div></div>
<div class="ttc" id="astructxii_string_base_htm_a59e350b8f45c88d18eacebc160e1b07f"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a59e350b8f45c88d18eacebc160e1b07f">xiiStringBase::EndsWith</a></div><div class="ttdeci">bool EndsWith(xiiStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:43</div></div>
<div class="ttc" id="astructxii_string_base_htm_afad820068dbab7f0c94f8d34a4308600"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#afad820068dbab7f0c94f8d34a4308600">xiiStringBase::FindLastSubString</a></div><div class="ttdeci">const char * FindLastSubString(xiiStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:77</div></div>
<div class="ttc" id="astructxii_string_base_htm_a1bc02e9477b8b4db57f52cb9fe5ed2cb"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a1bc02e9477b8b4db57f52cb9fe5ed2cb">xiiStringBase::FindSubString_NoCase</a></div><div class="ttdeci">const char * FindSubString_NoCase(xiiStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:66</div></div>
<div class="ttc" id="astructxii_string_base_htm_a4ff1da418cd57f629e049c0cab04673c"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a4ff1da418cd57f629e049c0cab04673c">xiiStringBase::FindLastSubString_NoCase</a></div><div class="ttdeci">const char * FindLastSubString_NoCase(xiiStringView sStringToFind, const char *szStartSearchAt=nullptr) const</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:89</div></div>
<div class="ttc" id="astructxii_string_base_htm_a546fd06f96d7467ecbfe3f1c6d7a2d68"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a546fd06f96d7467ecbfe3f1c6d7a2d68">xiiStringBase::IsEqualN</a></div><div class="ttdeci">bool IsEqualN(xiiStringView sOther, xiiUInt32 uiCharsToCompare) const</div><div class="ttdoc">Compares up to a given number of characters of this string with the other string for equality....</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:152</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_aea128505cffde358c09361a71b9f8cb7"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#aea128505cffde358c09361a71b9f8cb7">xiiStringUtils::CompareN</a></div><div class="ttdeci">static xiiInt32 CompareN(const char *pString1, const char *pString2, xiiUInt32 uiCharsToCompare, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Compares the first uiCharsToCompare characters of the two strings for equality.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:292</div></div>
<div class="ttc" id="astructxii_string_base_htm_aa4d582fedf5b825d1efd0dde2b25b556"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#aa4d582fedf5b825d1efd0dde2b25b556">xiiStringBase::StartsWith_NoCase</a></div><div class="ttdeci">bool StartsWith_NoCase(xiiStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string. Case insensitive.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:37</div></div>
<div class="ttc" id="astructxii_string_base_htm_ae27a79e330beec66d9d813022e83cb69"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">xiiStringBase::Compare</a></div><div class="ttdeci">xiiInt32 Compare(xiiStringView sOther) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:122</div></div>
<div class="ttc" id="astructxii_string_base_htm_a3c8e89db84402b1901a58bd0c7faaaac"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a3c8e89db84402b1901a58bd0c7faaaac">xiiStringBase::Split</a></div><div class="ttdeci">void Split(bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</div><div class="ttdoc">Fills the given container with xiiStringView's which represent each found substring....</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:311</div></div>
<div class="ttc" id="astructxii_string_base_htm_a3fae3e4e1da823bd30d5322872eda70e"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a3fae3e4e1da823bd30d5322872eda70e">xiiStringBase::GetFileNameAndExtension</a></div><div class="ttdeci">xiiStringView GetFileNameAndExtension() const</div><div class="ttdoc">Returns the substring that represents the file name including the file extension.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:347</div></div>
<div class="ttc" id="astructxii_string_base_htm_a4016efe160cf9159193586c907d382d6"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a4016efe160cf9159193586c907d382d6">xiiStringBase::EndsWith_NoCase</a></div><div class="ttdeci">bool EndsWith_NoCase(xiiStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string. Case insensitive.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:49</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a1599c3f5fdec4d37af5595733e8a5cc5"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a1599c3f5fdec4d37af5595733e8a5cc5">xiiStringUtils::FindSubString_NoCase</a></div><div class="ttdeci">static const char * FindSubString_NoCase(const char *szSource, const char *szStringToFind, const char *pSourceEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:631</div></div>
<div class="ttc" id="astructxii_string_view_htm_a65d3c651c35878985c1a637a45ce9bd1"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">xiiStringView::GetStartPointer</a></div><div class="ttdeci">const char * GetStartPointer() const</div><div class="ttdoc">Returns the start of the view range.</div><div class="ttdef"><b>Definition:</b> StringView.h:92</div></div>
<div class="ttc" id="astructxii_string_view_htm_aa3e949949e0bfaa74f35eacd56e040a6"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">xiiStringView::GetEndPointer</a></div><div class="ttdeci">const char * GetEndPointer() const</div><div class="ttdoc">Returns the end of the view range. This will point to the byte AFTER the last character.</div><div class="ttdef"><b>Definition:</b> StringView.h:98</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b0d9e1007714c8956662e529025ab552.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_92c52eb4981d7c3a6633b9c574fc9e8f.htm">Implementation</a></li><li class="navelem"><b>StringBase_inl.h</b></li>
    <li class="footer">Generated on Sat Aug 5 2023 14:55:10 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiStringBuilder Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d4/dbb/classxii_string_builder.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d5/d86/classxii_string_builder-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiStringBuilder Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a> is a class that is meant for creating and modifying strings.  
 <a href="../../d4/dbb/classxii_string_builder.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for xiiStringBuilder:</div>
<div class="dyncontent">
<div class="center"><img src="../../d6/d89/classxii_string_builder__inherit__graph.png" border="0" usemap="#xii_string_builder_inherit__map" alt="Inheritance graph"/></div>
<map name="xii_string_builder_inherit__map" id="xii_string_builder_inherit__map">
<area shape="rect" title="xiiStringBuilder is a class that is meant for creating and modifying strings." alt="" coords="33,169,155,196"/>
<area shape="rect" href="../../d2/d29/structxii_string_base.htm" title=" " alt="" coords="5,80,183,121"/>
<area shape="rect" href="../../d5/d12/structxii_this_is_a_string.htm" title="Base class which marks a class as containing string data." alt="" coords="33,5,155,32"/>
</map>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a3918732022fd3cd6e8c9124c7ec4aae6"><td class="memItemLeft" align="right" valign="top"><a id="a3918732022fd3cd6e8c9124c7ec4aae6"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a3918732022fd3cd6e8c9124c7ec4aae6">xiiStringBuilder</a> (<a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator=<a class="el" href="../../dd/daf/classxii_foundation.htm#a40d4e876d8aa817b36d04d0cac497fb8">xiiFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a3918732022fd3cd6e8c9124c7ec4aae6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the string to be empty. No data is allocated, but the <a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a> ALWAYS creates an array on the stack. <br /></td></tr>
<tr class="separator:a3918732022fd3cd6e8c9124c7ec4aae6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec8c7db8bbe645169d0c0b44ac1a5a9e"><td class="memItemLeft" align="right" valign="top"><a id="aec8c7db8bbe645169d0c0b44ac1a5a9e"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aec8c7db8bbe645169d0c0b44ac1a5a9e">xiiStringBuilder</a> (const <a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:aec8c7db8bbe645169d0c0b44ac1a5a9e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:aec8c7db8bbe645169d0c0b44ac1a5a9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a253afdba78f9d73562ab3df95fe4290b"><td class="memItemLeft" align="right" valign="top"><a id="a253afdba78f9d73562ab3df95fe4290b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a253afdba78f9d73562ab3df95fe4290b">xiiStringBuilder</a> (<a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:a253afdba78f9d73562ab3df95fe4290b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a253afdba78f9d73562ab3df95fe4290b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6306bb897169fdf80b0e23db3500d448"><td class="memTemplParams" colspan="2"><a id="a6306bb897169fdf80b0e23db3500d448"></a>
template&lt;xiiUInt16 Size&gt; </td></tr>
<tr class="memitem:a6306bb897169fdf80b0e23db3500d448"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a6306bb897169fdf80b0e23db3500d448">xiiStringBuilder</a> (const <a class="el" href="../../df/d4f/structxii_hybrid_string_base.htm">xiiHybridStringBase</a>&lt; Size &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a6306bb897169fdf80b0e23db3500d448"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a6306bb897169fdf80b0e23db3500d448"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adce1d8a490a101786c7e66834ca77b93"><td class="memTemplParams" colspan="2"><a id="adce1d8a490a101786c7e66834ca77b93"></a>
template&lt;xiiUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:adce1d8a490a101786c7e66834ca77b93"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#adce1d8a490a101786c7e66834ca77b93">xiiStringBuilder</a> (const <a class="el" href="../../df/dfb/structxii_hybrid_string.htm">xiiHybridString</a>&lt; Size, A &gt; &amp;rhs)</td></tr>
<tr class="memdesc:adce1d8a490a101786c7e66834ca77b93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:adce1d8a490a101786c7e66834ca77b93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c044d863e4c2ceccf8ea36a364b3aad"><td class="memTemplParams" colspan="2"><a id="a0c044d863e4c2ceccf8ea36a364b3aad"></a>
template&lt;xiiUInt16 Size&gt; </td></tr>
<tr class="memitem:a0c044d863e4c2ceccf8ea36a364b3aad"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a0c044d863e4c2ceccf8ea36a364b3aad">xiiStringBuilder</a> (<a class="el" href="../../df/d4f/structxii_hybrid_string_base.htm">xiiHybridStringBase</a>&lt; Size &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a0c044d863e4c2ceccf8ea36a364b3aad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a0c044d863e4c2ceccf8ea36a364b3aad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a583ac27cd0632bf08c084c0a6502fe83"><td class="memTemplParams" colspan="2"><a id="a583ac27cd0632bf08c084c0a6502fe83"></a>
template&lt;xiiUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a583ac27cd0632bf08c084c0a6502fe83"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a583ac27cd0632bf08c084c0a6502fe83">xiiStringBuilder</a> (<a class="el" href="../../df/dfb/structxii_hybrid_string.htm">xiiHybridString</a>&lt; Size, A &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a583ac27cd0632bf08c084c0a6502fe83"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a583ac27cd0632bf08c084c0a6502fe83"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a795df082a4d925c7b84edf5d44ed5bcb"><td class="memItemLeft" align="right" valign="top"><a id="a795df082a4d925c7b84edf5d44ed5bcb"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a795df082a4d925c7b84edf5d44ed5bcb">xiiStringBuilder</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData1, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData2, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData3={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData4={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData5={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData6={})</td></tr>
<tr class="memdesc:a795df082a4d925c7b84edf5d44ed5bcb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor that appends all the given strings. <br /></td></tr>
<tr class="separator:a795df082a4d925c7b84edf5d44ed5bcb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7a5f4e938fc88808f86a36f874b638a"><td class="memItemLeft" align="right" valign="top"><a id="ad7a5f4e938fc88808f86a36f874b638a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#ad7a5f4e938fc88808f86a36f874b638a">xiiStringBuilder</a> (const char *szUTF8, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator=<a class="el" href="../../dd/daf/classxii_foundation.htm#a40d4e876d8aa817b36d04d0cac497fb8">xiiFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:ad7a5f4e938fc88808f86a36f874b638a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given Utf8 string into this one. <br /></td></tr>
<tr class="separator:ad7a5f4e938fc88808f86a36f874b638a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e5cd80171753dee50771afff5160709"><td class="memItemLeft" align="right" valign="top"><a id="a4e5cd80171753dee50771afff5160709"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a4e5cd80171753dee50771afff5160709">xiiStringBuilder</a> (const wchar_t *pWChar, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator=<a class="el" href="../../dd/daf/classxii_foundation.htm#a40d4e876d8aa817b36d04d0cac497fb8">xiiFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a4e5cd80171753dee50771afff5160709"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given wchar_t string into this one. <br /></td></tr>
<tr class="separator:a4e5cd80171753dee50771afff5160709"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21fbc6d19d1ca12f6eb86e833fb4c495"><td class="memItemLeft" align="right" valign="top"><a id="a21fbc6d19d1ca12f6eb86e833fb4c495"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a21fbc6d19d1ca12f6eb86e833fb4c495">xiiStringBuilder</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> rhs, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator=<a class="el" href="../../dd/daf/classxii_foundation.htm#a40d4e876d8aa817b36d04d0cac497fb8">xiiFoundation::GetDefaultAllocator</a>())</td></tr>
<tr class="memdesc:a21fbc6d19d1ca12f6eb86e833fb4c495"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given substring into this one. The <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> might actually be a substring of this very string. <br /></td></tr>
<tr class="separator:a21fbc6d19d1ca12f6eb86e833fb4c495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e5eeed7dcef9de718ec3297f8c323a5"><td class="memItemLeft" align="right" valign="top"><a id="a7e5eeed7dcef9de718ec3297f8c323a5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a7e5eeed7dcef9de718ec3297f8c323a5">operator=</a> (const <a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;rhs)</td></tr>
<tr class="memdesc:a7e5eeed7dcef9de718ec3297f8c323a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a7e5eeed7dcef9de718ec3297f8c323a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdf18332eb20d365a9d4af1bdc69093d"><td class="memItemLeft" align="right" valign="top"><a id="afdf18332eb20d365a9d4af1bdc69093d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#afdf18332eb20d365a9d4af1bdc69093d">operator=</a> (<a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:afdf18332eb20d365a9d4af1bdc69093d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:afdf18332eb20d365a9d4af1bdc69093d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50feafcc844148e5378ecd49b7d65da6"><td class="memItemLeft" align="right" valign="top"><a id="a50feafcc844148e5378ecd49b7d65da6"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a50feafcc844148e5378ecd49b7d65da6">operator=</a> (const char *szUTF8)</td></tr>
<tr class="memdesc:a50feafcc844148e5378ecd49b7d65da6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given Utf8 string into this one. <br /></td></tr>
<tr class="separator:a50feafcc844148e5378ecd49b7d65da6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a895ddb01b6c7e9e4fbc642838966e022"><td class="memItemLeft" align="right" valign="top"><a id="a895ddb01b6c7e9e4fbc642838966e022"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a895ddb01b6c7e9e4fbc642838966e022">operator=</a> (const wchar_t *pWChar)</td></tr>
<tr class="memdesc:a895ddb01b6c7e9e4fbc642838966e022"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given wchar_t string into this one. <br /></td></tr>
<tr class="separator:a895ddb01b6c7e9e4fbc642838966e022"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8572efed65c9198062ce102601b34032"><td class="memItemLeft" align="right" valign="top"><a id="a8572efed65c9198062ce102601b34032"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a8572efed65c9198062ce102601b34032">operator=</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> rhs)</td></tr>
<tr class="memdesc:a8572efed65c9198062ce102601b34032"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given substring into this one. The <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a> might actually be a substring of this very string. <br /></td></tr>
<tr class="separator:a8572efed65c9198062ce102601b34032"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a47b420a146dd5a9f64f59ac31716507b"><td class="memTemplParams" colspan="2"><a id="a47b420a146dd5a9f64f59ac31716507b"></a>
template&lt;xiiUInt16 Size&gt; </td></tr>
<tr class="memitem:a47b420a146dd5a9f64f59ac31716507b"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a47b420a146dd5a9f64f59ac31716507b">operator=</a> (const <a class="el" href="../../df/d4f/structxii_hybrid_string_base.htm">xiiHybridStringBase</a>&lt; Size &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a47b420a146dd5a9f64f59ac31716507b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a47b420a146dd5a9f64f59ac31716507b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98bdbaf20f43b7840ab2d9b7ae9c9118"><td class="memTemplParams" colspan="2"><a id="a98bdbaf20f43b7840ab2d9b7ae9c9118"></a>
template&lt;xiiUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a98bdbaf20f43b7840ab2d9b7ae9c9118"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a98bdbaf20f43b7840ab2d9b7ae9c9118">operator=</a> (const <a class="el" href="../../df/dfb/structxii_hybrid_string.htm">xiiHybridString</a>&lt; Size, A &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a98bdbaf20f43b7840ab2d9b7ae9c9118"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the given string into this one. <br /></td></tr>
<tr class="separator:a98bdbaf20f43b7840ab2d9b7ae9c9118"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11e70905bdd15ea5c95ddffa747cb145"><td class="memTemplParams" colspan="2"><a id="a11e70905bdd15ea5c95ddffa747cb145"></a>
template&lt;xiiUInt16 Size&gt; </td></tr>
<tr class="memitem:a11e70905bdd15ea5c95ddffa747cb145"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a11e70905bdd15ea5c95ddffa747cb145">operator=</a> (<a class="el" href="../../df/d4f/structxii_hybrid_string_base.htm">xiiHybridStringBase</a>&lt; Size &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a11e70905bdd15ea5c95ddffa747cb145"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a11e70905bdd15ea5c95ddffa747cb145"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72a50979eaf37519aad480626e0d5464"><td class="memTemplParams" colspan="2"><a id="a72a50979eaf37519aad480626e0d5464"></a>
template&lt;xiiUInt16 Size, typename A &gt; </td></tr>
<tr class="memitem:a72a50979eaf37519aad480626e0d5464"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a72a50979eaf37519aad480626e0d5464">operator=</a> (<a class="el" href="../../df/dfb/structxii_hybrid_string.htm">xiiHybridString</a>&lt; Size, A &gt; &amp;&amp;rhs) noexcept</td></tr>
<tr class="memdesc:a72a50979eaf37519aad480626e0d5464"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string into this one. <br /></td></tr>
<tr class="separator:a72a50979eaf37519aad480626e0d5464"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af400b5486adfb481f3bc1940932a672b"><td class="memItemLeft" align="right" valign="top"><a id="af400b5486adfb481f3bc1940932a672b"></a>
<a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#af400b5486adfb481f3bc1940932a672b">GetAllocator</a> () const</td></tr>
<tr class="memdesc:af400b5486adfb481f3bc1940932a672b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this object. <br /></td></tr>
<tr class="separator:af400b5486adfb481f3bc1940932a672b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c4ff4b9a231f6a5cd063b03613d87b4"><td class="memItemLeft" align="right" valign="top"><a id="a6c4ff4b9a231f6a5cd063b03613d87b4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a6c4ff4b9a231f6a5cd063b03613d87b4">Clear</a> ()</td></tr>
<tr class="memdesc:a6c4ff4b9a231f6a5cd063b03613d87b4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Resets this string to be empty. Does not deallocate any previously allocated data, as it might be reused later again. <br /></td></tr>
<tr class="separator:a6c4ff4b9a231f6a5cd063b03613d87b4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07d589269f03088a6f02b51f3c1a5ca8"><td class="memItemLeft" align="right" valign="top"><a id="a07d589269f03088a6f02b51f3c1a5ca8"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a07d589269f03088a6f02b51f3c1a5ca8">GetData</a> () const</td></tr>
<tr class="memdesc:a07d589269f03088a6f02b51f3c1a5ca8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a char pointer to the internal Utf8 data. <br /></td></tr>
<tr class="separator:a07d589269f03088a6f02b51f3c1a5ca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a150b4db5b8ac2beb7a7a9c1081781cc4"><td class="memItemLeft" align="right" valign="top"><a id="a150b4db5b8ac2beb7a7a9c1081781cc4"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a150b4db5b8ac2beb7a7a9c1081781cc4">GetElementCount</a> () const</td></tr>
<tr class="memdesc:a150b4db5b8ac2beb7a7a9c1081781cc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bytes that this string takes up. <br /></td></tr>
<tr class="separator:a150b4db5b8ac2beb7a7a9c1081781cc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d19773960f09e48cf3544ef36edca64"><td class="memItemLeft" align="right" valign="top"><a id="a1d19773960f09e48cf3544ef36edca64"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a1d19773960f09e48cf3544ef36edca64">GetCharacterCount</a> () const</td></tr>
<tr class="memdesc:a1d19773960f09e48cf3544ef36edca64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of characters of which this string consists. Might be less than GetElementCount, if it contains Utf8 multi-byte characters. <br /></td></tr>
<tr class="separator:a1d19773960f09e48cf3544ef36edca64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a212f7a6ef773e0288bd8fddd02e32e57"><td class="memItemLeft" align="right" valign="top"><a id="a212f7a6ef773e0288bd8fddd02e32e57"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a212f7a6ef773e0288bd8fddd02e32e57">IsPureASCII</a> () const</td></tr>
<tr class="memdesc:a212f7a6ef773e0288bd8fddd02e32e57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this string only contains ASCII characters, which means that <a class="el" href="../../d4/dbb/classxii_string_builder.htm#a150b4db5b8ac2beb7a7a9c1081781cc4" title="Returns the number of bytes that this string takes up.">GetElementCount()</a> == <a class="el" href="../../d4/dbb/classxii_string_builder.htm#a1d19773960f09e48cf3544ef36edca64" title="Returns the number of characters of which this string consists. Might be less than GetElementCount,...">GetCharacterCount()</a> <br /></td></tr>
<tr class="separator:a212f7a6ef773e0288bd8fddd02e32e57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23e70f91aca7ebbcad2e635f7f9aea28"><td class="memItemLeft" align="right" valign="top"><a id="a23e70f91aca7ebbcad2e635f7f9aea28"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a23e70f91aca7ebbcad2e635f7f9aea28">ToUpper</a> ()</td></tr>
<tr class="memdesc:a23e70f91aca7ebbcad2e635f7f9aea28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts all characters to upper case. Might move the string data around, so all iterators to the data will be invalid afterwards. <br /></td></tr>
<tr class="separator:a23e70f91aca7ebbcad2e635f7f9aea28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3285823400c7ec2192fbe5260feaaec3"><td class="memItemLeft" align="right" valign="top"><a id="a3285823400c7ec2192fbe5260feaaec3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a3285823400c7ec2192fbe5260feaaec3">ToLower</a> ()</td></tr>
<tr class="memdesc:a3285823400c7ec2192fbe5260feaaec3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts all characters to lower case. Might move the string data around, so all iterators to the data will be invalid afterwards. <br /></td></tr>
<tr class="separator:a3285823400c7ec2192fbe5260feaaec3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95ecfcfd5e7427615e0098e33fa6ce1d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a95ecfcfd5e7427615e0098e33fa6ce1d">ChangeCharacter</a> (iterator &amp;ref_it, xiiUInt32 uiCharacter)</td></tr>
<tr class="memdesc:a95ecfcfd5e7427615e0098e33fa6ce1d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the single character in this string, to which the iterator currently points.  <a href="../../d4/dbb/classxii_string_builder.htm#a95ecfcfd5e7427615e0098e33fa6ce1d">More...</a><br /></td></tr>
<tr class="separator:a95ecfcfd5e7427615e0098e33fa6ce1d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d3ce18fda6930c5abc114e8ceaa7f3b"><td class="memItemLeft" align="right" valign="top"><a id="a4d3ce18fda6930c5abc114e8ceaa7f3b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a4d3ce18fda6930c5abc114e8ceaa7f3b">Set</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData1, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData2={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData3={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData4={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData5={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData6={})</td></tr>
<tr class="memdesc:a4d3ce18fda6930c5abc114e8ceaa7f3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the string by concatenating all given strings. <br /></td></tr>
<tr class="separator:a4d3ce18fda6930c5abc114e8ceaa7f3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d610ec1423835998cbb2d6efdbfec8a"><td class="memItemLeft" align="right" valign="top"><a id="a3d610ec1423835998cbb2d6efdbfec8a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a3d610ec1423835998cbb2d6efdbfec8a">SetSubString_FromTo</a> (const char *pStart, const char *pEnd)</td></tr>
<tr class="memdesc:a3d610ec1423835998cbb2d6efdbfec8a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> up to <em>pEnd</em> (exclusive). <br /></td></tr>
<tr class="separator:a3d610ec1423835998cbb2d6efdbfec8a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48aa8bf6d026eb65b7fdc640abc1808b"><td class="memItemLeft" align="right" valign="top"><a id="a48aa8bf6d026eb65b7fdc640abc1808b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a48aa8bf6d026eb65b7fdc640abc1808b">SetSubString_ElementCount</a> (const char *pStart, xiiUInt32 uiElementCount)</td></tr>
<tr class="memdesc:a48aa8bf6d026eb65b7fdc640abc1808b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> with a length of <em>uiElementCount</em> bytes. <br /></td></tr>
<tr class="separator:a48aa8bf6d026eb65b7fdc640abc1808b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8696cda484f32ee3921ae9b6a76a68f"><td class="memItemLeft" align="right" valign="top"><a id="af8696cda484f32ee3921ae9b6a76a68f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#af8696cda484f32ee3921ae9b6a76a68f">SetSubString_CharacterCount</a> (const char *pStart, xiiUInt32 uiCharacterCount)</td></tr>
<tr class="memdesc:af8696cda484f32ee3921ae9b6a76a68f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the string starting at <em>pStart</em> with a length of <em>uiCharacterCount</em> characters. <br /></td></tr>
<tr class="separator:af8696cda484f32ee3921ae9b6a76a68f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aacd733a00453033fe245ff64350a0847"><td class="memItemLeft" align="right" valign="top"><a id="aacd733a00453033fe245ff64350a0847"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aacd733a00453033fe245ff64350a0847">Append</a> (xiiUInt32 uiChar)</td></tr>
<tr class="memdesc:aacd733a00453033fe245ff64350a0847"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a single Utf32 character. <br /></td></tr>
<tr class="separator:aacd733a00453033fe245ff64350a0847"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50a7313bcc3f0dcc0f0c7ca4124c2c65"><td class="memItemLeft" align="right" valign="top"><a id="a50a7313bcc3f0dcc0f0c7ca4124c2c65"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a50a7313bcc3f0dcc0f0c7ca4124c2c65">Append</a> (const wchar_t *pData1, const wchar_t *pData2=nullptr, const wchar_t *pData3=nullptr, const wchar_t *pData4=nullptr, const wchar_t *pData5=nullptr, const wchar_t *pData6=nullptr)</td></tr>
<tr class="memdesc:a50a7313bcc3f0dcc0f0c7ca4124c2c65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings at the back of this string in one operation. <br /></td></tr>
<tr class="separator:a50a7313bcc3f0dcc0f0c7ca4124c2c65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa274e54700d164fc716240ae98d1a8c5"><td class="memItemLeft" align="right" valign="top"><a id="aa274e54700d164fc716240ae98d1a8c5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aa274e54700d164fc716240ae98d1a8c5">Append</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData1, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData2={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData3={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData4={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData5={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData6={})</td></tr>
<tr class="memdesc:aa274e54700d164fc716240ae98d1a8c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends all the given strings at the back of this string in one operation. <br /></td></tr>
<tr class="separator:aa274e54700d164fc716240ae98d1a8c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab30dd9ddf5a187760303c2046ea52d82"><td class="memItemLeft" align="right" valign="top"><a id="ab30dd9ddf5a187760303c2046ea52d82"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#ab30dd9ddf5a187760303c2046ea52d82">Prepend</a> (xiiUInt32 uiChar)</td></tr>
<tr class="memdesc:ab30dd9ddf5a187760303c2046ea52d82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a single Utf32 character. <br /></td></tr>
<tr class="separator:ab30dd9ddf5a187760303c2046ea52d82"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb53111b33e464c2ffb642f1a671c3aa"><td class="memItemLeft" align="right" valign="top"><a id="aeb53111b33e464c2ffb642f1a671c3aa"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aeb53111b33e464c2ffb642f1a671c3aa">Prepend</a> (const wchar_t *pData1, const wchar_t *pData2=nullptr, const wchar_t *pData3=nullptr, const wchar_t *pData4=nullptr, const wchar_t *pData5=nullptr, const wchar_t *pData6=nullptr)</td></tr>
<tr class="memdesc:aeb53111b33e464c2ffb642f1a671c3aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends all the given strings to the front of this string in one operation. <br /></td></tr>
<tr class="separator:aeb53111b33e464c2ffb642f1a671c3aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add8b0f035909afd0c8b11d42471fdbc0"><td class="memItemLeft" align="right" valign="top"><a id="add8b0f035909afd0c8b11d42471fdbc0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#add8b0f035909afd0c8b11d42471fdbc0">Prepend</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData1, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData2={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData3={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData4={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData5={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sData6={})</td></tr>
<tr class="memdesc:add8b0f035909afd0c8b11d42471fdbc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends all the given strings to the front of this string in one operation. <br /></td></tr>
<tr class="separator:add8b0f035909afd0c8b11d42471fdbc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa053c2675b3451ae0ded543d50758f0a"><td class="memItemLeft" align="right" valign="top"><a id="aa053c2675b3451ae0ded543d50758f0a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aa053c2675b3451ae0ded543d50758f0a">Printf</a> (const char *szUtf8Format,...)</td></tr>
<tr class="memdesc:aa053c2675b3451ae0ded543d50758f0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this string to the formatted string, uses printf-style formatting. <br /></td></tr>
<tr class="separator:aa053c2675b3451ae0ded543d50758f0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50eb535b8a7903fe516cbf3306fe65dc"><td class="memItemLeft" align="right" valign="top"><a id="a50eb535b8a7903fe516cbf3306fe65dc"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a50eb535b8a7903fe516cbf3306fe65dc">PrintfArgs</a> (const char *szUtf8Format, va_list szArgs)</td></tr>
<tr class="memdesc:a50eb535b8a7903fe516cbf3306fe65dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets this string to the formatted string, uses printf-style formatting. <br /></td></tr>
<tr class="separator:a50eb535b8a7903fe516cbf3306fe65dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bee0629f203dc4537981932369f236c"><td class="memItemLeft" align="right" valign="top"><a id="a3bee0629f203dc4537981932369f236c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a3bee0629f203dc4537981932369f236c">Format</a> (const <a class="el" href="../../da/d2e/classxii_format_string.htm">xiiFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:a3bee0629f203dc4537981932369f236c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces this with a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../da/d2e/classxii_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">xiiFormatString</a> for details. <br /></td></tr>
<tr class="separator:a3bee0629f203dc4537981932369f236c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45a583817a994e6567d03d0b64eb7a34"><td class="memTemplParams" colspan="2"><a id="a45a583817a994e6567d03d0b64eb7a34"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a45a583817a994e6567d03d0b64eb7a34"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a45a583817a994e6567d03d0b64eb7a34">Format</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a45a583817a994e6567d03d0b64eb7a34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces this with a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../da/d2e/classxii_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">xiiFormatString</a> for details. <br /></td></tr>
<tr class="separator:a45a583817a994e6567d03d0b64eb7a34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17e31818b5fc46e4bddb6c167c1a2000"><td class="memItemLeft" align="right" valign="top"><a id="a17e31818b5fc46e4bddb6c167c1a2000"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a17e31818b5fc46e4bddb6c167c1a2000">AppendFormat</a> (const <a class="el" href="../../da/d2e/classxii_format_string.htm">xiiFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:a17e31818b5fc46e4bddb6c167c1a2000"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../da/d2e/classxii_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">xiiFormatString</a> for details. <br /></td></tr>
<tr class="separator:a17e31818b5fc46e4bddb6c167c1a2000"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3034a8fcb1467de39185a4211b50216c"><td class="memTemplParams" colspan="2"><a id="a3034a8fcb1467de39185a4211b50216c"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a3034a8fcb1467de39185a4211b50216c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a3034a8fcb1467de39185a4211b50216c">AppendFormat</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a3034a8fcb1467de39185a4211b50216c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../da/d2e/classxii_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">xiiFormatString</a> for details. <br /></td></tr>
<tr class="separator:a3034a8fcb1467de39185a4211b50216c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a829495a1843a01f2d0e05c4119f9007a"><td class="memItemLeft" align="right" valign="top"><a id="a829495a1843a01f2d0e05c4119f9007a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a829495a1843a01f2d0e05c4119f9007a">PrependFormat</a> (const <a class="el" href="../../da/d2e/classxii_format_string.htm">xiiFormatString</a> &amp;string)</td></tr>
<tr class="memdesc:a829495a1843a01f2d0e05c4119f9007a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../da/d2e/classxii_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">xiiFormatString</a> for details. <br /></td></tr>
<tr class="separator:a829495a1843a01f2d0e05c4119f9007a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a95be68f3234f1fae7cb7eeff447bd8"><td class="memTemplParams" colspan="2"><a id="a6a95be68f3234f1fae7cb7eeff447bd8"></a>
template&lt;typename... ARGS&gt; </td></tr>
<tr class="memitem:a6a95be68f3234f1fae7cb7eeff447bd8"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a6a95be68f3234f1fae7cb7eeff447bd8">PrependFormat</a> (const char *szFormat, ARGS &amp;&amp;... args)</td></tr>
<tr class="memdesc:a6a95be68f3234f1fae7cb7eeff447bd8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepends a formatted string. Uses '{}' formatting placeholders, see <a class="el" href="../../da/d2e/classxii_format_string.htm" title="Implements formating of strings with placeholders and formatting options.">xiiFormatString</a> for details. <br /></td></tr>
<tr class="separator:a6a95be68f3234f1fae7cb7eeff447bd8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac10cf1b62532e9daa2af2a877993ab99"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#ac10cf1b62532e9daa2af2a877993ab99">Shrink</a> (xiiUInt32 uiShrinkCharsFront, xiiUInt32 uiShrinkCharsBack)</td></tr>
<tr class="memdesc:ac10cf1b62532e9daa2af2a877993ab99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the first n and last m characters from this string.  <a href="../../d4/dbb/classxii_string_builder.htm#ac10cf1b62532e9daa2af2a877993ab99">More...</a><br /></td></tr>
<tr class="separator:ac10cf1b62532e9daa2af2a877993ab99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f531f64cde9c019e405a7d2cf4895fb"><td class="memItemLeft" align="right" valign="top"><a id="a2f531f64cde9c019e405a7d2cf4895fb"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a2f531f64cde9c019e405a7d2cf4895fb">Reserve</a> (xiiUInt32 uiNumElements)</td></tr>
<tr class="memdesc:a2f531f64cde9c019e405a7d2cf4895fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reserves uiNumElements bytes. <br /></td></tr>
<tr class="separator:a2f531f64cde9c019e405a7d2cf4895fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4612dceb8dbeb15e27860afa4090d8e"><td class="memItemLeft" align="right" valign="top"><a id="ad4612dceb8dbeb15e27860afa4090d8e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#ad4612dceb8dbeb15e27860afa4090d8e">ReplaceSubString</a> (const char *szStartPos, const char *szEndPos, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplaceWith)</td></tr>
<tr class="memdesc:ad4612dceb8dbeb15e27860afa4090d8e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the string that starts at szStartPos and ends at szEndPos with the string szReplaceWith. <br /></td></tr>
<tr class="separator:ad4612dceb8dbeb15e27860afa4090d8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2445f6243764d8d16e1459f27055859a"><td class="memItemLeft" align="right" valign="top"><a id="a2445f6243764d8d16e1459f27055859a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a2445f6243764d8d16e1459f27055859a">Insert</a> (const char *szInsertAtPos, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sTextToInsert)</td></tr>
<tr class="memdesc:a2445f6243764d8d16e1459f27055859a"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper around ReplaceSubString. Will insert the given string at szInsertAtPos. <br /></td></tr>
<tr class="separator:a2445f6243764d8d16e1459f27055859a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9684b88ed40394cca7539f2bef80aca9"><td class="memItemLeft" align="right" valign="top"><a id="a9684b88ed40394cca7539f2bef80aca9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a9684b88ed40394cca7539f2bef80aca9">Remove</a> (const char *szRemoveFromPos, const char *szRemoveToPos)</td></tr>
<tr class="memdesc:a9684b88ed40394cca7539f2bef80aca9"><td class="mdescLeft">&#160;</td><td class="mdescRight">A wrapper around ReplaceSubString. Will remove the substring which starts at szRemoveFromPos and ends at szRemoveToPos. <br /></td></tr>
<tr class="separator:a9684b88ed40394cca7539f2bef80aca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8651470b002d8cf9ae21e8b3e4ec22ab"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a8651470b002d8cf9ae21e8b3e4ec22ab">ReplaceFirst</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a8651470b002d8cf9ae21e8b3e4ec22ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the first occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the beginning).  <a href="../../d4/dbb/classxii_string_builder.htm#a8651470b002d8cf9ae21e8b3e4ec22ab">More...</a><br /></td></tr>
<tr class="separator:a8651470b002d8cf9ae21e8b3e4ec22ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a587838f0baadea7b08822073034a0bbe"><td class="memItemLeft" align="right" valign="top"><a id="a587838f0baadea7b08822073034a0bbe"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a587838f0baadea7b08822073034a0bbe">ReplaceFirst_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a587838f0baadea7b08822073034a0bbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceFirst. <br /></td></tr>
<tr class="separator:a587838f0baadea7b08822073034a0bbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12dbafa72fb8dd245299c7072195fff5"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a12dbafa72fb8dd245299c7072195fff5">ReplaceLast</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a12dbafa72fb8dd245299c7072195fff5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the last occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the end).  <a href="../../d4/dbb/classxii_string_builder.htm#a12dbafa72fb8dd245299c7072195fff5">More...</a><br /></td></tr>
<tr class="separator:a12dbafa72fb8dd245299c7072195fff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7773495a0f61e1286d45892dfe4afd4f"><td class="memItemLeft" align="right" valign="top"><a id="a7773495a0f61e1286d45892dfe4afd4f"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a7773495a0f61e1286d45892dfe4afd4f">ReplaceLast_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplacement, const char *szStartSearchAt=nullptr)</td></tr>
<tr class="memdesc:a7773495a0f61e1286d45892dfe4afd4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceLast. <br /></td></tr>
<tr class="separator:a7773495a0f61e1286d45892dfe4afd4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0dd9d5f6071bc855f5d549d6bd4ccc5d"><td class="memItemLeft" align="right" valign="top"><a id="a0dd9d5f6071bc855f5d549d6bd4ccc5d"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a0dd9d5f6071bc855f5d549d6bd4ccc5d">ReplaceAll</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplacement)</td></tr>
<tr class="memdesc:a0dd9d5f6071bc855f5d549d6bd4ccc5d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces all occurrences of szSearchFor by szReplacement. Returns the number of replacements. <br /></td></tr>
<tr class="separator:a0dd9d5f6071bc855f5d549d6bd4ccc5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fcb85b3d67d95f4dce46dc8483c566f"><td class="memItemLeft" align="right" valign="top"><a id="a2fcb85b3d67d95f4dce46dc8483c566f"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a2fcb85b3d67d95f4dce46dc8483c566f">ReplaceAll_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplacement)</td></tr>
<tr class="memdesc:a2fcb85b3d67d95f4dce46dc8483c566f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceAll. <br /></td></tr>
<tr class="separator:a2fcb85b3d67d95f4dce46dc8483c566f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0bb6ccd1fa65d92ba54a4a11f82259d6"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a0bb6ccd1fa65d92ba54a4a11f82259d6">ReplaceWholeWord</a> (const char *szSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplaceWith, <a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:a0bb6ccd1fa65d92ba54a4a11f82259d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the first occurrence of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB.  <a href="../../d4/dbb/classxii_string_builder.htm#a0bb6ccd1fa65d92ba54a4a11f82259d6">More...</a><br /></td></tr>
<tr class="separator:a0bb6ccd1fa65d92ba54a4a11f82259d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16ce5306406963124b2f303e114a82cf"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a16ce5306406963124b2f303e114a82cf">ReplaceWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplaceWith, <a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:a16ce5306406963124b2f303e114a82cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceWholeWord.  <a href="../../d4/dbb/classxii_string_builder.htm#a16ce5306406963124b2f303e114a82cf">More...</a><br /></td></tr>
<tr class="separator:a16ce5306406963124b2f303e114a82cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21deaa5f1347102f682b3a3d382eb835"><td class="memItemLeft" align="right" valign="top">xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a21deaa5f1347102f682b3a3d382eb835">ReplaceWholeWordAll</a> (const char *szSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplaceWith, <a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:a21deaa5f1347102f682b3a3d382eb835"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces all occurrences of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB.  <a href="../../d4/dbb/classxii_string_builder.htm#a21deaa5f1347102f682b3a3d382eb835">More...</a><br /></td></tr>
<tr class="separator:a21deaa5f1347102f682b3a3d382eb835"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1633a53d1f2735b20e3470096e02aeec"><td class="memItemLeft" align="right" valign="top">xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a1633a53d1f2735b20e3470096e02aeec">ReplaceWholeWordAll_NoCase</a> (const char *szSearchFor, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplaceWith, <a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB)</td></tr>
<tr class="memdesc:a1633a53d1f2735b20e3470096e02aeec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Case-insensitive version of ReplaceWholeWordAll.  <a href="../../d4/dbb/classxii_string_builder.htm#a1633a53d1f2735b20e3470096e02aeec">More...</a><br /></td></tr>
<tr class="separator:a1633a53d1f2735b20e3470096e02aeec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acac2b7a0d4db4f5f2b13f52dc74d9e2d"><td class="memItemLeft" align="right" valign="top"><a id="acac2b7a0d4db4f5f2b13f52dc74d9e2d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#acac2b7a0d4db4f5f2b13f52dc74d9e2d">ReadAll</a> (<a class="el" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a> &amp;ref_stream)</td></tr>
<tr class="memdesc:acac2b7a0d4db4f5f2b13f52dc74d9e2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Replaces the current string with the content from the stream. Reads the stream to its end. <br /></td></tr>
<tr class="separator:acac2b7a0d4db4f5f2b13f52dc74d9e2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c1fb2c175a666d065a8abefaad5534a"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a7c1fb2c175a666d065a8abefaad5534a">MakeCleanPath</a> ()</td></tr>
<tr class="memdesc:a7c1fb2c175a666d065a8abefaad5534a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes "../" where possible, replaces all path separators with /, removes double slashes.  <a href="../../d4/dbb/classxii_string_builder.htm#a7c1fb2c175a666d065a8abefaad5534a">More...</a><br /></td></tr>
<tr class="separator:a7c1fb2c175a666d065a8abefaad5534a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32df060a23b1194a0856dfa97424f70e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a32df060a23b1194a0856dfa97424f70e">PathParentDirectory</a> (xiiUInt32 uiLevelsUp=1)</td></tr>
<tr class="memdesc:a32df060a23b1194a0856dfa97424f70e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Modifies this string to point to the parent directory.  <a href="../../d4/dbb/classxii_string_builder.htm#a32df060a23b1194a0856dfa97424f70e">More...</a><br /></td></tr>
<tr class="separator:a32df060a23b1194a0856dfa97424f70e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb8dedf699785b95812b7b137a901324"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aeb8dedf699785b95812b7b137a901324">AppendPath</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPath1, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPath2={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPath3={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPath4={})</td></tr>
<tr class="memdesc:aeb8dedf699785b95812b7b137a901324"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends several path pieces. Makes sure they are always properly separated by a slash.  <a href="../../d4/dbb/classxii_string_builder.htm#aeb8dedf699785b95812b7b137a901324">More...</a><br /></td></tr>
<tr class="separator:aeb8dedf699785b95812b7b137a901324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afca8c1eaed9acea7e9305689935f06ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#afca8c1eaed9acea7e9305689935f06ac">AppendWithSeparator</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSeparator, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sText1, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sText2=<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(), <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sText3=<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(), <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sText4=<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(), <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sText5=<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(), <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sText6=<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>())</td></tr>
<tr class="memdesc:afca8c1eaed9acea7e9305689935f06ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Similar to <a class="el" href="../../d4/dbb/classxii_string_builder.htm#aacd733a00453033fe245ff64350a0847" title="Appends a single Utf32 character.">Append()</a> but the very first argument is a separator that is only appended (once) if the existing string is not empty and does not already end with the separator.  <a href="../../d4/dbb/classxii_string_builder.htm#afca8c1eaed9acea7e9305689935f06ac">More...</a><br /></td></tr>
<tr class="separator:afca8c1eaed9acea7e9305689935f06ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39a2884da10bff07f2de407a183ec789"><td class="memItemLeft" align="right" valign="top"><a id="a39a2884da10bff07f2de407a183ec789"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a39a2884da10bff07f2de407a183ec789">ChangeFileName</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sNewFileName)</td></tr>
<tr class="memdesc:a39a2884da10bff07f2de407a183ec789"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the file name part of the path, keeps the extension intact (if there is any). <br /></td></tr>
<tr class="separator:a39a2884da10bff07f2de407a183ec789"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5eeb701d4a2daa085312c594a7fbf526"><td class="memItemLeft" align="right" valign="top"><a id="a5eeb701d4a2daa085312c594a7fbf526"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a5eeb701d4a2daa085312c594a7fbf526">ChangeFileNameAndExtension</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sNewFileNameWithExtension)</td></tr>
<tr class="memdesc:a5eeb701d4a2daa085312c594a7fbf526"><td class="mdescLeft">&#160;</td><td class="mdescRight">Changes the file name and the extension part of the path. <br /></td></tr>
<tr class="separator:a5eeb701d4a2daa085312c594a7fbf526"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32e07e05352f5dcd52a36d460a8e6256"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a32e07e05352f5dcd52a36d460a8e6256">ChangeFileExtension</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sNewExtension)</td></tr>
<tr class="memdesc:a32e07e05352f5dcd52a36d460a8e6256"><td class="mdescLeft">&#160;</td><td class="mdescRight">Only changes the file extension of the path. If there is no extension yet, one is appended (including a dot).  <a href="../../d4/dbb/classxii_string_builder.htm#a32e07e05352f5dcd52a36d460a8e6256">More...</a><br /></td></tr>
<tr class="separator:a32e07e05352f5dcd52a36d460a8e6256"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec8877057942cb21427f2cb46a7e840e"><td class="memItemLeft" align="right" valign="top"><a id="aec8877057942cb21427f2cb46a7e840e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aec8877057942cb21427f2cb46a7e840e">RemoveFileExtension</a> ()</td></tr>
<tr class="memdesc:aec8877057942cb21427f2cb46a7e840e"><td class="mdescLeft">&#160;</td><td class="mdescRight">If any extension exists, it is removed, including the dot before it. <br /></td></tr>
<tr class="separator:aec8877057942cb21427f2cb46a7e840e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74a5ef89c105ff4e4fa507f4fa18b5cf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a74a5ef89c105ff4e4fa507f4fa18b5cf">MakeRelativeTo</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sAbsolutePathToMakeThisRelativeTo)</td></tr>
<tr class="memdesc:a74a5ef89c105ff4e4fa507f4fa18b5cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts this path into a relative path to the path with the awesome variable name 'szAbsolutePathToMakeThisRelativeTo'.  <a href="../../d4/dbb/classxii_string_builder.htm#a74a5ef89c105ff4e4fa507f4fa18b5cf">More...</a><br /></td></tr>
<tr class="separator:a74a5ef89c105ff4e4fa507f4fa18b5cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bb3e96721492867477d727e96ab1462"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a4bb3e96721492867477d727e96ab1462">MakePathSeparatorsNative</a> ()</td></tr>
<tr class="memdesc:a4bb3e96721492867477d727e96ab1462"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cleans this path up and replaces all path separators by the OS specific separator.  <a href="../../d4/dbb/classxii_string_builder.htm#a4bb3e96721492867477d727e96ab1462">More...</a><br /></td></tr>
<tr class="separator:a4bb3e96721492867477d727e96ab1462"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20f41a5444f5580a8a0e3d02d4c4eea5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a20f41a5444f5580a8a0e3d02d4c4eea5">IsPathBelowFolder</a> (const char *szPathToFolder)</td></tr>
<tr class="memdesc:a20f41a5444f5580a8a0e3d02d4c4eea5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether this path is a sub-path of the given path.  <a href="../../d4/dbb/classxii_string_builder.htm#a20f41a5444f5580a8a0e3d02d4c4eea5">More...</a><br /></td></tr>
<tr class="separator:a20f41a5444f5580a8a0e3d02d4c4eea5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab6bdc6adbaf905c2cf4146655198819"><td class="memItemLeft" align="right" valign="top"><a id="aab6bdc6adbaf905c2cf4146655198819"></a>
xiiUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aab6bdc6adbaf905c2cf4146655198819">GetHeapMemoryUsage</a> () const</td></tr>
<tr class="memdesc:aab6bdc6adbaf905c2cf4146655198819"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:aab6bdc6adbaf905c2cf4146655198819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af663edf50873343132c3f970d8511dde"><td class="memItemLeft" align="right" valign="top"><a id="af663edf50873343132c3f970d8511dde"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#af663edf50873343132c3f970d8511dde">Trim</a> (const char *szTrimChars)</td></tr>
<tr class="memdesc:af663edf50873343132c3f970d8511dde"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and end that appear in the given strings. <br /></td></tr>
<tr class="separator:af663edf50873343132c3f970d8511dde"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a4139a496fd356c6fb418def7842be0"><td class="memItemLeft" align="right" valign="top"><a id="a9a4139a496fd356c6fb418def7842be0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#a9a4139a496fd356c6fb418def7842be0">Trim</a> (const char *szTrimCharsStart, const char *szTrimCharsEnd)</td></tr>
<tr class="memdesc:a9a4139a496fd356c6fb418def7842be0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all characters from the start and/or end that appear in the given strings. <br /></td></tr>
<tr class="separator:a9a4139a496fd356c6fb418def7842be0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4d3b5cb3a935b4ebfd8e609fa09c76f"><td class="memItemLeft" align="right" valign="top"><a id="aa4d3b5cb3a935b4ebfd8e609fa09c76f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#aa4d3b5cb3a935b4ebfd8e609fa09c76f">TrimWordStart</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sWord)</td></tr>
<tr class="memdesc:aa4d3b5cb3a935b4ebfd8e609fa09c76f"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string starts with the given word (case insensitive), it is removed and the function returns true. <br /></td></tr>
<tr class="separator:aa4d3b5cb3a935b4ebfd8e609fa09c76f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada2422be111f5859eec04c8b62b9c445"><td class="memItemLeft" align="right" valign="top"><a id="ada2422be111f5859eec04c8b62b9c445"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d4/dbb/classxii_string_builder.htm#ada2422be111f5859eec04c8b62b9c445">TrimWordEnd</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sWord)</td></tr>
<tr class="memdesc:ada2422be111f5859eec04c8b62b9c445"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the string ends with the given word (case insensitive), it is removed and the function returns true. <br /></td></tr>
<tr class="separator:ada2422be111f5859eec04c8b62b9c445"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_structxii_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_structxii_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt; xiiStringBuilder &gt;</a></td></tr>
<tr class="memitem:a52ad52604f0b98226a0342393b8db662 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a52ad52604f0b98226a0342393b8db662"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a52ad52604f0b98226a0342393b8db662">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a52ad52604f0b98226a0342393b8db662 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the string is an empty string. <br /></td></tr>
<tr class="separator:a52ad52604f0b98226a0342393b8db662 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bf41eb3d6781a8aaff8a4d2f7f4df4f inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a5bf41eb3d6781a8aaff8a4d2f7f4df4f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a5bf41eb3d6781a8aaff8a4d2f7f4df4f">StartsWith</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:a5bf41eb3d6781a8aaff8a4d2f7f4df4f inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. <br /></td></tr>
<tr class="separator:a5bf41eb3d6781a8aaff8a4d2f7f4df4f inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4d582fedf5b825d1efd0dde2b25b556 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aa4d582fedf5b825d1efd0dde2b25b556"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#aa4d582fedf5b825d1efd0dde2b25b556">StartsWith_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartsWith) const</td></tr>
<tr class="memdesc:aa4d582fedf5b825d1efd0dde2b25b556 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string starts with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:aa4d582fedf5b825d1efd0dde2b25b556 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59e350b8f45c88d18eacebc160e1b07f inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a59e350b8f45c88d18eacebc160e1b07f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a59e350b8f45c88d18eacebc160e1b07f">EndsWith</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:a59e350b8f45c88d18eacebc160e1b07f inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. <br /></td></tr>
<tr class="separator:a59e350b8f45c88d18eacebc160e1b07f inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4016efe160cf9159193586c907d382d6 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a4016efe160cf9159193586c907d382d6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a4016efe160cf9159193586c907d382d6">EndsWith_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sEndsWith) const</td></tr>
<tr class="memdesc:a4016efe160cf9159193586c907d382d6 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if this string ends with the given string. Case insensitive. <br /></td></tr>
<tr class="separator:a4016efe160cf9159193586c907d382d6 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5238f8a363653f249eaaa5a97dc036d inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#aa5238f8a363653f249eaaa5a97dc036d">FindSubString</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:aa5238f8a363653f249eaaa5a97dc036d inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bc02e9477b8b4db57f52cb9fe5ed2cb inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a1bc02e9477b8b4db57f52cb9fe5ed2cb">FindSubString_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a1bc02e9477b8b4db57f52cb9fe5ed2cb inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afad820068dbab7f0c94f8d34a4308600 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#afad820068dbab7f0c94f8d34a4308600">FindLastSubString</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:afad820068dbab7f0c94f8d34a4308600 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ff1da418cd57f629e049c0cab04673c inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a4ff1da418cd57f629e049c0cab04673c">FindLastSubString_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStringToFind, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a4ff1da418cd57f629e049c0cab04673c inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f5893d90cc94a9a187f08fa6c13ec34 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a5f5893d90cc94a9a187f08fa6c13ec34">FindWholeWord</a> (const char *szSearchFor, <a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:a5f5893d90cc94a9a187f08fa6c13ec34 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5005429360824b1798bef85dea712cd inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top">const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#ad5005429360824b1798bef85dea712cd">FindWholeWord_NoCase</a> (const char *szSearchFor, <a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a> isDelimiterCB, const char *szStartSearchAt=nullptr) const</td></tr>
<tr class="separator:ad5005429360824b1798bef85dea712cd inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae27a79e330beec66d9d813022e83cb69 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ae27a79e330beec66d9d813022e83cb69"></a>
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#ae27a79e330beec66d9d813022e83cb69">Compare</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther) const</td></tr>
<tr class="memdesc:ae27a79e330beec66d9d813022e83cb69 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. <br /></td></tr>
<tr class="separator:ae27a79e330beec66d9d813022e83cb69 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3d435ef63aff0219d0f0668f37eef0a2 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top">xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a3d435ef63aff0219d0f0668f37eef0a2">CompareN</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a3d435ef63aff0219d0f0668f37eef0a2 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8aff83ea5b80b6dc110a9e2924fedc7b inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a8aff83ea5b80b6dc110a9e2924fedc7b"></a>
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a8aff83ea5b80b6dc110a9e2924fedc7b">Compare_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther) const</td></tr>
<tr class="memdesc:a8aff83ea5b80b6dc110a9e2924fedc7b inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller', 1 otherwise. Case insensitive. <br /></td></tr>
<tr class="separator:a8aff83ea5b80b6dc110a9e2924fedc7b inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66531b825a9378c78a6e2b411fe991d1 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top">xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a66531b825a9378c78a6e2b411fe991d1">CompareN_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare) const</td></tr>
<tr class="separator:a66531b825a9378c78a6e2b411fe991d1 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9c217f8e171dabae88d440998890ba18 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a9c217f8e171dabae88d440998890ba18"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a9c217f8e171dabae88d440998890ba18">IsEqual</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther) const</td></tr>
<tr class="memdesc:a9c217f8e171dabae88d440998890ba18 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:a9c217f8e171dabae88d440998890ba18 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a546fd06f96d7467ecbfe3f1c6d7a2d68 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a546fd06f96d7467ecbfe3f1c6d7a2d68"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a546fd06f96d7467ecbfe3f1c6d7a2d68">IsEqualN</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a546fd06f96d7467ecbfe3f1c6d7a2d68 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a546fd06f96d7467ecbfe3f1c6d7a2d68 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec455922ec33da6c7a57d5a9d8475c11 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aec455922ec33da6c7a57d5a9d8475c11"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#aec455922ec33da6c7a57d5a9d8475c11">IsEqual_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther) const</td></tr>
<tr class="memdesc:aec455922ec33da6c7a57d5a9d8475c11 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this string with the other string for equality. <br /></td></tr>
<tr class="separator:aec455922ec33da6c7a57d5a9d8475c11 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43ff7190c8ec4e85d323b1a08e2093da inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a43ff7190c8ec4e85d323b1a08e2093da"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a43ff7190c8ec4e85d323b1a08e2093da">IsEqualN_NoCase</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther, xiiUInt32 uiCharsToCompare) const</td></tr>
<tr class="memdesc:a43ff7190c8ec4e85d323b1a08e2093da inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares up to a given number of characters of this string with the other string for equality. Case insensitive. <br /></td></tr>
<tr class="separator:a43ff7190c8ec4e85d323b1a08e2093da inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae818af714c3eb8b52272c05b44d75b22 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ae818af714c3eb8b52272c05b44d75b22"></a>
const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#ae818af714c3eb8b52272c05b44d75b22">ComputeCharacterPosition</a> (xiiUInt32 uiCharacterIndex) const</td></tr>
<tr class="memdesc:ae818af714c3eb8b52272c05b44d75b22 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the pointer to the n-th character in the string. This is a linear search from the start. <br /></td></tr>
<tr class="separator:ae818af714c3eb8b52272c05b44d75b22 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a66c88bf405b01062374937660dbb0cf5 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../de/d81/structxii_string_iterator.htm">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a66c88bf405b01062374937660dbb0cf5">GetIteratorFront</a> () const</td></tr>
<tr class="memdesc:a66c88bf405b01062374937660dbb0cf5 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very first character.  <a href="../../d2/d29/structxii_string_base.htm#a66c88bf405b01062374937660dbb0cf5">More...</a><br /></td></tr>
<tr class="separator:a66c88bf405b01062374937660dbb0cf5 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a540637e5f22defeb32af069704c700d8 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../d8/d78/structxii_string_reverse_iterator.htm">reverse_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a540637e5f22defeb32af069704c700d8">GetIteratorBack</a> () const</td></tr>
<tr class="memdesc:a540637e5f22defeb32af069704c700d8 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an iterator to this string, which points to the very last character (NOT the end).  <a href="../../d2/d29/structxii_string_base.htm#a540637e5f22defeb32af069704c700d8">More...</a><br /></td></tr>
<tr class="separator:a540637e5f22defeb32af069704c700d8 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a654d0fd5e7d4f179cc8df5cbce2aab50 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a654d0fd5e7d4f179cc8df5cbce2aab50"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a654d0fd5e7d4f179cc8df5cbce2aab50">operator xiiStringView</a> () const</td></tr>
<tr class="memdesc:a654d0fd5e7d4f179cc8df5cbce2aab50 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a654d0fd5e7d4f179cc8df5cbce2aab50 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d45f20d65204861deb1bed94305408a inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a6d45f20d65204861deb1bed94305408a"></a>
<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a6d45f20d65204861deb1bed94305408a">GetView</a> () const</td></tr>
<tr class="memdesc:a6d45f20d65204861deb1bed94305408a inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a string view to this string's data. <br /></td></tr>
<tr class="separator:a6d45f20d65204861deb1bed94305408a inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79c664c6c0055a477110e1849771f9eb inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a79c664c6c0055a477110e1849771f9eb"></a>
XII_ALWAYS_INLINE&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a79c664c6c0055a477110e1849771f9eb">operator const char *</a> () const</td></tr>
<tr class="memdesc:a79c664c6c0055a477110e1849771f9eb inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the internal Utf8 string. <br /></td></tr>
<tr class="separator:a79c664c6c0055a477110e1849771f9eb inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c8e89db84402b1901a58bd0c7faaaac inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a3c8e89db84402b1901a58bd0c7faaaac"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a3c8e89db84402b1901a58bd0c7faaaac">Split</a> (bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</td></tr>
<tr class="memdesc:a3c8e89db84402b1901a58bd0c7faaaac inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills the given container with <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a>'s which represent each found substring. If bReturnEmptyStrings is true, even empty strings between separators are returned. Output must be a container that stores <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a>'s and provides the functions 'Clear' and 'Append'. szSeparator1 to szSeparator6 are strings which act as separators and indicate where to split the string. This string itself will not be modified. <br /></td></tr>
<tr class="separator:a3c8e89db84402b1901a58bd0c7faaaac inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a492be752bac284a275f78166b67e1406 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a492be752bac284a275f78166b67e1406"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a492be752bac284a275f78166b67e1406">HasAnyExtension</a> () const</td></tr>
<tr class="memdesc:a492be752bac284a275f78166b67e1406 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path has any file extension. <br /></td></tr>
<tr class="separator:a492be752bac284a275f78166b67e1406 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37dd75fbe694bc0d922d50a4ec0ff277 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a37dd75fbe694bc0d922d50a4ec0ff277"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a37dd75fbe694bc0d922d50a4ec0ff277">HasExtension</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sExtension) const</td></tr>
<tr class="memdesc:a37dd75fbe694bc0d922d50a4ec0ff277 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given path ends with the given extension. szExtension should start with a '.' for performance reasons, but it will work without a '.' too. <br /></td></tr>
<tr class="separator:a37dd75fbe694bc0d922d50a4ec0ff277 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ef1a78330f1b3a875e5979dc640f3e2 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a1ef1a78330f1b3a875e5979dc640f3e2"></a>
<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a1ef1a78330f1b3a875e5979dc640f3e2">GetFileExtension</a> () const</td></tr>
<tr class="memdesc:a1ef1a78330f1b3a875e5979dc640f3e2 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file extension of the given path. Will be empty, if the path does not end with a proper extension. <br /></td></tr>
<tr class="separator:a1ef1a78330f1b3a875e5979dc640f3e2 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acadc8a4b5aab5156ac33af352c7f3410 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#acadc8a4b5aab5156ac33af352c7f3410">GetFileName</a> () const</td></tr>
<tr class="memdesc:acadc8a4b5aab5156ac33af352c7f3410 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the file name of a path, excluding the path and extension.  <a href="../../d2/d29/structxii_string_base.htm#acadc8a4b5aab5156ac33af352c7f3410">More...</a><br /></td></tr>
<tr class="separator:acadc8a4b5aab5156ac33af352c7f3410 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fae3e4e1da823bd30d5322872eda70e inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a3fae3e4e1da823bd30d5322872eda70e">GetFileNameAndExtension</a> () const</td></tr>
<tr class="memdesc:a3fae3e4e1da823bd30d5322872eda70e inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the substring that represents the file name including the file extension.  <a href="../../d2/d29/structxii_string_base.htm#a3fae3e4e1da823bd30d5322872eda70e">More...</a><br /></td></tr>
<tr class="separator:a3fae3e4e1da823bd30d5322872eda70e inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6daecf61eb300775ecaced2e95c1ed54 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a6daecf61eb300775ecaced2e95c1ed54">GetFileDirectory</a> () const</td></tr>
<tr class="memdesc:a6daecf61eb300775ecaced2e95c1ed54 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the directory of the given file, which is the substring up to the last path separator.  <a href="../../d2/d29/structxii_string_base.htm#a6daecf61eb300775ecaced2e95c1ed54">More...</a><br /></td></tr>
<tr class="separator:a6daecf61eb300775ecaced2e95c1ed54 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a101e9caaeb85898455be66067f6cbf24 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a101e9caaeb85898455be66067f6cbf24"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a101e9caaeb85898455be66067f6cbf24">IsAbsolutePath</a> () const</td></tr>
<tr class="memdesc:a101e9caaeb85898455be66067f6cbf24 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents an absolute path on the current OS. <br /></td></tr>
<tr class="separator:a101e9caaeb85898455be66067f6cbf24 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a080a07482e950dd521c144ad5e5df772 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a080a07482e950dd521c144ad5e5df772"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#a080a07482e950dd521c144ad5e5df772">IsRelativePath</a> () const</td></tr>
<tr class="memdesc:a080a07482e950dd521c144ad5e5df772 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a relative path on the current OS. <br /></td></tr>
<tr class="separator:a080a07482e950dd521c144ad5e5df772 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acebb3080896bb6ff7ef2ab5d17332678 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="acebb3080896bb6ff7ef2ab5d17332678"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#acebb3080896bb6ff7ef2ab5d17332678">IsRootedPath</a> () const</td></tr>
<tr class="memdesc:acebb3080896bb6ff7ef2ab5d17332678 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the given path represents a 'rooted' path. See <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a> for details. <br /></td></tr>
<tr class="separator:acebb3080896bb6ff7ef2ab5d17332678 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdf4b32536d34fd6e30a2343504b5f61 inherit pub_methods_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d29/structxii_string_base.htm#abdf4b32536d34fd6e30a2343504b5f61">GetRootedPathRootName</a> () const</td></tr>
<tr class="memdesc:abdf4b32536d34fd6e30a2343504b5f61 inherit pub_methods_structxii_string_base"><td class="mdescLeft">&#160;</td><td class="mdescRight">Extracts the root name from a rooted path.  <a href="../../d2/d29/structxii_string_base.htm#abdf4b32536d34fd6e30a2343504b5f61">More...</a><br /></td></tr>
<tr class="separator:abdf4b32536d34fd6e30a2343504b5f61 inherit pub_methods_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:af4d7573a936a1bc9c82897db4937e3bf"><td class="memTemplParams" colspan="2"><a id="af4d7573a936a1bc9c82897db4937e3bf"></a>
template&lt;xiiUInt16 T&gt; </td></tr>
<tr class="memitem:af4d7573a936a1bc9c82897db4937e3bf"><td class="memTemplItemLeft" align="right" valign="top">struct&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiHybridStringBase</b></td></tr>
<tr class="separator:af4d7573a936a1bc9c82897db4937e3bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_types_structxii_string_base"><td colspan="2" onclick="javascript:toggleInherit('pub_types_structxii_string_base')"><img src="../../closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="../../d2/d29/structxii_string_base.htm">xiiStringBase&lt; xiiStringBuilder &gt;</a></td></tr>
<tr class="memitem:aa2e5eecaf640177d7bfdeec6fb862b54 inherit pub_types_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="aa2e5eecaf640177d7bfdeec6fb862b54"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>iterator</b> = <a class="el" href="../../de/d81/structxii_string_iterator.htm">xiiStringIterator</a></td></tr>
<tr class="separator:aa2e5eecaf640177d7bfdeec6fb862b54 inherit pub_types_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a384460e6505642b62a1d45197706cd5e inherit pub_types_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a384460e6505642b62a1d45197706cd5e"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_iterator</b> = <a class="el" href="../../de/d81/structxii_string_iterator.htm">xiiStringIterator</a></td></tr>
<tr class="separator:a384460e6505642b62a1d45197706cd5e inherit pub_types_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86fcd6d22ade63a1ad65432ba050590a inherit pub_types_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="a86fcd6d22ade63a1ad65432ba050590a"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>reverse_iterator</b> = <a class="el" href="../../d8/d78/structxii_string_reverse_iterator.htm">xiiStringReverseIterator</a></td></tr>
<tr class="separator:a86fcd6d22ade63a1ad65432ba050590a inherit pub_types_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada258fb50185398b647a256c5c682318 inherit pub_types_structxii_string_base"><td class="memItemLeft" align="right" valign="top"><a id="ada258fb50185398b647a256c5c682318"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>const_reverse_iterator</b> = <a class="el" href="../../d8/d78/structxii_string_reverse_iterator.htm">xiiStringReverseIterator</a></td></tr>
<tr class="separator:ada258fb50185398b647a256c5c682318 inherit pub_types_structxii_string_base"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a> is a class that is meant for creating and modifying strings. </p>
<p>It is not meant to store strings for a longer duration. Each <a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a> uses a <a class="el" href="../../dc/da9/classxii_hybrid_array.htm" title="A hybrid array uses in-place storage to handle the first few elements without any allocation....">xiiHybridArray</a> to allocate a large buffer on the stack, such that string manipulations are possible without memory allocations, unless the string is too large. No sharing of data happens between <a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a> instances, as it is expected that they will be modified anyway. Instead all data is always copied, therefore instances should not be passed by copy. All string data is stored Utf8 encoded, just as all other string classes, too. That makes it difficult to modify individual characters. Instead you should prefer high-level functions such as 'ReplaceSubString'. If individual characters must be modified, it might make more sense to create a second <a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a>, and iterate over the first while rebuilding the desired result in the second. Once a string is built and should only be stored for read access, it should be stored in a xiiString instance. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aeb8dedf699785b95812b7b137a901324"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aeb8dedf699785b95812b7b137a901324">&#9670;&nbsp;</a></span>AppendPath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStringBuilder::AppendPath </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sPath1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sPath2</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sPath3</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sPath4</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Appends several path pieces. Makes sure they are always properly separated by a slash. </p>
<p>Will call 'MakeCleanPath' internally, so the representation of the path might change. </p>

</div>
</div>
<a id="afca8c1eaed9acea7e9305689935f06ac"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afca8c1eaed9acea7e9305689935f06ac">&#9670;&nbsp;</a></span>AppendWithSeparator()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStringBuilder::AppendWithSeparator </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sSeparator</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sText1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sText2</em> = <code><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sText3</em> = <code><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sText4</em> = <code><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sText5</em> = <code><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sText6</em> = <code><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Similar to <a class="el" href="../../d4/dbb/classxii_string_builder.htm#aacd733a00453033fe245ff64350a0847" title="Appends a single Utf32 character.">Append()</a> but the very first argument is a separator that is only appended (once) if the existing string is not empty and does not already end with the separator. </p>
<p>This is useful when one wants to append entries that require a separator like a comma in between items. E.g. calling AppendWithSeparator(", ", "a", "b"); AppendWithSeparator(", ", "c", "d"); results in the string "ab, cd" </p>

</div>
</div>
<a id="a95ecfcfd5e7427615e0098e33fa6ce1d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a95ecfcfd5e7427615e0098e33fa6ce1d">&#9670;&nbsp;</a></span>ChangeCharacter()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XII_FORCE_INLINE void xiiStringBuilder::ChangeCharacter </td>
          <td>(</td>
          <td class="paramtype">iterator &amp;&#160;</td>
          <td class="paramname"><em>ref_it</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiCharacter</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Changes the single character in this string, to which the iterator currently points. </p>
<p>The string might need to be moved around, if its encoding size changes, however the given iterator will be adjusted so that it will always stay valid. </p><dl class="section note"><dt>Note</dt><dd>This can be a very costly operation (unless this string is pure ASCII). It is only provided for the few rare cases where it is more convenient and performance is not of concern. If possible, do not use this function, at all. </dd></dl>

</div>
</div>
<a id="a32e07e05352f5dcd52a36d460a8e6256"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32e07e05352f5dcd52a36d460a8e6256">&#9670;&nbsp;</a></span>ChangeFileExtension()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStringBuilder::ChangeFileExtension </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sNewExtension</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Only changes the file extension of the path. If there is no extension yet, one is appended (including a dot). </p>
<p>sNewExtension may or may not start with a dot. If sNewExtension is empty, the file extension is removed, but the dot remains. E.g. "file.txt" -&gt; "file." If the full extension should be removed, including the dot, use <a class="el" href="../../d4/dbb/classxii_string_builder.htm#aec8877057942cb21427f2cb46a7e840e" title="If any extension exists, it is removed, including the dot before it.">RemoveFileExtension()</a> instead. </p>

</div>
</div>
<a id="a20f41a5444f5580a8a0e3d02d4c4eea5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a20f41a5444f5580a8a0e3d02d4c4eea5">&#9670;&nbsp;</a></span>IsPathBelowFolder()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiStringBuilder::IsPathBelowFolder </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szPathToFolder</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Checks whether this path is a sub-path of the given path. </p>
<p>This function will call 'MakeCleanPath' to be able to compare both paths, thus it might modify the data of this instance.</p>
<p>An empty folder (zero length) does not contain ANY files.<br  />
A non-existing file-name (zero length) is never in any folder.<br  />
Example:<br  />
IsFileBelowFolder ("", "XYZ") -&gt; always false<br  />
IsFileBelowFolder ("XYZ", "") -&gt; always false<br  />
IsFileBelowFolder ("", "") -&gt; always false<br  />
 </p>

</div>
</div>
<a id="a7c1fb2c175a666d065a8abefaad5534a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7c1fb2c175a666d065a8abefaad5534a">&#9670;&nbsp;</a></span>MakeCleanPath()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStringBuilder::MakeCleanPath </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes "../" where possible, replaces all path separators with /, removes double slashes. </p>
<p>All paths use slashes on all platforms. If you need to convert a path to the OS specific representation, use 'MakePathSeparatorsNative' 'MakeCleanPath' will in rare circumstances grow the string by one character. That means it is quite safe to assume that it will not waste time on memory allocations. If it is repeatedly called on the same string, it has a minor overhead for computing the same string over and over, but no memory allocations will be done (everything is in-place).</p>
<p>Removes all double path separators (slashes and backslashes) in a path, except if the path starts with two (back-)slashes, those are kept, as they might indicate a UNC path. </p>

</div>
</div>
<a id="a4bb3e96721492867477d727e96ab1462"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4bb3e96721492867477d727e96ab1462">&#9670;&nbsp;</a></span>MakePathSeparatorsNative()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStringBuilder::MakePathSeparatorsNative </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Cleans this path up and replaces all path separators by the OS specific separator. </p>
<p>This can be used, if you want to present paths in the OS specific form to the user in the UI. In all other cases the internal representation uses slashes, no matter on which operating system. </p>

</div>
</div>
<a id="a74a5ef89c105ff4e4fa507f4fa18b5cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a74a5ef89c105ff4e4fa507f4fa18b5cf">&#9670;&nbsp;</a></span>MakeRelativeTo()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiStringBuilder::MakeRelativeTo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sAbsolutePathToMakeThisRelativeTo</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Converts this path into a relative path to the path with the awesome variable name 'szAbsolutePathToMakeThisRelativeTo'. </p>
<p>If the method succeeds the StringBuilder's contents are modified in place. </p>

</div>
</div>
<a id="a32df060a23b1194a0856dfa97424f70e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a32df060a23b1194a0856dfa97424f70e">&#9670;&nbsp;</a></span>PathParentDirectory()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStringBuilder::PathParentDirectory </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiLevelsUp</em> = <code>1</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Modifies this string to point to the parent directory. </p>
<p>'uiLevelsUp' can be used to go several folders upwards. It has to be at least one. If there are no more folders to go up, "../" is appended as much as needed. </p>

</div>
</div>
<a id="a8651470b002d8cf9ae21e8b3e4ec22ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8651470b002d8cf9ae21e8b3e4ec22ab">&#9670;&nbsp;</a></span>ReplaceFirst()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringBuilder::ReplaceFirst </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sReplacement</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the first occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the beginning). </p>
<p>Returns the first position where szSearchFor was found, or nullptr if nothing was found (and replaced). </p>

</div>
</div>
<a id="a12dbafa72fb8dd245299c7072195fff5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a12dbafa72fb8dd245299c7072195fff5">&#9670;&nbsp;</a></span>ReplaceLast()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringBuilder::ReplaceLast </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sReplacement</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szStartSearchAt</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the last occurrence of szSearchFor by szReplacement. Optionally starts searching at szStartSearchAt (or the end). </p>
<p>Returns the last position where szSearchFor was found, or nullptr if nothing was found (and replaced). </p>

</div>
</div>
<a id="a0bb6ccd1fa65d92ba54a4a11f82259d6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0bb6ccd1fa65d92ba54a4a11f82259d6">&#9670;&nbsp;</a></span>ReplaceWholeWord()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringBuilder::ReplaceWholeWord </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sReplaceWith</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces the first occurrence of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB. </p>
<p>Returns the start position of where the word was replaced or nullptr if nothing got replaced. </p>

</div>
</div>
<a id="a16ce5306406963124b2f303e114a82cf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a16ce5306406963124b2f303e114a82cf">&#9670;&nbsp;</a></span>ReplaceWholeWord_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiStringBuilder::ReplaceWholeWord_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sReplaceWith</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Case-insensitive version of ReplaceWholeWord. </p>
<p>Returns the start position of where the word was replaced or nullptr if nothing got replaced. </p>

</div>
</div>
<a id="a21deaa5f1347102f682b3a3d382eb835"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a21deaa5f1347102f682b3a3d382eb835">&#9670;&nbsp;</a></span>ReplaceWholeWordAll()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiStringBuilder::ReplaceWholeWordAll </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sReplaceWith</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Replaces all occurrences of szSearchFor by szReplaceWith, if szSearchFor was found to be a 'whole word', as indicated by the delimiter function IsDelimiterCB. </p>
<p>Returns how many words got replaced. </p>

</div>
</div>
<a id="a1633a53d1f2735b20e3470096e02aeec"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1633a53d1f2735b20e3470096e02aeec">&#9670;&nbsp;</a></span>ReplaceWholeWordAll_NoCase()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiStringBuilder::ReplaceWholeWordAll_NoCase </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szSearchFor</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sReplaceWith</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a>&#160;</td>
          <td class="paramname"><em>isDelimiterCB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Case-insensitive version of ReplaceWholeWordAll. </p>
<p>Returns how many words got replaced. </p>

</div>
</div>
<a id="ac10cf1b62532e9daa2af2a877993ab99"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac10cf1b62532e9daa2af2a877993ab99">&#9670;&nbsp;</a></span>Shrink()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiStringBuilder::Shrink </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsFront</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiShrinkCharsBack</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Removes the first n and last m characters from this string. </p>
<p>This function will never reallocate data. Removing characters at the back is very cheap. Removing characters at the front needs to move data around, so can be quite costly. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/<a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/Implementation/StringBuilder.cpp</li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/Implementation/<a class="el" href="../../da/dbb/_string_builder__inl_8h_source.htm">StringBuilder_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a></li>
    <li class="footer">Generated on Sun Sep 24 2023 13:22:28 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

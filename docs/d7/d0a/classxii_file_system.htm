<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiFileSystem Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d7/d0a/classxii_file_system.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../dc/dde/classxii_file_system-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiFileSystem Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a> provides high-level functionality to manage files in a virtual file system.  
 <a href="../../d7/d0a/classxii_file_system.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d2/d58/_file_system_8h_source.htm">FileSystem.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../db/da4/structxii_file_system_1_1_file_event.htm">FileEvent</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The event data that is broadcast by the <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a> upon certain file operations.  <a href="../../db/da4/structxii_file_system_1_1_file_event.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d74/structxii_file_system_1_1_file_event_type.htm">FileEventType</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes the type of events that are broadcast by the <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a>.  <a href="../../d5/d74/structxii_file_system_1_1_file_event_type.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a54bad68a9749727d4e8be83bb5a5999a"><td class="memItemLeft" align="right" valign="top"><a id="a54bad68a9749727d4e8be83bb5a5999a"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a54bad68a9749727d4e8be83bb5a5999a">DataDirUsage</a> { <b>ReadOnly</b>, 
<b>AllowWrites</b>
 }</td></tr>
<tr class="memdesc:a54bad68a9749727d4e8be83bb5a5999a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Describes in which mode a data directory is mounted. <br /></td></tr>
<tr class="separator:a54bad68a9749727d4e8be83bb5a5999a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:aad24210ecbb52fba1841cac0ce1c11ba"><td class="memItemLeft" align="right" valign="top"><a id="aad24210ecbb52fba1841cac0ce1c11ba"></a>
static xiiEventSubscriptionID&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#aad24210ecbb52fba1841cac0ce1c11ba">RegisterEventHandler</a> (<a class="el" href="../../dc/d22/classxii_event.htm">xiiEvent</a>&lt; const <a class="el" href="../../db/da4/structxii_file_system_1_1_file_event.htm">FileEvent</a> &amp; &gt;::Handler handler)</td></tr>
<tr class="memdesc:aad24210ecbb52fba1841cac0ce1c11ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Registers an Event Handler that will be informed about all the events that the file system broadcasts. <br /></td></tr>
<tr class="separator:aad24210ecbb52fba1841cac0ce1c11ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54f28a5a06275916ff71e41e2ef59377"><td class="memItemLeft" align="right" valign="top"><a id="a54f28a5a06275916ff71e41e2ef59377"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a54f28a5a06275916ff71e41e2ef59377">UnregisterEventHandler</a> (<a class="el" href="../../dc/d22/classxii_event.htm">xiiEvent</a>&lt; const <a class="el" href="../../db/da4/structxii_file_system_1_1_file_event.htm">FileEvent</a> &amp; &gt;::Handler handler)</td></tr>
<tr class="memdesc:a54f28a5a06275916ff71e41e2ef59377"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unregisters a previously registered Event Handler. <br /></td></tr>
<tr class="separator:a54f28a5a06275916ff71e41e2ef59377"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb456e49e58d74f91e0501696bd515c2"><td class="memItemLeft" align="right" valign="top"><a id="adb456e49e58d74f91e0501696bd515c2"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><b>UnregisterEventHandler</b> (xiiEventSubscriptionID subscriptionId)</td></tr>
<tr class="separator:adb456e49e58d74f91e0501696bd515c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a709f8b04ff1be30b099d6a25949a0e6b"><td class="memItemLeft" align="right" valign="top"><a id="a709f8b04ff1be30b099d6a25949a0e6b"></a>
static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>CreateDirectoryStructure</b> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPath)</td></tr>
<tr class="separator:a709f8b04ff1be30b099d6a25949a0e6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac18029389b7010d33ccb5116c1e47450"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#ac18029389b7010d33ccb5116c1e47450">DeleteFile</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sFile)</td></tr>
<tr class="memdesc:ac18029389b7010d33ccb5116c1e47450"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deletes the given file from all data directories, if possible.  <a href="../../d7/d0a/classxii_file_system.htm#ac18029389b7010d33ccb5116c1e47450">More...</a><br /></td></tr>
<tr class="separator:ac18029389b7010d33ccb5116c1e47450"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a8520902a7dafd1db5fe4a356991063"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a6a8520902a7dafd1db5fe4a356991063">ExistsFile</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sFile)</td></tr>
<tr class="memdesc:a6a8520902a7dafd1db5fe4a356991063"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given file exists in any data directory.  <a href="../../d7/d0a/classxii_file_system.htm#a6a8520902a7dafd1db5fe4a356991063">More...</a><br /></td></tr>
<tr class="separator:a6a8520902a7dafd1db5fe4a356991063"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4ce900e8d06a0c462f5215a7fa4cf3c"><td class="memItemLeft" align="right" valign="top"><a id="af4ce900e8d06a0c462f5215a7fa4cf3c"></a>
static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#af4ce900e8d06a0c462f5215a7fa4cf3c">GetFileStats</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sFileOrFolder, <a class="el" href="../../d6/dd0/structxii_file_stats.htm">xiiFileStats</a> &amp;out_stats)</td></tr>
<tr class="memdesc:af4ce900e8d06a0c462f5215a7fa4cf3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to get the <a class="el" href="../../d6/dd0/structxii_file_stats.htm" title="Holds the stats for a file.">xiiFileStats</a> for the given file. Typically should give the same results as <a class="el" href="../../da/d95/classxii_o_s_file.htm#adc699c70c70c4ed0ad6e9375ebff36d4" title="Gets the stats about the given file or folder. Returns false, if the stats could not be determined.">xiiOSFile::GetFileStats</a>, but some data dir implementations may not support retrieving all data (e.g. GetFileStats on folders might not always work). <br /></td></tr>
<tr class="separator:af4ce900e8d06a0c462f5215a7fa4cf3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bb224cba38034f810bb4635a9767b47"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a9bb224cba38034f810bb4635a9767b47">ResolvePath</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPath, <a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> *out_pAbsolutePath, <a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> *out_pDataDirRelativePath, <a class="el" href="../../de/d33/classxii_data_directory_type.htm">xiiDataDirectoryType</a> **out_pDataDir=nullptr)</td></tr>
<tr class="memdesc:a9bb224cba38034f810bb4635a9767b47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to resolve the given path and returns the absolute and relative path to the final file.  <a href="../../d7/d0a/classxii_file_system.htm#a9bb224cba38034f810bb4635a9767b47">More...</a><br /></td></tr>
<tr class="separator:a9bb224cba38034f810bb4635a9767b47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae646f369d5e85f1c9304e0f618cf4223"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#ae646f369d5e85f1c9304e0f618cf4223">FindFolderWithSubPath</a> (<a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;ref_sResult, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartDirectory, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSubPath, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sRedirectionFileName={})</td></tr>
<tr class="memdesc:ae646f369d5e85f1c9304e0f618cf4223"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts at szStartDirectory and goes up until it finds a folder that contains the given sub folder structure.  <a href="../../d7/d0a/classxii_file_system.htm#ae646f369d5e85f1c9304e0f618cf4223">More...</a><br /></td></tr>
<tr class="separator:ae646f369d5e85f1c9304e0f618cf4223"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9abfaf036f4391db83674478735c9f32"><td class="memItemLeft" align="right" valign="top"><a id="a9abfaf036f4391db83674478735c9f32"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a9abfaf036f4391db83674478735c9f32">ResolveAssetRedirection</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPathOrAssetGuid, <a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;out_sRedirection)</td></tr>
<tr class="memdesc:a9abfaf036f4391db83674478735c9f32"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if any data directory knows how to redirect the given path. Otherwise the original string is returned in out_sRedirection. <br /></td></tr>
<tr class="separator:a9abfaf036f4391db83674478735c9f32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a959bc69e9131fe9383ff9b0367a0d3b0"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a959bc69e9131fe9383ff9b0367a0d3b0">MigrateFileLocation</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOldLocation, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sNewLocation)</td></tr>
<tr class="memdesc:a959bc69e9131fe9383ff9b0367a0d3b0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Migrates a file from an old location to a new one, and returns the path that should be used to open it (either the old or the new path).  <a href="../../d7/d0a/classxii_file_system.htm#a959bc69e9131fe9383ff9b0367a0d3b0">More...</a><br /></td></tr>
<tr class="separator:a959bc69e9131fe9383ff9b0367a0d3b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Special Directories</div></td></tr>
<tr class="memitem:a1d36b6c014638a19bc2f48011f31ae66"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a1d36b6c014638a19bc2f48011f31ae66">DetectSdkRootDirectory</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sExpectedSubFolder=&quot;Data/Base&quot;)</td></tr>
<tr class="memdesc:a1d36b6c014638a19bc2f48011f31ae66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for a directory to use as the "Sdk" special directory.  <a href="../../d7/d0a/classxii_file_system.htm#a1d36b6c014638a19bc2f48011f31ae66">More...</a><br /></td></tr>
<tr class="separator:a1d36b6c014638a19bc2f48011f31ae66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5379337feec025e28164fe34f96ce8c3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a5379337feec025e28164fe34f96ce8c3">SetSdkRootDirectory</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sSdkDir)</td></tr>
<tr class="memdesc:a5379337feec025e28164fe34f96ce8c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">the special directory "&gt;Sdk" is the root folder of the SDK data, it is often used as the main reference from where other data directories are found. For higher level code (e.g. <a class="el" href="../../dd/d2b/classxii_application.htm" title="Base class to be used by applications based on XII.">xiiApplication</a>) it is often vital that this is set early at startup.  <a href="../../d7/d0a/classxii_file_system.htm#a5379337feec025e28164fe34f96ce8c3">More...</a><br /></td></tr>
<tr class="separator:a5379337feec025e28164fe34f96ce8c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abd9567ebcf7ea5a6be1f1ee72a5ed37c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#abd9567ebcf7ea5a6be1f1ee72a5ed37c">GetSdkRootDirectory</a> ()</td></tr>
<tr class="memdesc:abd9567ebcf7ea5a6be1f1ee72a5ed37c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the previously set Sdk root directory.  <a href="../../d7/d0a/classxii_file_system.htm#abd9567ebcf7ea5a6be1f1ee72a5ed37c">More...</a><br /></td></tr>
<tr class="separator:abd9567ebcf7ea5a6be1f1ee72a5ed37c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e6b9c492ba466750205dd9500e1ee35"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a8e6b9c492ba466750205dd9500e1ee35">SetSpecialDirectory</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sName, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sReplacement)</td></tr>
<tr class="memdesc:a8e6b9c492ba466750205dd9500e1ee35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Special directories are used when mounting data directories as basic references.  <a href="../../d7/d0a/classxii_file_system.htm#a8e6b9c492ba466750205dd9500e1ee35">More...</a><br /></td></tr>
<tr class="separator:a8e6b9c492ba466750205dd9500e1ee35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4dba8e3fa1ccf2ec1071a8f13dee44f"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#ad4dba8e3fa1ccf2ec1071a8f13dee44f">ResolveSpecialDirectory</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sDirectory, <a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;out_sPath)</td></tr>
<tr class="memdesc:ad4dba8e3fa1ccf2ec1071a8f13dee44f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute path to <em>szDirectory</em>.  <a href="../../d7/d0a/classxii_file_system.htm#ad4dba8e3fa1ccf2ec1071a8f13dee44f">More...</a><br /></td></tr>
<tr class="separator:ad4dba8e3fa1ccf2ec1071a8f13dee44f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr><td colspan="2"><div class="groupHeader">Misc</div></td></tr>
<tr class="memitem:a107ed45a9258f204ad59256509e8294b"><td class="memItemLeft" align="right" valign="top"><a id="a107ed45a9258f204ad59256509e8294b"></a>
static <a class="el" href="../../dd/d52/classxii_mutex.htm">xiiMutex</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a107ed45a9258f204ad59256509e8294b">GetMutex</a> ()</td></tr>
<tr class="memdesc:a107ed45a9258f204ad59256509e8294b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the (recursive) mutex that is used internally by the file system which can be used to guard bundled operations on the file system. <br /></td></tr>
<tr class="separator:a107ed45a9258f204ad59256509e8294b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a19a59eb1c076709ce89dcd3443b8425f"><td class="memItemLeft" align="right" valign="top"><a id="a19a59eb1c076709ce89dcd3443b8425f"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>xiiDataDirectoryReaderWriterBase</b></td></tr>
<tr class="separator:a19a59eb1c076709ce89dcd3443b8425f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a462db18bc5b8c9a54b194b13b5df5c95"><td class="memItemLeft" align="right" valign="top"><a id="a462db18bc5b8c9a54b194b13b5df5c95"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>xiiFileReaderBase</b></td></tr>
<tr class="separator:a462db18bc5b8c9a54b194b13b5df5c95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80666da91a2c27b6c8641c8383c92ff4"><td class="memItemLeft" align="right" valign="top"><a id="a80666da91a2c27b6c8641c8383c92ff4"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>xiiFileWriterBase</b></td></tr>
<tr class="separator:a80666da91a2c27b6c8641c8383c92ff4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Data Directory Modifications</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrpb845b16b16444791cff65143ee007de4"></a> All functions that add / remove data directories are not thread safe and require that this is done on a single thread with no other thread accessing anything in <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a> simultaneously. </p>
</td></tr>
<tr class="memitem:aa84886028191f72bfab9522a330776d0"><td class="memItemLeft" align="right" valign="top">using&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#aa84886028191f72bfab9522a330776d0">xiiDataDirFactory</a> = <a class="el" href="../../de/d33/classxii_data_directory_type.htm">xiiDataDirectoryType</a> *(*)(<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>, <a class="el" href="../../d7/d0a/classxii_file_system.htm#a54bad68a9749727d4e8be83bb5a5999a">xiiFileSystem::DataDirUsage</a>)</td></tr>
<tr class="memdesc:aa84886028191f72bfab9522a330776d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">This factory creates a data directory type, if it can handle the given data directory. Otherwise it returns nullptr.  <a href="../../d7/d0a/classxii_file_system.htm#aa84886028191f72bfab9522a330776d0">More...</a><br /></td></tr>
<tr class="separator:aa84886028191f72bfab9522a330776d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec01ac143bd3bc243aa8dd15da12784c"><td class="memItemLeft" align="right" valign="top"><a id="aec01ac143bd3bc243aa8dd15da12784c"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#aec01ac143bd3bc243aa8dd15da12784c">RegisterDataDirectoryFactory</a> (<a class="el" href="../../d7/d0a/classxii_file_system.htm#aa84886028191f72bfab9522a330776d0">xiiDataDirFactory</a> factory, float fPriority=0)</td></tr>
<tr class="memdesc:aec01ac143bd3bc243aa8dd15da12784c"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function allows to register another data directory factory, which might be invoked when a new data directory is to be added. <br /></td></tr>
<tr class="separator:aec01ac143bd3bc243aa8dd15da12784c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a032908ccb6f0b94157310b7e12fd4d0a"><td class="memItemLeft" align="right" valign="top"><a id="a032908ccb6f0b94157310b7e12fd4d0a"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a032908ccb6f0b94157310b7e12fd4d0a">ClearAllDataDirectoryFactories</a> ()</td></tr>
<tr class="memdesc:a032908ccb6f0b94157310b7e12fd4d0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will remove all known data directory factories. <br /></td></tr>
<tr class="separator:a032908ccb6f0b94157310b7e12fd4d0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4f21defbf902cd791d6926e62fde2db"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#ae4f21defbf902cd791d6926e62fde2db">AddDataDirectory</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sDataDirectory, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sGroup={}, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sRootName={}, <a class="el" href="../../d7/d0a/classxii_file_system.htm#a54bad68a9749727d4e8be83bb5a5999a">xiiFileSystem::DataDirUsage</a> usage=ReadOnly)</td></tr>
<tr class="memdesc:ae4f21defbf902cd791d6926e62fde2db"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a data directory. It will try all the registered factories to find a data directory type that can handle the given path.  <a href="../../d7/d0a/classxii_file_system.htm#ae4f21defbf902cd791d6926e62fde2db">More...</a><br /></td></tr>
<tr class="separator:ae4f21defbf902cd791d6926e62fde2db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed3f11051fb93c5efd13d9f22b5ef6ee"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#aed3f11051fb93c5efd13d9f22b5ef6ee">RemoveDataDirectory</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sRootName)</td></tr>
<tr class="memdesc:aed3f11051fb93c5efd13d9f22b5ef6ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for a data directory with the given root name and removes it.  <a href="../../d7/d0a/classxii_file_system.htm#aed3f11051fb93c5efd13d9f22b5ef6ee">More...</a><br /></td></tr>
<tr class="separator:aed3f11051fb93c5efd13d9f22b5ef6ee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec0332da905427b1efc91183f07f810d"><td class="memItemLeft" align="right" valign="top"><a id="aec0332da905427b1efc91183f07f810d"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#aec0332da905427b1efc91183f07f810d">RemoveDataDirectoryGroup</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sGroup)</td></tr>
<tr class="memdesc:aec0332da905427b1efc91183f07f810d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all data directories that belong to the given group. Returns the number of data directories that were removed. <br /></td></tr>
<tr class="separator:aec0332da905427b1efc91183f07f810d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea49012af38566809cb987a00b7b360e"><td class="memItemLeft" align="right" valign="top"><a id="aea49012af38566809cb987a00b7b360e"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#aea49012af38566809cb987a00b7b360e">ClearAllDataDirectories</a> ()</td></tr>
<tr class="memdesc:aea49012af38566809cb987a00b7b360e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all data directories. <br /></td></tr>
<tr class="separator:aea49012af38566809cb987a00b7b360e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a29a6de2c0f35a69a0382b8373876db"><td class="memItemLeft" align="right" valign="top"><a id="a9a29a6de2c0f35a69a0382b8373876db"></a>
static <a class="el" href="../../de/d33/classxii_data_directory_type.htm">xiiDataDirectoryType</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a9a29a6de2c0f35a69a0382b8373876db">FindDataDirectoryWithRoot</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sRootName)</td></tr>
<tr class="memdesc:a9a29a6de2c0f35a69a0382b8373876db"><td class="mdescLeft">&#160;</td><td class="mdescRight">If a data directory with the given root name already exists, it will be returned, nullptr otherwise. <br /></td></tr>
<tr class="separator:a9a29a6de2c0f35a69a0382b8373876db"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae1c6f5db9d80ae1fd783c19de9f64748"><td class="memItemLeft" align="right" valign="top"><a id="ae1c6f5db9d80ae1fd783c19de9f64748"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#ae1c6f5db9d80ae1fd783c19de9f64748">GetNumDataDirectories</a> ()</td></tr>
<tr class="memdesc:ae1c6f5db9d80ae1fd783c19de9f64748"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of currently active data directories. <br /></td></tr>
<tr class="separator:ae1c6f5db9d80ae1fd783c19de9f64748"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a94f70a0cd8c3a554c6dffee1980b316b"><td class="memItemLeft" align="right" valign="top"><a id="a94f70a0cd8c3a554c6dffee1980b316b"></a>
static <a class="el" href="../../de/d33/classxii_data_directory_type.htm">xiiDataDirectoryType</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a94f70a0cd8c3a554c6dffee1980b316b">GetDataDirectory</a> (xiiUInt32 uiDataDirIndex)</td></tr>
<tr class="memdesc:a94f70a0cd8c3a554c6dffee1980b316b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th currently active data directory. <br /></td></tr>
<tr class="separator:a94f70a0cd8c3a554c6dffee1980b316b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2be35af219b9fb30cf82f24d9404d995"><td class="memItemLeft" align="right" valign="top"><a id="a2be35af219b9fb30cf82f24d9404d995"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a2be35af219b9fb30cf82f24d9404d995">ReloadAllExternalDataDirectoryConfigs</a> ()</td></tr>
<tr class="memdesc:a2be35af219b9fb30cf82f24d9404d995"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls <a class="el" href="../../de/d33/classxii_data_directory_type.htm#a188b02feb34f82ee3fda2d685f640f6b" title="Some data directory types may use external configuration files (e.g. asset lookup tables) that may ge...">xiiDataDirectoryType::ReloadExternalConfigs()</a> on all active data directories. <br /></td></tr>
<tr class="separator:a2be35af219b9fb30cf82f24d9404d995"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a> provides high-level functionality to manage files in a virtual file system. </p>
<p>There are two sides at which the file system can be extended: Data directories are the 'sources' of data. These can be simple folders, zip files, data-bases, HTTP servers, etc. Different <a class="el" href="../../de/d33/classxii_data_directory_type.htm" title="The base class for all data directory types.">xiiDataDirectoryType</a>'s can implement these different 'decoding methods', i.e. they handle how to actually access the data and they use their own readers/writers to implement a common interface for passing data streams to and from the data directory. On the other end there are the actual file readers/writers, which implement policies how to optimize these reads/writes. The default <a class="el" href="../../d6/de4/classxii_file_reader.htm" title="The default class to use to read data from a file, implements the xiiStreamReader interface.">xiiFileReader</a> and <a class="el" href="../../d4/dea/classxii_file_writer.htm" title="The default class to use to write data to a file, implements the xiiStreamWriter interface.">xiiFileWriter</a> implement a buffering policy, i.e. they use an internal cache to only sporadically read or write to the actual data stream. A 'threaded' or 'parallel' file reader/writer could implement a different policy, where a file is read/written in a thread and thus allows to have non-blocking file accesses.</p>
<p>Which policy to use is defined by the user every time he needs to access a file, by simply using the desired reader/writer class. How to mount data directories (i.e. with which <a class="el" href="../../de/d33/classxii_data_directory_type.htm" title="The base class for all data directory types.">xiiDataDirectoryType</a>) is defined by the 'DataDirFactories', which are functions that create <a class="el" href="../../de/d33/classxii_data_directory_type.htm" title="The base class for all data directory types.">xiiDataDirectoryType</a>'s. This way one can mount the same data directory (e.g. "MyTestDir") differently, depending on which Factories have been registered previously. This allows to easily configure how to set up data directories. E.g. by default ordinary folders will be mounted to be read from the local file system. However, by registering a different Factory, the same directory could also be mounted over a network on a remote file serving machine.</p>
<p>Additionally <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a> also broadcasts events about which files are (about to be) accessed. This allows to hook into the system and implement stuff like automatic asset transformations before/after certain file accesses, checking out files from revision control systems, or simply logging all file activity.</p>
<p>All operations that go through the <a class="el" href="../../d7/d0a/classxii_file_system.htm" title="The xiiFileSystem provides high-level functionality to manage files in a virtual file system.">xiiFileSystem</a> are protected by a mutex, which means that opening, closing, deleting files, as well as adding or removing data directories etc. will be synchronized and cannot happen in parallel. Reading/writing file streams can happen in parallel, only the administrative tasks need to be protected. File events are broadcast as they occur, that means they will be executed on whichever thread triggered them. Since they are executed from within the filesystem mutex, they cannot occur in parallel. </p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a id="aa84886028191f72bfab9522a330776d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa84886028191f72bfab9522a330776d0">&#9670;&nbsp;</a></span>xiiDataDirFactory</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">using <a class="el" href="../../d7/d0a/classxii_file_system.htm#aa84886028191f72bfab9522a330776d0">xiiFileSystem::xiiDataDirFactory</a> =  <a class="el" href="../../de/d33/classxii_data_directory_type.htm">xiiDataDirectoryType</a>* (*)(<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>, <a class="el" href="../../d7/d0a/classxii_file_system.htm#a54bad68a9749727d4e8be83bb5a5999a">xiiFileSystem::DataDirUsage</a>)</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This factory creates a data directory type, if it can handle the given data directory. Otherwise it returns nullptr. </p>
<p>Every time a data directory is supposed to be added, the file system will query its data dir factories, which one can successfully create a <a class="el" href="../../de/d33/classxii_data_directory_type.htm" title="The base class for all data directory types.">xiiDataDirectoryType</a>. In this process the last factory added has the highest priority. Once a factory is found that was able to create a <a class="el" href="../../de/d33/classxii_data_directory_type.htm" title="The base class for all data directory types.">xiiDataDirectoryType</a>, that one is used. Different factories can be used to mount different types of data directories. But the same directory can also be mounted in different ways. For example a simple folder could be mounted on the local system, or via a HTTP server over a network (lets call it a 'FileServer'). Thus depending on which type of factories are registered, the file system can provide data from very different sources. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="ae4f21defbf902cd791d6926e62fde2db"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae4f21defbf902cd791d6926e62fde2db">&#9670;&nbsp;</a></span>AddDataDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiFileSystem::AddDataDirectory </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sDataDirectory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sGroup</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sRootName</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d7/d0a/classxii_file_system.htm#a54bad68a9749727d4e8be83bb5a5999a">xiiFileSystem::DataDirUsage</a>&#160;</td>
          <td class="paramname"><em>usage</em> = <code>ReadOnly</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a data directory. It will try all the registered factories to find a data directory type that can handle the given path. </p>
<p>If Usage is ReadOnly, writing to the data directory is not allowed. This is independent of whether the data directory type COULD write anything. szGroup defines to what 'group' of data directories this data dir belongs. This is only used in calls to RemoveDataDirectoryGroup, to remove all data directories of the same group. You could use groups such as 'Base', 'Project', 'Settings', 'Level', 'Temp' to distinguish between different sets of data directories. You can also specify the exact same string as szDataDirectory for szGroup, and thus uniquely identify the data dir, to be able to remove just that one. szRootName is optional for read-only data dirs, but mandatory for writable ones. It has to be unique to clearly identify a file within that data directory. It must be used when writing to a file in this directory. For instance, if a data dir root name is "mydata", then the path ":mydata/SomeFile.txt" can be used to write to the top level folder of this data directory. The same can be used for reading exactly that file and ignoring the other data dirs. </p>

</div>
</div>
<a id="ac18029389b7010d33ccb5116c1e47450"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac18029389b7010d33ccb5116c1e47450">&#9670;&nbsp;</a></span>DeleteFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiFileSystem::DeleteFile </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Deletes the given file from all data directories, if possible. </p>
<p>The path must be absolute or rooted, to uniquely identify which file to delete. For example ":appdata/SomeData.txt", assuming a writable data directory has been mounted with the "appdata" root name. </p>

</div>
</div>
<a id="a1d36b6c014638a19bc2f48011f31ae66"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1d36b6c014638a19bc2f48011f31ae66">&#9670;&nbsp;</a></span>DetectSdkRootDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiFileSystem::DetectSdkRootDirectory </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sExpectedSubFolder</em> = <code>&quot;Data/Base&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Searches for a directory to use as the "Sdk" special directory. </p>
<p>It does so by starting at the directory where the application binary is located and then goes up until it finds a folder that contains the given sub-folder. The sub-folder is usually where the engine loads the most basic data from, so it should exist.</p>
<p>Additionally the 'redirection file' feature of <a class="el" href="../../d7/d0a/classxii_file_system.htm#ae646f369d5e85f1c9304e0f618cf4223" title="Starts at szStartDirectory and goes up until it finds a folder that contains the given sub folder str...">xiiFileSystem::FindFolderWithSubPath()</a> is used to allow finding a relocated SDK folder. To do that, place a file called 'xiiSdkRoot.txt' in your top level folder. It should contain the relative path pointing to the SDK folder.</p>
<p>Upon success <a class="el" href="../../d7/d0a/classxii_file_system.htm#a5379337feec025e28164fe34f96ce8c3" title="the special directory &quot;&gt;Sdk&quot; is the root folder of the SDK data, it is often used as the main referen...">SetSdkRootDirectory()</a> is called with the resulting path.</p>
<dl class="section note"><dt>Note</dt><dd>If the Sdk root directory has been set before, this function does nothing! It will not override a previously set value. If that is desired, call SetSdkRootDirectory("") first.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d7/d0a/classxii_file_system.htm#ae646f369d5e85f1c9304e0f618cf4223" title="Starts at szStartDirectory and goes up until it finds a folder that contains the given sub folder str...">xiiFileSystem::FindFolderWithSubPath()</a> </dd></dl>

</div>
</div>
<a id="a6a8520902a7dafd1db5fe4a356991063"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6a8520902a7dafd1db5fe4a356991063">&#9670;&nbsp;</a></span>ExistsFile()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiFileSystem::ExistsFile </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sFile</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks whether the given file exists in any data directory. </p>
<p>The search can be restricted to directories of certain categories (see AddDataDirectory). </p>

</div>
</div>
<a id="ae646f369d5e85f1c9304e0f618cf4223"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae646f369d5e85f1c9304e0f618cf4223">&#9670;&nbsp;</a></span>FindFolderWithSubPath()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiFileSystem::FindFolderWithSubPath </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;&#160;</td>
          <td class="paramname"><em>ref_sResult</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sStartDirectory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sSubPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sRedirectionFileName</em> = <code>{}</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Starts at szStartDirectory and goes up until it finds a folder that contains the given sub folder structure. </p>
<p>Returns XII_FAILURE if nothing is found. Otherwise <em>result</em> is the absolute path to the existing folder that has a given sub-folder.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">result</td><td>If successful, this contains the folder path in which szSubPath exists. </td></tr>
    <tr><td class="paramname">szStartDirectory</td><td>The directory in which to start the search and iterate upwards. </td></tr>
    <tr><td class="paramname">szSubPath</td><td>the relative path to look for in each visited directory. The function succeeds if such a file or folder is found. </td></tr>
    <tr><td class="paramname">szRedirectionFileName</td><td>An optional file name for a redirection file. If in any visited folder a file with this name is found, it will be opened, read entirely, and appended to the current search path, and it is checked whether <em>szSubPath</em> can be found there. This step is not recursive and can't result in an endless loop. It allows to relocate the SDK folder and still have it found, by placing such a redirection file. A common use case, is when XII is used as a Git submodule and therefore the overall file structure is slightly different. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abd9567ebcf7ea5a6be1f1ee72a5ed37c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abd9567ebcf7ea5a6be1f1ee72a5ed37c">&#9670;&nbsp;</a></span>GetSdkRootDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> xiiFileSystem::GetSdkRootDirectory </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the previously set Sdk root directory. </p>
<dl class="section note"><dt>Note</dt><dd>Asserts that the path is not empty!</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d7/d0a/classxii_file_system.htm#a5379337feec025e28164fe34f96ce8c3" title="the special directory &quot;&gt;Sdk&quot; is the root folder of the SDK data, it is often used as the main referen...">SetSdkRootDirectory</a> </dd>
<dd>
<a class="el" href="../../d7/d0a/classxii_file_system.htm#a1d36b6c014638a19bc2f48011f31ae66" title="Searches for a directory to use as the &quot;Sdk&quot; special directory.">DetectSdkRootDirectory</a> </dd></dl>

</div>
</div>
<a id="a959bc69e9131fe9383ff9b0367a0d3b0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a959bc69e9131fe9383ff9b0367a0d3b0">&#9670;&nbsp;</a></span>MigrateFileLocation()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> xiiFileSystem::MigrateFileLocation </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sOldLocation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sNewLocation</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Migrates a file from an old location to a new one, and returns the path that should be used to open it (either the old or the new path). </p>
<p>If the file does not exist in the old location, nothing is done, and the new location is returned. Otherwise, it is attempted to move the file from the old location to the new location. In case that fails (target not writeable or so), the old path is returned, so that code that needs to read that file, finds it in the correct location. If it succeeds, the new location is returned. Afterwards, the file does not exist in the old location anymore. </p>

</div>
</div>
<a id="aed3f11051fb93c5efd13d9f22b5ef6ee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aed3f11051fb93c5efd13d9f22b5ef6ee">&#9670;&nbsp;</a></span>RemoveDataDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiFileSystem::RemoveDataDirectory </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sRootName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Searches for a data directory with the given root name and removes it. </p>
<p>Returns true, if one was found and removed, false if no such data dir existed. </p>

</div>
</div>
<a id="a9bb224cba38034f810bb4635a9767b47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9bb224cba38034f810bb4635a9767b47">&#9670;&nbsp;</a></span>ResolvePath()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiFileSystem::ResolvePath </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sPath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> *&#160;</td>
          <td class="paramname"><em>out_pAbsolutePath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> *&#160;</td>
          <td class="paramname"><em>out_pDataDirRelativePath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../de/d33/classxii_data_directory_type.htm">xiiDataDirectoryType</a> **&#160;</td>
          <td class="paramname"><em>out_pDataDir</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Tries to resolve the given path and returns the absolute and relative path to the final file. </p>
<p>If the given path is a rooted path, for instance something like ":appdata/UserData.txt", (which is necessary for writing to files), the path can be converted easily and the file does not need to exist. Only the data directory with the given root name must be mounted.</p>
<p>If the path is relative, it is attempted to open the specified file, which means it is searched in all available data directories. The path to the file that is found will be returned.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">out_sAbsolutePath</td><td>will contain the absolute path to the file. Can be nullptr. </td></tr>
    <tr><td class="paramname">out_sDataDirRelativePath</td><td>will contain the relative path to the file (from the data directory in which it might end up in). Can be nullptr. </td></tr>
    <tr><td class="paramname">szPath</td><td>can be a relative, an absolute or a rooted path. This can also be used to find the relative location to the data directory that would handle it. </td></tr>
    <tr><td class="paramname">out_ppDataDir</td><td>If not null, it will be set to the data directory that would handle this path.</td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The function will return XII_FAILURE if it was not able to determine any location where the file could be read from or written to. </dd></dl>
<dl class="todo"><dt><b><a class="el" href="../../dd/da0/todo.htm#_todo000019">Todo:</a></b></dt><dd>We might also need the none-redirected path as an output </dd></dl>
<dl class="todo"><dt><b><a class="el" href="../../dd/da0/todo.htm#_todo000020">Todo:</a></b></dt><dd>We might also need the none-redirected path as an output </dd></dl>

</div>
</div>
<a id="ad4dba8e3fa1ccf2ec1071a8f13dee44f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad4dba8e3fa1ccf2ec1071a8f13dee44f">&#9670;&nbsp;</a></span>ResolveSpecialDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiFileSystem::ResolveSpecialDirectory </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sDirectory</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> &amp;&#160;</td>
          <td class="paramname"><em>out_sPath</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the absolute path to <em>szDirectory</em>. </p>
<p>If the path starts with a known special directory marker ("&gt;marker/") it is replaced accordingly. See <a class="el" href="../../d7/d0a/classxii_file_system.htm#a8e6b9c492ba466750205dd9500e1ee35" title="Special directories are used when mounting data directories as basic references.">SetSpecialDirectory()</a> for setting custom special directories.</p>
<p>Built-in special directories (always available) are:</p>
<p>"&gt;sdk/" - Resolves to what <a class="el" href="../../d7/d0a/classxii_file_system.htm#abd9567ebcf7ea5a6be1f1ee72a5ed37c" title="Returns the previously set Sdk root directory.">GetSdkRootDirectory()</a> returns. "&gt;user/" - Resolves to what <a class="el" href="../../da/d95/classxii_o_s_file.htm#adfde473e9550f3e0a4192d1b96d4c42a" title="Returns the folder into which user data may be safely written. Append a sub-folder for your applicati...">xiiOSFile::GetUserDataFolder()</a> returns. "&gt;temp/" - Resolves to what <a class="el" href="../../da/d95/classxii_o_s_file.htm#a4d878860c251454e27488c165a7e39c0" title="Returns the folder into which temp data may be written.">xiiOSFile::GetTempDataFolder()</a> returns. "&gt;appdir/" - Resolves to what <a class="el" href="../../da/d95/classxii_o_s_file.htm#a711646d84584fa4275cd01367f928803" title="Returns the path in which the applications binary file is located.">xiiOSFile::GetApplicationDirectory()</a> returns.</p>
<p>Returns XII_FAILURE if <em>szDirectory</em> starts with an unknown special directory. </p>

</div>
</div>
<a id="a5379337feec025e28164fe34f96ce8c3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5379337feec025e28164fe34f96ce8c3">&#9670;&nbsp;</a></span>SetSdkRootDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiFileSystem::SetSdkRootDirectory </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sSdkDir</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>the special directory "&gt;Sdk" is the root folder of the SDK data, it is often used as the main reference from where other data directories are found. For higher level code (e.g. <a class="el" href="../../dd/d2b/classxii_application.htm" title="Base class to be used by applications based on XII.">xiiApplication</a>) it is often vital that this is set early at startup. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d7/d0a/classxii_file_system.htm#a1d36b6c014638a19bc2f48011f31ae66" title="Searches for a directory to use as the &quot;Sdk&quot; special directory.">DetectSdkRootDirectory()</a> </dd></dl>

</div>
</div>
<a id="a8e6b9c492ba466750205dd9500e1ee35"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8e6b9c492ba466750205dd9500e1ee35">&#9670;&nbsp;</a></span>SetSpecialDirectory()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiFileSystem::SetSpecialDirectory </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sReplacement</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Special directories are used when mounting data directories as basic references. </p>
<p>They are indicated with a "&gt;", ie. "&gt;sdk/Test", but using them is only allowed in few places, e.g. in <a class="el" href="../../d7/d0a/classxii_file_system.htm#ae4f21defbf902cd791d6926e62fde2db" title="Adds a data directory. It will try all the registered factories to find a data directory type that ca...">AddDataDirectory()</a>. Special directories are needed to be able to set up other paths relative to them and to be able to use different ones on different PCs. For instance when using file-serve functionality, the special directories may be different on the host and client machines, but the paths used to mount data directories can stay the same because of this. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/IO/FileSystem/<a class="el" href="../../d2/d58/_file_system_8h_source.htm">FileSystem.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/IO/FileSystem/Implementation/FileSystem.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d7/d0a/classxii_file_system.htm">xiiFileSystem</a></li>
    <li class="footer">Generated on Sat Aug 12 2023 21:47:55 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

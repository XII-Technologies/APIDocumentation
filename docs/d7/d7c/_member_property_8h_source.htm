<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Reflection/Implementation/MemberProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d7/d7c/_member_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MemberProperty.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/StaticRTTI.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/Variant.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">// ***********************************************</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">// ***** Base class for accessing properties *****</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160; </div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="../../df/ddc/classxii_typed_member_property.htm">   19</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/ddc/classxii_typed_member_property.htm">xiiTypedMemberProperty</a> : <span class="keyword">public</span> <a class="code" href="../../dd/d67/classxii_abstract_member_property.htm">xiiAbstractMemberProperty</a></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../df/ddc/classxii_typed_member_property.htm#a77b27110d8d11a0b81eb82bb3eac7ef4">   23</a></span>&#160;  <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a77b27110d8d11a0b81eb82bb3eac7ef4">xiiTypedMemberProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName) :</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <a class="code" href="../../dd/d67/classxii_abstract_member_property.htm">xiiAbstractMemberProperty</a>(sPropertyName)</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    m_Flags = xiiPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    XII_CHECK_AT_COMPILETIME_MSG(!std::is_pointer&lt;Type&gt;::value || <a class="code" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariant::TypeDeduction</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a35ea12912392837d91ed5e0a18795343">xiiTypeTraits&lt;Type&gt;::NonConstReferencePointerType</a>&gt;::value == <a class="code" href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0">xiiVariantType::Invalid</a>,</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;                                 <span class="stringliteral">&quot;Pointer to standard types are not supported.&quot;</span>);</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  }</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="../../df/ddc/classxii_typed_member_property.htm#a9ac60160b01b20a2fbb2c12d6a91607d">   33</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a9ac60160b01b20a2fbb2c12d6a91607d">GetSpecificType</a>() const override <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  {</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span> xiiGetStaticRTTI&lt;typename xiiTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;();</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">virtual</span> Type <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a823f9fc5d10cf6d8e30ab2c0dd91dc5d">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span> = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a0e46a8d8d3f9e69ec81ef3356d0a450a">SetValue</a>(<span class="keywordtype">void</span>* pInstance, Type value) = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../df/ddc/classxii_typed_member_property.htm#ab7b78e3391d8549f8f1c0d75f95e1b7d">   46</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#ab7b78e3391d8549f8f1c0d75f95e1b7d">GetValuePtr</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ *<span class="keyword">static_cast&lt;</span>Type*<span class="keyword">&gt;</span>(pObject) = <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a823f9fc5d10cf6d8e30ab2c0dd91dc5d">GetValue</a>(pInstance); };</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="../../df/ddc/classxii_typed_member_property.htm#a16e9d57a6a4d7890ad5ee91d909c0ee5">   47</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a16e9d57a6a4d7890ad5ee91d909c0ee5">SetValuePtr</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override </span>{ <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a0e46a8d8d3f9e69ec81ef3356d0a450a">SetValue</a>(pInstance, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Type*<span class="keyword">&gt;</span>(pObject)); };</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm">   55</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/ddc/classxii_typed_member_property.htm">xiiTypedMemberProperty</a>&lt;const char*&gt; : <span class="keyword">public</span> <a class="code" href="../../dd/d67/classxii_abstract_member_property.htm">xiiAbstractMemberProperty</a></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a77b27110d8d11a0b81eb82bb3eac7ef4">xiiTypedMemberProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName) :</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <a class="code" href="../../dd/d67/classxii_abstract_member_property.htm#a3e082378e1e5da16d6fabce8e058cb83">xiiAbstractMemberProperty</a>(sPropertyName)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="comment">// We treat const char* as a basic type and not a pointer.</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    m_Flags = xiiPropertyFlags::GetParameterFlags&lt;const char*&gt;();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno"><a class="line" href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a890f242795619d3ff8f2442e9b982ec1">   65</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* <a class="code" href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a890f242795619d3ff8f2442e9b982ec1">GetSpecificType</a>() const override <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> xiiGetStaticRTTI&lt;const char*&gt;();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a823f9fc5d10cf6d8e30ab2c0dd91dc5d">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span>        = 0;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span>        <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a0e46a8d8d3f9e69ec81ef3356d0a450a">SetValue</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">char</span>* value) = 0;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a9940c19ddda0584821575a73ec1a6706">   72</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span>        <a class="code" href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a9940c19ddda0584821575a73ec1a6706">GetValuePtr</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override </span>{ *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>**<span class="keyword">&gt;</span>(pObject) = <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a823f9fc5d10cf6d8e30ab2c0dd91dc5d">GetValue</a>(pInstance); };</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a0c730652a0672047de98ec9698006b18">   73</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span>        <a class="code" href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a0c730652a0672047de98ec9698006b18">SetValuePtr</a>(<span class="keywordtype">void</span>* pInstance, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override </span>{ <a class="code" href="../../df/ddc/classxii_typed_member_property.htm#a0e46a8d8d3f9e69ec81ef3356d0a450a">SetValue</a>(pInstance, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">char</span>* const*<span class="keyword">&gt;</span>(pObject)); };</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;};</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">// *******************************************************************</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">// ***** Class for properties that use custom accessor functions *****</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../d4/dfb/classxii_accessor_property.htm">   82</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d4/dfb/classxii_accessor_property.htm">xiiAccessorProperty</a> : <span class="keyword">public</span> <a class="code" href="../../df/ddc/classxii_typed_member_property.htm">xiiTypedMemberProperty</a>&lt;typename xiiTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keyword">using</span> RealType   = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keyword">using</span> GetterFunc = Type (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keyword">using</span> SetterFunc = void (Class::*)(Type value);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="../../d4/dfb/classxii_accessor_property.htm#ab39b4959e0cd67007bad9108b8a21b87">   90</a></span>&#160;  <a class="code" href="../../d4/dfb/classxii_accessor_property.htm#ab39b4959e0cd67007bad9108b8a21b87">xiiAccessorProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName, GetterFunc getter, SetterFunc setter) :</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <a class="code" href="../../df/ddc/classxii_typed_member_property.htm">xiiTypedMemberProperty</a>&lt;RealType&gt;(sPropertyName)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  {</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    XII_ASSERT_DEBUG(getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getter of a property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    m_Getter = getter;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    m_Setter = setter;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">if</span> (m_Setter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;      xiiAbstractMemberProperty::m_Flags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<a class="code" href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  }</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="../../d4/dfb/classxii_accessor_property.htm#adcd79f7a18d4019c71e21e5b14a85988">  104</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* <a class="code" href="../../d4/dfb/classxii_accessor_property.htm#adcd79f7a18d4019c71e21e5b14a85988">GetPropertyPointer</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="comment">// No access to sub-properties, if we have accessors for this property</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="../../d4/dfb/classxii_accessor_property.htm#a5e794b7c056add04c4b9fb03558f23fb">  111</a></span>&#160;  <span class="keyword">virtual</span> RealType <a class="code" href="../../d4/dfb/classxii_accessor_property.htm#a5e794b7c056add04c4b9fb03558f23fb">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance) <span class="keyword">const</span> <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  {</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Getter)();</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="../../d4/dfb/classxii_accessor_property.htm#ace1354fe29975832f0f39bdb9943d15e">  119</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d4/dfb/classxii_accessor_property.htm#ace1354fe29975832f0f39bdb9943d15e">SetValue</a>(<span class="keywordtype">void</span>* pInstance, RealType value) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    XII_ASSERT_DEV(m_Setter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">if</span> (m_Setter)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Setter)(value);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  GetterFunc m_Getter;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  SetterFunc m_Setter;</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;};</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">// *************************************************************</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">// ***** Classes for properties that are accessed directly *****</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, Type Class::*Member&gt;</div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="../../d8/d04/structxii_property_accessor.htm">  138</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d8/d04/structxii_property_accessor.htm">xiiPropertyAccessor</a></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;{</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keyword">static</span> Type GetValue(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> SetValue(Class* pInstance, Type value) { (*pInstance).*Member = value; }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span>* GetPropertyPointer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (<span class="keywordtype">void</span>*)&amp;((*pInstance).*Member); }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;};</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="../../d0/d56/classxii_member_property.htm">  150</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d0/d56/classxii_member_property.htm">xiiMemberProperty</a> : <span class="keyword">public</span> <a class="code" href="../../df/ddc/classxii_typed_member_property.htm">xiiTypedMemberProperty</a>&lt;Type&gt;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <span class="keyword">using</span> GetterFunc  = Type (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keyword">using</span> SetterFunc  = void (*)(Class* pInstance, Type value);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keyword">using</span> PointerFunc = <span class="keywordtype">void</span>* (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="../../d0/d56/classxii_member_property.htm#ab446ee25a88c489dba8a79943950588e">  158</a></span>&#160;  <a class="code" href="../../d0/d56/classxii_member_property.htm#ab446ee25a88c489dba8a79943950588e">xiiMemberProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName, GetterFunc getter, SetterFunc setter, PointerFunc pointer) :</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="../../df/ddc/classxii_typed_member_property.htm">xiiTypedMemberProperty</a>&lt;Type&gt;(sPropertyName)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    XII_ASSERT_DEBUG(getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getter of a property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    m_Getter  = getter;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    m_Setter  = setter;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    m_Pointer = pointer;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">if</span> (m_Setter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      xiiAbstractMemberProperty::m_Flags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<a class="code" href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="../../d0/d56/classxii_member_property.htm#a3031e57f8b668ac5469cb03dcccd6fe9">  172</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* <a class="code" href="../../d0/d56/classxii_member_property.htm#a3031e57f8b668ac5469cb03dcccd6fe9">GetPropertyPointer</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Pointer(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)); }</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="../../d0/d56/classxii_member_property.htm#a3a43c6ee0b2689209823b2ab65714a5e">  175</a></span>&#160;  <span class="keyword">virtual</span> Type <a class="code" href="../../d0/d56/classxii_member_property.htm#a3a43c6ee0b2689209823b2ab65714a5e">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_Getter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)); }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="../../d0/d56/classxii_member_property.htm#aad43c83a4f00f4b4c7a2a79232498474">  180</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d0/d56/classxii_member_property.htm#aad43c83a4f00f4b4c7a2a79232498474">SetValue</a>(<span class="keywordtype">void</span>* pInstance, Type value)<span class="keyword"> override</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    XII_ASSERT_DEV(m_Setter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">if</span> (m_Setter)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      m_Setter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance), value);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  GetterFunc  m_Getter;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  SetterFunc  m_Setter;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  PointerFunc m_Pointer;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructxii_variant_type_htm_a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0"><div class="ttname"><a href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0">xiiVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition:</b> VariantType.h:27</div></div>
<div class="ttc" id="aclassxii_member_property_htm"><div class="ttname"><a href="../../d0/d56/classxii_member_property.htm">xiiMemberProperty</a></div><div class="ttdoc">[internal] An implementation of xiiTypedMemberProperty that accesses the property data directly.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:150</div></div>
<div class="ttc" id="aclassxii_typed_member_property_htm_a16e9d57a6a4d7890ad5ee91d909c0ee5"><div class="ttname"><a href="../../df/ddc/classxii_typed_member_property.htm#a16e9d57a6a4d7890ad5ee91d909c0ee5">xiiTypedMemberProperty::SetValuePtr</a></div><div class="ttdeci">virtual void SetValuePtr(void *pInstance, const void *pObject) override</div><div class="ttdoc">Sets the value of pObject to the property in pInstance. pObject needs to point to an instance of this...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:47</div></div>
<div class="ttc" id="aclassxii_typed_member_property_3_01const_01char_01_5_01_4_htm_a890f242795619d3ff8f2442e9b982ec1"><div class="ttname"><a href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a890f242795619d3ff8f2442e9b982ec1">xiiTypedMemberProperty&lt; const char * &gt;::GetSpecificType</a></div><div class="ttdeci">virtual const xiiRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:65</div></div>
<div class="ttc" id="aclassxii_accessor_property_htm"><div class="ttname"><a href="../../d4/dfb/classxii_accessor_property.htm">xiiAccessorProperty</a></div><div class="ttdoc">[internal] An implementation of xiiTypedMemberProperty that uses custom getter / setter functions to ...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:82</div></div>
<div class="ttc" id="aclassxii_member_property_htm_a3a43c6ee0b2689209823b2ab65714a5e"><div class="ttname"><a href="../../d0/d56/classxii_member_property.htm#a3a43c6ee0b2689209823b2ab65714a5e">xiiMemberProperty::GetValue</a></div><div class="ttdeci">virtual Type GetValue(const void *pInstance) const override</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:175</div></div>
<div class="ttc" id="aclassxii_accessor_property_htm_a5e794b7c056add04c4b9fb03558f23fb"><div class="ttname"><a href="../../d4/dfb/classxii_accessor_property.htm#a5e794b7c056add04c4b9fb03558f23fb">xiiAccessorProperty::GetValue</a></div><div class="ttdeci">virtual RealType GetValue(const void *pInstance) const override</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:111</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a89cb715ce2414f2e16675f5d8503cb1c"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">xiiBitflags::Add</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Add(const xiiBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:148</div></div>
<div class="ttc" id="aclassxii_typed_member_property_htm_a9ac60160b01b20a2fbb2c12d6a91607d"><div class="ttname"><a href="../../df/ddc/classxii_typed_member_property.htm#a9ac60160b01b20a2fbb2c12d6a91607d">xiiTypedMemberProperty::GetSpecificType</a></div><div class="ttdeci">virtual const xiiRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the actual type of the property. You can then compare that with known types,...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:33</div></div>
<div class="ttc" id="aclassxii_typed_member_property_htm_a0e46a8d8d3f9e69ec81ef3356d0a450a"><div class="ttname"><a href="../../df/ddc/classxii_typed_member_property.htm#a0e46a8d8d3f9e69ec81ef3356d0a450a">xiiTypedMemberProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, Type value)=0</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition:</b> RTTI.h:29</div></div>
<div class="ttc" id="aclassxii_typed_member_property_htm"><div class="ttname"><a href="../../df/ddc/classxii_typed_member_property.htm">xiiTypedMemberProperty</a></div><div class="ttdoc">The base class for all typed member properties. I.e. once the type of a property is determined,...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:19</div></div>
<div class="ttc" id="astructxii_string_view_htm"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></div><div class="ttdoc">xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...</div><div class="ttdef"><b>Definition:</b> StringView.h:23</div></div>
<div class="ttc" id="aclassxii_member_property_htm_a3031e57f8b668ac5469cb03dcccd6fe9"><div class="ttname"><a href="../../d0/d56/classxii_member_property.htm#a3031e57f8b668ac5469cb03dcccd6fe9">xiiMemberProperty::GetPropertyPointer</a></div><div class="ttdeci">virtual void * GetPropertyPointer(const void *pInstance) const override</div><div class="ttdoc">Returns a pointer to the member property.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:172</div></div>
<div class="ttc" id="aclassxii_typed_member_property_htm_a823f9fc5d10cf6d8e30ab2c0dd91dc5d"><div class="ttname"><a href="../../df/ddc/classxii_typed_member_property.htm#a823f9fc5d10cf6d8e30ab2c0dd91dc5d">xiiTypedMemberProperty::GetValue</a></div><div class="ttdeci">virtual Type GetValue(const void *pInstance) const =0</div><div class="ttdoc">Returns the value of the property. Pass the instance pointer to the surrounding class along.</div></div>
<div class="ttc" id="aclassxii_abstract_property_htm_a6cc3cf4e5893d65b88b67ba6c6c6f0c3"><div class="ttname"><a href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a></div><div class="ttdeci">xiiStringView GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:158</div></div>
<div class="ttc" id="aclassxii_typed_member_property_htm_ab7b78e3391d8549f8f1c0d75f95e1b7d"><div class="ttname"><a href="../../df/ddc/classxii_typed_member_property.htm#ab7b78e3391d8549f8f1c0d75f95e1b7d">xiiTypedMemberProperty::GetValuePtr</a></div><div class="ttdeci">virtual void GetValuePtr(const void *pInstance, void *pObject) const override</div><div class="ttdoc">Writes the value of this property in pInstance to pObject. pObject needs to point to an instance of t...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:46</div></div>
<div class="ttc" id="aclassxii_typed_member_property_3_01const_01char_01_5_01_4_htm_a9940c19ddda0584821575a73ec1a6706"><div class="ttname"><a href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a9940c19ddda0584821575a73ec1a6706">xiiTypedMemberProperty&lt; const char * &gt;::GetValuePtr</a></div><div class="ttdeci">virtual void GetValuePtr(const void *pInstance, void *pObject) const override</div><div class="ttdoc">Writes the value of this property in pInstance to pObject. pObject needs to point to an instance of t...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:72</div></div>
<div class="ttc" id="aclassxii_member_property_htm_aad43c83a4f00f4b4c7a2a79232498474"><div class="ttname"><a href="../../d0/d56/classxii_member_property.htm#aad43c83a4f00f4b4c7a2a79232498474">xiiMemberProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, Type value) override</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:180</div></div>
<div class="ttc" id="astructxii_type_traits_htm_a235ccaef9604d6990ab760b4b1d4500b"><div class="ttname"><a href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">Removes reference and const qualifier.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:222</div></div>
<div class="ttc" id="astructxii_variant_type_deduction_htm"><div class="ttname"><a href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition:</b> VariantType.h:110</div></div>
<div class="ttc" id="aclassxii_accessor_property_htm_ace1354fe29975832f0f39bdb9943d15e"><div class="ttname"><a href="../../d4/dfb/classxii_accessor_property.htm#ace1354fe29975832f0f39bdb9943d15e">xiiAccessorProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, RealType value) override</div><div class="ttdoc">Modifies the value of the property. Pass the instance pointer to the surrounding class along.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:119</div></div>
<div class="ttc" id="aclassxii_accessor_property_htm_adcd79f7a18d4019c71e21e5b14a85988"><div class="ttname"><a href="../../d4/dfb/classxii_accessor_property.htm#adcd79f7a18d4019c71e21e5b14a85988">xiiAccessorProperty::GetPropertyPointer</a></div><div class="ttdeci">virtual void * GetPropertyPointer(const void *pInstance) const override</div><div class="ttdoc">Always returns nullptr; once a property is modified through accessors, there is no point in giving mo...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:104</div></div>
<div class="ttc" id="aclassxii_member_property_htm_ab446ee25a88c489dba8a79943950588e"><div class="ttname"><a href="../../d0/d56/classxii_member_property.htm#ab446ee25a88c489dba8a79943950588e">xiiMemberProperty::xiiMemberProperty</a></div><div class="ttdeci">xiiMemberProperty(xiiStringView sPropertyName, GetterFunc getter, SetterFunc setter, PointerFunc pointer)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:158</div></div>
<div class="ttc" id="aclassxii_abstract_member_property_htm"><div class="ttname"><a href="../../dd/d67/classxii_abstract_member_property.htm">xiiAbstractMemberProperty</a></div><div class="ttdoc">This is the base class for all properties that are members of a class. It provides more information a...</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:235</div></div>
<div class="ttc" id="aclassxii_abstract_member_property_htm_a3e082378e1e5da16d6fabce8e058cb83"><div class="ttname"><a href="../../dd/d67/classxii_abstract_member_property.htm#a3e082378e1e5da16d6fabce8e058cb83">xiiAbstractMemberProperty::xiiAbstractMemberProperty</a></div><div class="ttdeci">xiiAbstractMemberProperty(xiiStringView sPropertyName)</div><div class="ttdoc">Passes the property name through to xiiAbstractProperty.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:239</div></div>
<div class="ttc" id="aclassxii_typed_member_property_3_01const_01char_01_5_01_4_htm_a0c730652a0672047de98ec9698006b18"><div class="ttname"><a href="../../dd/d54/classxii_typed_member_property_3_01const_01char_01_5_01_4.htm#a0c730652a0672047de98ec9698006b18">xiiTypedMemberProperty&lt; const char * &gt;::SetValuePtr</a></div><div class="ttdeci">virtual void SetValuePtr(void *pInstance, const void *pObject) override</div><div class="ttdoc">Sets the value of pObject to the property in pInstance. pObject needs to point to an instance of this...</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:73</div></div>
<div class="ttc" id="aclassxii_typed_member_property_htm_a77b27110d8d11a0b81eb82bb3eac7ef4"><div class="ttname"><a href="../../df/ddc/classxii_typed_member_property.htm#a77b27110d8d11a0b81eb82bb3eac7ef4">xiiTypedMemberProperty::xiiTypedMemberProperty</a></div><div class="ttdeci">xiiTypedMemberProperty(xiiStringView sPropertyName)</div><div class="ttdoc">Passes the property name through to xiiAbstractMemberProperty.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:23</div></div>
<div class="ttc" id="aclassxii_accessor_property_htm_ab39b4959e0cd67007bad9108b8a21b87"><div class="ttname"><a href="../../d4/dfb/classxii_accessor_property.htm#ab39b4959e0cd67007bad9108b8a21b87">xiiAccessorProperty::xiiAccessorProperty</a></div><div class="ttdeci">xiiAccessorProperty(xiiStringView sPropertyName, GetterFunc getter, SetterFunc setter)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:90</div></div>
<div class="ttc" id="astructxii_property_flags_htm_a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8"><div class="ttname"><a href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:63</div></div>
<div class="ttc" id="astructxii_property_accessor_htm"><div class="ttname"><a href="../../d8/d04/structxii_property_accessor.htm">xiiPropertyAccessor</a></div><div class="ttdoc">[internal] Helper class to generate accessor functions for (private) members of another class</div><div class="ttdef"><b>Definition:</b> MemberProperty.h:138</div></div>
<div class="ttc" id="astructxii_type_traits_htm_a35ea12912392837d91ed5e0a18795343"><div class="ttname"><a href="../../dd/d53/structxii_type_traits.htm#a35ea12912392837d91ed5e0a18795343">xiiTypeTraits::NonConstReferencePointerType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; typename std::remove_pointer&lt; T &gt;::type &gt;::type &gt;::type NonConstReferencePointerType</div><div class="ttdoc">Removes reference, const and pointer qualifier Note that this removes the const and reference of the ...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:229</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f1e13142959a2e7970d979e1f6f7bcb1.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_44ac7f88d9b5593e444e5c7bf3d69918.htm">Implementation</a></li><li class="navelem"><b>MemberProperty.h</b></li>
    <li class="footer">Generated on Sat Aug 12 2023 21:47:51 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

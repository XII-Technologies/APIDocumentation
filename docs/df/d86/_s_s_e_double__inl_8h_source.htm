<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/SimdMath/Implementation/SSE/SSEDouble_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('df/d86/_s_s_e_double__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">SSEDouble_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble::xiiSimdDouble</a>()</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;{</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_COMPILE_FOR_DEBUG)</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  <span class="comment">// Initialize all data to NaN in debug mode to find problems with uninitialized data easier.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  m_v = _mm256_set1_pd(xiiMath::NaN&lt;double&gt;());</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;}</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble::xiiSimdDouble</a>(<span class="keywordtype">double</span> f)</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  m_v = _mm256_set1_pd(f);</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;}</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble::xiiSimdDouble</a>(<span class="keywordtype">float</span> f)</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  <span class="keywordtype">double</span> fValue = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(f);</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  m_v = _mm256_set1_pd(fValue);</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble::xiiSimdDouble</a>(xiiInt32 i)</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;{</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  __m128 v = _mm_cvtsi32_ss(_mm_setzero_ps(), i);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  m_v      = _mm256_cvtps_pd(_mm_shuffle_ps(v, v, XII_TO_SHUFFLE(xiiSwizzle::XXXX)));</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;}</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble::xiiSimdDouble</a>(xiiUInt32 i)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;{</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_PLATFORM_64BIT)</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  __m128 v = _mm_cvtsi64_ss(_mm_setzero_ps(), i);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  __m128 v = _mm_cvtsi32_ss(_mm_setzero_ps(), i);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  m_v = _mm256_cvtps_pd(_mm_shuffle_ps(v, v, XII_TO_SHUFFLE(xiiSwizzle::XXXX)));</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble::xiiSimdDouble</a>(<a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngled</a> a)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160; </div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  m_v = _mm256_set1_pd(a.<a class="code" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>());</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble::xiiSimdDouble</a>(<a class="code" href="../../d1/d20/classxii_vec4_template.htm">xiiInternal::QuadDouble</a> v)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  m_v = v;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;XII_ALWAYS_INLINE xiiSimdDouble::operator double()<span class="keyword"> const</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordtype">double</span> f[4];</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  _mm256_store_pd(f, m_v);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keywordflow">return</span> f[0];</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">// static</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::Zero()</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordflow">return</span> _mm256_setzero_pd();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;}</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::operator+(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">return</span> _mm256_add_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;}</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::operator-(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">return</span> _mm256_sub_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::operator*(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keywordflow">return</span> _mm256_mul_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;}</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::operator/(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordflow">return</span> _mm256_div_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;}</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; xiiSimdDouble::operator+=(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  m_v = _mm256_add_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; xiiSimdDouble::operator-=(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  m_v = _mm256_sub_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; xiiSimdDouble::operator*=(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  m_v = _mm256_mul_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;}</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; xiiSimdDouble::operator/=(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  m_v = _mm256_div_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::IsEqual(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; rhs, <span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> minusEps = rhs - fEpsilon;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> plusEps  = rhs + fEpsilon;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keywordflow">return</span> ((*<span class="keyword">this</span> &gt;= minusEps) &amp;&amp; (*<span class="keyword">this</span> &lt;= plusEps));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator==(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordflow">return</span> _mm256_movemask_pd(_mm256_cmp_pd(m_v, f.m_v, _CMP_EQ_OQ)) &gt; 0; <span class="comment">// Ordered, Non Signaling</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator!=(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keywordflow">return</span> _mm256_movemask_pd(_mm256_cmp_pd(m_v, f.m_v, _CMP_NEQ_OQ)) &gt; 0; <span class="comment">// Ordered, Non Signaling</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;}</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator&gt;=(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordflow">return</span> _mm256_movemask_pd(_mm256_cmp_pd(m_v, f.m_v, _CMP_GE_OQ)) &gt; 0; <span class="comment">// Ordered, Non Signaling</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;}</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator&gt;(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordflow">return</span> _mm256_movemask_pd(_mm256_cmp_pd(m_v, f.m_v, _CMP_GT_OQ)) &gt; 0; <span class="comment">// Ordered, Non Signaling</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;}</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator&lt;=(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keywordflow">return</span> _mm256_movemask_pd(_mm256_cmp_pd(m_v, f.m_v, _CMP_LE_OQ)) &gt; 0; <span class="comment">// Ordered, Non Signaling</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;}</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160; </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator&lt;(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keywordflow">return</span> _mm256_movemask_pd(_mm256_cmp_pd(m_v, f.m_v, _CMP_LT_OQ)) &gt; 0; <span class="comment">// Ordered, Non Signaling</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator==(<span class="keywordtype">double</span> f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keywordflow">return</span> (*<span class="keyword">this</span>) == <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble</a>(f);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator!=(<span class="keywordtype">double</span> f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordflow">return</span> (*<span class="keyword">this</span>) != <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble</a>(f);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;}</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator&gt;(<span class="keywordtype">double</span> f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keywordflow">return</span> (*<span class="keyword">this</span>) &gt; <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble</a>(f);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;}</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator&gt;=(<span class="keywordtype">double</span> f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keywordflow">return</span> (*<span class="keyword">this</span>) &gt;= <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble</a>(f);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;}</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator&lt;(<span class="keywordtype">double</span> f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keywordflow">return</span> (*<span class="keyword">this</span>) &lt; <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble</a>(f);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdDouble::operator&lt;=(<span class="keywordtype">double</span> f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keywordflow">return</span> (*<span class="keyword">this</span>) &lt;= <a class="code" href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble</a>(f);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;}</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_SSE_AVX512</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetReciprocal&lt;xiiMathDoubleBits::BITS_14&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  <span class="keywordflow">return</span> _mm256_rcp14_pd(m_v);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetReciprocal&lt;xiiMathDoubleBits::BITS_27&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  __m256d x0 = _mm256_rcp14_pd(m_v);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="comment">// One Newton-Raphson iteration.</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordflow">return</span> _mm256_mul_pd(x0, _mm256_sub_pd(_mm256_set1_pd(2.0), _mm256_mul_pd(m_v, x0)));</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;}</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetReciprocal&lt;xiiMathDoubleBits::FULL&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keywordflow">return</span> _mm256_div_pd(_mm256_set1_pd(1.0), m_v);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;}</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_SSE_AVX512</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetInvSqrt&lt;xiiMathDoubleBits::BITS_14&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordflow">return</span> _mm256_mask_rsqrt14_pd(m_v, 0xF, m_v);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetInvSqrt&lt;xiiMathDoubleBits::BITS_27&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keyword">const</span> __m256d x0 = _mm256_mask_rsqrt14_pd(m_v, 0xF, m_v);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="comment">// One iteration of Newton-Raphson.</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  <span class="keywordflow">return</span> _mm256_mul_pd(_mm256_mul_pd(_mm256_set1_pd(0.5), x0), _mm256_sub_pd(_mm256_set1_pd(3.0), _mm256_mul_pd(_mm256_mul_pd(m_v, x0), x0)));</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;}</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetInvSqrt&lt;xiiMathDoubleBits::FULL&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <span class="keywordflow">return</span> _mm256_div_pd(_mm256_set1_pd(1.0), _mm256_sqrt_pd(m_v));</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;}</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_SSE_AVX512</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetSqrt&lt;xiiMathDoubleBits::BITS_14&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordflow">return</span> (*<span class="keyword">this</span>) * GetInvSqrt&lt;xiiMathDoubleBits::BITS_14&gt;();</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;}</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetSqrt&lt;xiiMathDoubleBits::BITS_27&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="keywordflow">return</span> (*<span class="keyword">this</span>) * GetInvSqrt&lt;xiiMathDoubleBits::BITS_27&gt;();</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;}</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::GetSqrt&lt;xiiMathDoubleBits::FULL&gt;()<span class="keyword"> const</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="keywordflow">return</span> _mm256_sqrt_pd(m_v);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::Max(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keywordflow">return</span> _mm256_max_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::Min(<span class="keyword">const</span> <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keywordflow">return</span> _mm256_min_pd(m_v, f.m_v);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;}</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdDouble::Abs()<span class="keyword"> const</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keywordflow">return</span> _mm256_andnot_pd(_mm256_set1_pd(-0.0), m_v);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_simd_double_htm"><div class="ttname"><a href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a></div><div class="ttdef"><b>Definition:</b> SimdDouble.h:6</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_afaebb218561104c8b89d645dab3d8ded"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">xiiAngleTemplate::GetRadian</a></div><div class="ttdeci">constexpr Type GetRadian() const</div><div class="ttdoc">Returns the radian value. (No need for any conversion)</div><div class="ttdef"><b>Definition:</b> Angle_inl.h:52</div></div>
<div class="ttc" id="aclassxii_simd_double_htm_a58a16ce849bed1f1b43a3e28cd74fb65"><div class="ttname"><a href="../../d7/df1/classxii_simd_double.htm#a58a16ce849bed1f1b43a3e28cd74fb65">xiiSimdDouble::xiiSimdDouble</a></div><div class="ttdeci">xiiSimdDouble()</div><div class="ttdoc">Default constructor, leaves the data uninitialized.</div><div class="ttdef"><b>Definition:</b> FPUDouble_inl.h:3</div></div>
<div class="ttc" id="aclassxii_angle_template_htm"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a></div><div class="ttdoc">Wrapper class for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition:</b> Angle.h:10</div></div>
<div class="ttc" id="aclassxii_vec4_template_htm"><div class="ttname"><a href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a></div><div class="ttdoc">A 4-component vector class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:149</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6571b00f9c254a01b1735d75b2065daf.htm">SimdMath</a></li><li class="navelem"><a class="el" href="../../dir_421677d30b51fc7bb4bb6333857496b6.htm">Implementation</a></li><li class="navelem"><a class="el" href="../../dir_e8281a334185a03f4bf47922c4645da2.htm">SSE</a></li><li class="navelem"><b>SSEDouble_inl.h</b></li>
    <li class="footer">Generated on Sat Jul 1 2023 22:50:18 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

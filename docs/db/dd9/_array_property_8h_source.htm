<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Reflection/Implementation/ArrayProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('db/dd9/_array_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">ArrayProperty.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">class </span><a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="../../d7/d2f/classxii_typed_array_property.htm">   11</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty</a> : <span class="keyword">public</span> <a class="code" href="../../df/da8/classxii_abstract_array_property.htm">xiiAbstractArrayProperty</a></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName) :</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;    <a class="code" href="../../df/da8/classxii_abstract_array_property.htm#af7efcf02366b5e1cf0e4b29f9871ff35">xiiAbstractArrayProperty</a>(sPropertyName)</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  {</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    m_Flags = xiiPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;    XII_CHECK_AT_COMPILETIME_MSG(!std::is_pointer&lt;Type&gt;::value || <a class="code" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a35ea12912392837d91ed5e0a18795343">xiiTypeTraits&lt;Type&gt;::NonConstReferencePointerType</a>&gt;::value == <a class="code" href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0">xiiVariantType::Invalid</a>,</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;                                 <span class="stringliteral">&quot;Pointer to standard types are not supported.&quot;</span>);</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  }</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno"><a class="line" href="../../d7/d2f/classxii_typed_array_property.htm#a002e75cdf1bb8ef41f5d1f50b594e99b">   22</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm#a002e75cdf1bb8ef41f5d1f50b594e99b">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> xiiGetStaticRTTI&lt;typename xiiTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;(); }</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;};</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../d1/d38/classxii_typed_array_property_3_01const_01char_01_5_01_4.htm">   27</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty</a>&lt;const char*&gt; : <span class="keyword">public</span> <a class="code" href="../../df/da8/classxii_abstract_array_property.htm">xiiAbstractArrayProperty</a></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName) :</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <a class="code" href="../../df/da8/classxii_abstract_array_property.htm#af7efcf02366b5e1cf0e4b29f9871ff35">xiiAbstractArrayProperty</a>(sPropertyName)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    m_Flags = xiiPropertyFlags::GetParameterFlags&lt;const char*&gt;();</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  }</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="../../d1/d38/classxii_typed_array_property_3_01const_01char_01_5_01_4.htm#a1647a303c5531ad8bfe62c82ffe86ef2">   36</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* <a class="code" href="../../d1/d38/classxii_typed_array_property_3_01const_01char_01_5_01_4.htm#a1647a303c5531ad8bfe62c82ffe86ef2">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> xiiGetStaticRTTI&lt;const char*&gt;(); }</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;};</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../d8/db9/classxii_accessor_array_property.htm">   41</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d8/db9/classxii_accessor_array_property.htm">xiiAccessorArrayProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty</a>&lt;Type&gt;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keyword">using</span> RealType     = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">using</span> GetCountFunc = xiiUInt32 (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">using</span> GetValueFunc = Type (Class::*)(xiiUInt32 uiIndex) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keyword">using</span> SetValueFunc = void (Class::*)(xiiUInt32 uiIndex, Type value);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keyword">using</span> InsertFunc   = void (Class::*)(xiiUInt32 uiIndex, Type value);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">using</span> RemoveFunc   = void (Class::*)(xiiUInt32 uiIndex);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm">xiiAccessorArrayProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName, GetCountFunc getCount, GetValueFunc getter, SetValueFunc setter, InsertFunc insert, RemoveFunc remove) :</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty&lt;Type&gt;</a>(sPropertyName)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    XII_ASSERT_DEBUG(getCount != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    XII_ASSERT_DEBUG(getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get value function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    m_GetCount = getCount;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    m_Getter   = getter;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    m_Setter   = setter;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    m_Insert   = insert;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    m_Remove   = remove;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span> (m_Setter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      xiiAbstractArrayProperty::m_Flags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<a class="code" href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">   67</a></span>&#160;  <span class="keyword">virtual</span> xiiUInt32 <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetCount)(); }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="../../d8/db9/classxii_accessor_array_property.htm#a46ab4388d5930c7fdc410f35befd59f1">   69</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#a46ab4388d5930c7fdc410f35befd59f1">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt; <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance), <span class="stringliteral">&quot;GetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Getter)(uiIndex);</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../d8/db9/classxii_accessor_array_property.htm#ad395c6d3ad5448df1765058d611dbf42">   75</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#ad395c6d3ad5448df1765058d611dbf42">SetValue</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt; <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance), <span class="stringliteral">&quot;SetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    XII_ASSERT_DEBUG(m_Setter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Setter)(uiIndex, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="../../d8/db9/classxii_accessor_array_property.htm#a8ce4dd325a56c0e41c1da284b8151642">   82</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#a8ce4dd325a56c0e41c1da284b8151642">Insert</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt;= <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance), <span class="stringliteral">&quot;Insert: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    XII_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(uiIndex, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno"><a class="line" href="../../d8/db9/classxii_accessor_array_property.htm#a7eda44f8d849ec567c4275274a3d5dcc">   89</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#a7eda44f8d849ec567c4275274a3d5dcc">Remove</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex)<span class="keyword"> override</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt; <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance), <span class="stringliteral">&quot;Remove: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    XII_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no setter function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(uiIndex);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="../../d8/db9/classxii_accessor_array_property.htm#a2578cb470675e227af5c3ea3060b085c">   96</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#a2578cb470675e227af5c3ea3060b085c">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override </span>{ <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#ad928c154c6bdd4debe2efd1d18326fa9">SetCount</a>(pInstance, 0); }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="../../d8/db9/classxii_accessor_array_property.htm#ad928c154c6bdd4debe2efd1d18326fa9">   98</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#ad928c154c6bdd4debe2efd1d18326fa9">SetCount</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiCount)<span class="keyword"> override</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    XII_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span> &amp;&amp; m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove and insert function, thus it is fixed-size.&quot;</span>,</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                     <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">while</span> (uiCount &lt; <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance))</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#a7eda44f8d849ec567c4275274a3d5dcc">Remove</a>(pInstance, <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance) - 1);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">while</span> (uiCount &gt; <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance))</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;      RealType elem = RealType();</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;      <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#a8ce4dd325a56c0e41c1da284b8151642">Insert</a>(pInstance, <a class="code" href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">GetCount</a>(pInstance), &amp;elem);</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  GetCountFunc m_GetCount;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  GetValueFunc m_Getter;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  SetValueFunc m_Setter;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  InsertFunc   m_Insert;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  RemoveFunc   m_Remove;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;};</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, Container Class::*Member&gt;</div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="../../d6/dad/structxii_array_property_accessor.htm">  124</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d6/dad/structxii_array_property_accessor.htm">xiiArrayPropertyAccessor</a></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;{</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keyword">using</span> Type          = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm">xiiTypeTraits&lt;typename xiiContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>&gt;::NonConstReferenceType;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> ContainerType&amp; GetConstContainer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keyword">static</span> ContainerType&amp; GetContainer(Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;};</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="../../d5/d5d/classxii_member_array_property.htm">  136</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d5/d5d/classxii_member_array_property.htm">xiiMemberArrayProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty</a>&lt;typename xiiTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;{</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keyword">using</span> RealType              = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keyword">using</span> GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keyword">using</span> GetContainerFunc      = Container&amp; (*)(Class* pInstance);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <a class="code" href="../../d5/d5d/classxii_member_array_property.htm">xiiMemberArrayProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName, GetConstContainerFunc constGetter, GetContainerFunc getter) :</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty&lt;RealType&gt;</a>(sPropertyName)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  {</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    XII_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    m_ConstGetter = constGetter;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    m_Getter      = getter;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">if</span> (m_Getter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      xiiAbstractArrayProperty::m_Flags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<a class="code" href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">  155</a></span>&#160;  <span class="keyword">virtual</span> xiiUInt32 <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).GetCount(); }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../d5/d5d/classxii_member_array_property.htm#a127cf9a63dfd0e795666c089c894976d">  157</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a127cf9a63dfd0e795666c089c894976d">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt; <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance), <span class="stringliteral">&quot;GetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance))[uiIndex];</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="../../d5/d5d/classxii_member_array_property.htm#a6c0cca70b9be3830c400c61324afbb7e">  163</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a6c0cca70b9be3830c400c61324afbb7e">SetValue</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt; <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance), <span class="stringliteral">&quot;SetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    XII_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                     <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance))[uiIndex] = *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="../../d5/d5d/classxii_member_array_property.htm#a7c364e53f89f9f50a530477ca0569529">  171</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a7c364e53f89f9f50a530477ca0569529">Insert</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt;= <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance), <span class="stringliteral">&quot;Insert: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    XII_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                     <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Insert(*<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject), uiIndex);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="../../d5/d5d/classxii_member_array_property.htm#a109d8533f09a459308a4dbc74d0d1e9c">  179</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a109d8533f09a459308a4dbc74d0d1e9c">Remove</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex)<span class="keyword"> override</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt; <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance), <span class="stringliteral">&quot;Remove: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    XII_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                     <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).RemoveAtAndCopy(uiIndex);</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="../../d5/d5d/classxii_member_array_property.htm#a5cc016c2ee2c2938a2df16edf834582e">  187</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a5cc016c2ee2c2938a2df16edf834582e">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    XII_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                     <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Clear();</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="../../d5/d5d/classxii_member_array_property.htm#a05e2a5baa55b5a791f23a5b746fc7f5c">  194</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a05e2a5baa55b5a791f23a5b746fc7f5c">SetCount</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiCount)<span class="keyword"> override</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    XII_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const array accessor function, thus it is read-only.&quot;</span>,</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                     <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).SetCount(uiCount);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePointer(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex)<span class="keyword"> override</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt; <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance), <span class="stringliteral">&quot;GetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">return</span> &amp;(m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance))[uiIndex]);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  GetContainerFunc      m_Getter;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;};</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00215"></a><span class="lineno"><a class="line" href="../../da/d92/classxii_member_array_read_only_property.htm">  215</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm">xiiMemberArrayReadOnlyProperty</a> : <span class="keyword">public</span> <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty</a>&lt;typename xiiTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;{</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keyword">using</span> RealType              = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keyword">using</span> GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm">xiiMemberArrayReadOnlyProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName, GetConstContainerFunc constGetter) :</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <a class="code" href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty&lt;RealType&gt;</a>(sPropertyName)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    XII_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    m_ConstGetter = constGetter;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    xiiAbstractArrayProperty::m_Flags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<a class="code" href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="../../da/d92/classxii_member_array_read_only_property.htm#a5a139588943bf663da34ba44e96ea646">  230</a></span>&#160;  <span class="keyword">virtual</span> xiiUInt32 <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a5a139588943bf663da34ba44e96ea646">GetCount</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).GetCount(); }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="../../da/d92/classxii_member_array_read_only_property.htm#a8db52bf1ddcf50b1bf612b344d36af6c">  232</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a8db52bf1ddcf50b1bf612b344d36af6c">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    XII_ASSERT_DEBUG(uiIndex &lt; <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a5a139588943bf663da34ba44e96ea646">GetCount</a>(pInstance), <span class="stringliteral">&quot;GetValue: uiIndex (&#39;{0}&#39;) is out of range (&#39;{1}&#39;)&quot;</span>, uiIndex, <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a5a139588943bf663da34ba44e96ea646">GetCount</a>(pInstance));</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance))[uiIndex];</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="../../da/d92/classxii_member_array_read_only_property.htm#a87effeffdf3597d4bf7584fc933c70e0">  238</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a87effeffdf3597d4bf7584fc933c70e0">SetValue</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="../../da/d92/classxii_member_array_read_only_property.htm#a07c93111993c5de6ad2e310fc2a82197">  243</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a07c93111993c5de6ad2e310fc2a82197">Insert</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="../../da/d92/classxii_member_array_read_only_property.htm#a4fdefee2f8da167a323be82460605d73">  248</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a4fdefee2f8da167a323be82460605d73">Remove</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiIndex)<span class="keyword"> override</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="line" href="../../da/d92/classxii_member_array_read_only_property.htm#a8f175a648c288db5b8a08728b6f89f90">  253</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a8f175a648c288db5b8a08728b6f89f90">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="../../da/d92/classxii_member_array_read_only_property.htm#a6b03e7394f01fe75fe45ce313bde50a1">  258</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d92/classxii_member_array_read_only_property.htm#a6b03e7394f01fe75fe45ce313bde50a1">SetCount</a>(<span class="keywordtype">void</span>* pInstance, xiiUInt32 uiCount)<span class="keyword"> override</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;The property &#39;{0}&#39; is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_accessor_array_property_htm_aec97de76c173e987aba928f18d8b1c55"><div class="ttname"><a href="../../d8/db9/classxii_accessor_array_property.htm#aec97de76c173e987aba928f18d8b1c55">xiiAccessorArrayProperty::GetCount</a></div><div class="ttdeci">virtual xiiUInt32 GetCount(const void *pInstance) const override</div><div class="ttdoc">Returns number of elements.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:67</div></div>
<div class="ttc" id="astructxii_variant_type_htm_a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0"><div class="ttname"><a href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0">xiiVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition:</b> VariantType.h:27</div></div>
<div class="ttc" id="aclassxii_accessor_array_property_htm_a8ce4dd325a56c0e41c1da284b8151642"><div class="ttname"><a href="../../d8/db9/classxii_accessor_array_property.htm#a8ce4dd325a56c0e41c1da284b8151642">xiiAccessorArrayProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, xiiUInt32 uiIndex, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the array at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:82</div></div>
<div class="ttc" id="aclassxii_member_array_read_only_property_htm_a8f175a648c288db5b8a08728b6f89f90"><div class="ttname"><a href="../../da/d92/classxii_member_array_read_only_property.htm#a8f175a648c288db5b8a08728b6f89f90">xiiMemberArrayReadOnlyProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:253</div></div>
<div class="ttc" id="aclassxii_member_array_property_htm"><div class="ttname"><a href="../../d5/d5d/classxii_member_array_property.htm">xiiMemberArrayProperty</a></div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:136</div></div>
<div class="ttc" id="aclassxii_accessor_array_property_htm"><div class="ttname"><a href="../../d8/db9/classxii_accessor_array_property.htm">xiiAccessorArrayProperty</a></div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:41</div></div>
<div class="ttc" id="aclassxii_member_array_read_only_property_htm_a87effeffdf3597d4bf7584fc933c70e0"><div class="ttname"><a href="../../da/d92/classxii_member_array_read_only_property.htm#a87effeffdf3597d4bf7584fc933c70e0">xiiMemberArrayReadOnlyProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, xiiUInt32 uiIndex, const void *pObject) override</div><div class="ttdoc">Writes the target of pObject to the element at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:238</div></div>
<div class="ttc" id="aclassxii_accessor_array_property_htm_ad928c154c6bdd4debe2efd1d18326fa9"><div class="ttname"><a href="../../d8/db9/classxii_accessor_array_property.htm#ad928c154c6bdd4debe2efd1d18326fa9">xiiAccessorArrayProperty::SetCount</a></div><div class="ttdeci">virtual void SetCount(void *pInstance, xiiUInt32 uiCount) override</div><div class="ttdoc">Resizes the array to uiCount.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:98</div></div>
<div class="ttc" id="aclassxii_member_array_property_htm_a109d8533f09a459308a4dbc74d0d1e9c"><div class="ttname"><a href="../../d5/d5d/classxii_member_array_property.htm#a109d8533f09a459308a4dbc74d0d1e9c">xiiMemberArrayProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, xiiUInt32 uiIndex) override</div><div class="ttdoc">Removes the element in the array at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:179</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a89cb715ce2414f2e16675f5d8503cb1c"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">xiiBitflags::Add</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Add(const xiiBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:156</div></div>
<div class="ttc" id="astructxii_array_property_accessor_htm"><div class="ttname"><a href="../../d6/dad/structxii_array_property_accessor.htm">xiiArrayPropertyAccessor</a></div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:124</div></div>
<div class="ttc" id="aclassxii_member_array_property_htm_a05e2a5baa55b5a791f23a5b746fc7f5c"><div class="ttname"><a href="../../d5/d5d/classxii_member_array_property.htm#a05e2a5baa55b5a791f23a5b746fc7f5c">xiiMemberArrayProperty::SetCount</a></div><div class="ttdeci">virtual void SetCount(void *pInstance, xiiUInt32 uiCount) override</div><div class="ttdoc">Resizes the array to uiCount.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:194</div></div>
<div class="ttc" id="aclassxii_typed_array_property_3_01const_01char_01_5_01_4_htm_a1647a303c5531ad8bfe62c82ffe86ef2"><div class="ttname"><a href="../../d1/d38/classxii_typed_array_property_3_01const_01char_01_5_01_4.htm#a1647a303c5531ad8bfe62c82ffe86ef2">xiiTypedArrayProperty&lt; const char * &gt;::GetSpecificType</a></div><div class="ttdeci">virtual const xiiRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:36</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition:</b> RTTI.h:29</div></div>
<div class="ttc" id="astructxii_string_view_htm"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></div><div class="ttdoc">xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...</div><div class="ttdef"><b>Definition:</b> StringView.h:23</div></div>
<div class="ttc" id="aclassxii_abstract_property_htm_a6cc3cf4e5893d65b88b67ba6c6c6f0c3"><div class="ttname"><a href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a></div><div class="ttdeci">xiiStringView GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:158</div></div>
<div class="ttc" id="aclassxii_typed_array_property_htm"><div class="ttname"><a href="../../d7/d2f/classxii_typed_array_property.htm">xiiTypedArrayProperty</a></div><div class="ttdoc">Do not cast into this class or any of its derived classes, use xiiTypedArrayProperty instead.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:11</div></div>
<div class="ttc" id="aclassxii_member_array_property_htm_a7c364e53f89f9f50a530477ca0569529"><div class="ttname"><a href="../../d5/d5d/classxii_member_array_property.htm#a7c364e53f89f9f50a530477ca0569529">xiiMemberArrayProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, xiiUInt32 uiIndex, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the array at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:171</div></div>
<div class="ttc" id="astructxii_type_traits_htm_a235ccaef9604d6990ab760b4b1d4500b"><div class="ttname"><a href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">Removes reference and const qualifier.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:222</div></div>
<div class="ttc" id="astructxii_variant_type_deduction_htm"><div class="ttname"><a href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition:</b> VariantType.h:110</div></div>
<div class="ttc" id="aclassxii_typed_array_property_htm_a002e75cdf1bb8ef41f5d1f50b594e99b"><div class="ttname"><a href="../../d7/d2f/classxii_typed_array_property.htm#a002e75cdf1bb8ef41f5d1f50b594e99b">xiiTypedArrayProperty::GetSpecificType</a></div><div class="ttdeci">virtual const xiiRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:22</div></div>
<div class="ttc" id="aclassxii_accessor_array_property_htm_ad395c6d3ad5448df1765058d611dbf42"><div class="ttname"><a href="../../d8/db9/classxii_accessor_array_property.htm#ad395c6d3ad5448df1765058d611dbf42">xiiAccessorArrayProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, xiiUInt32 uiIndex, const void *pObject) override</div><div class="ttdoc">Writes the target of pObject to the element at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:75</div></div>
<div class="ttc" id="aclassxii_abstract_array_property_htm_af7efcf02366b5e1cf0e4b29f9871ff35"><div class="ttname"><a href="../../df/da8/classxii_abstract_array_property.htm#af7efcf02366b5e1cf0e4b29f9871ff35">xiiAbstractArrayProperty::xiiAbstractArrayProperty</a></div><div class="ttdeci">xiiAbstractArrayProperty(xiiStringView sPropertyName)</div><div class="ttdoc">Passes the property name through to xiiAbstractProperty.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:275</div></div>
<div class="ttc" id="aclassxii_member_array_read_only_property_htm_a07c93111993c5de6ad2e310fc2a82197"><div class="ttname"><a href="../../da/d92/classxii_member_array_read_only_property.htm#a07c93111993c5de6ad2e310fc2a82197">xiiMemberArrayReadOnlyProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, xiiUInt32 uiIndex, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the array at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:243</div></div>
<div class="ttc" id="aclassxii_accessor_array_property_htm_a2578cb470675e227af5c3ea3060b085c"><div class="ttname"><a href="../../d8/db9/classxii_accessor_array_property.htm#a2578cb470675e227af5c3ea3060b085c">xiiAccessorArrayProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:96</div></div>
<div class="ttc" id="astructxii_type_traits_htm"><div class="ttname"><a href="../../dd/d53/structxii_type_traits.htm">xiiTypeTraits</a></div><div class="ttdef"><b>Definition:</b> TypeTraits.h:210</div></div>
<div class="ttc" id="aclassxii_member_array_read_only_property_htm_a6b03e7394f01fe75fe45ce313bde50a1"><div class="ttname"><a href="../../da/d92/classxii_member_array_read_only_property.htm#a6b03e7394f01fe75fe45ce313bde50a1">xiiMemberArrayReadOnlyProperty::SetCount</a></div><div class="ttdeci">virtual void SetCount(void *pInstance, xiiUInt32 uiCount) override</div><div class="ttdoc">Resizes the array to uiCount.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:258</div></div>
<div class="ttc" id="aclassxii_member_array_read_only_property_htm_a8db52bf1ddcf50b1bf612b344d36af6c"><div class="ttname"><a href="../../da/d92/classxii_member_array_read_only_property.htm#a8db52bf1ddcf50b1bf612b344d36af6c">xiiMemberArrayReadOnlyProperty::GetValue</a></div><div class="ttdeci">virtual void GetValue(const void *pInstance, xiiUInt32 uiIndex, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:232</div></div>
<div class="ttc" id="aclassxii_member_array_read_only_property_htm_a5a139588943bf663da34ba44e96ea646"><div class="ttname"><a href="../../da/d92/classxii_member_array_read_only_property.htm#a5a139588943bf663da34ba44e96ea646">xiiMemberArrayReadOnlyProperty::GetCount</a></div><div class="ttdeci">virtual xiiUInt32 GetCount(const void *pInstance) const override</div><div class="ttdoc">Returns number of elements.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:230</div></div>
<div class="ttc" id="aclassxii_member_array_read_only_property_htm"><div class="ttname"><a href="../../da/d92/classxii_member_array_read_only_property.htm">xiiMemberArrayReadOnlyProperty</a></div><div class="ttdoc">Read only version of xiiMemberArrayProperty that does not call any functions that modify the array....</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:215</div></div>
<div class="ttc" id="aclassxii_member_array_property_htm_a747730240687920714ec910c062d00ff"><div class="ttname"><a href="../../d5/d5d/classxii_member_array_property.htm#a747730240687920714ec910c062d00ff">xiiMemberArrayProperty::GetCount</a></div><div class="ttdeci">virtual xiiUInt32 GetCount(const void *pInstance) const override</div><div class="ttdoc">Returns number of elements.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:155</div></div>
<div class="ttc" id="aclassxii_member_array_property_htm_a127cf9a63dfd0e795666c089c894976d"><div class="ttname"><a href="../../d5/d5d/classxii_member_array_property.htm#a127cf9a63dfd0e795666c089c894976d">xiiMemberArrayProperty::GetValue</a></div><div class="ttdeci">virtual void GetValue(const void *pInstance, xiiUInt32 uiIndex, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:157</div></div>
<div class="ttc" id="aclassxii_member_array_property_htm_a6c0cca70b9be3830c400c61324afbb7e"><div class="ttname"><a href="../../d5/d5d/classxii_member_array_property.htm#a6c0cca70b9be3830c400c61324afbb7e">xiiMemberArrayProperty::SetValue</a></div><div class="ttdeci">virtual void SetValue(void *pInstance, xiiUInt32 uiIndex, const void *pObject) override</div><div class="ttdoc">Writes the target of pObject to the element at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:163</div></div>
<div class="ttc" id="aclassxii_abstract_array_property_htm"><div class="ttname"><a href="../../df/da8/classxii_abstract_array_property.htm">xiiAbstractArrayProperty</a></div><div class="ttdoc">The base class for a property that represents an array of values.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:271</div></div>
<div class="ttc" id="aclassxii_member_array_property_htm_a5cc016c2ee2c2938a2df16edf834582e"><div class="ttname"><a href="../../d5/d5d/classxii_member_array_property.htm#a5cc016c2ee2c2938a2df16edf834582e">xiiMemberArrayProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:187</div></div>
<div class="ttc" id="aclassxii_member_array_read_only_property_htm_a4fdefee2f8da167a323be82460605d73"><div class="ttname"><a href="../../da/d92/classxii_member_array_read_only_property.htm#a4fdefee2f8da167a323be82460605d73">xiiMemberArrayReadOnlyProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, xiiUInt32 uiIndex) override</div><div class="ttdoc">Removes the element in the array at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:248</div></div>
<div class="ttc" id="astructxii_property_flags_htm_a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8"><div class="ttname"><a href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:63</div></div>
<div class="ttc" id="astructxii_type_traits_htm_a35ea12912392837d91ed5e0a18795343"><div class="ttname"><a href="../../dd/d53/structxii_type_traits.htm#a35ea12912392837d91ed5e0a18795343">xiiTypeTraits::NonConstReferencePointerType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; typename std::remove_pointer&lt; T &gt;::type &gt;::type &gt;::type NonConstReferencePointerType</div><div class="ttdoc">Removes reference, const and pointer qualifier Note that this removes the const and reference of the ...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:229</div></div>
<div class="ttc" id="aclassxii_accessor_array_property_htm_a7eda44f8d849ec567c4275274a3d5dcc"><div class="ttname"><a href="../../d8/db9/classxii_accessor_array_property.htm#a7eda44f8d849ec567c4275274a3d5dcc">xiiAccessorArrayProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, xiiUInt32 uiIndex) override</div><div class="ttdoc">Removes the element in the array at index uiIndex.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:89</div></div>
<div class="ttc" id="aclassxii_accessor_array_property_htm_a46ab4388d5930c7fdc410f35befd59f1"><div class="ttname"><a href="../../d8/db9/classxii_accessor_array_property.htm#a46ab4388d5930c7fdc410f35befd59f1">xiiAccessorArrayProperty::GetValue</a></div><div class="ttdeci">virtual void GetValue(const void *pInstance, xiiUInt32 uiIndex, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> ArrayProperty.h:69</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f1e13142959a2e7970d979e1f6f7bcb1.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_44ac7f88d9b5593e444e5c7bf3d69918.htm">Implementation</a></li><li class="navelem"><b>ArrayProperty.h</b></li>
    <li class="footer">Generated on Tue Nov 14 2023 07:45:51 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

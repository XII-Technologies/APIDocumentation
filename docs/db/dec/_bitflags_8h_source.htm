<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Types/Bitflags.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('db/dec/_bitflags_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Bitflags.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Containers/Implementation/BitIterator.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Types/Enum.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm">   81</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags</a></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keyword">using</span> Enum        = <span class="keyword">typename</span> T::Enum;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keyword">using</span> Bits        = <span class="keyword">typename</span> T::Bits;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  <span class="keyword">using</span> StorageType = <span class="keyword">typename</span> T::StorageType;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="keyword">using</span> <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">ConstIterator</a> = <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">xiiBitIterator&lt;Enum, false&gt;</a>;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a8b8c4d615ec4a857f1772939ef1cfbc6">   92</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d7/d55/structxii_bitflags.htm#a8b8c4d615ec4a857f1772939ef1cfbc6">xiiBitflags</a>() :</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    m_Value(T::Default) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  }</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a35ffaa9d696a591e3c05c708009747cb">   98</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d7/d55/structxii_bitflags.htm#a35ffaa9d696a591e3c05c708009747cb">xiiBitflags</a>(Enum flag1) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    m_Value = (StorageType)flag1;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> operator=(Enum flag1) { m_Value = (StorageType)flag1; }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#ae8583e4f0e964af77e0349eaca0ef8b0">  106</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#ae8583e4f0e964af77e0349eaca0ef8b0">operator==</a>(<span class="keyword">const</span> StorageType rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  {</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">return</span> m_Value == rhs;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#ab1edef701b50139339fe37583721c53b">  112</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#ab1edef701b50139339fe37583721c53b">operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keywordflow">return</span> m_Value == rhs.m_Value;</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  }</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#ab3cad4be1ef82010224f867192fd36fb">  118</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#ab3cad4be1ef82010224f867192fd36fb">Clear</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    m_Value = 0;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  }</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#af2c990725fd731e800eeb6a22945003f">  124</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#af2c990725fd731e800eeb6a22945003f">IsSet</a>(Enum flag) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  {</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; flag) != 0;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a95bb64059c3566df3c788303d16ea47e">  130</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a95bb64059c3566df3c788303d16ea47e">AreAllSet</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  {</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) == rhs.m_Value;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  }</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a67f95a1e8065f47004566d8489e03613">  136</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a67f95a1e8065f47004566d8489e03613">AreNoneSet</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  {</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) == 0;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a3e39644d3e435cd46310aa638994fd60">  142</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a3e39644d3e435cd46310aa638994fd60">IsAnySet</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) != 0;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a1fc07745b1877a7125a163ce1ff4e3c2">  148</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a1fc07745b1877a7125a163ce1ff4e3c2">IsStrictlyAnySet</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; ~rhs.m_Value) == 0;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">  154</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  {</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    m_Value |= rhs.m_Value;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a0060d836baa5f6fab5caacadd4532f83">  160</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a0060d836baa5f6fab5caacadd4532f83">Remove</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  {</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    m_Value &amp;= (~rhs.m_Value);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a0635b2009f32f25b318df037225c07d1">  166</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a0635b2009f32f25b318df037225c07d1">Toggle</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    m_Value ^= rhs.m_Value;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#ad658467820facde2db8df6f63e56de98">  172</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#ad658467820facde2db8df6f63e56de98">AddOrRemove</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs, <span class="keywordtype">bool</span> bState) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    m_Value = (bState) ? m_Value | rhs.m_Value : m_Value &amp; (~rhs.m_Value);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  }</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#ab3453f1bf3294074969fbc3cd8cf8035">  178</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a> <a class="code" href="../../d7/d55/structxii_bitflags.htm#ab3453f1bf3294074969fbc3cd8cf8035">operator|</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>(m_Value | rhs.m_Value);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a533117388a6b4dd8726e9ec783abc055">  184</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a533117388a6b4dd8726e9ec783abc055">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>(m_Value &amp; rhs.m_Value);</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  }</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a8e74a594d74f59d68ab198b9d0da519b">  190</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a8e74a594d74f59d68ab198b9d0da519b">operator|=</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    m_Value |= rhs.m_Value;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a7f78220f31e05c3d49ff428dfd8c58df">  196</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a7f78220f31e05c3d49ff428dfd8c58df">operator&amp;=</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    m_Value &amp;= rhs.m_Value;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a6914e5bc6af6cb913a8a5f4264a6b836">  202</a></span>&#160;  XII_ALWAYS_INLINE StorageType <a class="code" href="../../d7/d55/structxii_bitflags.htm#a6914e5bc6af6cb913a8a5f4264a6b836">GetValue</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  {</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">return</span> m_Value;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  }</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#af2c473ccc094c92e73c8964960b82b80">  208</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#af2c473ccc094c92e73c8964960b82b80">SetValue</a>(StorageType value) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    m_Value = value;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#acbea4545a3af1e378e1cbda899b677b7">  214</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#acbea4545a3af1e378e1cbda899b677b7">IsNoFlagSet</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> m_Value == 0;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a6685c3c4dde8925d4811998281afc8d8">  220</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a6685c3c4dde8925d4811998281afc8d8">IsAnyFlagSet</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">return</span> m_Value != 0;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a5824fe68e0fa0b5cc0e3f4b9ac74bb3b">  227</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">ConstIterator</a> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a5824fe68e0fa0b5cc0e3f4b9ac74bb3b">GetIterator</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">ConstIterator</a>((Enum)m_Value);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="../../d7/d55/structxii_bitflags.htm#a739b0c1163cb91f90312fc854cd5406a">  233</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">ConstIterator</a> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a739b0c1163cb91f90312fc854cd5406a">GetEndIterator</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">ConstIterator</a>();</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  XII_ALWAYS_INLINE <span class="keyword">explicit</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm#a8b8c4d615ec4a857f1772939ef1cfbc6">xiiBitflags</a>(StorageType flags) :</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    m_Value(flags)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keyword">union</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  {</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    StorageType m_Value;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    Bits        m_bits;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  };</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;};</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="comment">// begin() /end() for range-based for-loop support</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">xiiBitflags&lt;T&gt;::ConstIterator</a> begin(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;{</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a5824fe68e0fa0b5cc0e3f4b9ac74bb3b">GetIterator</a>();</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">xiiBitflags&lt;T&gt;::ConstIterator</a> cbegin(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;{</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a5824fe68e0fa0b5cc0e3f4b9ac74bb3b">GetIterator</a>();</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">xiiBitflags&lt;T&gt;::ConstIterator</a> end(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a739b0c1163cb91f90312fc854cd5406a">GetEndIterator</a>();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;}</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d8/dd8/structxii_bit_iterator.htm">xiiBitflags&lt;T&gt;::ConstIterator</a> cend(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; container)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;{</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  <span class="keywordflow">return</span> container.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a739b0c1163cb91f90312fc854cd5406a">GetEndIterator</a>();</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="preprocessor">#define XII_DECLARE_FLAGS_OPERATORS(FlagsType)                                      \</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">  inline xiiBitflags&lt;FlagsType&gt; operator|(FlagsType::Enum lhs, FlagsType::Enum rhs) \</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="preprocessor">  {                                                                                 \</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="preprocessor">    return (xiiBitflags&lt;FlagsType&gt;(lhs) | xiiBitflags&lt;FlagsType&gt;(rhs));             \</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor">  }                                                                                 \</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="preprocessor">                                                                                    \</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="preprocessor">  inline xiiBitflags&lt;FlagsType&gt; operator&amp;(FlagsType::Enum lhs, FlagsType::Enum rhs) \</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="preprocessor">  {                                                                                 \</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="preprocessor">    return (xiiBitflags&lt;FlagsType&gt;(lhs) &amp; xiiBitflags&lt;FlagsType&gt;(rhs));             \</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="preprocessor">  }</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="preprocessor">#define XII_DECLARE_FLAGS_WITH_DEFAULT(InternalStorageType, BitflagsTypeName, DefaultValue, ...) \</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor">  struct BitflagsTypeName                                                                        \</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="preprocessor">  {                                                                                              \</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="preprocessor">    static constexpr xiiUInt32 Count = XII_VA_NUM_ARGS(__VA_ARGS__);                             \</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="preprocessor">    using StorageType                = InternalStorageType;                                      \</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="preprocessor">    enum Enum                                                                                    \</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="preprocessor">    {                                                                                            \</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="preprocessor">      XII_EXPAND_ARGS_WITH_INDEX(XII_DECLARE_FLAGS_ENUM, ##__VA_ARGS__) Default = DefaultValue   \</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="preprocessor">    };                                                                                           \</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="preprocessor">    struct Bits                                                                                  \</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="preprocessor">    {                                                                                            \</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="preprocessor">      XII_EXPAND_ARGS(XII_DECLARE_FLAGS_BITS, ##__VA_ARGS__)                                     \</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="preprocessor">    };                                                                                           \</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="preprocessor">    XII_ENUM_TO_STRING(__VA_ARGS__)                                                              \</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="preprocessor">  };                                                                                             \</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="preprocessor">  XII_DECLARE_FLAGS_OPERATORS(BitflagsTypeName)</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="preprocessor">#define XII_DECLARE_FLAGS(InternalStorageType, BitflagsTypeName, ...) \</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="preprocessor">  XII_DECLARE_FLAGS_WITH_DEFAULT(InternalStorageType, BitflagsTypeName, 0, ##__VA_ARGS__)</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="preprocessor">#define XII_DECLARE_FLAGS_ENUM(name, n) name = XII_BIT(n),</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="preprocessor">#define XII_DECLARE_FLAGS_BITS(name) StorageType name : 1;</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm">  348</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags</a></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <span class="keyword">using</span> StorageType = T;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#ac61235b3781fc75d3f914658cf1b3895">  354</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#ac61235b3781fc75d3f914658cf1b3895">xiiTypelessBitflags</a>() <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    :</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    m_Value(0)</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  }</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#ac61235b3781fc75d3f914658cf1b3895">xiiTypelessBitflags</a>(StorageType flags) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    m_Value = flags;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  }</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> operator=(StorageType flags) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  {</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    m_Value = flags;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> StorageType rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value == rhs; }                               <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Value == rhs.m_Value; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#a31e81c25770f6aa116b21457b1a5d67b">  374</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#a31e81c25770f6aa116b21457b1a5d67b">Clear</a>() { m_Value = 0; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#ae38d3d9dd7fd11bc3b945e6d0924add7">  377</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#ae38d3d9dd7fd11bc3b945e6d0924add7">AreAllSet</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) == rhs.m_Value;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#aee640d29869e67c254d5fd623a61df6b">  383</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#aee640d29869e67c254d5fd623a61df6b">AreNoneSet</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  {</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) == 0;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00389"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#ac02960fe2a426e3985806ebf738fc2e6">  389</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#ac02960fe2a426e3985806ebf738fc2e6">IsAnySet</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  {</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; rhs.m_Value) != 0;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#a58de878ce3e536d619beed986bb8502f">  395</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#a58de878ce3e536d619beed986bb8502f">IsStrictlyAnySet</a>(<span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;T&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">return</span> (m_Value &amp; ~rhs.m_Value) == 0;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#aa6e886f4d290a296279edcf7f978aa4f">  403</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#aa6e886f4d290a296279edcf7f978aa4f">Add</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    m_Value |= rhs.m_Value;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#a2658bac26744cb8bbd808807cd9bc905">  409</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#a2658bac26744cb8bbd808807cd9bc905">Remove</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    m_Value &amp;= (~rhs.m_Value);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00415"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#ac9a731ded4fd0b29c98a74fafe436851">  415</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#ac9a731ded4fd0b29c98a74fafe436851">Toggle</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    m_Value ^= rhs.m_Value;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#ae4ac2502b0c5daa27f801e8058e35289">  421</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#ae4ac2502b0c5daa27f801e8058e35289">AddOrRemove</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs, <span class="keywordtype">bool</span> bState) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;  {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    m_Value = (bState) ? m_Value | rhs.m_Value : m_Value &amp; (~rhs.m_Value);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  }</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160; </div>
<div class="line"><a name="l00427"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#a3b1493d265960876d08c1db08413cae3">  427</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#a3b1493d265960876d08c1db08413cae3">operator|</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>(m_Value | rhs.m_Value);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#ae64c28f51606d6b60cbb0297276dbca8">  433</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#ae64c28f51606d6b60cbb0297276dbca8">operator&amp;</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  {</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>(m_Value &amp; rhs.m_Value);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  }</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#a95e3e1e76dd67f98facaac62b1465bd1">  439</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#a95e3e1e76dd67f98facaac62b1465bd1">operator|=</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    m_Value |= rhs.m_Value;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  }</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#a14381d1a0bc1a7d9b138914b96512af4">  445</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#a14381d1a0bc1a7d9b138914b96512af4">operator&amp;=</a>(<span class="keyword">const</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags&lt;StorageType&gt;</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    m_Value &amp;= rhs.m_Value;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#a5badc96670b3cd4e2421e3ad2100e875">  451</a></span>&#160;  XII_ALWAYS_INLINE StorageType <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#a5badc96670b3cd4e2421e3ad2100e875">GetValue</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keywordflow">return</span> m_Value;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  }</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160; </div>
<div class="line"><a name="l00457"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#ae2b437f03e53fdc96841b7a4c7cb5e88">  457</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#ae2b437f03e53fdc96841b7a4c7cb5e88">SetValue</a>(StorageType value) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;    m_Value = value;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#a32abd52fb6bb9bfe5f2ab78f86990397">  463</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#a32abd52fb6bb9bfe5f2ab78f86990397">IsNoFlagSet</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  {</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    <span class="keywordflow">return</span> m_Value == 0;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00469"></a><span class="lineno"><a class="line" href="../../da/df9/structxii_typeless_bitflags.htm#aa62e7b3d777c652bb69ce7e673f4deec">  469</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/df9/structxii_typeless_bitflags.htm#aa62e7b3d777c652bb69ce7e673f4deec">IsAnyFlagSet</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    <span class="keywordflow">return</span> m_Value != 0;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160; </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  StorageType m_Value;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructxii_typeless_bitflags_htm_aee640d29869e67c254d5fd623a61df6b"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#aee640d29869e67c254d5fd623a61df6b">xiiTypelessBitflags::AreNoneSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool AreNoneSet(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether none of the given flags is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:383</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a7f78220f31e05c3d49ff428dfd8c58df"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a7f78220f31e05c3d49ff428dfd8c58df">xiiBitflags::operator&amp;=</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator&amp;=(const xiiBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Modifies this to only contain the bits that were set in this and rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:196</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a739b0c1163cb91f90312fc854cd5406a"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a739b0c1163cb91f90312fc854cd5406a">xiiBitflags::GetEndIterator</a></div><div class="ttdeci">XII_ALWAYS_INLINE ConstIterator GetEndIterator() const</div><div class="ttdoc">Returns an invalid iterator. Needed to support range based for loops.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:233</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a533117388a6b4dd8726e9ec783abc055"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a533117388a6b4dd8726e9ec783abc055">xiiBitflags::operator&amp;</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiBitflags&lt; T &gt; operator&amp;(const xiiBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns an object that has the flags that were set both in this and rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:184</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_a95e3e1e76dd67f98facaac62b1465bd1"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#a95e3e1e76dd67f98facaac62b1465bd1">xiiTypelessBitflags::operator|=</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator|=(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs)</div><div class="ttdoc">Modifies this to also contain the bits from rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:439</div></div>
<div class="ttc" id="astructxii_bit_iterator_htm"><div class="ttname"><a href="../../d8/dd8/structxii_bit_iterator.htm">xiiBitIterator</a></div><div class="ttdef"><b>Definition:</b> BitIterator.h:28</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_a32abd52fb6bb9bfe5f2ab78f86990397"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#a32abd52fb6bb9bfe5f2ab78f86990397">xiiTypelessBitflags::IsNoFlagSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsNoFlagSet() const</div><div class="ttdoc">Returns true if not a single bit is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:463</div></div>
<div class="ttc" id="astructxii_bitflags_htm_ab3cad4be1ef82010224f867192fd36fb"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#ab3cad4be1ef82010224f867192fd36fb">xiiBitflags::Clear</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Clear()</div><div class="ttdoc">Clears all flags.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:118</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_a3b1493d265960876d08c1db08413cae3"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#a3b1493d265960876d08c1db08413cae3">xiiTypelessBitflags::operator|</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiTypelessBitflags&lt; StorageType &gt; operator|(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs) const</div><div class="ttdoc">Returns an object that has the flags of this and rhs combined.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:427</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_aa6e886f4d290a296279edcf7f978aa4f"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#aa6e886f4d290a296279edcf7f978aa4f">xiiTypelessBitflags::Add</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Add(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:403</div></div>
<div class="ttc" id="astructxii_bitflags_htm_acbea4545a3af1e378e1cbda899b677b7"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#acbea4545a3af1e378e1cbda899b677b7">xiiBitflags::IsNoFlagSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsNoFlagSet() const</div><div class="ttdoc">Returns true if not a single bit is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:214</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_a31e81c25770f6aa116b21457b1a5d67b"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#a31e81c25770f6aa116b21457b1a5d67b">xiiTypelessBitflags::Clear</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Clear()</div><div class="ttdoc">Clears all flags.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:374</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a5824fe68e0fa0b5cc0e3f4b9ac74bb3b"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a5824fe68e0fa0b5cc0e3f4b9ac74bb3b">xiiBitflags::GetIterator</a></div><div class="ttdeci">XII_ALWAYS_INLINE ConstIterator GetIterator() const</div><div class="ttdoc">Returns a constant iterator to the very first set bit. Note that due to the way iterating through bit...</div><div class="ttdef"><b>Definition:</b> Bitflags.h:227</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_a14381d1a0bc1a7d9b138914b96512af4"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#a14381d1a0bc1a7d9b138914b96512af4">xiiTypelessBitflags::operator&amp;=</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator&amp;=(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs)</div><div class="ttdoc">Modifies this to only contain the bits that were set in this and rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:445</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a89cb715ce2414f2e16675f5d8503cb1c"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">xiiBitflags::Add</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Add(const xiiBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:154</div></div>
<div class="ttc" id="astructxii_bitflags_htm_ad658467820facde2db8df6f63e56de98"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#ad658467820facde2db8df6f63e56de98">xiiBitflags::AddOrRemove</a></div><div class="ttdeci">XII_ALWAYS_INLINE void AddOrRemove(const xiiBitflags&lt; T &gt; &amp;rhs, bool bState)</div><div class="ttdoc">Sets or clears the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:172</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_ae4ac2502b0c5daa27f801e8058e35289"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#ae4ac2502b0c5daa27f801e8058e35289">xiiTypelessBitflags::AddOrRemove</a></div><div class="ttdeci">XII_ALWAYS_INLINE void AddOrRemove(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs, bool bState)</div><div class="ttdoc">Sets or clears the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:421</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a35ffaa9d696a591e3c05c708009747cb"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a35ffaa9d696a591e3c05c708009747cb">xiiBitflags::xiiBitflags</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiBitflags(Enum flag1)</div><div class="ttdoc">Converts the incoming type to xiiBitflags&lt;T&gt;</div><div class="ttdef"><b>Definition:</b> Bitflags.h:98</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm">xiiTypelessBitflags</a></div><div class="ttdoc">Similar to xiiBitflags but without type-safety.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:348</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a6914e5bc6af6cb913a8a5f4264a6b836"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a6914e5bc6af6cb913a8a5f4264a6b836">xiiBitflags::GetValue</a></div><div class="ttdeci">XII_ALWAYS_INLINE StorageType GetValue() const</div><div class="ttdoc">Returns the stored value as the underlying integer type.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:202</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_a2658bac26744cb8bbd808807cd9bc905"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#a2658bac26744cb8bbd808807cd9bc905">xiiTypelessBitflags::Remove</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Remove(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs)</div><div class="ttdoc">Removes the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:409</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a6685c3c4dde8925d4811998281afc8d8"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a6685c3c4dde8925d4811998281afc8d8">xiiBitflags::IsAnyFlagSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsAnyFlagSet() const</div><div class="ttdoc">Returns true if any bitflag is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:220</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a95bb64059c3566df3c788303d16ea47e"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a95bb64059c3566df3c788303d16ea47e">xiiBitflags::AreAllSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool AreAllSet(const xiiBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether all the given flags are set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:130</div></div>
<div class="ttc" id="astructxii_bitflags_htm_ae8583e4f0e964af77e0349eaca0ef8b0"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#ae8583e4f0e964af77e0349eaca0ef8b0">xiiBitflags::operator==</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool operator==(const StorageType rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:106</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a1fc07745b1877a7125a163ce1ff4e3c2"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a1fc07745b1877a7125a163ce1ff4e3c2">xiiBitflags::IsStrictlyAnySet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsStrictlyAnySet(const xiiBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether there are strictly any of the given flags set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:148</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_aa62e7b3d777c652bb69ce7e673f4deec"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#aa62e7b3d777c652bb69ce7e673f4deec">xiiTypelessBitflags::IsAnyFlagSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsAnyFlagSet() const</div><div class="ttdoc">Returns true if any bitflag is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:469</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_ac9a731ded4fd0b29c98a74fafe436851"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#ac9a731ded4fd0b29c98a74fafe436851">xiiTypelessBitflags::Toggle</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Toggle(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs)</div><div class="ttdoc">Toggles the state of the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:415</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_ac02960fe2a426e3985806ebf738fc2e6"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#ac02960fe2a426e3985806ebf738fc2e6">xiiTypelessBitflags::IsAnySet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsAnySet(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether any of the given flags is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:389</div></div>
<div class="ttc" id="astructxii_bitflags_htm_ab1edef701b50139339fe37583721c53b"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#ab1edef701b50139339fe37583721c53b">xiiBitflags::operator==</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool operator==(const xiiBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:112</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a0635b2009f32f25b318df037225c07d1"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a0635b2009f32f25b318df037225c07d1">xiiBitflags::Toggle</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Toggle(const xiiBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Toggles the state of the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:166</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a67f95a1e8065f47004566d8489e03613"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a67f95a1e8065f47004566d8489e03613">xiiBitflags::AreNoneSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool AreNoneSet(const xiiBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether none of the given flags is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:136</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_ae38d3d9dd7fd11bc3b945e6d0924add7"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#ae38d3d9dd7fd11bc3b945e6d0924add7">xiiTypelessBitflags::AreAllSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool AreAllSet(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether all the given flags are set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:377</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a0060d836baa5f6fab5caacadd4532f83"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a0060d836baa5f6fab5caacadd4532f83">xiiBitflags::Remove</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Remove(const xiiBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Removes the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:160</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a8b8c4d615ec4a857f1772939ef1cfbc6"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a8b8c4d615ec4a857f1772939ef1cfbc6">xiiBitflags::xiiBitflags</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiBitflags()</div><div class="ttdoc">Constructor. Initializes the flags to the default value.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:92</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a8e74a594d74f59d68ab198b9d0da519b"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a8e74a594d74f59d68ab198b9d0da519b">xiiBitflags::operator|=</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator|=(const xiiBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Modifies this to also contain the bits from rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:190</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_ae64c28f51606d6b60cbb0297276dbca8"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#ae64c28f51606d6b60cbb0297276dbca8">xiiTypelessBitflags::operator&amp;</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiTypelessBitflags&lt; StorageType &gt; operator&amp;(const xiiTypelessBitflags&lt; StorageType &gt; &amp;rhs) const</div><div class="ttdoc">Returns an object that has the flags that were set both in this and rhs.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:433</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_a5badc96670b3cd4e2421e3ad2100e875"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#a5badc96670b3cd4e2421e3ad2100e875">xiiTypelessBitflags::GetValue</a></div><div class="ttdeci">XII_ALWAYS_INLINE StorageType GetValue() const</div><div class="ttdoc">Returns the stored value as the underlying integer type.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:451</div></div>
<div class="ttc" id="astructxii_bitflags_htm_ab3453f1bf3294074969fbc3cd8cf8035"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#ab3453f1bf3294074969fbc3cd8cf8035">xiiBitflags::operator|</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiBitflags&lt; T &gt; operator|(const xiiBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns an object that has the flags of this and rhs combined.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:178</div></div>
<div class="ttc" id="astructxii_bitflags_htm"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm">xiiBitflags</a></div><div class="ttdoc">The xiiBitflags class allows you to work with type-safe bitflags.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:81</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_a58de878ce3e536d619beed986bb8502f"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#a58de878ce3e536d619beed986bb8502f">xiiTypelessBitflags::IsStrictlyAnySet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsStrictlyAnySet(const xiiBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether there are strictly any of the given flags set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:395</div></div>
<div class="ttc" id="astructxii_bitflags_htm_af2c990725fd731e800eeb6a22945003f"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#af2c990725fd731e800eeb6a22945003f">xiiBitflags::IsSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsSet(Enum flag) const</div><div class="ttdoc">Checks if certain flags are set within the bitfield.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:124</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a3e39644d3e435cd46310aa638994fd60"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a3e39644d3e435cd46310aa638994fd60">xiiBitflags::IsAnySet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsAnySet(const xiiBitflags&lt; T &gt; &amp;rhs) const</div><div class="ttdoc">Returns whether any of the given flags is set.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:142</div></div>
<div class="ttc" id="astructxii_bitflags_htm_af2c473ccc094c92e73c8964960b82b80"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#af2c473ccc094c92e73c8964960b82b80">xiiBitflags::SetValue</a></div><div class="ttdeci">XII_ALWAYS_INLINE void SetValue(StorageType value)</div><div class="ttdoc">Overwrites the flags with a new value.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:208</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_ae2b437f03e53fdc96841b7a4c7cb5e88"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#ae2b437f03e53fdc96841b7a4c7cb5e88">xiiTypelessBitflags::SetValue</a></div><div class="ttdeci">XII_ALWAYS_INLINE void SetValue(StorageType value)</div><div class="ttdoc">Overwrites the flags with a new value.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:457</div></div>
<div class="ttc" id="astructxii_typeless_bitflags_htm_ac61235b3781fc75d3f914658cf1b3895"><div class="ttname"><a href="../../da/df9/structxii_typeless_bitflags.htm#ac61235b3781fc75d3f914658cf1b3895">xiiTypelessBitflags::xiiTypelessBitflags</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiTypelessBitflags()</div><div class="ttdoc">Initializes the flags zero.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:354</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_fd654f0525c8869fa0409c81d19e3265.htm">Types</a></li><li class="navelem"><b>Bitflags.h</b></li>
    <li class="footer">Generated on Tue Apr 30 2024 17:34:32 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

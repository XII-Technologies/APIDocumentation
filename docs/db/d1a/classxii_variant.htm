<!-- HTML header for doxygen 1.11.0-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: xiiVariant Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript">
  DoxygenAwesomeDarkModeToggle.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript">
  DoxygenAwesomeFragmentCopyButton.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript">
  DoxygenAwesomeParagraphLink.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
  DoxygenAwesomeInteractiveToc.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('db/d1a/classxii_variant.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="../../d7/d7b/classxii_variant-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">xiiVariant Class Reference</div></div>
</div><!--header-->
<div class="contents">

<p><a class="el" href="../../db/d1a/classxii_variant.htm" title="xiiVariant is a class that can store different types of variables, which is useful in situations wher...">xiiVariant</a> is a class that can store different types of variables, which is useful in situations where it is not clear up front, which type of data will be passed around.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d2/d19/_variant_8h_source.htm">Variant.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="nested-classes" name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/da5/structxii_variant_1_1_string_wrapper.htm">StringWrapper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">helper struct to wrap a string pointer.  <a href="../../de/da5/structxii_variant_1_1_string_wrapper.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a97a252533890c9a862f9896ee7178554" id="r_a97a252533890c9a862f9896ee7178554"><td class="memItemLeft" align="right" valign="top"><a id="a97a252533890c9a862f9896ee7178554" name="a97a252533890c9a862f9896ee7178554"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>Type</b> = <a class="el" href="../../dd/dba/structxii_variant_type.htm">xiiVariantType</a></td></tr>
<tr class="separator:a97a252533890c9a862f9896ee7178554"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bea23720425a850b4cd439abb4e6ea9" id="r_a6bea23720425a850b4cd439abb4e6ea9"><td class="memTemplParams" colspan="2"><a id="a6bea23720425a850b4cd439abb4e6ea9" name="a6bea23720425a850b4cd439abb4e6ea9"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6bea23720425a850b4cd439abb4e6ea9"><td class="memTemplItemLeft" align="right" valign="top">using&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TypeDeduction</b> = <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt;T&gt;</td></tr>
<tr class="separator:a6bea23720425a850b4cd439abb4e6ea9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a8c9a4cee67f959308efbf1794619b060" id="r_a8c9a4cee67f959308efbf1794619b060"><td class="memItemLeft" align="right" valign="top"><a id="a8c9a4cee67f959308efbf1794619b060" name="a8c9a4cee67f959308efbf1794619b060"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> ()</td></tr>
<tr class="memdesc:a8c9a4cee67f959308efbf1794619b060"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the variant to be 'Invalid'. <br /></td></tr>
<tr class="separator:a8c9a4cee67f959308efbf1794619b060"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af7473223d5d9f836e58b1c7b8d12a89b" id="r_af7473223d5d9f836e58b1c7b8d12a89b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#af7473223d5d9f836e58b1c7b8d12a89b">xiiVariant</a> (const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> &amp;other)</td></tr>
<tr class="memdesc:af7473223d5d9f836e58b1c7b8d12a89b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from the other variant.  <br /></td></tr>
<tr class="separator:af7473223d5d9f836e58b1c7b8d12a89b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fd4bbe799fc5093b0e09fb633ab9f12" id="r_a8fd4bbe799fc5093b0e09fb633ab9f12"><td class="memItemLeft" align="right" valign="top"><a id="a8fd4bbe799fc5093b0e09fb633ab9f12" name="a8fd4bbe799fc5093b0e09fb633ab9f12"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (<a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> &amp;&amp;other) noexcept</td></tr>
<tr class="memdesc:a8fd4bbe799fc5093b0e09fb633ab9f12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from the other variant. <br /></td></tr>
<tr class="separator:a8fd4bbe799fc5093b0e09fb633ab9f12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1088ba1e37c0fe9a8f9bc9013820e114" id="r_a1088ba1e37c0fe9a8f9bc9013820e114"><td class="memItemLeft" align="right" valign="top"><a id="a1088ba1e37c0fe9a8f9bc9013820e114" name="a1088ba1e37c0fe9a8f9bc9013820e114"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const bool &amp;value)</td></tr>
<tr class="separator:a1088ba1e37c0fe9a8f9bc9013820e114"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2f53e61b74652dc20df053e64314ece" id="r_aa2f53e61b74652dc20df053e64314ece"><td class="memItemLeft" align="right" valign="top"><a id="aa2f53e61b74652dc20df053e64314ece" name="aa2f53e61b74652dc20df053e64314ece"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const xiiInt8 &amp;value)</td></tr>
<tr class="separator:aa2f53e61b74652dc20df053e64314ece"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2ee3028868735608ea29015b9b7fd95d" id="r_a2ee3028868735608ea29015b9b7fd95d"><td class="memItemLeft" align="right" valign="top"><a id="a2ee3028868735608ea29015b9b7fd95d" name="a2ee3028868735608ea29015b9b7fd95d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const xiiUInt8 &amp;value)</td></tr>
<tr class="separator:a2ee3028868735608ea29015b9b7fd95d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64a7bc691044e8740602bcb66051d67a" id="r_a64a7bc691044e8740602bcb66051d67a"><td class="memItemLeft" align="right" valign="top"><a id="a64a7bc691044e8740602bcb66051d67a" name="a64a7bc691044e8740602bcb66051d67a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const xiiInt16 &amp;value)</td></tr>
<tr class="separator:a64a7bc691044e8740602bcb66051d67a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa86aebb654734585cbdae2bab9b07ee6" id="r_aa86aebb654734585cbdae2bab9b07ee6"><td class="memItemLeft" align="right" valign="top"><a id="aa86aebb654734585cbdae2bab9b07ee6" name="aa86aebb654734585cbdae2bab9b07ee6"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const xiiUInt16 &amp;value)</td></tr>
<tr class="separator:aa86aebb654734585cbdae2bab9b07ee6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c53d6655d3e932117e95a3f8b21ed6a" id="r_a5c53d6655d3e932117e95a3f8b21ed6a"><td class="memItemLeft" align="right" valign="top"><a id="a5c53d6655d3e932117e95a3f8b21ed6a" name="a5c53d6655d3e932117e95a3f8b21ed6a"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const xiiInt32 &amp;value)</td></tr>
<tr class="separator:a5c53d6655d3e932117e95a3f8b21ed6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca3bdcc2a3076a22c40b4380e5272a3c" id="r_aca3bdcc2a3076a22c40b4380e5272a3c"><td class="memItemLeft" align="right" valign="top"><a id="aca3bdcc2a3076a22c40b4380e5272a3c" name="aca3bdcc2a3076a22c40b4380e5272a3c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const xiiUInt32 &amp;value)</td></tr>
<tr class="separator:aca3bdcc2a3076a22c40b4380e5272a3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa027c398eca7ee1715efd9c0510e7eab" id="r_aa027c398eca7ee1715efd9c0510e7eab"><td class="memItemLeft" align="right" valign="top"><a id="aa027c398eca7ee1715efd9c0510e7eab" name="aa027c398eca7ee1715efd9c0510e7eab"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const xiiInt64 &amp;value)</td></tr>
<tr class="separator:aa027c398eca7ee1715efd9c0510e7eab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1d83252c0dfba2593f883b27b72bbfa" id="r_aa1d83252c0dfba2593f883b27b72bbfa"><td class="memItemLeft" align="right" valign="top"><a id="aa1d83252c0dfba2593f883b27b72bbfa" name="aa1d83252c0dfba2593f883b27b72bbfa"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const xiiUInt64 &amp;value)</td></tr>
<tr class="separator:aa1d83252c0dfba2593f883b27b72bbfa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03a7928ef7746fc76ab9ffeeb44774e9" id="r_a03a7928ef7746fc76ab9ffeeb44774e9"><td class="memItemLeft" align="right" valign="top"><a id="a03a7928ef7746fc76ab9ffeeb44774e9" name="a03a7928ef7746fc76ab9ffeeb44774e9"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const float &amp;value)</td></tr>
<tr class="separator:a03a7928ef7746fc76ab9ffeeb44774e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83b946aec0c70971913a1732b4dd71b2" id="r_a83b946aec0c70971913a1732b4dd71b2"><td class="memItemLeft" align="right" valign="top"><a id="a83b946aec0c70971913a1732b4dd71b2" name="a83b946aec0c70971913a1732b4dd71b2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const double &amp;value)</td></tr>
<tr class="separator:a83b946aec0c70971913a1732b4dd71b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3230e67bd292f37364ed3447dd10d2c8" id="r_a3230e67bd292f37364ed3447dd10d2c8"><td class="memItemLeft" align="right" valign="top"><a id="a3230e67bd292f37364ed3447dd10d2c8" name="a3230e67bd292f37364ed3447dd10d2c8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d3/de6/classxii_color.htm">xiiColor</a> &amp;value)</td></tr>
<tr class="separator:a3230e67bd292f37364ed3447dd10d2c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ee943d564e2cea24400967a2d03779e" id="r_a6ee943d564e2cea24400967a2d03779e"><td class="memItemLeft" align="right" valign="top"><a id="a6ee943d564e2cea24400967a2d03779e" name="a6ee943d564e2cea24400967a2d03779e"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2</a> &amp;value)</td></tr>
<tr class="separator:a6ee943d564e2cea24400967a2d03779e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0cfbba3eff1b7fa4dcef3717960fbd1b" id="r_a0cfbba3eff1b7fa4dcef3717960fbd1b"><td class="memItemLeft" align="right" valign="top"><a id="a0cfbba3eff1b7fa4dcef3717960fbd1b" name="a0cfbba3eff1b7fa4dcef3717960fbd1b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2d</a> &amp;value)</td></tr>
<tr class="separator:a0cfbba3eff1b7fa4dcef3717960fbd1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a764b4af57300c2f7a0038836ad7a3552" id="r_a764b4af57300c2f7a0038836ad7a3552"><td class="memItemLeft" align="right" valign="top"><a id="a764b4af57300c2f7a0038836ad7a3552" name="a764b4af57300c2f7a0038836ad7a3552"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3</a> &amp;value)</td></tr>
<tr class="separator:a764b4af57300c2f7a0038836ad7a3552"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a105b81afadb0f9677a5925c112e8eb50" id="r_a105b81afadb0f9677a5925c112e8eb50"><td class="memItemLeft" align="right" valign="top"><a id="a105b81afadb0f9677a5925c112e8eb50" name="a105b81afadb0f9677a5925c112e8eb50"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3d</a> &amp;value)</td></tr>
<tr class="separator:a105b81afadb0f9677a5925c112e8eb50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b4037a563a37627ba30a40ba3e39335" id="r_a5b4037a563a37627ba30a40ba3e39335"><td class="memItemLeft" align="right" valign="top"><a id="a5b4037a563a37627ba30a40ba3e39335" name="a5b4037a563a37627ba30a40ba3e39335"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4</a> &amp;value)</td></tr>
<tr class="separator:a5b4037a563a37627ba30a40ba3e39335"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac7afeea27eb7a707b89abb9e1fa680bf" id="r_ac7afeea27eb7a707b89abb9e1fa680bf"><td class="memItemLeft" align="right" valign="top"><a id="ac7afeea27eb7a707b89abb9e1fa680bf" name="ac7afeea27eb7a707b89abb9e1fa680bf"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4d</a> &amp;value)</td></tr>
<tr class="separator:ac7afeea27eb7a707b89abb9e1fa680bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2117aa604fee6fce6968d9443a89ccd7" id="r_a2117aa604fee6fce6968d9443a89ccd7"><td class="memItemLeft" align="right" valign="top"><a id="a2117aa604fee6fce6968d9443a89ccd7" name="a2117aa604fee6fce6968d9443a89ccd7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2I32</a> &amp;value)</td></tr>
<tr class="separator:a2117aa604fee6fce6968d9443a89ccd7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acfdd55dc0459587378b0b4c0d3677d09" id="r_acfdd55dc0459587378b0b4c0d3677d09"><td class="memItemLeft" align="right" valign="top"><a id="acfdd55dc0459587378b0b4c0d3677d09" name="acfdd55dc0459587378b0b4c0d3677d09"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2I64</a> &amp;value)</td></tr>
<tr class="separator:acfdd55dc0459587378b0b4c0d3677d09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebe43e7149f7c97c993e0e885a31494c" id="r_aebe43e7149f7c97c993e0e885a31494c"><td class="memItemLeft" align="right" valign="top"><a id="aebe43e7149f7c97c993e0e885a31494c" name="aebe43e7149f7c97c993e0e885a31494c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3I32</a> &amp;value)</td></tr>
<tr class="separator:aebe43e7149f7c97c993e0e885a31494c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a1632fa08acc2c77d7182f67eb9fa45" id="r_a6a1632fa08acc2c77d7182f67eb9fa45"><td class="memItemLeft" align="right" valign="top"><a id="a6a1632fa08acc2c77d7182f67eb9fa45" name="a6a1632fa08acc2c77d7182f67eb9fa45"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3I64</a> &amp;value)</td></tr>
<tr class="separator:a6a1632fa08acc2c77d7182f67eb9fa45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e9025bf754cbe33ed683f448a795adc" id="r_a5e9025bf754cbe33ed683f448a795adc"><td class="memItemLeft" align="right" valign="top"><a id="a5e9025bf754cbe33ed683f448a795adc" name="a5e9025bf754cbe33ed683f448a795adc"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4I32</a> &amp;value)</td></tr>
<tr class="separator:a5e9025bf754cbe33ed683f448a795adc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31ff6c5f05b052b8c600bcec54e111b8" id="r_a31ff6c5f05b052b8c600bcec54e111b8"><td class="memItemLeft" align="right" valign="top"><a id="a31ff6c5f05b052b8c600bcec54e111b8" name="a31ff6c5f05b052b8c600bcec54e111b8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4I64</a> &amp;value)</td></tr>
<tr class="separator:a31ff6c5f05b052b8c600bcec54e111b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2deedba35ffcf957c99c19c383b26387" id="r_a2deedba35ffcf957c99c19c383b26387"><td class="memItemLeft" align="right" valign="top"><a id="a2deedba35ffcf957c99c19c383b26387" name="a2deedba35ffcf957c99c19c383b26387"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2U32</a> &amp;value)</td></tr>
<tr class="separator:a2deedba35ffcf957c99c19c383b26387"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bd2111a009bc1e86ac1cfb291c1353c" id="r_a8bd2111a009bc1e86ac1cfb291c1353c"><td class="memItemLeft" align="right" valign="top"><a id="a8bd2111a009bc1e86ac1cfb291c1353c" name="a8bd2111a009bc1e86ac1cfb291c1353c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2U64</a> &amp;value)</td></tr>
<tr class="separator:a8bd2111a009bc1e86ac1cfb291c1353c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b13e8a813c1f6efa32087550e203386" id="r_a9b13e8a813c1f6efa32087550e203386"><td class="memItemLeft" align="right" valign="top"><a id="a9b13e8a813c1f6efa32087550e203386" name="a9b13e8a813c1f6efa32087550e203386"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3U32</a> &amp;value)</td></tr>
<tr class="separator:a9b13e8a813c1f6efa32087550e203386"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8785d233fc8ba6a7e94988a3f3ce7a81" id="r_a8785d233fc8ba6a7e94988a3f3ce7a81"><td class="memItemLeft" align="right" valign="top"><a id="a8785d233fc8ba6a7e94988a3f3ce7a81" name="a8785d233fc8ba6a7e94988a3f3ce7a81"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3U64</a> &amp;value)</td></tr>
<tr class="separator:a8785d233fc8ba6a7e94988a3f3ce7a81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d0f6733e9ce4ee0abdcd9c3423a8e2c" id="r_a2d0f6733e9ce4ee0abdcd9c3423a8e2c"><td class="memItemLeft" align="right" valign="top"><a id="a2d0f6733e9ce4ee0abdcd9c3423a8e2c" name="a2d0f6733e9ce4ee0abdcd9c3423a8e2c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4U32</a> &amp;value)</td></tr>
<tr class="separator:a2d0f6733e9ce4ee0abdcd9c3423a8e2c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1beb343bc51c096a8498d030f7c7285b" id="r_a1beb343bc51c096a8498d030f7c7285b"><td class="memItemLeft" align="right" valign="top"><a id="a1beb343bc51c096a8498d030f7c7285b" name="a1beb343bc51c096a8498d030f7c7285b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4U64</a> &amp;value)</td></tr>
<tr class="separator:a1beb343bc51c096a8498d030f7c7285b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab163e6868780e9453e244248823e5d5d" id="r_ab163e6868780e9453e244248823e5d5d"><td class="memItemLeft" align="right" valign="top"><a id="ab163e6868780e9453e244248823e5d5d" name="ab163e6868780e9453e244248823e5d5d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d9/d1b/classxii_quat_template.htm">xiiQuat</a> &amp;value)</td></tr>
<tr class="separator:ab163e6868780e9453e244248823e5d5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2cdfee99fbbab7e4d82160a03ca89670" id="r_a2cdfee99fbbab7e4d82160a03ca89670"><td class="memItemLeft" align="right" valign="top"><a id="a2cdfee99fbbab7e4d82160a03ca89670" name="a2cdfee99fbbab7e4d82160a03ca89670"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d9/d1b/classxii_quat_template.htm">xiiQuatd</a> &amp;value)</td></tr>
<tr class="separator:a2cdfee99fbbab7e4d82160a03ca89670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b7abe5179377755e203ce7348dd8500" id="r_a8b7abe5179377755e203ce7348dd8500"><td class="memItemLeft" align="right" valign="top"><a id="a8b7abe5179377755e203ce7348dd8500" name="a8b7abe5179377755e203ce7348dd8500"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d3/d74/classxii_mat3_template.htm">xiiMat3</a> &amp;value)</td></tr>
<tr class="memdesc:a8b7abe5179377755e203ce7348dd8500"><td class="mdescLeft">&#160;</td><td class="mdescRight">constructors <br /></td></tr>
<tr class="separator:a8b7abe5179377755e203ce7348dd8500"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2aa01491e5c8430accfa88c9c830e47" id="r_aa2aa01491e5c8430accfa88c9c830e47"><td class="memItemLeft" align="right" valign="top"><a id="aa2aa01491e5c8430accfa88c9c830e47" name="aa2aa01491e5c8430accfa88c9c830e47"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d3/d74/classxii_mat3_template.htm">xiiMat3d</a> &amp;value)</td></tr>
<tr class="separator:aa2aa01491e5c8430accfa88c9c830e47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adbabf236e7cb65ade89bcbba4e3e5534" id="r_adbabf236e7cb65ade89bcbba4e3e5534"><td class="memItemLeft" align="right" valign="top"><a id="adbabf236e7cb65ade89bcbba4e3e5534" name="adbabf236e7cb65ade89bcbba4e3e5534"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/dec/classxii_mat4_template.htm">xiiMat4</a> &amp;value)</td></tr>
<tr class="separator:adbabf236e7cb65ade89bcbba4e3e5534"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab092f176ebebaa5d8a18bb61983ba608" id="r_ab092f176ebebaa5d8a18bb61983ba608"><td class="memItemLeft" align="right" valign="top"><a id="ab092f176ebebaa5d8a18bb61983ba608" name="ab092f176ebebaa5d8a18bb61983ba608"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/dec/classxii_mat4_template.htm">xiiMat4d</a> &amp;value)</td></tr>
<tr class="separator:ab092f176ebebaa5d8a18bb61983ba608"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf65464592d30a83a6d5830f3670a58b" id="r_aaf65464592d30a83a6d5830f3670a58b"><td class="memItemLeft" align="right" valign="top"><a id="aaf65464592d30a83a6d5830f3670a58b" name="aaf65464592d30a83a6d5830f3670a58b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d5/d13/classxii_transform_template.htm">xiiTransform</a> &amp;value)</td></tr>
<tr class="separator:aaf65464592d30a83a6d5830f3670a58b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cab4ff545257373016f910e3fddfa1e" id="r_a3cab4ff545257373016f910e3fddfa1e"><td class="memItemLeft" align="right" valign="top"><a id="a3cab4ff545257373016f910e3fddfa1e" name="a3cab4ff545257373016f910e3fddfa1e"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d5/d13/classxii_transform_template.htm">xiiTransformd</a> &amp;value)</td></tr>
<tr class="separator:a3cab4ff545257373016f910e3fddfa1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8acb16e2fd270f32b776a9e5af05729" id="r_ae8acb16e2fd270f32b776a9e5af05729"><td class="memItemLeft" align="right" valign="top"><a id="ae8acb16e2fd270f32b776a9e5af05729" name="ae8acb16e2fd270f32b776a9e5af05729"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const char *value)</td></tr>
<tr class="separator:ae8acb16e2fd270f32b776a9e5af05729"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86b3d16a05932b0342cad70f9442f87b" id="r_a86b3d16a05932b0342cad70f9442f87b"><td class="memItemLeft" align="right" valign="top"><a id="a86b3d16a05932b0342cad70f9442f87b" name="a86b3d16a05932b0342cad70f9442f87b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../df/dfb/structxii_hybrid_string.htm">xiiString</a> &amp;value)</td></tr>
<tr class="separator:a86b3d16a05932b0342cad70f9442f87b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa43d690bdb9f2fe6a4be90edf1808c0c" id="r_aa43d690bdb9f2fe6a4be90edf1808c0c"><td class="memItemLeft" align="right" valign="top"><a id="aa43d690bdb9f2fe6a4be90edf1808c0c" name="aa43d690bdb9f2fe6a4be90edf1808c0c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../df/dfb/structxii_hybrid_string.htm">xiiUntrackedString</a> &amp;value)</td></tr>
<tr class="separator:aa43d690bdb9f2fe6a4be90edf1808c0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bb9320f804477d79daa78956322de57" id="r_a1bb9320f804477d79daa78956322de57"><td class="memItemLeft" align="right" valign="top"><a id="a1bb9320f804477d79daa78956322de57" name="a1bb9320f804477d79daa78956322de57"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> &amp;value, bool bCopyString=true)</td></tr>
<tr class="separator:a1bb9320f804477d79daa78956322de57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f168be8b387fd39e4f53ff99deef2e3" id="r_a8f168be8b387fd39e4f53ff99deef2e3"><td class="memItemLeft" align="right" valign="top"><a id="a8f168be8b387fd39e4f53ff99deef2e3" name="a8f168be8b387fd39e4f53ff99deef2e3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d6/d0c/classxii_hashed_string.htm">xiiHashedString</a> &amp;value)</td></tr>
<tr class="separator:a8f168be8b387fd39e4f53ff99deef2e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12f637f0be2597f62ebfb7fcf463d686" id="r_a12f637f0be2597f62ebfb7fcf463d686"><td class="memItemLeft" align="right" valign="top"><a id="a12f637f0be2597f62ebfb7fcf463d686" name="a12f637f0be2597f62ebfb7fcf463d686"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d5/dd2/classxii_temp_hashed_string.htm">xiiTempHashedString</a> &amp;value)</td></tr>
<tr class="separator:a12f637f0be2597f62ebfb7fcf463d686"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a042bc822508d1020fd589ea1028fb5e5" id="r_a042bc822508d1020fd589ea1028fb5e5"><td class="memItemLeft" align="right" valign="top"><a id="a042bc822508d1020fd589ea1028fb5e5" name="a042bc822508d1020fd589ea1028fb5e5"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../dc/da4/classxii_dynamic_array.htm">xiiDataBuffer</a> &amp;value)</td></tr>
<tr class="separator:a042bc822508d1020fd589ea1028fb5e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a925dd3e0b1ef7b7e7fff6902fc26d1af" id="r_a925dd3e0b1ef7b7e7fff6902fc26d1af"><td class="memItemLeft" align="right" valign="top"><a id="a925dd3e0b1ef7b7e7fff6902fc26d1af" name="a925dd3e0b1ef7b7e7fff6902fc26d1af"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d7/dc1/structxii_time.htm">xiiTime</a> &amp;value)</td></tr>
<tr class="separator:a925dd3e0b1ef7b7e7fff6902fc26d1af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6811bed2f547b232277b112a8a900678" id="r_a6811bed2f547b232277b112a8a900678"><td class="memItemLeft" align="right" valign="top"><a id="a6811bed2f547b232277b112a8a900678" name="a6811bed2f547b232277b112a8a900678"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../dc/d1d/classxii_uuid.htm">xiiUuid</a> &amp;value)</td></tr>
<tr class="separator:a6811bed2f547b232277b112a8a900678"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40cff2f1c7ab1f3ec643fbebe06366ac" id="r_a40cff2f1c7ab1f3ec643fbebe06366ac"><td class="memItemLeft" align="right" valign="top"><a id="a40cff2f1c7ab1f3ec643fbebe06366ac" name="a40cff2f1c7ab1f3ec643fbebe06366ac"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngle</a> &amp;value)</td></tr>
<tr class="separator:a40cff2f1c7ab1f3ec643fbebe06366ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30165a5610d8d3874b0d55519829bfce" id="r_a30165a5610d8d3874b0d55519829bfce"><td class="memItemLeft" align="right" valign="top"><a id="a30165a5610d8d3874b0d55519829bfce" name="a30165a5610d8d3874b0d55519829bfce"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngled</a> &amp;value)</td></tr>
<tr class="separator:a30165a5610d8d3874b0d55519829bfce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adfb8491e53b58d26e1c6d4044d8e7a43" id="r_adfb8491e53b58d26e1c6d4044d8e7a43"><td class="memItemLeft" align="right" valign="top"><a id="adfb8491e53b58d26e1c6d4044d8e7a43" name="adfb8491e53b58d26e1c6d4044d8e7a43"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../df/d71/classxii_color_gamma_u_b.htm">xiiColorGammaUB</a> &amp;value)</td></tr>
<tr class="separator:adfb8491e53b58d26e1c6d4044d8e7a43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a6830a6262cc0e86299f5fee9404f15" id="r_a3a6830a6262cc0e86299f5fee9404f15"><td class="memItemLeft" align="right" valign="top"><a id="a3a6830a6262cc0e86299f5fee9404f15" name="a3a6830a6262cc0e86299f5fee9404f15"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../dc/da4/classxii_dynamic_array.htm">xiiVariantArray</a> &amp;value)</td></tr>
<tr class="separator:a3a6830a6262cc0e86299f5fee9404f15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1440994ec48700c02043e62de669a617" id="r_a1440994ec48700c02043e62de669a617"><td class="memItemLeft" align="right" valign="top"><a id="a1440994ec48700c02043e62de669a617" name="a1440994ec48700c02043e62de669a617"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d8/dc2/classxii_hash_table.htm">xiiVariantDictionary</a> &amp;value)</td></tr>
<tr class="separator:a1440994ec48700c02043e62de669a617"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d4897ec492d4086681bea8cebacb34e" id="r_a1d4897ec492d4086681bea8cebacb34e"><td class="memItemLeft" align="right" valign="top"><a id="a1d4897ec492d4086681bea8cebacb34e" name="a1d4897ec492d4086681bea8cebacb34e"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d2/de4/structxii_typed_pointer.htm">xiiTypedPointer</a> &amp;value)</td></tr>
<tr class="separator:a1d4897ec492d4086681bea8cebacb34e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0c77b70b78764822fdc2e310bbac480" id="r_ae0c77b70b78764822fdc2e310bbac480"><td class="memItemLeft" align="right" valign="top"><a id="ae0c77b70b78764822fdc2e310bbac480" name="ae0c77b70b78764822fdc2e310bbac480"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (const <a class="el" href="../../d1/d30/structxii_typed_object.htm">xiiTypedObject</a> &amp;value)</td></tr>
<tr class="separator:ae0c77b70b78764822fdc2e310bbac480"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6fd2cf8b0e282fad108bffcc2f8a947" id="r_ad6fd2cf8b0e282fad108bffcc2f8a947"><td class="memTemplParams" colspan="2"><a id="ad6fd2cf8b0e282fad108bffcc2f8a947" name="ad6fd2cf8b0e282fad108bffcc2f8a947"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7afcb404874d1f6fd9cbc6adf6e0211101">xiiVariantClass::CustomTypeCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:ad6fd2cf8b0e282fad108bffcc2f8a947"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiVariant</b> (const T &amp;value)</td></tr>
<tr class="separator:ad6fd2cf8b0e282fad108bffcc2f8a947"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a91fb1d50bb70b9ca7e9799e8466120b9" id="r_a91fb1d50bb70b9ca7e9799e8466120b9"><td class="memTemplParams" colspan="2"><a id="a91fb1d50bb70b9ca7e9799e8466120b9" name="a91fb1d50bb70b9ca7e9799e8466120b9"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a91fb1d50bb70b9ca7e9799e8466120b9"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiVariant</b> (const T *value)</td></tr>
<tr class="separator:a91fb1d50bb70b9ca7e9799e8466120b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3810c81b42d4c4fa8d3571cb838e7e28" id="r_a3810c81b42d4c4fa8d3571cb838e7e28"><td class="memItemLeft" align="right" valign="top"><a id="a3810c81b42d4c4fa8d3571cb838e7e28" name="a3810c81b42d4c4fa8d3571cb838e7e28"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariant</b> (void *value, const <a class="el" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a> *pType)</td></tr>
<tr class="memdesc:a3810c81b42d4c4fa8d3571cb838e7e28"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes to a TypedPointer of the given object and type. <br /></td></tr>
<tr class="separator:a3810c81b42d4c4fa8d3571cb838e7e28"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d1addecb9e66b8281c40c93aca6093a" id="r_a6d1addecb9e66b8281c40c93aca6093a"><td class="memItemLeft" align="right" valign="top"><a id="a6d1addecb9e66b8281c40c93aca6093a" name="a6d1addecb9e66b8281c40c93aca6093a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>CopyTypedObject</b> (const void *value, const <a class="el" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a> *pType)</td></tr>
<tr class="memdesc:a6d1addecb9e66b8281c40c93aca6093a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes to a TypedObject by cloning the given object and type. <br /></td></tr>
<tr class="separator:a6d1addecb9e66b8281c40c93aca6093a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a78701eee50e3080bfc3a8f1f352f2d42" id="r_a78701eee50e3080bfc3a8f1f352f2d42"><td class="memItemLeft" align="right" valign="top"><a id="a78701eee50e3080bfc3a8f1f352f2d42" name="a78701eee50e3080bfc3a8f1f352f2d42"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MoveTypedObject</b> (void *value, const <a class="el" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a> *pType)</td></tr>
<tr class="memdesc:a78701eee50e3080bfc3a8f1f352f2d42"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes to a TypedObject by taking ownership of the given object and type. <br /></td></tr>
<tr class="separator:a78701eee50e3080bfc3a8f1f352f2d42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e2564f36d44014dd6830e8492691f90" id="r_a5e2564f36d44014dd6830e8492691f90"><td class="memItemLeft" align="right" valign="top"><a id="a5e2564f36d44014dd6830e8492691f90" name="a5e2564f36d44014dd6830e8492691f90"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>~xiiVariant</b> ()</td></tr>
<tr class="memdesc:a5e2564f36d44014dd6830e8492691f90"><td class="mdescLeft">&#160;</td><td class="mdescRight">If necessary, this will deallocate any heap memory that is not in use any more. <br /></td></tr>
<tr class="separator:a5e2564f36d44014dd6830e8492691f90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45cbc8252c11cc16d8caf9854acb5f35" id="r_a45cbc8252c11cc16d8caf9854acb5f35"><td class="memItemLeft" align="right" valign="top"><a id="a45cbc8252c11cc16d8caf9854acb5f35" name="a45cbc8252c11cc16d8caf9854acb5f35"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> &amp;other)</td></tr>
<tr class="memdesc:a45cbc8252c11cc16d8caf9854acb5f35"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from the <em>other</em> variant into this one. <br /></td></tr>
<tr class="separator:a45cbc8252c11cc16d8caf9854acb5f35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae24ddb7aa88f245c6fc40b324cdfbb86" id="r_ae24ddb7aa88f245c6fc40b324cdfbb86"><td class="memItemLeft" align="right" valign="top"><a id="ae24ddb7aa88f245c6fc40b324cdfbb86" name="ae24ddb7aa88f245c6fc40b324cdfbb86"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> &amp;&amp;other) noexcept</td></tr>
<tr class="memdesc:ae24ddb7aa88f245c6fc40b324cdfbb86"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the data from the <em>other</em> variant into this one. <br /></td></tr>
<tr class="separator:ae24ddb7aa88f245c6fc40b324cdfbb86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1258e31f93fd0797b4e0d01ac1a9300e" id="r_a1258e31f93fd0797b4e0d01ac1a9300e"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1258e31f93fd0797b4e0d01ac1a9300e"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a1258e31f93fd0797b4e0d01ac1a9300e">operator=</a> (const T &amp;value)</td></tr>
<tr class="memdesc:a1258e31f93fd0797b4e0d01ac1a9300e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deduces the type of <em>T</em> and stores <em>value</em>.  <br /></td></tr>
<tr class="separator:a1258e31f93fd0797b4e0d01ac1a9300e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a617d04558bc8eeda5d153a303441e951" id="r_a617d04558bc8eeda5d153a303441e951"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a617d04558bc8eeda5d153a303441e951">operator==</a> (const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> &amp;other) const</td></tr>
<tr class="memdesc:a617d04558bc8eeda5d153a303441e951"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will compare the value of this variant to that of <em>other</em>.  <br /></td></tr>
<tr class="separator:a617d04558bc8eeda5d153a303441e951"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a487abc4475c9a59671182fc6d14b19" id="r_a7a487abc4475c9a59671182fc6d14b19"><td class="memTemplParams" colspan="2"><a id="a7a487abc4475c9a59671182fc6d14b19" name="a7a487abc4475c9a59671182fc6d14b19"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7a487abc4475c9a59671182fc6d14b19"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator==</b> (const T &amp;other) const</td></tr>
<tr class="memdesc:a7a487abc4475c9a59671182fc6d14b19"><td class="mdescLeft">&#160;</td><td class="mdescRight">See non-templated operator==. <br /></td></tr>
<tr class="separator:a7a487abc4475c9a59671182fc6d14b19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a250a01bc4087187f7fa2de0f63afffd1" id="r_a250a01bc4087187f7fa2de0f63afffd1"><td class="memItemLeft" align="right" valign="top"><a id="a250a01bc4087187f7fa2de0f63afffd1" name="a250a01bc4087187f7fa2de0f63afffd1"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsValid</b> () const</td></tr>
<tr class="memdesc:a250a01bc4087187f7fa2de0f63afffd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether this variant stores any other type than 'Invalid'. <br /></td></tr>
<tr class="separator:a250a01bc4087187f7fa2de0f63afffd1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc832e428934becc9f8fe659e434dac4" id="r_afc832e428934becc9f8fe659e434dac4"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#afc832e428934becc9f8fe659e434dac4">IsNumber</a> () const</td></tr>
<tr class="memdesc:afc832e428934becc9f8fe659e434dac4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the stored type is numerical type either integer or floating point.  <br /></td></tr>
<tr class="separator:afc832e428934becc9f8fe659e434dac4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2324e3a3633a4fe472d570c647094dee" id="r_a2324e3a3633a4fe472d570c647094dee"><td class="memItemLeft" align="right" valign="top"><a id="a2324e3a3633a4fe472d570c647094dee" name="a2324e3a3633a4fe472d570c647094dee"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFloatingPoint</b> () const</td></tr>
<tr class="memdesc:a2324e3a3633a4fe472d570c647094dee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the stored type is floating point (float or double). <br /></td></tr>
<tr class="separator:a2324e3a3633a4fe472d570c647094dee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0d4056dfae5dd904f41a75cc688e914" id="r_ae0d4056dfae5dd904f41a75cc688e914"><td class="memItemLeft" align="right" valign="top"><a id="ae0d4056dfae5dd904f41a75cc688e914" name="ae0d4056dfae5dd904f41a75cc688e914"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsString</b> () const</td></tr>
<tr class="memdesc:ae0d4056dfae5dd904f41a75cc688e914"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the stored type is a string (xiiString or <a class="el" href="../../da/d9d/structxii_string_view.htm" title="xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...">xiiStringView</a>). <br /></td></tr>
<tr class="separator:ae0d4056dfae5dd904f41a75cc688e914"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93c093ba139081519439d50fecb42be2" id="r_a93c093ba139081519439d50fecb42be2"><td class="memItemLeft" align="right" valign="top"><a id="a93c093ba139081519439d50fecb42be2" name="a93c093ba139081519439d50fecb42be2"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsHashedString</b> () const</td></tr>
<tr class="memdesc:a93c093ba139081519439d50fecb42be2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the stored type is a hashed string (<a class="el" href="../../d6/d0c/classxii_hashed_string.htm" title="This class is optimized to take nearly no memory (sizeof(void*)) and to allow very fast checks whethe...">xiiHashedString</a> or <a class="el" href="../../d5/dd2/classxii_temp_hashed_string.htm" title="A class to use together with xiiHashedString for quick comparisons with temporary strings that need n...">xiiTempHashedString</a>). <br /></td></tr>
<tr class="separator:a93c093ba139081519439d50fecb42be2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa28a169f3d484e9d656060b372ce2563" id="r_aa28a169f3d484e9d656060b372ce2563"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7a607e6f0fa5be9ed7cc1ab13413121abf">xiiVariantClass::DirectCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:aa28a169f3d484e9d656060b372ce2563"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#aa28a169f3d484e9d656060b372ce2563">IsA</a> () const</td></tr>
<tr class="memdesc:aa28a169f3d484e9d656060b372ce2563"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the stored type is exactly the given type.  <br /></td></tr>
<tr class="separator:aa28a169f3d484e9d656060b372ce2563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa28a169f3d484e9d656060b372ce2563" id="r_aa28a169f3d484e9d656060b372ce2563"><td class="memTemplParams" colspan="2"><a id="aa28a169f3d484e9d656060b372ce2563" name="aa28a169f3d484e9d656060b372ce2563"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7abdc2c373fefafc9c3faaf4316c573982">xiiVariantClass::PointerCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:aa28a169f3d484e9d656060b372ce2563"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsA</b> () const</td></tr>
<tr class="separator:aa28a169f3d484e9d656060b372ce2563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa28a169f3d484e9d656060b372ce2563" id="r_aa28a169f3d484e9d656060b372ce2563"><td class="memTemplParams" colspan="2"><a id="aa28a169f3d484e9d656060b372ce2563" name="aa28a169f3d484e9d656060b372ce2563"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7aa73b4949946a8ab33d6e2591547730cf">xiiVariantClass::TypedObject</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:aa28a169f3d484e9d656060b372ce2563"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsA</b> () const</td></tr>
<tr class="separator:aa28a169f3d484e9d656060b372ce2563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa28a169f3d484e9d656060b372ce2563" id="r_aa28a169f3d484e9d656060b372ce2563"><td class="memTemplParams" colspan="2"><a id="aa28a169f3d484e9d656060b372ce2563" name="aa28a169f3d484e9d656060b372ce2563"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7afcb404874d1f6fd9cbc6adf6e0211101">xiiVariantClass::CustomTypeCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:aa28a169f3d484e9d656060b372ce2563"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsA</b> () const</td></tr>
<tr class="separator:aa28a169f3d484e9d656060b372ce2563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8143bdbbbeb646f8db6e154f5092957f" id="r_a8143bdbbbeb646f8db6e154f5092957f"><td class="memItemLeft" align="right" valign="top"><a id="a8143bdbbbeb646f8db6e154f5092957f" name="a8143bdbbbeb646f8db6e154f5092957f"></a>
<a class="el" href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6b">Type::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetType</b> () const</td></tr>
<tr class="memdesc:a8143bdbbbeb646f8db6e154f5092957f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the exact xiiVariant::Type value. <br /></td></tr>
<tr class="separator:a8143bdbbbeb646f8db6e154f5092957f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55cfe16069b70f06d8cc724833984d02" id="r_a55cfe16069b70f06d8cc724833984d02"><td class="memTemplParams" colspan="2">template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7a607e6f0fa5be9ed7cc1ab13413121abf">xiiVariantClass::DirectCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:a55cfe16069b70f06d8cc724833984d02"><td class="memTemplItemLeft" align="right" valign="top">const T &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a55cfe16069b70f06d8cc724833984d02">Get</a> () const</td></tr>
<tr class="memdesc:a55cfe16069b70f06d8cc724833984d02"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the variants value as the provided type.  <br /></td></tr>
<tr class="separator:a55cfe16069b70f06d8cc724833984d02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa05b5de4f5ad50cd6398f8ab9f2a2043" id="r_aa05b5de4f5ad50cd6398f8ab9f2a2043"><td class="memTemplParams" colspan="2"><a id="aa05b5de4f5ad50cd6398f8ab9f2a2043" name="aa05b5de4f5ad50cd6398f8ab9f2a2043"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7abdc2c373fefafc9c3faaf4316c573982">xiiVariantClass::PointerCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:aa05b5de4f5ad50cd6398f8ab9f2a2043"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Get</b> () const</td></tr>
<tr class="separator:aa05b5de4f5ad50cd6398f8ab9f2a2043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ecae00851142a9090314b4b22f5141f" id="r_a3ecae00851142a9090314b4b22f5141f"><td class="memTemplParams" colspan="2"><a id="a3ecae00851142a9090314b4b22f5141f" name="a3ecae00851142a9090314b4b22f5141f"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7aa73b4949946a8ab33d6e2591547730cf">xiiVariantClass::TypedObject</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:a3ecae00851142a9090314b4b22f5141f"><td class="memTemplItemLeft" align="right" valign="top">const T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Get</b> () const</td></tr>
<tr class="separator:a3ecae00851142a9090314b4b22f5141f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a55cfe16069b70f06d8cc724833984d02" id="r_a55cfe16069b70f06d8cc724833984d02"><td class="memTemplParams" colspan="2"><a id="a55cfe16069b70f06d8cc724833984d02" name="a55cfe16069b70f06d8cc724833984d02"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7afcb404874d1f6fd9cbc6adf6e0211101">xiiVariantClass::CustomTypeCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:a55cfe16069b70f06d8cc724833984d02"><td class="memTemplItemLeft" align="right" valign="top">const T &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Get</b> () const</td></tr>
<tr class="separator:a55cfe16069b70f06d8cc724833984d02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2455c82432e710d8436547f60ba96060" id="r_a2455c82432e710d8436547f60ba96060"><td class="memItemLeft" align="right" valign="top"><a id="a2455c82432e710d8436547f60ba96060" name="a2455c82432e710d8436547f60ba96060"></a>
<a class="el" href="../../d2/de4/structxii_typed_pointer.htm">xiiTypedPointer</a>&#160;</td><td class="memItemRight" valign="bottom"><b>GetWriteAccess</b> ()</td></tr>
<tr class="memdesc:a2455c82432e710d8436547f60ba96060"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an writable <a class="el" href="../../d2/de4/structxii_typed_pointer.htm" title="A typed raw pointer.">xiiTypedPointer</a> to the internal data. If the data is currently shared a clone will be made to ensure we hold the only reference. <br /></td></tr>
<tr class="separator:a2455c82432e710d8436547f60ba96060"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1e5fe65d4df8fcf6a947934fca102cc" id="r_ad1e5fe65d4df8fcf6a947934fca102cc"><td class="memTemplParams" colspan="2"><a id="ad1e5fe65d4df8fcf6a947934fca102cc" name="ad1e5fe65d4df8fcf6a947934fca102cc"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7a607e6f0fa5be9ed7cc1ab13413121abf">xiiVariantClass::DirectCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:ad1e5fe65d4df8fcf6a947934fca102cc"><td class="memTemplItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetWritable</b> ()</td></tr>
<tr class="separator:ad1e5fe65d4df8fcf6a947934fca102cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab405369c5e65af046b7e121595171452" id="r_ab405369c5e65af046b7e121595171452"><td class="memTemplParams" colspan="2"><a id="ab405369c5e65af046b7e121595171452" name="ab405369c5e65af046b7e121595171452"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7abdc2c373fefafc9c3faaf4316c573982">xiiVariantClass::PointerCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:ab405369c5e65af046b7e121595171452"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetWritable</b> ()</td></tr>
<tr class="separator:ab405369c5e65af046b7e121595171452"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1e5fe65d4df8fcf6a947934fca102cc" id="r_ad1e5fe65d4df8fcf6a947934fca102cc"><td class="memTemplParams" colspan="2"><a id="ad1e5fe65d4df8fcf6a947934fca102cc" name="ad1e5fe65d4df8fcf6a947934fca102cc"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7afcb404874d1f6fd9cbc6adf6e0211101">xiiVariantClass::CustomTypeCast</a>, xiiInt32 &gt;  = 0&gt; </td></tr>
<tr class="memitem:ad1e5fe65d4df8fcf6a947934fca102cc"><td class="memTemplItemLeft" align="right" valign="top">T &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetWritable</b> ()</td></tr>
<tr class="separator:ad1e5fe65d4df8fcf6a947934fca102cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7308d03ec550431f0bbf3cff7f2b6f8d" id="r_a7308d03ec550431f0bbf3cff7f2b6f8d"><td class="memItemLeft" align="right" valign="top"><a id="a7308d03ec550431f0bbf3cff7f2b6f8d" name="a7308d03ec550431f0bbf3cff7f2b6f8d"></a>
const void *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> () const</td></tr>
<tr class="memdesc:a7308d03ec550431f0bbf3cff7f2b6f8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a const void* to the internal data. For TypedPointer and TypedObject this will return a pointer to the target object. <br /></td></tr>
<tr class="separator:a7308d03ec550431f0bbf3cff7f2b6f8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d5d6015b81b7b855c4ff15b77d78302" id="r_a1d5d6015b81b7b855c4ff15b77d78302"><td class="memItemLeft" align="right" valign="top"><a id="a1d5d6015b81b7b855c4ff15b77d78302" name="a1d5d6015b81b7b855c4ff15b77d78302"></a>
const <a class="el" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetReflectedType</b> () const</td></tr>
<tr class="memdesc:a1d5d6015b81b7b855c4ff15b77d78302"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the <a class="el" href="../../db/d89/classxii_r_t_t_i.htm" title="This class holds information about reflected types. Each instance represents one type that is known t...">xiiRTTI</a> type of the held value. For TypedPointer and TypedObject this will return the type of the target object. <br /></td></tr>
<tr class="separator:a1d5d6015b81b7b855c4ff15b77d78302"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76510f1eabf746f6aa92fc0ea42a733d" id="r_a76510f1eabf746f6aa92fc0ea42a733d"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a76510f1eabf746f6aa92fc0ea42a733d">operator[]</a> (xiiUInt32 uiIndex) const</td></tr>
<tr class="memdesc:a76510f1eabf746f6aa92fc0ea42a733d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sub value at iIndex. This could be an element in an array or a member property inside a reflected type.  <br /></td></tr>
<tr class="separator:a76510f1eabf746f6aa92fc0ea42a733d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa06681dbe2f7d2c77e9950fe751db1c8" id="r_aa06681dbe2f7d2c77e9950fe751db1c8"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#aa06681dbe2f7d2c77e9950fe751db1c8">operator[]</a> (<a class="el" href="../../de/da5/structxii_variant_1_1_string_wrapper.htm">StringWrapper</a> key) const</td></tr>
<tr class="memdesc:aa06681dbe2f7d2c77e9950fe751db1c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sub value with szKey. This could be a value in a dictionary or a member property inside a reflected type.  <br /></td></tr>
<tr class="separator:aa06681dbe2f7d2c77e9950fe751db1c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3695a75397ceb74e613bb00ba2e89a52" id="r_a3695a75397ceb74e613bb00ba2e89a52"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3695a75397ceb74e613bb00ba2e89a52"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a3695a75397ceb74e613bb00ba2e89a52">CanConvertTo</a> () const</td></tr>
<tr class="memdesc:a3695a75397ceb74e613bb00ba2e89a52"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the stored type can generally be converted to the desired type.  <br /></td></tr>
<tr class="separator:a3695a75397ceb74e613bb00ba2e89a52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a715eec66bbc507af15c33154b9e9397d" id="r_a715eec66bbc507af15c33154b9e9397d"><td class="memItemLeft" align="right" valign="top"><a id="a715eec66bbc507af15c33154b9e9397d" name="a715eec66bbc507af15c33154b9e9397d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>CanConvertTo</b> (<a class="el" href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6b">Type::Enum</a> type) const</td></tr>
<tr class="memdesc:a715eec66bbc507af15c33154b9e9397d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as the templated CanConvertTo function. <br /></td></tr>
<tr class="separator:a715eec66bbc507af15c33154b9e9397d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c268849ce0029fde4962331c726e904" id="r_a4c268849ce0029fde4962331c726e904"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4c268849ce0029fde4962331c726e904"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a4c268849ce0029fde4962331c726e904">ConvertTo</a> (<a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> *out_pConversionStatus=nullptr) const</td></tr>
<tr class="memdesc:a4c268849ce0029fde4962331c726e904"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to convert the stored value to the given type. The optional status parameter can be used to check whether the conversion succeeded.  <br /></td></tr>
<tr class="separator:a4c268849ce0029fde4962331c726e904"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:add215a7584148d2e4ee39bf517976803" id="r_add215a7584148d2e4ee39bf517976803"><td class="memItemLeft" align="right" valign="top"><a id="add215a7584148d2e4ee39bf517976803" name="add215a7584148d2e4ee39bf517976803"></a>
<a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a>&#160;</td><td class="memItemRight" valign="bottom"><b>ConvertTo</b> (<a class="el" href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6b">Type::Enum</a> type, <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> *out_pConversionStatus=nullptr) const</td></tr>
<tr class="memdesc:add215a7584148d2e4ee39bf517976803"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as the templated function. <br /></td></tr>
<tr class="separator:add215a7584148d2e4ee39bf517976803"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd95e80142c28959a854b7d5d9ff7101" id="r_afd95e80142c28959a854b7d5d9ff7101"><td class="memItemLeft" align="right" valign="top"><a id="afd95e80142c28959a854b7d5d9ff7101" name="afd95e80142c28959a854b7d5d9ff7101"></a>
xiiUInt64&#160;</td><td class="memItemRight" valign="bottom"><b>ComputeHash</b> (xiiUInt64 uiSeed=0) const</td></tr>
<tr class="memdesc:afd95e80142c28959a854b7d5d9ff7101"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the hash value of the stored data. Returns uiSeed (unchanged) for an invalid Variant. <br /></td></tr>
<tr class="separator:afd95e80142c28959a854b7d5d9ff7101"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb3e5732013f928501fb0d76b33904f1" id="r_acb3e5732013f928501fb0d76b33904f1"><td class="memTemplParams" colspan="2"><a id="acb3e5732013f928501fb0d76b33904f1" name="acb3e5732013f928501fb0d76b33904f1"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:acb3e5732013f928501fb0d76b33904f1"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>InitShared</b> (const T &amp;value)</td></tr>
<tr class="separator:acb3e5732013f928501fb0d76b33904f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4ce59579de176acbb973a5f62f6a7be7" id="r_a4ce59579de176acbb973a5f62f6a7be7"><td class="memTemplParams" colspan="2"><a id="a4ce59579de176acbb973a5f62f6a7be7" name="a4ce59579de176acbb973a5f62f6a7be7"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7afcb404874d1f6fd9cbc6adf6e0211101">xiiVariantClass::CustomTypeCast</a>, xiiInt32 &gt; &gt; </td></tr>
<tr class="memitem:a4ce59579de176acbb973a5f62f6a7be7"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiVariant</b> (const T &amp;value)</td></tr>
<tr class="separator:a4ce59579de176acbb973a5f62f6a7be7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a388b41b1534709743a9a32f5aaca1126" id="r_a388b41b1534709743a9a32f5aaca1126"><td class="memTemplParams" colspan="2"><a id="a388b41b1534709743a9a32f5aaca1126" name="a388b41b1534709743a9a32f5aaca1126"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a388b41b1534709743a9a32f5aaca1126"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiVariant</b> (const T *value)</td></tr>
<tr class="separator:a388b41b1534709743a9a32f5aaca1126"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a093b637ffc74fd224d2e386d58ec27da" id="r_a093b637ffc74fd224d2e386d58ec27da"><td class="memTemplParams" colspan="2"><a id="a093b637ffc74fd224d2e386d58ec27da" name="a093b637ffc74fd224d2e386d58ec27da"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a093b637ffc74fd224d2e386d58ec27da"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const T &amp;value)</td></tr>
<tr class="separator:a093b637ffc74fd224d2e386d58ec27da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac853f5c5892d15873583b7fb198b796" id="r_aac853f5c5892d15873583b7fb198b796"><td class="memTemplParams" colspan="2"><a id="aac853f5c5892d15873583b7fb198b796" name="aac853f5c5892d15873583b7fb198b796"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aac853f5c5892d15873583b7fb198b796"><td class="memTemplItemLeft" align="right" valign="top">XII_FORCE_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator==</b> (const T &amp;other) const</td></tr>
<tr class="separator:aac853f5c5892d15873583b7fb198b796"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae448d7a728f7eddb83728841b7e2efea" id="r_ae448d7a728f7eddb83728841b7e2efea"><td class="memTemplParams" colspan="2"><a id="ae448d7a728f7eddb83728841b7e2efea" name="ae448d7a728f7eddb83728841b7e2efea"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7a607e6f0fa5be9ed7cc1ab13413121abf">xiiVariantClass::DirectCast</a>, xiiInt32 &gt; &gt; </td></tr>
<tr class="memitem:ae448d7a728f7eddb83728841b7e2efea"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsA</b> () const</td></tr>
<tr class="separator:ae448d7a728f7eddb83728841b7e2efea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a609774710deb60dbadadda25df6dbefe" id="r_a609774710deb60dbadadda25df6dbefe"><td class="memTemplParams" colspan="2"><a id="a609774710deb60dbadadda25df6dbefe" name="a609774710deb60dbadadda25df6dbefe"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7a607e6f0fa5be9ed7cc1ab13413121abf">xiiVariantClass::DirectCast</a>, xiiInt32 &gt; &gt; </td></tr>
<tr class="memitem:a609774710deb60dbadadda25df6dbefe"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE const T &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Get</b> () const</td></tr>
<tr class="separator:a609774710deb60dbadadda25df6dbefe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdb66eb954bd240ddb29d1172f7f9b42" id="r_abdb66eb954bd240ddb29d1172f7f9b42"><td class="memTemplParams" colspan="2"><a id="abdb66eb954bd240ddb29d1172f7f9b42" name="abdb66eb954bd240ddb29d1172f7f9b42"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7abdc2c373fefafc9c3faaf4316c573982">xiiVariantClass::PointerCast</a>, xiiInt32 &gt; &gt; </td></tr>
<tr class="memitem:abdb66eb954bd240ddb29d1172f7f9b42"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Get</b> () const</td></tr>
<tr class="separator:abdb66eb954bd240ddb29d1172f7f9b42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a283850175482ae17dee1a38dae6cebeb" id="r_a283850175482ae17dee1a38dae6cebeb"><td class="memTemplParams" colspan="2"><a id="a283850175482ae17dee1a38dae6cebeb" name="a283850175482ae17dee1a38dae6cebeb"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7aa73b4949946a8ab33d6e2591547730cf">xiiVariantClass::TypedObject</a>, xiiInt32 &gt; &gt; </td></tr>
<tr class="memitem:a283850175482ae17dee1a38dae6cebeb"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE const T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Get</b> () const</td></tr>
<tr class="separator:a283850175482ae17dee1a38dae6cebeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a409cae1b34e59074b372c58022f0fa41" id="r_a409cae1b34e59074b372c58022f0fa41"><td class="memTemplParams" colspan="2"><a id="a409cae1b34e59074b372c58022f0fa41" name="a409cae1b34e59074b372c58022f0fa41"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7a607e6f0fa5be9ed7cc1ab13413121abf">xiiVariantClass::DirectCast</a>, xiiInt32 &gt; &gt; </td></tr>
<tr class="memitem:a409cae1b34e59074b372c58022f0fa41"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE T &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetWritable</b> ()</td></tr>
<tr class="separator:a409cae1b34e59074b372c58022f0fa41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b8de49f178344ee8d508282c1e48768" id="r_a9b8de49f178344ee8d508282c1e48768"><td class="memTemplParams" colspan="2"><a id="a9b8de49f178344ee8d508282c1e48768" name="a9b8de49f178344ee8d508282c1e48768"></a>
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7abdc2c373fefafc9c3faaf4316c573982">xiiVariantClass::PointerCast</a>, xiiInt32 &gt; &gt; </td></tr>
<tr class="memitem:a9b8de49f178344ee8d508282c1e48768"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetWritable</b> ()</td></tr>
<tr class="separator:a9b8de49f178344ee8d508282c1e48768"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adcb116ce05c59bf0ce18707a042ef947" id="r_adcb116ce05c59bf0ce18707a042ef947"><td class="memTemplParams" colspan="2"><a id="adcb116ce05c59bf0ce18707a042ef947" name="adcb116ce05c59bf0ce18707a042ef947"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:adcb116ce05c59bf0ce18707a042ef947"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CanConvertTo</b> () const</td></tr>
<tr class="separator:adcb116ce05c59bf0ce18707a042ef947"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ac2805430139a292d543e8b82f8fe5b" id="r_a1ac2805430139a292d543e8b82f8fe5b"><td class="memTemplParams" colspan="2"><a id="a1ac2805430139a292d543e8b82f8fe5b" name="a1ac2805430139a292d543e8b82f8fe5b"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1ac2805430139a292d543e8b82f8fe5b"><td class="memTemplItemLeft" align="right" valign="top">XII_FORCE_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>InitInplace</b> (const T &amp;value)</td></tr>
<tr class="memdesc:a1ac2805430139a292d543e8b82f8fe5b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Private Methods. <br /></td></tr>
<tr class="separator:a1ac2805430139a292d543e8b82f8fe5b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a488d26c4edca274728a4554d7c7107" id="r_a7a488d26c4edca274728a4554d7c7107"><td class="memTemplParams" colspan="2"><a id="a7a488d26c4edca274728a4554d7c7107" name="a7a488d26c4edca274728a4554d7c7107"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7a488d26c4edca274728a4554d7c7107"><td class="memTemplItemLeft" align="right" valign="top">XII_FORCE_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>InitTypedObject</b> (const T &amp;value, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTraitInt</a>&lt; 0 &gt;)</td></tr>
<tr class="separator:a7a488d26c4edca274728a4554d7c7107"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b3cccbeeac222e088ec9a8dedd3fdc5" id="r_a7b3cccbeeac222e088ec9a8dedd3fdc5"><td class="memTemplParams" colspan="2"><a id="a7b3cccbeeac222e088ec9a8dedd3fdc5" name="a7b3cccbeeac222e088ec9a8dedd3fdc5"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7b3cccbeeac222e088ec9a8dedd3fdc5"><td class="memTemplItemLeft" align="right" valign="top">XII_FORCE_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>InitTypedObject</b> (const T &amp;value, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTraitInt</a>&lt; 1 &gt;)</td></tr>
<tr class="separator:a7b3cccbeeac222e088ec9a8dedd3fdc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a2a0ec6bf278a9412ec6fb8103d71f93a" id="r_a2a0ec6bf278a9412ec6fb8103d71f93a"><td class="memTemplParams" colspan="2">template&lt;typename Functor , class... Args&gt; </td></tr>
<tr class="memitem:a2a0ec6bf278a9412ec6fb8103d71f93a"><td class="memTemplItemLeft" align="right" valign="top">static auto&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="#a2a0ec6bf278a9412ec6fb8103d71f93a">DispatchTo</a> (Functor &amp;ref_functor, <a class="el" href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6b">Type::Enum</a> type, Args &amp;&amp;... args)</td></tr>
<tr class="memdesc:a2a0ec6bf278a9412ec6fb8103d71f93a"><td class="mdescLeft">&#160;</td><td class="mdescRight">This will call the overloaded operator() (function call operator) of the provided functor.  <br /></td></tr>
<tr class="separator:a2a0ec6bf278a9412ec6fb8103d71f93a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="friends" name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a73806b77d965d5cf65ef886ccd6273b1" id="r_a73806b77d965d5cf65ef886ccd6273b1"><td class="memItemLeft" align="right" valign="top"><a id="a73806b77d965d5cf65ef886ccd6273b1" name="a73806b77d965d5cf65ef886ccd6273b1"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVariantHelper</b></td></tr>
<tr class="separator:a73806b77d965d5cf65ef886ccd6273b1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c30e09ce4827ae59948f694bbc95495" id="r_a4c30e09ce4827ae59948f694bbc95495"><td class="memItemLeft" align="right" valign="top"><a id="a4c30e09ce4827ae59948f694bbc95495" name="a4c30e09ce4827ae59948f694bbc95495"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>CompareFunc</b></td></tr>
<tr class="separator:a4c30e09ce4827ae59948f694bbc95495"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa3fb9dde7601af1db3639dc733818fff" id="r_aa3fb9dde7601af1db3639dc733818fff"><td class="memItemLeft" align="right" valign="top"><a id="aa3fb9dde7601af1db3639dc733818fff" name="aa3fb9dde7601af1db3639dc733818fff"></a>
struct&#160;</td><td class="memItemRight" valign="bottom"><b>GetTypeFromVariantFunc</b></td></tr>
<tr class="separator:aa3fb9dde7601af1db3639dc733818fff"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p><a class="el" href="../../db/d1a/classxii_variant.htm" title="xiiVariant is a class that can store different types of variables, which is useful in situations wher...">xiiVariant</a> is a class that can store different types of variables, which is useful in situations where it is not clear up front, which type of data will be passed around. </p>
<p>The variant supports a fixed list of types that it can store (</p><dl class="section see"><dt>See also</dt><dd>xiiVariant::Type). All types of 16 bytes or less in size can be stored without requiring a heap allocation. For larger types memory is allocated on the heap. In general variants should be used for code that needs to be flexible. Although <a class="el" href="../../db/d1a/classxii_variant.htm" title="xiiVariant is a class that can store different types of variables, which is useful in situations wher...">xiiVariant</a> is implemented very efficiently, it should be avoided to use <a class="el" href="../../db/d1a/classxii_variant.htm" title="xiiVariant is a class that can store different types of variables, which is useful in situations wher...">xiiVariant</a> in code that needs to be fast. </dd></dl>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="af7473223d5d9f836e58b1c7b8d12a89b" name="af7473223d5d9f836e58b1c7b8d12a89b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af7473223d5d9f836e58b1c7b8d12a89b">&#9670;&#160;</a></span>xiiVariant()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XII_ALWAYS_INLINE xiiVariant::xiiVariant </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Copies the data from the other variant. </p>
<dl class="section note"><dt>Note</dt><dd>If the data of the variant needed to be allocated on the heap, it will be shared among variants. Thus, once you have stored such a type inside a variant, you can copy it to other variants, without introducing additional memory allocations. </dd></dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a3695a75397ceb74e613bb00ba2e89a52" name="a3695a75397ceb74e613bb00ba2e89a52"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3695a75397ceb74e613bb00ba2e89a52">&#9670;&#160;</a></span>CanConvertTo()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool xiiVariant::CanConvertTo </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns whether the stored type can generally be converted to the desired type. </p>
<p>This function will return true for all number conversions, as float / double / int / etc. can generally be converted into each other. It will also return true for all conversion from string to number types, and from all 'simple' types (not array or dictionary) to string.</p>
<dl class="section note"><dt>Note</dt><dd>This function only returns whether a conversion between the stored TYPE and the desired TYPE is generally possible. It does NOT return whether the stored VALUE is indeed convertible to the desired type. For example, a string is generally convertible to float, if it stores a string representation of a float value. If, however, it stores anything else, the conversion can still fail.</dd></dl>
<p>The only way to figure out whether the stored data can be converted to some type, is to actually convert it, using <a class="el" href="#a4c268849ce0029fde4962331c726e904" title="Tries to convert the stored value to the given type. The optional status parameter can be used to che...">ConvertTo()</a>, and then to check the conversion status. </p>

</div>
</div>
<a id="a4c268849ce0029fde4962331c726e904" name="a4c268849ce0029fde4962331c726e904"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c268849ce0029fde4962331c726e904">&#9670;&#160;</a></span>ConvertTo()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">T xiiVariant::ConvertTo </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> *</td>          <td class="paramname"><span class="paramname"><em>out_pConversionStatus</em></span><span class="paramdefsep"> = </span><span class="paramdefval">nullptr</span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tries to convert the stored value to the given type. The optional status parameter can be used to check whether the conversion succeeded. </p>
<p>When <a class="el" href="#a3695a75397ceb74e613bb00ba2e89a52" title="Returns whether the stored type can generally be converted to the desired type.">CanConvertTo()</a> returns false, <a class="el" href="#a4c268849ce0029fde4962331c726e904" title="Tries to convert the stored value to the given type. The optional status parameter can be used to che...">ConvertTo()</a> will also always fail. However, when <a class="el" href="#a3695a75397ceb74e613bb00ba2e89a52" title="Returns whether the stored type can generally be converted to the desired type.">CanConvertTo()</a> returns true, this is no guarantee that <a class="el" href="#a4c268849ce0029fde4962331c726e904" title="Tries to convert the stored value to the given type. The optional status parameter can be used to che...">ConvertTo()</a> will succeed. Conversion between numbers and to strings will generally succeed. However, converting from a string to another type can fail or succeed, depending on the exact string value. </p>

</div>
</div>
<a id="a2a0ec6bf278a9412ec6fb8103d71f93a" name="a2a0ec6bf278a9412ec6fb8103d71f93a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2a0ec6bf278a9412ec6fb8103d71f93a">&#9670;&#160;</a></span>DispatchTo()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Functor , class... Args&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">auto xiiVariant::DispatchTo </td>
          <td>(</td>
          <td class="paramtype">Functor &amp;</td>          <td class="paramname"><span class="paramname"><em>ref_functor</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6b">Type::Enum</a></td>          <td class="paramname"><span class="paramname"><em>type</em></span>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Args &amp;&amp;...</td>          <td class="paramname"><span class="paramname"><em>args</em></span>&#160;)</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This will call the overloaded operator() (function call operator) of the provided functor. </p>
<p>This allows to implement a functor that overloads operator() for different types and then call the proper version of that operator, depending on the provided runtime type. Note that the proper overload of operator() is selected by providing a dummy type, but it will contain no useful value. Instead, store the other necessary data inside the functor object, before calling this function. For example, store a pointer to a variant inside the functor object and then call DispatchTo to execute the function that will handle the given type of the variant. </p>

</div>
</div>
<a id="a55cfe16069b70f06d8cc724833984d02" name="a55cfe16069b70f06d8cc724833984d02"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a55cfe16069b70f06d8cc724833984d02">&#9670;&#160;</a></span>Get()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7a607e6f0fa5be9ed7cc1ab13413121abf">xiiVariantClass::DirectCast</a>, xiiInt32 &gt;  = 0&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">const T &amp; xiiVariant::Get </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the variants value as the provided type. </p>
<dl class="section note"><dt>Note</dt><dd>This function does not do ANY type of conversion from the stored type to the given type. Not even integer conversions! If the types don't match, this function will assert! So be careful to use this function only when you know exactly that the stored type matches the expected type.</dd></dl>
<p>Prefer to use <a class="el" href="#a4c268849ce0029fde4962331c726e904" title="Tries to convert the stored value to the given type. The optional status parameter can be used to che...">ConvertTo()</a> when you can instead. </p>

</div>
</div>
<a id="aa28a169f3d484e9d656060b372ce2563" name="aa28a169f3d484e9d656060b372ce2563"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa28a169f3d484e9d656060b372ce2563">&#9670;&#160;</a></span>IsA()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename std::enable_if_t&lt; <a class="el" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a>&lt; T &gt;::classification==<a class="el" href="../../d9/d79/structxii_variant_class.htm#a101c41349e711a95dbe46025c86f3ae7a607e6f0fa5be9ed7cc1ab13413121abf">xiiVariantClass::DirectCast</a>, xiiInt32 &gt;  = 0&gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool xiiVariant::IsA </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns whether the stored type is exactly the given type. </p>
<dl class="section note"><dt>Note</dt><dd>This explicitly also differentiates between the different integer types. So when the variant stores an Int32, <a class="el" href="#aa28a169f3d484e9d656060b372ce2563" title="Returns whether the stored type is exactly the given type.">IsA&lt;Int64&gt;()</a> will return false, even though the types could be converted. </dd></dl>

</div>
</div>
<a id="afc832e428934becc9f8fe659e434dac4" name="afc832e428934becc9f8fe659e434dac4"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afc832e428934becc9f8fe659e434dac4">&#9670;&#160;</a></span>IsNumber()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">XII_ALWAYS_INLINE bool xiiVariant::IsNumber </td>
          <td>(</td>
          <td class="paramname"><span class="paramname"><em></em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns whether the stored type is numerical type either integer or floating point. </p>
<p>Bool counts as number. </p>

</div>
</div>
<a id="a1258e31f93fd0797b4e0d01ac1a9300e" name="a1258e31f93fd0797b4e0d01ac1a9300e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1258e31f93fd0797b4e0d01ac1a9300e">&#9670;&#160;</a></span>operator=()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void xiiVariant::operator= </td>
          <td>(</td>
          <td class="paramtype">const T &amp;</td>          <td class="paramname"><span class="paramname"><em>value</em></span></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deduces the type of <em>T</em> and stores <em>value</em>. </p>
<p>If the type to be stored in the variant is not supported, a compile time error will occur. </p>

</div>
</div>
<a id="a617d04558bc8eeda5d153a303441e951" name="a617d04558bc8eeda5d153a303441e951"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a617d04558bc8eeda5d153a303441e951">&#9670;&#160;</a></span>operator==()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiVariant::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> &amp;</td>          <td class="paramname"><span class="paramname"><em>other</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Will compare the value of this variant to that of <em>other</em>. </p>
<p>public methods</p>
<p>If both variants store 'numbers' (float, double, xiiInt32 types) the comparison will work, even if the types are not identical.</p>
<dl class="section note"><dt>Note</dt><dd>If the two types are not numbers and not equal, an assert will occur. So be careful to only compare variants that can either both be converted to double (</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="#a3695a75397ceb74e613bb00ba2e89a52" title="Returns whether the stored type can generally be converted to the desired type.">CanConvertTo()</a>) or whose types are equal. </dd></dl>

</div>
</div>
<a id="aa06681dbe2f7d2c77e9950fe751db1c8" name="aa06681dbe2f7d2c77e9950fe751db1c8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa06681dbe2f7d2c77e9950fe751db1c8">&#9670;&#160;</a></span>operator[]() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> xiiVariant::operator[] </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../de/da5/structxii_variant_1_1_string_wrapper.htm">StringWrapper</a></td>          <td class="paramname"><span class="paramname"><em>key</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the sub value with szKey. This could be a value in a dictionary or a member property inside a reflected type. </p>
<p>This function will return an invalid variant if no corresponding sub value is found. </p>

</div>
</div>
<a id="a76510f1eabf746f6aa92fc0ea42a733d" name="a76510f1eabf746f6aa92fc0ea42a733d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a76510f1eabf746f6aa92fc0ea42a733d">&#9670;&#160;</a></span>operator[]() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a> xiiVariant::operator[] </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32</td>          <td class="paramname"><span class="paramname"><em>uiIndex</em></span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the sub value at iIndex. This could be an element in an array or a member property inside a reflected type. </p>
<p>Out of bounds access is handled gracefully and will return an invalid variant. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Types/<a class="el" href="../../d2/d19/_variant_8h_source.htm">Variant.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Types/Implementation/<b>Variant.cpp</b></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Types/Implementation/<a class="el" href="../../d5/d0a/_variant__inl_8h_source.htm">Variant_inl.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Types/Implementation/<a class="el" href="../../d0/dc7/_variant_helper__inl_8h_source.htm">VariantHelper_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../db/d1a/classxii_variant.htm">xiiVariant</a></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:47:37 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>

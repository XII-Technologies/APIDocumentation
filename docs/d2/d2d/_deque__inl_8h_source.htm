<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Containers/Implementation/Deque_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d2/d2d/_deque__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Deque_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Math.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#define REDUCE_SIZE(iReduction)     \</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">  m_iReduceSizeTimer -= iReduction; \</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">  if (m_iReduceSizeTimer &lt;= 0)      \</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">    ReduceSize(0);</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#define RESERVE(uiCount)                                         \</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">  if (uiCount &gt; m_uiCount)                                       \</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">  {                                                              \</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">    m_uiMaxCount = xiiMath::Max(m_uiMaxCount, uiCount);          \</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">    if ((m_uiFirstElement &lt;= 0) || (GetCurMaxCount() &lt; uiCount)) \</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">      Reserve(uiCount);                                          \</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">  }</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#define CHUNK_SIZE(Type) (4096 / sizeof(Type) &lt; 32 ? 32 : 4096 / sizeof(Type))</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">// (sizeof(Type) &lt;= 8 ? 256 : (sizeof(Type) &lt;= 16 ? 128 : (sizeof(Type) &lt;= 32 ? 64 : 32))) // Although this is Pow(2), this is slower than just having larger chunks</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::Constructor</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  m_pAllocator        = pAllocator;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  m_pChunks           = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  m_uiChunks          = 0;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  m_uiFirstElement    = 0;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  m_uiCount           = 0;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  m_uiAllocatedChunks = 0;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  m_uiMaxCount        = 0;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  ResetReduceSizeCounter();</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_COMPILE_FOR_DEBUG)</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  m_uiChunkSize = CHUNK_SIZE(T);</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;}</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00040"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">   40</a></span>&#160;<a class="code" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">xiiDequeBase&lt;T, Construct&gt;::xiiDequeBase</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;{</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  Constructor(pAllocator);</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;}</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a82ccbdcc0b50f54ce8c7796b55b4e6cc">   46</a></span>&#160;<a class="code" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">xiiDequeBase&lt;T, Construct&gt;::xiiDequeBase</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; rhs, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  Constructor(pAllocator);</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a63704f928f938b75474bd7ebd3cfa90a">   56</a></span>&#160;<a class="code" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">xiiDequeBase&lt;T, Construct&gt;::xiiDequeBase</a>(<a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;&amp; rhs, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  Constructor(pAllocator);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  *<span class="keyword">this</span> = std::move(rhs);</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00066"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a1d937b7518a530c97fcad95921939872">   66</a></span>&#160;<a class="code" href="../../d1/d7d/classxii_deque_base.htm#a1d937b7518a530c97fcad95921939872">xiiDequeBase&lt;T, Construct&gt;::~xiiDequeBase</a>()</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;{</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  DeallocateAll();</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;}</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00072"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">   72</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;{</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  Clear();                <span class="comment">// does not deallocate anything</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  RESERVE(rhs.m_uiCount); <span class="comment">// allocates data, if required</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  m_uiCount = rhs.m_uiCount;</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="comment">// copy construct all the elements</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; rhs.m_uiCount; ++i)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a>(&amp;ElementAt(i), rhs[i], 1);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae8a3dcbb3ed255bcc3283d8a1d5e3e34">   86</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(<a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordflow">if</span> (m_pAllocator != rhs.m_pAllocator)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    operator=(<span class="keyword">static_cast&lt;</span><a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;<span class="keyword">&gt;</span>(rhs));</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    DeallocateAll();</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    m_uiCount           = rhs.m_uiCount;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    m_iReduceSizeTimer  = rhs.m_iReduceSizeTimer;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    m_pChunks           = rhs.m_pChunks;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    m_uiAllocatedChunks = rhs.m_uiAllocatedChunks;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    m_uiChunks          = rhs.m_uiChunks;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    m_uiFirstElement    = rhs.m_uiFirstElement;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    m_uiMaxCount        = rhs.m_uiMaxCount;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    rhs.m_uiCount           = 0;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    rhs.m_pChunks           = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    rhs.m_uiAllocatedChunks = 0;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    rhs.m_uiChunks          = 0;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    rhs.m_uiFirstElement    = 0;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    rhs.m_uiMaxCount        = 0;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  }</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;}</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00114"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a293a0a14e5b3eca228d71c75562d40bb">  114</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a293a0a14e5b3eca228d71c75562d40bb">xiiDequeBase&lt;T, Construct&gt;::operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordflow">if</span> (GetCount() != rhs.<a class="code" href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">GetCount</a>())</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; GetCount(); ++i)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordflow">if</span> ((*<span class="keyword">this</span>)[i] != rhs[i])</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#afa53969988821e65d753787b0c0fc89e">  129</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#afa53969988821e65d753787b0c0fc89e">xiiDequeBase&lt;T, Construct&gt;::Clear</a>()</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;{</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_uiCount; ++i)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;      xiiMemoryUtils::Destruct&lt;T&gt;(&amp;<span class="keyword">operator</span>[](i), 1);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  m_uiCount = 0;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="comment">// since it is much more likely that data is appended at the back of the deque,</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="comment">// we do not use the center of the chunk index array, but instead set the first element</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="comment">// somewhere more at the front</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  <span class="comment">// set the first element to a position that allows to add elements at the front</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keywordflow">if</span> (m_uiChunks &gt; 30)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    m_uiFirstElement = CHUNK_SIZE(T) * 16;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_uiChunks &gt; 8)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    m_uiFirstElement = CHUNK_SIZE(T) * 4;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_uiChunks &gt; 1)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    m_uiFirstElement = CHUNK_SIZE(T) * 1;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_uiChunks &gt; 0)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    m_uiFirstElement = 1; <span class="comment">// with the current implementation this case should not be possible.</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    m_uiFirstElement = 0; <span class="comment">// must also work, if Clear is called on a deallocated (not yet allocated) deque</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;}</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a9b664f33559cfbae688e74640228e3a3">  157</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a9b664f33559cfbae688e74640228e3a3">xiiDequeBase&lt;T, Construct&gt;::Reserve</a>(xiiUInt32 uiCount)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;{</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="comment">// This is the function where all the complicated stuff happens.</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="comment">// The basic idea is as follows:</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="comment">// * Do not do anything unless necessary</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="comment">// * If the index array (for the redirection) is already large enough to handle the &#39;address space&#39;, try to reuse it</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <span class="comment">//   by moving data around (shift it left or right), if necessary</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <span class="comment">// * If the chunk index array is not large enough to handle the required amount of redirections, allocate a new</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="comment">//   index array and move the old data over</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="comment">// This function does not allocate any of the chunks itself (that&#39;s what &#39;ElementAt&#39; does), it only takes care</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="comment">// that the amount of reserved elements can be redirected once the deque is enlarged accordingly.</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="comment">// There is no need to change anything in this case.</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordflow">if</span> (uiCount &lt;= m_uiCount)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160; </div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <span class="comment">// keeps track of the largest amount of used elements since the last memory reduction</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  m_uiMaxCount = <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(m_uiMaxCount, uiCount);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="comment">// if there is enough room to hold all requested elements AND one can prepend at least one element (PushFront)</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="comment">// do not reallocate</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keywordflow">if</span> ((m_uiFirstElement &gt; 0) &amp;&amp; (GetCurMaxCount() &gt;= uiCount))</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiCurFirstChunk  = GetFirstUsedChunk();</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiRequiredChunks = GetRequiredChunks(uiCount);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="comment">// if we already have enough chunks, just rearrange them</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="keywordflow">if</span> (m_uiChunks &gt; uiRequiredChunks + 1) <span class="comment">// have at least one spare chunk for the front, and one for the back</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiSpareChunks      = m_uiChunks - uiRequiredChunks;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiSpareChunksStart = uiSpareChunks / 2;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    XII_ASSERT_DEBUG(uiSpareChunksStart &gt; 0, <span class="stringliteral">&quot;Implementation error.&quot;</span>);</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="comment">// always leave one spare chunk at the front, to ensure that one can prepend elements</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    XII_ASSERT_DEBUG(uiSpareChunksStart != uiCurFirstChunk, <span class="stringliteral">&quot;No rearrangement possible.&quot;</span>);</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">// if the new first active chunk is to the left</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span> (uiSpareChunksStart &lt; uiCurFirstChunk)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      MoveIndexChunksLeft(uiCurFirstChunk - uiSpareChunksStart);</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      MoveIndexChunksRight(uiSpareChunksStart - uiCurFirstChunk);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    XII_ASSERT_DEBUG(m_uiFirstElement &gt; 0, <span class="stringliteral">&quot;Did not achieve the desired effect.&quot;</span>);</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    XII_ASSERT_DEBUG(GetCurMaxCount() &gt;= uiCount, <span class="stringliteral">&quot;Did not achieve the desired effect ({0} &gt;= {1}).&quot;</span>, GetCurMaxCount(), uiCount);</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiReallocSize = 16 + uiRequiredChunks + 16;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    T** pNewChunksArray = XII_NEW_RAW_BUFFER(m_pAllocator, T*, uiReallocSize);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">xiiMemoryUtils::ZeroFill</a>(pNewChunksArray, uiReallocSize);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiFirstUsedChunk = m_uiFirstElement / CHUNK_SIZE(T);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="comment">// move all old chunks over</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    xiiUInt32 pos = 16;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="comment">// first the used chunks at the start of the new array</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_uiChunks - uiFirstUsedChunk; ++i)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      pNewChunksArray[pos] = m_pChunks[uiFirstUsedChunk + i];</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      ++pos;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    m_uiFirstElement -= uiFirstUsedChunk * CHUNK_SIZE(T);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// then the unused chunks at the end of the new array</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiFirstUsedChunk; ++i)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      pNewChunksArray[pos] = m_pChunks[i];</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;      ++pos;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    m_uiFirstElement += 16 * CHUNK_SIZE(T);</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    XII_ASSERT_DEBUG(m_uiFirstElement == (16 * CHUNK_SIZE(T)) + (m_uiFirstElement % CHUNK_SIZE(T)), <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks);</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    m_pChunks  = pNewChunksArray;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    m_uiChunks = uiReallocSize;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  }</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;}</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abb9f50af5a92121b3c02c831e965f1f1">  245</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#abb9f50af5a92121b3c02c831e965f1f1">xiiDequeBase&lt;T, Construct&gt;::Compact</a>()</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;{</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  ResetReduceSizeCounter();</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  <span class="keywordflow">if</span> (IsEmpty())</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  {</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    DeallocateAll();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="comment">// this will deallocate ALL unused chunks</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  DeallocateUnusedChunks(GetRequiredChunks(m_uiCount));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="comment">// reduces the size of the index array, but keeps some spare pointers, so that scaling up is still possible without reallocation</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  CompactIndexArray(0);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;}</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160; </div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0e649eac7f0c7a6eea9ff976fbd33122">  263</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a0e649eac7f0c7a6eea9ff976fbd33122">xiiDequeBase&lt;T, Construct&gt;::Swap</a>(<a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; other)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_pAllocator, other.m_pAllocator);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_pChunks, other.m_pChunks);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiChunks, other.m_uiChunks);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiFirstElement, other.m_uiFirstElement);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiCount, other.m_uiCount);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiAllocatedChunks, other.m_uiAllocatedChunks);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_iReduceSizeTimer, other.m_iReduceSizeTimer);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiMaxCount, other.m_uiMaxCount);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;}</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::CompactIndexArray</a>(xiiUInt32 uiMinChunksToKeep)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;{</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiRequiredChunks = xiiMath::Max&lt;xiiUInt32&gt;(1, GetRequiredChunks(m_uiCount));</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  uiMinChunksToKeep                = <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(uiRequiredChunks, uiMinChunksToKeep);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  <span class="comment">// keep some spare pointers for scaling the deque up again</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunksToKeep = 16 + uiMinChunksToKeep + 16;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="comment">// only reduce the index array, if we can reduce its size at least to half (the +4 is for the very small cases)</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="keywordflow">if</span> (uiChunksToKeep + 4 &gt;= m_uiChunks / 2)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  T** pNewChunkArray = XII_NEW_RAW_BUFFER(m_pAllocator, T*, uiChunksToKeep);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  xiiMemoryUtils::ZeroFill&lt;T*&gt;(pNewChunkArray, uiChunksToKeep);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiFirstChunk = GetFirstUsedChunk();</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="comment">// makes sure that no more than this amount of chunks is still allocated -&gt; those can be copied over</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  DeallocateUnusedChunks(uiChunksToKeep);</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="comment">// moves the used chunks into the new array</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiRequiredChunks; ++i)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    pNewChunkArray[16 + i]      = m_pChunks[uiFirstChunk + i];</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    m_pChunks[uiFirstChunk + i] = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="comment">// copy all still allocated chunks over to the new index array</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  <span class="comment">// since we just deallocated enough chunks, all that are found can be copied over as spare chunks</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    xiiUInt32 iPos = 0;</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiFirstChunk; ++i)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;      <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;      {</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        XII_ASSERT_DEBUG(iPos &lt; 16 || ((iPos &gt;= 16 + uiRequiredChunks) &amp;&amp; (iPos &lt; uiChunksToKeep)), <span class="stringliteral">&quot;Implementation error.&quot;</span>);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        pNewChunkArray[iPos] = m_pChunks[i];</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        m_pChunks[i]         = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        ++iPos;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordflow">if</span> (iPos == 16)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;          iPos += uiRequiredChunks;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;      }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = GetLastUsedChunk() + 1; i &lt; m_uiChunks; ++i)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      {</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        XII_ASSERT_DEBUG(iPos &lt; 16 || ((iPos &gt;= 16 + uiRequiredChunks) &amp;&amp; (iPos &lt; uiChunksToKeep)), <span class="stringliteral">&quot;Implementation error.&quot;</span>);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        pNewChunkArray[iPos] = m_pChunks[i];</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        m_pChunks[i]         = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        ++iPos;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; </div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordflow">if</span> (iPos == 16)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;          iPos += uiRequiredChunks;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;    }</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  m_pChunks        = pNewChunkArray;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  m_uiChunks       = uiChunksToKeep;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  m_uiFirstElement = (16 * CHUNK_SIZE(T)) + (m_uiFirstElement % CHUNK_SIZE(T));</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00345"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#aab74c7d6cbaef3323571c97cbd08b625">  345</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#aab74c7d6cbaef3323571c97cbd08b625">xiiDequeBase&lt;T, Construct&gt;::SetCount</a>(xiiUInt32 uiCount)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;{</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiNewCount = uiCount;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  {</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="comment">// grow the deque</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    RESERVE(uiNewCount);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    m_uiCount = uiNewCount;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    {</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;      <span class="comment">// default construct the new elements</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;      <span class="keywordflow">for</span> (xiiUInt32 i = uiOldCount; i &lt; uiNewCount; ++i)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a245cf437a25b93067264757598b0365a">xiiMemoryUtils::DefaultConstruct</a>(&amp;ElementAt(i), 1);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    }</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      <span class="keywordflow">for</span> (xiiUInt32 i = uiOldCount; i &lt; uiNewCount; ++i)</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        ElementAt(i);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  {</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    {</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;      <span class="comment">// destruct elements at the end of the deque</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;      <span class="keywordflow">for</span> (xiiUInt32 i = uiNewCount; i &lt; uiOldCount; ++i)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;<span class="keyword">operator</span>[](i), 1);</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    }</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    m_uiCount = uiNewCount;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160; </div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="comment">// if enough elements have been destructed, trigger a size reduction (the first time will not deallocate anything though)</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    ReduceSize(uiOldCount - uiNewCount);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;}</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="comment">// Second template needed so that the compiler does only instantiate it when called. Otherwise the static_assert would trigger</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">// early.</span></div>
<div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a1c714b11aa25638bf88b3173e0063808">  388</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a1c714b11aa25638bf88b3173e0063808">xiiDequeBase&lt;T, Construct&gt;::SetCountUninitialized</a>(xiiUInt32 uiCount)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  static_assert(<a class="code" href="../../d2/dad/structxii_is_pod_type.htm">xiiIsPodType&lt;T&gt;::value</a> == xiiTypeIsPod::value, <span class="stringliteral">&quot;SetCountUninitialized is only supported for POD types.&quot;</span>);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiNewCount = uiCount;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="comment">// grow the deque</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    RESERVE(uiNewCount);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    m_uiCount = uiNewCount;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiOldCount; i &lt; uiNewCount; ++i)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;      ElementAt(i);</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;      <span class="comment">// destruct elements at the end of the deque</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;      <span class="keywordflow">for</span> (xiiUInt32 i = uiNewCount; i &lt; uiOldCount; ++i)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;<span class="keyword">operator</span>[](i), 1);</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    m_uiCount = uiNewCount;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="comment">// if enough elements have been destructed, trigger a size reduction (the first time will not deallocate anything though)</span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    ReduceSize(uiOldCount - uiNewCount);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  }</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;}</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae779cc2e29fe5522a439027774526114">  422</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ae779cc2e29fe5522a439027774526114">xiiDequeBase&lt;T, Construct&gt;::EnsureCount</a>(xiiUInt32 uiCount)</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;{</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  <span class="keywordflow">if</span> (uiCount &gt; m_uiCount)</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;  {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    SetCount(uiCount);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;}</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#aa9bf6081af25b7f13a911032c6ec0c96">  431</a></span>&#160;<span class="keyword">inline</span> xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm#aa9bf6081af25b7f13a911032c6ec0c96">xiiDequeBase&lt;T, Construct&gt;::GetContiguousRange</a>(xiiUInt32 uiIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  XII_ASSERT_DEV(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;The deque has {0} elements. Cannot access element {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160; </div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunkSize = CHUNK_SIZE(T);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiRealIndex   = m_uiFirstElement + uiIndex;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunkOffset = uiRealIndex % uiChunkSize;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiRange = uiChunkSize - uiChunkOffset;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160; </div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a>(uiRange, GetCount() - uiIndex);</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;}</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00446"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">  446</a></span>&#160;<span class="keyword">inline</span> T&amp; <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">xiiDequeBase&lt;T, Construct&gt;::operator[]</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;{</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  XII_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;The deque has {0} elements. Cannot access element {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160; </div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiRealIndex = m_uiFirstElement + uiIndex;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunkIndex  = uiRealIndex / CHUNK_SIZE(T);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunkOffset = uiRealIndex % CHUNK_SIZE(T);</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  <span class="keywordflow">return</span> m_pChunks[uiChunkIndex][uiChunkOffset];</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;}</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160; </div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00459"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ac97796a62aa99f3db56b9edf019b3ace">  459</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">xiiDequeBase&lt;T, Construct&gt;::operator[]</a>(xiiUInt32 uiIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  XII_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;The deque has {0} elements. Cannot access element {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiRealIndex = m_uiFirstElement + uiIndex;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160; </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunkIndex  = uiRealIndex / CHUNK_SIZE(T);</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunkOffset = uiRealIndex % CHUNK_SIZE(T);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <span class="keywordflow">return</span> m_pChunks[uiChunkIndex][uiChunkOffset];</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160; </div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6c4f6451cce0d87574a5275236508e16">  472</a></span>&#160;<span class="keyword">inline</span> T&amp; <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a6c4f6451cce0d87574a5275236508e16">xiiDequeBase&lt;T, Construct&gt;::ExpandAndGetRef</a>()</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;{</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  RESERVE(m_uiCount + 1);</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  ++m_uiCount;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160; </div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  T* pElement = &amp;ElementAt(m_uiCount - 1);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160; </div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a245cf437a25b93067264757598b0365a">xiiMemoryUtils::DefaultConstruct</a>(pElement, 1);</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  <span class="keywordflow">return</span> *pElement;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;}</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160; </div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00486"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">  486</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">xiiDequeBase&lt;T, Construct&gt;::PushBack</a>()</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;{</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  RESERVE(m_uiCount + 1);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;  ++m_uiCount;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160; </div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;  T* pElement = &amp;ElementAt(m_uiCount - 1);</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160; </div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a245cf437a25b93067264757598b0365a">xiiMemoryUtils::DefaultConstruct</a>(pElement, 1);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;}</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160; </div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00498"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6d22f144049a0a51d1bcecd4c965456a">  498</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">xiiDequeBase&lt;T, Construct&gt;::PushBack</a>(<span class="keyword">const</span> T&amp; element)</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;{</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160; </div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;  RESERVE(m_uiCount + 1);</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  ++m_uiCount;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160; </div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a>(&amp;ElementAt(m_uiCount - 1), element, 1);</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;}</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160; </div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00509"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a8d5383192941dd3397760a64177f0452">  509</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">xiiDequeBase&lt;T, Construct&gt;::PushBack</a>(T&amp;&amp; element)</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;{</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;  RESERVE(m_uiCount + 1);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  ++m_uiCount;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  xiiMemoryUtils::MoveConstruct&lt;T&gt;(&amp;ElementAt(m_uiCount - 1), std::move(element));</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;}</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160; </div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00520"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae66a288b3a37f2a5e236499858d662ae">  520</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ae66a288b3a37f2a5e236499858d662ae">xiiDequeBase&lt;T, Construct&gt;::PopBack</a>(xiiUInt32 uiElements)</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;{</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;  XII_ASSERT_DEV(uiElements &lt;= GetCount(), <span class="stringliteral">&quot;Cannot remove {0} elements, the deque only contains {1} elements.&quot;</span>, uiElements, GetCount());</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160; </div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiElements; ++i)</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;  {</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;      <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;<span class="keyword">operator</span>[](m_uiCount - 1), 1);</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160; </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    --m_uiCount;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;  }</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160; </div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;  <span class="comment">// This may trigger a memory reduction.</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;  REDUCE_SIZE(uiElements);</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;}</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160; </div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00537"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#affcf16a7eb5ac1bb1a1ffdd8b8835da1">  537</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">xiiDequeBase&lt;T, Construct&gt;::PushFront</a>(<span class="keyword">const</span> T&amp; element)</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;{</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160; </div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;  RESERVE(m_uiCount + 1);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  ++m_uiCount;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  --m_uiFirstElement;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a>(&amp;ElementAt(0), element, 1);</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;}</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160; </div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00549"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6432b00ce6fbe22cdf3c2007db6f6ace">  549</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">xiiDequeBase&lt;T, Construct&gt;::PushFront</a>(T&amp;&amp; element)</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;{</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;  RESERVE(m_uiCount + 1);</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;  ++m_uiCount;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;  --m_uiFirstElement;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160; </div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  xiiMemoryUtils::MoveConstruct&lt;T&gt;(&amp;ElementAt(0), std::move(element));</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;}</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160; </div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00561"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">  561</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">xiiDequeBase&lt;T, Construct&gt;::PushFront</a>()</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;{</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;  RESERVE(m_uiCount + 1);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  ++m_uiCount;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  --m_uiFirstElement;</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160; </div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  T* pElement = &amp;ElementAt(0);</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160; </div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#af3da14f91515aad7930bd6524a70f40b">xiiMemoryUtils::Construct</a>(pElement, 1);</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;}</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160; </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00574"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a892f55e291b53a4594c9b55f042a7488">  574</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a892f55e291b53a4594c9b55f042a7488">xiiDequeBase&lt;T, Construct&gt;::PopFront</a>(xiiUInt32 uiElements)</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;{</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;  XII_ASSERT_DEV(uiElements &lt;= GetCount(), <span class="stringliteral">&quot;Cannot remove {0} elements, the deque only contains {1} elements.&quot;</span>, uiElements, GetCount());</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160; </div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiElements; ++i)</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  {</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;      <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;<span class="keyword">operator</span>[](0), 1);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160; </div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    --m_uiCount;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    ++m_uiFirstElement;</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;  }</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160; </div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;  <span class="comment">// might trigger a memory reduction</span></div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;  REDUCE_SIZE(uiElements);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;}</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160; </div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00592"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abb1a0ff4777547ffb34b0752f32d416d">  592</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#abb1a0ff4777547ffb34b0752f32d416d">xiiDequeBase&lt;T, Construct&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;  <span class="keywordflow">return</span> m_uiCount == 0;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;}</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160; </div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00598"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">  598</a></span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">xiiDequeBase&lt;T, Construct&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;  <span class="keywordflow">return</span> m_uiCount;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;}</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160; </div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00604"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a9c5da4a4992bf2905c1e14312eebc1c1">  604</a></span>&#160;XII_ALWAYS_INLINE <span class="keyword">const</span> T&amp; <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a9c5da4a4992bf2905c1e14312eebc1c1">xiiDequeBase&lt;T, Construct&gt;::PeekFront</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;  <span class="keywordflow">return</span> operator[](0);</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;}</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160; </div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;XII_ALWAYS_INLINE T&amp; <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a9c5da4a4992bf2905c1e14312eebc1c1">xiiDequeBase&lt;T, Construct&gt;::PeekFront</a>()</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;{</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;  <span class="keywordflow">return</span> operator[](0);</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;}</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160; </div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00616"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0c30ee08dbdaf12b213b3a194c9ee42e">  616</a></span>&#160;XII_ALWAYS_INLINE <span class="keyword">const</span> T&amp; <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a0c30ee08dbdaf12b213b3a194c9ee42e">xiiDequeBase&lt;T, Construct&gt;::PeekBack</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;  <span class="keywordflow">return</span> operator[](m_uiCount - 1);</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;}</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160; </div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;XII_ALWAYS_INLINE T&amp; <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a0c30ee08dbdaf12b213b3a194c9ee42e">xiiDequeBase&lt;T, Construct&gt;::PeekBack</a>()</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;{</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  <span class="keywordflow">return</span> operator[](m_uiCount - 1);</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;}</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160; </div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00628"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0a228b9beca6b5a98e04f25a1ff38706">  628</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a0a228b9beca6b5a98e04f25a1ff38706">xiiDequeBase&lt;T, Construct&gt;::Contains</a>(<span class="keyword">const</span> T&amp; value)<span class="keyword"> const</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;  <span class="keywordflow">return</span> IndexOf(value) != xiiInvalidIndex;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;}</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160; </div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00634"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a118d956f2118ab6025430d9d6d1299f7">  634</a></span>&#160;xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a118d956f2118ab6025430d9d6d1299f7">xiiDequeBase&lt;T, Construct&gt;::IndexOf</a>(<span class="keyword">const</span> T&amp; value, xiiUInt32 uiStartIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = uiStartIndex; i &lt; m_uiCount; ++i)</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  {</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a82f92064b280ab0015bd5a88c42618bc">xiiMemoryUtils::IsEqual</a>(&amp;<span class="keyword">operator</span>[](i), &amp;value))</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;      <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  }</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160; </div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  <span class="keywordflow">return</span> xiiInvalidIndex;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;}</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160; </div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00646"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a2420fecfa1148966e1f68194438a0bdd">  646</a></span>&#160;xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a2420fecfa1148966e1f68194438a0bdd">xiiDequeBase&lt;T, Construct&gt;::LastIndexOf</a>(<span class="keyword">const</span> T&amp; value, xiiUInt32 uiStartIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = <a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a>(uiStartIndex, m_uiCount); i-- &gt; 0;)</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  {</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a82f92064b280ab0015bd5a88c42618bc">xiiMemoryUtils::IsEqual</a>(&amp;<span class="keyword">operator</span>[](i), &amp;value))</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;      <span class="keywordflow">return</span> i;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  }</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;  <span class="keywordflow">return</span> xiiInvalidIndex;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;}</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160; </div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00657"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0bec12007290a083e91d69f1837f2ab6">  657</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a0bec12007290a083e91d69f1837f2ab6">xiiDequeBase&lt;T, Construct&gt;::RemoveAtAndSwap</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;{</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160; </div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  XII_ASSERT_DEV(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Cannot remove element {0}, the deque only contains {1} elements.&quot;</span>, uiIndex, m_uiCount);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; </div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;  <span class="keywordflow">if</span> (uiIndex + 1 &lt; m_uiCount) <span class="comment">// do not copy over the same element, if uiIndex is actually the last element</span></div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;    operator[](uiIndex) = PeekBack();</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160; </div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  PopBack();</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;}</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160; </div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::MoveIndexChunksLeft</a>(xiiUInt32 uiChunkDiff)</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;{</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiCurFirstChunk   = GetFirstUsedChunk();</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiRemainingChunks = m_uiChunks - uiCurFirstChunk;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiNewFirstChunk   = uiCurFirstChunk - uiChunkDiff;</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160; </div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;  <span class="comment">// ripple the chunks from the back to the front (in place)</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 front = 0; front &lt; uiRemainingChunks; ++front)</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(m_pChunks[uiNewFirstChunk + front], m_pChunks[front + uiCurFirstChunk]);</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160; </div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;  <span class="comment">// just ensures that the following subtraction is possible</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;  XII_ASSERT_DEBUG(m_uiFirstElement &gt; uiChunkDiff * CHUNK_SIZE(T), <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160; </div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;  <span class="comment">// adjust which element is the first by how much the index array has been moved</span></div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  m_uiFirstElement -= uiChunkDiff * CHUNK_SIZE(T);</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160; </div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::MoveIndexChunksRight</a>(xiiUInt32 uiChunkDiff)</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;{</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiCurFirstChunk = GetFirstUsedChunk();</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastChunk     = (m_uiCount == 0) ? (m_uiFirstElement / CHUNK_SIZE(T)) : ((m_uiFirstElement + m_uiCount - 1) / CHUNK_SIZE(T));</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiCopyChunks    = (uiLastChunk - uiCurFirstChunk) + 1;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160; </div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  <span class="comment">// ripple the chunks from the front to the back (in place)</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiCopyChunks; ++i)</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;    <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(m_pChunks[uiLastChunk - i], m_pChunks[uiLastChunk + uiChunkDiff - i]);</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160; </div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  <span class="comment">// adjust which element is the first by how much the index array has been moved</span></div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;  m_uiFirstElement += uiChunkDiff * CHUNK_SIZE(T);</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;}</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160; </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetFirstUsedChunk</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;  <span class="keywordflow">return</span> m_uiFirstElement / CHUNK_SIZE(T);</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;}</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160; </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;XII_FORCE_INLINE xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetLastUsedChunk</a>(xiiUInt32 uiAtSize)<span class="keyword"> const</span></div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;  <span class="keywordflow">if</span> (uiAtSize == 0)</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;    <span class="keywordflow">return</span> GetFirstUsedChunk();</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160; </div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;  <span class="keywordflow">return</span> (m_uiFirstElement + uiAtSize - 1) / CHUNK_SIZE(T);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;}</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160; </div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetLastUsedChunk</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;  <span class="keywordflow">return</span> GetLastUsedChunk(m_uiCount);</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;}</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160; </div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;XII_FORCE_INLINE xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetRequiredChunks</a>(xiiUInt32 uiAtSize)<span class="keyword"> const</span></div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;  <span class="keywordflow">if</span> (uiAtSize == 0)</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160; </div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;  <span class="keywordflow">return</span> GetLastUsedChunk(uiAtSize) - GetFirstUsedChunk() + 1;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;}</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160; </div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::DeallocateUnusedChunks</a>(xiiUInt32 uiMaxChunks)</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;{</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;  <span class="keywordflow">if</span> (m_uiAllocatedChunks &lt;= uiMaxChunks)</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;  <span class="comment">// check all unused chunks at the end, deallocate all that are allocated</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = GetLastUsedChunk() + 1; i &lt; m_uiChunks; ++i)</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;  {</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    {</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;      --m_uiAllocatedChunks;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;      XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks[i]);</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160; </div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;      <span class="keywordflow">if</span> (m_uiAllocatedChunks &lt;= uiMaxChunks)</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;    }</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;  }</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160; </div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;  <span class="comment">// check all unused chunks at the front, deallocate all that are allocated</span></div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiFirstChunk = GetFirstUsedChunk();</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160; </div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiFirstChunk; ++i)</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;  {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;    {</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;      --m_uiAllocatedChunks;</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;      XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks[i]);</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160; </div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;      <span class="keywordflow">if</span> (m_uiAllocatedChunks &lt;= uiMaxChunks)</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;    }</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;  }</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;}</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160; </div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::ResetReduceSizeCounter</a>()</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;{</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;  m_iReduceSizeTimer = CHUNK_SIZE(T) * 8; <span class="comment">// every time 8 chunks might be unused -&gt; check whether to reduce the deque&#39;s size</span></div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;}</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160; </div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::ReduceSize</a>(xiiInt32 iReduction)</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;{</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;  m_iReduceSizeTimer -= iReduction;</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160; </div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;  <span class="comment">// only trigger the size reduction every once in a while (after enough size reduction that actually a few chunks might be unused)</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;  <span class="keywordflow">if</span> (m_iReduceSizeTimer &gt; 0)</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160; </div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;  ResetReduceSizeCounter();</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160; </div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;  <span class="comment">// we keep this amount of chunks</span></div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;  <span class="comment">// m_uiMaxCount will be adjusted over time</span></div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;  <span class="comment">// if the deque is shrunk and operates in this state long enough, m_uiMaxCount will be reduced more and more</span></div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiMaxChunks = (m_uiMaxCount / CHUNK_SIZE(T)) + 3; <span class="comment">// +1 because of rounding, +2 spare chunks</span></div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160; </div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;  XII_ASSERT_DEBUG(uiMaxChunks &gt;= GetRequiredChunks(m_uiCount), <span class="stringliteral">&quot;Implementation Error.&quot;</span>);</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160; </div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;  DeallocateUnusedChunks(uiMaxChunks);</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160; </div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;  <span class="comment">// lerp between the current MaxCount and the actually active number of elements</span></div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;  <span class="comment">// m_uiMaxCount is never smaller than m_uiCount, but m_uiCount might be smaller</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;  <span class="comment">// thus m_uiMaxCount might be reduced over time</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;  m_uiMaxCount = <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(m_uiCount, (m_uiMaxCount / 2) + (m_uiCount / 2));</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160; </div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;  <span class="comment">// Should we really adjust the size of the index array here?</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;  CompactIndexArray(uiMaxChunks);</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;}</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160; </div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetCurMaxCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;  <span class="keywordflow">return</span> m_uiChunks * CHUNK_SIZE(T) - m_uiFirstElement;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;}</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160; </div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;XII_FORCE_INLINE T* <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetUnusedChunk</a>()</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;{</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;  <span class="comment">// first search for an unused, but already allocated, chunk and reuse it, if possible</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiCurFirstChunk = GetFirstUsedChunk();</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160; </div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;  <span class="comment">// search the unused blocks at the start</span></div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiCurFirstChunk; ++i)</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;  {</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    {</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;      T* pChunk    = m_pChunks[i];</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;      m_pChunks[i] = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;      <span class="keywordflow">return</span> pChunk;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;    }</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;  }</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160; </div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiCurLastChunk = GetLastUsedChunk();</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160; </div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  <span class="comment">// search the unused blocks at the end</span></div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = m_uiChunks - 1; i &gt; uiCurLastChunk; --i)</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;  {</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;    {</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;      T* pChunk    = m_pChunks[i];</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;      m_pChunks[i] = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;      <span class="keywordflow">return</span> pChunk;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    }</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;  }</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160; </div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;  <span class="comment">// nothing unused found, allocate a new block</span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;  ResetReduceSizeCounter();</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;  ++m_uiAllocatedChunks;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;  <span class="keywordflow">return</span> XII_NEW_RAW_BUFFER(m_pAllocator, T, CHUNK_SIZE(T));</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;}</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160; </div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;T&amp; <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::ElementAt</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;{</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;  XII_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160; </div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiRealIndex = m_uiFirstElement + uiIndex;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160; </div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunkIndex  = uiRealIndex / CHUNK_SIZE(T);</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiChunkOffset = uiRealIndex % CHUNK_SIZE(T);</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160; </div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;  XII_ASSERT_DEBUG(uiChunkIndex &lt; m_uiChunks, <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160; </div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;  <span class="keywordflow">if</span> (m_pChunks[uiChunkIndex] == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;    m_pChunks[uiChunkIndex] = GetUnusedChunk();</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160; </div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;  <span class="keywordflow">return</span> m_pChunks[uiChunkIndex][uiChunkOffset];</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;}</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160; </div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::DeallocateAll</a>()</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;{</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;  Clear();</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160; </div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;  xiiUInt32 i = 0;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;  <span class="keywordflow">while</span> (m_uiAllocatedChunks &gt; 0)</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;  {</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    {</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;      --m_uiAllocatedChunks;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;      XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks[i]);</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    }</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160; </div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    ++i;</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;  }</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160; </div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;  XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks);</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160; </div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;  Constructor(m_pAllocator);</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;}</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160; </div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00885"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a5a1050c4ac46b7d65c8c4d014248fc9b">  885</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a5a1050c4ac46b7d65c8c4d014248fc9b">xiiDequeBase&lt;T, Construct&gt;::RemoveAtAndCopy</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;{</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160; </div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;  XII_ASSERT_DEV(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to remove element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160; </div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = uiIndex + 1; i &lt; m_uiCount; ++i)</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;  {</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#aebfbcf3941811757985367ac3e1cb8de">xiiMemoryUtils::CopyOverlapped</a>(&amp;<span class="keyword">operator</span>[](i - 1), &amp;<span class="keyword">operator</span>[](i), 1);</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;  }</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160; </div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;  PopBack();</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;}</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160; </div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00900"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ad98c5e75b76c5cc23f402039fcaa169b">  900</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ad98c5e75b76c5cc23f402039fcaa169b">xiiDequeBase&lt;T, Construct&gt;::RemoveAndCopy</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;{</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160; </div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;  xiiUInt32 uiIndex = IndexOf(value);</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160; </div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;  <span class="keywordflow">if</span> (uiIndex == xiiInvalidIndex)</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160; </div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;  RemoveAtAndCopy(uiIndex);</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;}</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160; </div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00914"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a95d444fe3af042f55d4b77e6ffac715d">  914</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a95d444fe3af042f55d4b77e6ffac715d">xiiDequeBase&lt;T, Construct&gt;::RemoveAndSwap</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;{</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160; </div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;  xiiUInt32 uiIndex = IndexOf(value);</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160; </div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;  <span class="keywordflow">if</span> (uiIndex == xiiInvalidIndex)</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160; </div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;  RemoveAtAndSwap(uiIndex);</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;}</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160; </div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00928"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a3ee30db6c34ee13f9a8ff5591fc790b9">  928</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#a3ee30db6c34ee13f9a8ff5591fc790b9">xiiDequeBase&lt;T, Construct&gt;::Insert</a>(<span class="keyword">const</span> T&amp; value, xiiUInt32 uiIndex)</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;{</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160; </div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;  <span class="comment">// Index 0 inserts before the first element, Index m_uiCount inserts after the last element.</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;  XII_ASSERT_DEV(uiIndex &lt;= m_uiCount, <span class="stringliteral">&quot;The deque has {0} elements. Cannot insert an element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160; </div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;  PushBack();</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160; </div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = m_uiCount - 1; i &gt; uiIndex; --i)</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;  {</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a802d7a152c551948e45e7d0e19ae1e88">xiiMemoryUtils::Copy</a>(&amp;<span class="keyword">operator</span>[](i), &amp;<span class="keyword">operator</span>[](i - 1), 1);</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;  }</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160; </div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a802d7a152c551948e45e7d0e19ae1e88">xiiMemoryUtils::Copy</a>(&amp;<span class="keyword">operator</span>[](uiIndex), &amp;value, 1);</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;}</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160; </div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00947"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ab279b2088f63823c7afe7b8ff7c2a1bb">  947</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">xiiDequeBase&lt;T, Construct&gt;::Sort</a>(<span class="keyword">const</span> Comparer&amp; comparer)</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;{</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;  <span class="keywordflow">if</span> (m_uiCount &gt; 1)</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <a class="code" href="../../da/d89/classxii_sorting.htm#a3e6e0255ac3dc4d93eff8b3c18aedf4c">xiiSorting::QuickSort</a>(*<span class="keyword">this</span>, comparer);</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;}</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160; </div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00954"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">  954</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">xiiDequeBase&lt;T, Construct&gt;::Sort</a>()</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;{</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;  <span class="keywordflow">if</span> (m_uiCount &gt; 1)</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;    <a class="code" href="../../da/d89/classxii_sorting.htm#a3e6e0255ac3dc4d93eff8b3c18aedf4c">xiiSorting::QuickSort</a>(*<span class="keyword">this</span>, <a class="code" href="../../d1/deb/structxii_compare_helper.htm">xiiCompareHelper&lt;T&gt;</a>());</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;}</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160; </div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00961"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">  961</a></span>&#160;xiiUInt64 <a class="code" href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">xiiDequeBase&lt;T, Construct&gt;::GetHeapMemoryUsage</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;  <span class="keywordflow">if</span> (m_pChunks == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160; </div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;  xiiUInt64 res = m_uiChunks * <span class="keyword">sizeof</span>(T*);</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160; </div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_uiChunks; ++i)</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;  {</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    <span class="keywordflow">if</span> (m_pChunks[i] != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    {</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;      res += (xiiUInt64)(CHUNK_SIZE(T)) * (xiiUInt64)<span class="keyword">sizeof</span>(T);</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    }</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;  }</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160; </div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;  <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;}</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160; </div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;<span class="preprocessor">#undef REDUCE_SIZE</span></div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;<span class="preprocessor">#undef RESERVE</span></div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160; </div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160; </div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;<a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>() :</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(A::GetAllocator())</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;{</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;}</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160; </div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) :</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(pAllocator)</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;{</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;}</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160; </div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<span class="keyword">const</span> <a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;</a>&amp; other) :</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(other, A::GetAllocator())</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;{</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;}</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160; </div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;</a>&amp;&amp; other) :</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(std::move(other), other.GetAllocator())</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;{</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;}</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160; </div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;<a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; other) :</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(other, A::GetAllocator())</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;{</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;}</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160; </div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;<a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;&amp; other) :</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(std::move(other), other.GetAllocator())</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;{</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;}</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160; </div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;{</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;}</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160; </div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::operator=</a>(<a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;{</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(std::move(rhs));</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;}</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160; </div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;{</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;}</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160; </div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::operator=</a>(<a class="code" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;{</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;  <a class="code" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(std::move(rhs));</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_memory_utils_htm_a245cf437a25b93067264757598b0365a"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a245cf437a25b93067264757598b0365a">xiiMemoryUtils::DefaultConstruct</a></div><div class="ttdeci">static void DefaultConstruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Default constructs uiCount objects of type T in a raw buffer at pDestination regardless of T being a ...</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a1d937b7518a530c97fcad95921939872"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a1d937b7518a530c97fcad95921939872">xiiDequeBase::~xiiDequeBase</a></div><div class="ttdeci">~xiiDequeBase()</div><div class="ttdoc">Destructor.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:66</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_aa9bf6081af25b7f13a911032c6ec0c96"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#aa9bf6081af25b7f13a911032c6ec0c96">xiiDequeBase::GetContiguousRange</a></div><div class="ttdeci">xiiUInt32 GetContiguousRange(xiiUInt32 uiStartIndex) const</div><div class="ttdoc">Returns the number of elements after uiStartIndex that are stored in contiguous memory.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:431</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_af3da14f91515aad7930bd6524a70f40b"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#af3da14f91515aad7930bd6524a70f40b">xiiMemoryUtils::Construct</a></div><div class="ttdeci">static void Construct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination.s.</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_abb1a0ff4777547ffb34b0752f32d416d"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#abb1a0ff4777547ffb34b0752f32d416d">xiiDequeBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Checks whether no elements are active in the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:592</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_aece4fdeb5f8a35b58bd979302f3e9768"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ae8b02bcdccb800fc17228ce9cfb2fb52"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">xiiDequeBase::Sort</a></div><div class="ttdeci">void Sort()</div><div class="ttdoc">Sort with default comparer.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:954</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a5a1050c4ac46b7d65c8c4d014248fc9b"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a5a1050c4ac46b7d65c8c4d014248fc9b">xiiDequeBase::RemoveAtAndCopy</a></div><div class="ttdeci">void RemoveAtAndCopy(xiiUInt32 uiIndex)</div><div class="ttdoc">Removes the element at index and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:885</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_abb9f50af5a92121b3c02c831e965f1f1"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#abb9f50af5a92121b3c02c831e965f1f1">xiiDequeBase::Compact</a></div><div class="ttdeci">void Compact()</div><div class="ttdoc">This function deallocates as much memory as possible to shrink the deque to the bare minimum size tha...</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:245</div></div>
<div class="ttc" id="anamespacexii_math_htm_a4d6f8bf4858245e40a706a3aabd0a59e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:59</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ada04e81722f420de3a7a0c043bf0278e"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">xiiDequeBase::operator[]</a></div><div class="ttdeci">T &amp; operator[](xiiUInt32 uiIndex)</div><div class="ttdoc">Accesses the n-th element in the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:446</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_aa46340f1eaae0121ec1bcb712ea2755f"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">xiiMemoryUtils::ZeroFill</a></div><div class="ttdeci">static void ZeroFill(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Zeros every byte in the provided memory buffer.</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a3ee30db6c34ee13f9a8ff5591fc790b9"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a3ee30db6c34ee13f9a8ff5591fc790b9">xiiDequeBase::Insert</a></div><div class="ttdeci">void Insert(const T &amp;value, xiiUInt32 uiIndex)</div><div class="ttdoc">Inserts value at index by shifting all following elements. Valid insert positions are [0; GetCount].</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:928</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a0e649eac7f0c7a6eea9ff976fbd33122"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a0e649eac7f0c7a6eea9ff976fbd33122">xiiDequeBase::Swap</a></div><div class="ttdeci">void Swap(xiiDequeBase&lt; T, Construct &gt; &amp;other)</div><div class="ttdoc">swaps the contents of this deque with another one</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:263</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a9c5da4a4992bf2905c1e14312eebc1c1"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a9c5da4a4992bf2905c1e14312eebc1c1">xiiDequeBase::PeekFront</a></div><div class="ttdeci">const T &amp; PeekFront() const</div><div class="ttdoc">Returns the first element.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:604</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ad98c5e75b76c5cc23f402039fcaa169b"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ad98c5e75b76c5cc23f402039fcaa169b">xiiDequeBase::RemoveAndCopy</a></div><div class="ttdeci">bool RemoveAndCopy(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:900</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a892f55e291b53a4594c9b55f042a7488"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a892f55e291b53a4594c9b55f042a7488">xiiDequeBase::PopFront</a></div><div class="ttdeci">void PopFront(xiiUInt32 uiElements=1)</div><div class="ttdoc">Removes the first element from the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:574</div></div>
<div class="ttc" id="astructxii_is_pod_type_htm"><div class="ttname"><a href="../../d2/dad/structxii_is_pod_type.htm">xiiIsPodType</a></div><div class="ttdoc">If there is an % operator which takes a TypeIsPod and returns a CompileTimeTrueType T is Pod....</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:40</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a118d956f2118ab6025430d9d6d1299f7"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a118d956f2118ab6025430d9d6d1299f7">xiiDequeBase::IndexOf</a></div><div class="ttdeci">xiiUInt32 IndexOf(const T &amp;value, xiiUInt32 uiStartIndex=0) const</div><div class="ttdoc">Returns the first index at which an element with the given value could be found or xiiInvalidIndex if...</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:634</div></div>
<div class="ttc" id="anamespacexii_math_htm_a2e7c389d4195d010ba0c207a1e981a58"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Swap(T &amp;ref_f1, T &amp;ref_f2)</div><div class="ttdoc">Swaps the values in the two variables f1 and f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:241</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ad4e9b0d6472df9371d4e6cab9e340e01"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">xiiDequeBase::PushBack</a></div><div class="ttdeci">void PushBack()</div><div class="ttdoc">Adds one default constructed element to the back of the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:486</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a95d444fe3af042f55d4b77e6ffac715d"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a95d444fe3af042f55d4b77e6ffac715d">xiiDequeBase::RemoveAndSwap</a></div><div class="ttdeci">bool RemoveAndSwap(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap with the last element in the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:914</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a0c30ee08dbdaf12b213b3a194c9ee42e"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a0c30ee08dbdaf12b213b3a194c9ee42e">xiiDequeBase::PeekBack</a></div><div class="ttdeci">const T &amp; PeekBack() const</div><div class="ttdoc">Returns the last element.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:616</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a9b664f33559cfbae688e74640228e3a3"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a9b664f33559cfbae688e74640228e3a3">xiiDequeBase::Reserve</a></div><div class="ttdeci">void Reserve(xiiUInt32 uiCount)</div><div class="ttdoc">Rearranges the internal data structures such that the amount of reserved elements can be appended wit...</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:157</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_aab74c7d6cbaef3323571c97cbd08b625"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#aab74c7d6cbaef3323571c97cbd08b625">xiiDequeBase::SetCount</a></div><div class="ttdeci">void SetCount(xiiUInt32 uiCount)</div><div class="ttdoc">Sets the number of active elements in the deque. All new elements are default constructed....</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:345</div></div>
<div class="ttc" id="aclassxii_deque_htm"><div class="ttname"><a href="../../d8/df8/classxii_deque.htm">xiiDeque</a></div><div class="ttdef"><b>Definition:</b> Deque.h:266</div></div>
<div class="ttc" id="aclassxii_allocator_base_htm"><div class="ttname"><a href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:21</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ade2c9195ef003e1289f9a73883edbc01"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase::operator=</a></div><div class="ttdeci">void operator=(const xiiDequeBase&lt; T, Construct &gt; &amp;rhs)</div><div class="ttdoc">Assignment operator.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:72</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a82f92064b280ab0015bd5a88c42618bc"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a82f92064b280ab0015bd5a88c42618bc">xiiMemoryUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const T *a, const T *b, size_t uiCount=1)</div><div class="ttdoc">Tests if objects of type T from pSource and pDestination are equal.</div></div>
<div class="ttc" id="astructxii_compare_helper_htm"><div class="ttname"><a href="../../d1/deb/structxii_compare_helper.htm">xiiCompareHelper</a></div><div class="ttdoc">A comparer object is used in sorting algorithms to compare to objects of the same type.</div><div class="ttdef"><b>Definition:</b> Comparer.h:6</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a6c4f6451cce0d87574a5275236508e16"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a6c4f6451cce0d87574a5275236508e16">xiiDequeBase::ExpandAndGetRef</a></div><div class="ttdeci">T &amp; ExpandAndGetRef()</div><div class="ttdoc">Grows the deque by one element and returns a reference to the newly created element.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:472</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a127aa133501c0b9f965ed0df17818b3d"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">xiiDequeBase::xiiDequeBase</a></div><div class="ttdeci">xiiDequeBase(xiiAllocatorBase *pAllocator)</div><div class="ttdoc">No memory is allocated during construction.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:40</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a617bcbef391101ddfedc8ba3bfbc38be"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">xiiDequeBase::PushFront</a></div><div class="ttdeci">void PushFront()</div><div class="ttdoc">Adds one default constructed element to the front of the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:561</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a0a228b9beca6b5a98e04f25a1ff38706"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a0a228b9beca6b5a98e04f25a1ff38706">xiiDequeBase::Contains</a></div><div class="ttdeci">bool Contains(const T &amp;value) const</div><div class="ttdoc">Checks whether there is any element in the deque with the given value.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:628</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ae779cc2e29fe5522a439027774526114"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ae779cc2e29fe5522a439027774526114">xiiDequeBase::EnsureCount</a></div><div class="ttdeci">void EnsureCount(xiiUInt32 uiCount)</div><div class="ttdoc">Ensures the container has at least uiCount elements. Ie. calls SetCount() if the container has fewer ...</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:422</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ae66a288b3a37f2a5e236499858d662ae"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ae66a288b3a37f2a5e236499858d662ae">xiiDequeBase::PopBack</a></div><div class="ttdeci">void PopBack(xiiUInt32 uiElements=1)</div><div class="ttdoc">Removes the last element from the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:520</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a6c8728654ad1b5c0c9dcbb597a93594d"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a293a0a14e5b3eca228d71c75562d40bb"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a293a0a14e5b3eca228d71c75562d40bb">xiiDequeBase::operator==</a></div><div class="ttdeci">bool operator==(const xiiDequeBase&lt; T, Construct &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:114</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_abe5332bb093bdfed4202c5fdd3739a12"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">xiiDequeBase::GetHeapMemoryUsage</a></div><div class="ttdeci">xiiUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:961</div></div>
<div class="ttc" id="anamespacexii_math_htm_a2c660f80f0df5bb91a751d12a93cb9cb"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:47</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a1c714b11aa25638bf88b3173e0063808"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a1c714b11aa25638bf88b3173e0063808">xiiDequeBase::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(xiiUInt32 uiCount)</div><div class="ttdoc">\Same as SetCount(), but new elements do not get default constructed.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:388</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a802d7a152c551948e45e7d0e19ae1e88"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a802d7a152c551948e45e7d0e19ae1e88">xiiMemoryUtils::Copy</a></div><div class="ttdeci">static void Copy(T *pDestination, const T *pSource, size_t uiCount=1)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassxii_sorting_htm_a3e6e0255ac3dc4d93eff8b3c18aedf4c"><div class="ttname"><a href="../../da/d89/classxii_sorting.htm#a3e6e0255ac3dc4d93eff8b3c18aedf4c">xiiSorting::QuickSort</a></div><div class="ttdeci">static void QuickSort(Container &amp;ref_container, const Comparer &amp;comparer=Comparer())</div><div class="ttdoc">Sorts the elements in container using a in-place quick sort implementation (not stable).</div><div class="ttdef"><b>Definition:</b> Sorting_inl.h:3</div></div>
<div class="ttc" id="aclassxii_deque_base_htm"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a></div><div class="ttdoc">A double ended queue container.</div><div class="ttdef"><b>Definition:</b> Deque.h:25</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_aebfbcf3941811757985367ac3e1cb8de"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#aebfbcf3941811757985367ac3e1cb8de">xiiMemoryUtils::CopyOverlapped</a></div><div class="ttdeci">static void CopyOverlapped(T *pDestination, const T *pSource, size_t uiCount=1)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a816c70b7c82c13e82a7276d43105a53c"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">xiiDequeBase::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:598</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a2420fecfa1148966e1f68194438a0bdd"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a2420fecfa1148966e1f68194438a0bdd">xiiDequeBase::LastIndexOf</a></div><div class="ttdeci">xiiUInt32 LastIndexOf(const T &amp;value, xiiUInt32 uiStartIndex=xiiInvalidIndex) const</div><div class="ttdoc">Returns the last index at which an element with the given value could be found or xiiInvalidIndex if ...</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:646</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a0bec12007290a083e91d69f1837f2ab6"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a0bec12007290a083e91d69f1837f2ab6">xiiDequeBase::RemoveAtAndSwap</a></div><div class="ttdeci">void RemoveAtAndSwap(xiiUInt32 uiIndex)</div><div class="ttdoc">Removes the element at the given index and fills the gap with the last element in the deque.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:657</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_afa53969988821e65d753787b0c0fc89e"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#afa53969988821e65d753787b0c0fc89e">xiiDequeBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destructs all elements and sets the count to zero. Does not deallocate any data.</div><div class="ttdef"><b>Definition:</b> Deque_inl.h:129</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_7f59ab18dbc50035dfc0ee7070867286.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_acc055bf9d45372e5f916366fab93514.htm">Implementation</a></li><li class="navelem"><b>Deque_inl.h</b></li>
    <li class="footer">Generated on Wed Dec 27 2023 06:00:40 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

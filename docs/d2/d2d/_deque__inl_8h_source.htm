<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: /home/runner/work/XII/XII/Source/Engine/Foundation/Containers/Implementation/Deque_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d2/d2d/_deque__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Deque_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Math/Math.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span> </div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#define REDUCE_SIZE(iReduction)     \</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">  m_iReduceSizeTimer -= iReduction; \</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">  if (m_iReduceSizeTimer &lt;= 0)      \</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="preprocessor">    ReduceSize(0);</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="preprocessor">#define RESERVE(uiCount)                                         \</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span><span class="preprocessor">  if (uiCount &gt; m_uiCount)                                       \</span></div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span><span class="preprocessor">  {                                                              \</span></div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span><span class="preprocessor">    m_uiMaxCount = xiiMath::Max(m_uiMaxCount, uiCount);          \</span></div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span><span class="preprocessor">    if ((m_uiFirstElement &lt;= 0) || (GetCurMaxCount() &lt; uiCount)) \</span></div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="preprocessor">      Reserve(uiCount);                                          \</span></div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span><span class="preprocessor">  }</span></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span> </div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="preprocessor">#define CHUNK_SIZE(Type) (4096 / sizeof(Type) &lt; 32 ? 32 : 4096 / sizeof(Type))</span></div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span><span class="comment">// (sizeof(Type) &lt;= 8 ? 256 : (sizeof(Type) &lt;= 16 ? 128 : (sizeof(Type) &lt;= 32 ? 64 : 32))) // Although this is Pow(2), this is slower than just having larger chunks</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::Constructor</a>(<a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>{</div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  m_pAllocator        = pAllocator;</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  m_pChunks           = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span>  m_uiChunks          = 0;</div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  m_uiFirstElement    = 0;</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>  m_uiCount           = 0;</div>
<div class="foldopen" id="foldopen00029" data-start="{" data-end="}">
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">   29</a></span>  m_uiAllocatedChunks = 0;</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  m_uiMaxCount        = 0;</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span> </div>
<div class="foldopen" id="foldopen00032" data-start="{" data-end="}">
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a82ccbdcc0b50f54ce8c7796b55b4e6cc">   32</a></span>  ResetReduceSizeCounter();</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span><span class="preprocessor">#if XII_ENABLED(XII_COMPILE_FOR_DEBUG)</span></div>
<div class="foldopen" id="foldopen00035" data-start="{" data-end="}">
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a63704f928f938b75474bd7ebd3cfa90a">   35</a></span>  m_uiChunkSize = CHUNK_SIZE(T);</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>}</div>
<div class="foldopen" id="foldopen00038" data-start="{" data-end="}">
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a1d937b7518a530c97fcad95921939872">   38</a></span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00040" data-start="{" data-end="}">
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">   40</a></span><a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">xiiDequeBase&lt;T, Construct&gt;::xiiDequeBase</a>(<a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="foldopen" id="foldopen00041" data-start="{" data-end="}">
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">   41</a></span>{</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>  Constructor(pAllocator);</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>}</div>
<div class="foldopen" id="foldopen00044" data-start="{" data-end="}">
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae8a3dcbb3ed255bcc3283d8a1d5e3e34">   44</a></span> </div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00046" data-start="{" data-end="}">
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a82ccbdcc0b50f54ce8c7796b55b4e6cc">   46</a></span><a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">xiiDequeBase&lt;T, Construct&gt;::xiiDequeBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; rhs, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>{</div>
<div class="foldopen" id="foldopen00048" data-start="{" data-end="}">
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#afa53969988821e65d753787b0c0fc89e">   48</a></span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span> </div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>  Constructor(pAllocator);</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  *<span class="keyword">this</span> = rhs;</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span>}</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00056" data-start="{" data-end="}">
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a63704f928f938b75474bd7ebd3cfa90a">   56</a></span><a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">xiiDequeBase&lt;T, Construct&gt;::xiiDequeBase</a>(<a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;&amp; rhs, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>{</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="foldopen" id="foldopen00059" data-start="{" data-end="}">
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a9b664f33559cfbae688e74640228e3a3">   59</a></span> </div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  Constructor(pAllocator);</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span> </div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  *<span class="keyword">this</span> = std::move(rhs);</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>}</div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span> </div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00066" data-start="{" data-end="}">
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a1d937b7518a530c97fcad95921939872">   66</a></span><a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a1d937b7518a530c97fcad95921939872">xiiDequeBase&lt;T, Construct&gt;::~xiiDequeBase</a>()</div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abb9f50af5a92121b3c02c831e965f1f1">   67</a></span>{</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  DeallocateAll();</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>}</div>
<div class="foldopen" id="foldopen00070" data-start="{" data-end="}">
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0e649eac7f0c7a6eea9ff976fbd33122">   70</a></span> </div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00072" data-start="{" data-end="}">
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">   72</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>{</div>
<div class="foldopen" id="foldopen00074" data-start="{" data-end="}">
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#aab74c7d6cbaef3323571c97cbd08b625">   74</a></span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span> </div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>  Clear();                <span class="comment">// does not deallocate anything</span></div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  RESERVE(rhs.m_uiCount); <span class="comment">// allocates data, if required</span></div>
<div class="foldopen" id="foldopen00078" data-start="{" data-end="}">
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a1c714b11aa25638bf88b3173e0063808">   78</a></span>  m_uiCount = rhs.m_uiCount;</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  <span class="comment">// copy construct all the elements</span></div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; rhs.m_uiCount; ++i)</div>
<div class="foldopen" id="foldopen00082" data-start="{" data-end="}">
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae779cc2e29fe5522a439027774526114">   82</a></span>    <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a>(&amp;ElementAt(i), rhs[i], 1);</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>}</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span> </div>
<div class="foldopen" id="foldopen00085" data-start="{" data-end="}">
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">   85</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00086" data-start="{" data-end="}">
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae8a3dcbb3ed255bcc3283d8a1d5e3e34">   86</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(<a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>{</div>
<div class="foldopen" id="foldopen00088" data-start="{" data-end="}">
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ac97796a62aa99f3db56b9edf019b3ace">   88</a></span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span> </div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  <span class="keywordflow">if</span> (m_pAllocator != rhs.m_pAllocator)</div>
<div class="foldopen" id="foldopen00091" data-start="{" data-end="}">
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6c4f6451cce0d87574a5275236508e16">   91</a></span>    operator=(<span class="keyword">static_cast&lt;</span><a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;<span class="keyword">&gt;</span>(rhs));</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  {</div>
<div class="foldopen" id="foldopen00094" data-start="{" data-end="}">
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">   94</a></span>    DeallocateAll();</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>    m_uiCount           = rhs.m_uiCount;</div>
<div class="foldopen" id="foldopen00097" data-start="{" data-end="}">
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6d22f144049a0a51d1bcecd4c965456a">   97</a></span>    m_iReduceSizeTimer  = rhs.m_iReduceSizeTimer;</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span>    m_pChunks           = rhs.m_pChunks;</div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>    m_uiAllocatedChunks = rhs.m_uiAllocatedChunks;</div>
<div class="foldopen" id="foldopen00100" data-start="{" data-end="}">
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a8d5383192941dd3397760a64177f0452">  100</a></span>    m_uiChunks          = rhs.m_uiChunks;</div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span>    m_uiFirstElement    = rhs.m_uiFirstElement;</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>    m_uiMaxCount        = rhs.m_uiMaxCount;</div>
<div class="foldopen" id="foldopen00103" data-start="{" data-end="}">
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae66a288b3a37f2a5e236499858d662ae">  103</a></span> </div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>    rhs.m_uiCount           = 0;</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>    rhs.m_pChunks           = <span class="keyword">nullptr</span>;</div>
<div class="foldopen" id="foldopen00106" data-start="{" data-end="}">
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#affcf16a7eb5ac1bb1a1ffdd8b8835da1">  106</a></span>    rhs.m_uiAllocatedChunks = 0;</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>    rhs.m_uiChunks          = 0;</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>    rhs.m_uiFirstElement    = 0;</div>
<div class="foldopen" id="foldopen00109" data-start="{" data-end="}">
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6432b00ce6fbe22cdf3c2007db6f6ace">  109</a></span>    rhs.m_uiMaxCount        = 0;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span>  }</div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>}</div>
<div class="foldopen" id="foldopen00112" data-start="{" data-end="}">
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">  112</a></span> </div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00114" data-start="{" data-end="}">
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a293a0a14e5b3eca228d71c75562d40bb">  114</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a293a0a14e5b3eca228d71c75562d40bb">xiiDequeBase&lt;T, Construct&gt;::operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="foldopen" id="foldopen00115" data-start="{" data-end="}">
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a892f55e291b53a4594c9b55f042a7488">  115</a></span><span class="keyword"></span>{</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>  <span class="keywordflow">if</span> (GetCount() != rhs.<a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">GetCount</a>())</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="foldopen" id="foldopen00118" data-start="{" data-end="}">
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abb1a0ff4777547ffb34b0752f32d416d">  118</a></span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; GetCount(); ++i)</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  {</div>
<div class="foldopen" id="foldopen00121" data-start="{" data-end="}">
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">  121</a></span>    <span class="keywordflow">if</span> ((*<span class="keyword">this</span>)[i] != rhs[i])</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  }</div>
<div class="foldopen" id="foldopen00124" data-start="{" data-end="}">
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#af0f74902183b70e8fe471bfffcb28a97">  124</a></span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>}</div>
<div class="foldopen" id="foldopen00127" data-start="{" data-end="}">
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a7c7bee5a1fc6a021bfd839bf333b435d">  127</a></span> </div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00129" data-start="{" data-end="}">
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#afa53969988821e65d753787b0c0fc89e">  129</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#afa53969988821e65d753787b0c0fc89e">xiiDequeBase&lt;T, Construct&gt;::Clear</a>()</div>
<div class="foldopen" id="foldopen00130" data-start="{" data-end="}">
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a8b20a75bcb2091ef5c434c25b049515d">  130</a></span>{</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  {</div>
<div class="foldopen" id="foldopen00133" data-start="{" data-end="}">
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a1c0ce8012988ade695c8817edc042c0c">  133</a></span>    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_uiCount; ++i)</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span>      <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct&lt;T&gt;</a>(&amp;<span class="keyword">operator</span>[](i), 1);</div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span>  }</div>
<div class="foldopen" id="foldopen00136" data-start="{" data-end="}">
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0a228b9beca6b5a98e04f25a1ff38706">  136</a></span> </div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>  m_uiCount = 0;</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="foldopen" id="foldopen00139" data-start="{" data-end="}">
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a118d956f2118ab6025430d9d6d1299f7">  139</a></span>  <span class="comment">// since it is much more likely that data is appended at the back of the deque,</span></div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>  <span class="comment">// we do not use the center of the chunk index array, but instead set the first element</span></div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span>  <span class="comment">// somewhere more at the front</span></div>
<div class="foldopen" id="foldopen00142" data-start="{" data-end="}">
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a2420fecfa1148966e1f68194438a0bdd">  142</a></span> </div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>  <span class="comment">// set the first element to a position that allows to add elements at the front</span></div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span>  <span class="keywordflow">if</span> (m_uiChunks &gt; 30)</div>
<div class="foldopen" id="foldopen00145" data-start="{" data-end="}">
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0bec12007290a083e91d69f1837f2ab6">  145</a></span>    m_uiFirstElement = CHUNK_SIZE(T) * 16;</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_uiChunks &gt; 8)</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>    m_uiFirstElement = CHUNK_SIZE(T) * 4;</div>
<div class="foldopen" id="foldopen00148" data-start="{" data-end="}">
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a5a1050c4ac46b7d65c8c4d014248fc9b">  148</a></span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_uiChunks &gt; 1)</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>    m_uiFirstElement = CHUNK_SIZE(T) * 1;</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span>  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (m_uiChunks &gt; 0)</div>
<div class="foldopen" id="foldopen00151" data-start="{" data-end="}">
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ad98c5e75b76c5cc23f402039fcaa169b">  151</a></span>    m_uiFirstElement = 1; <span class="comment">// with the current implementation this case should not be possible.</span></div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>    m_uiFirstElement = 0; <span class="comment">// must also work, if Clear is called on a deallocated (not yet allocated) deque</span></div>
<div class="foldopen" id="foldopen00154" data-start="{" data-end="}">
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a95d444fe3af042f55d4b77e6ffac715d">  154</a></span>}</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00157" data-start="{" data-end="}">
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a5700885bbbba08b8d6bb0b6fc9346a5e">  157</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a9b664f33559cfbae688e74640228e3a3">xiiDequeBase&lt;T, Construct&gt;::Reserve</a>(xiiUInt32 uiCount)</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>{</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>  <span class="comment">// This is the function where all the complicated stuff happens.</span></div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  <span class="comment">// The basic idea is as follows:</span></div>
<div class="foldopen" id="foldopen00161" data-start="{" data-end="}">
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ab279b2088f63823c7afe7b8ff7c2a1bb">  161</a></span>  <span class="comment">// * Do not do anything unless necessary</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span>  <span class="comment">// * If the index array (for the redirection) is already large enough to handle the &#39;address space&#39;, try to reuse it</span></div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span>  <span class="comment">//   by moving data around (shift it left or right), if necessary</span></div>
<div class="foldopen" id="foldopen00164" data-start="{" data-end="}">
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">  164</a></span>  <span class="comment">// * If the chunk index array is not large enough to handle the required amount of redirections, allocate a new</span></div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>  <span class="comment">//   index array and move the old data over</span></div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="comment">// This function does not allocate any of the chunks itself (that&#39;s what &#39;ElementAt&#39; does), it only takes care</span></div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  <span class="comment">// that the amount of reserved elements can be redirected once the deque is enlarged accordingly.</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  <span class="comment">// There is no need to change anything in this case.</span></div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keywordflow">if</span> (uiCount &lt;= m_uiCount)</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span> </div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>  <span class="comment">// keeps track of the largest amount of used elements since the last memory reduction</span></div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  m_uiMaxCount = <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(m_uiMaxCount, uiCount);</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span> </div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span>  <span class="comment">// if there is enough room to hold all requested elements AND one can prepend at least one element (PushFront)</span></div>
<div class="foldopen" id="foldopen00177" data-start="{" data-end="}">
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#aa9bf6081af25b7f13a911032c6ec0c96">  177</a></span>  <span class="comment">// do not reallocate</span></div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  <span class="keywordflow">if</span> ((m_uiFirstElement &gt; 0) &amp;&amp; (GetCurMaxCount() &gt;= uiCount))</div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span>    <span class="keywordflow">return</span>;</div>
<div class="foldopen" id="foldopen00180" data-start="{" data-end="}">
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a293a0a14e5b3eca228d71c75562d40bb">  180</a></span> </div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <span class="keyword">const</span> xiiUInt32 uiCurFirstChunk  = GetFirstUsedChunk();</div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="keyword">const</span> xiiUInt32 uiRequiredChunks = GetRequiredChunks(uiCount);</div>
<div class="foldopen" id="foldopen00183" data-start="{" data-end="}">
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">  183</a></span> </div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  <span class="comment">// if we already have enough chunks, just rearrange them</span></div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span>  <span class="keywordflow">if</span> (m_uiChunks &gt; uiRequiredChunks + 1) <span class="comment">// have at least one spare chunk for the front, and one for the back</span></div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  {</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span>    <span class="keyword">const</span> xiiUInt32 uiSpareChunks      = m_uiChunks - uiRequiredChunks;</div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>    <span class="keyword">const</span> xiiUInt32 uiSpareChunksStart = uiSpareChunks / 2;</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span> </div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span>    XII_ASSERT_DEBUG(uiSpareChunksStart &gt; 0, <span class="stringliteral">&quot;Implementation error.&quot;</span>);</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span> </div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>    <span class="comment">// always leave one spare chunk at the front, to ensure that one can prepend elements</span></div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>    XII_ASSERT_DEBUG(uiSpareChunksStart != uiCurFirstChunk, <span class="stringliteral">&quot;No rearrangement possible.&quot;</span>);</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>    <span class="comment">// if the new first active chunk is to the left</span></div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>    <span class="keywordflow">if</span> (uiSpareChunksStart &lt; uiCurFirstChunk)</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>      MoveIndexChunksLeft(uiCurFirstChunk - uiSpareChunksStart);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>      MoveIndexChunksRight(uiSpareChunksStart - uiCurFirstChunk);</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span> </div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span>    XII_ASSERT_DEBUG(m_uiFirstElement &gt; 0, <span class="stringliteral">&quot;Did not achieve the desired effect.&quot;</span>);</div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    XII_ASSERT_DEBUG(GetCurMaxCount() &gt;= uiCount, <span class="stringliteral">&quot;Did not achieve the desired effect ({0} &gt;= {1}).&quot;</span>, GetCurMaxCount(), uiCount);</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  }</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  {</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>    <span class="keyword">const</span> xiiUInt32 uiReallocSize = 16 + uiRequiredChunks + 16;</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span>    T** pNewChunksArray = XII_NEW_RAW_BUFFER(m_pAllocator, T*, uiReallocSize);</div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span>    <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">xiiMemoryUtils::ZeroFill</a>(pNewChunksArray, uiReallocSize);</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span> </div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>    <span class="keyword">const</span> xiiUInt32 uiFirstUsedChunk = m_uiFirstElement / CHUNK_SIZE(T);</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span> </div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>    <span class="comment">// move all old chunks over</span></div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>    xiiUInt32 pos = 16;</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span> </div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>    <span class="comment">// first the used chunks at the start of the new array</span></div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span>    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_uiChunks - uiFirstUsedChunk; ++i)</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>    {</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span>      pNewChunksArray[pos] = m_pChunks[uiFirstUsedChunk + i];</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>      ++pos;</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>    }</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span> </div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span>    m_uiFirstElement -= uiFirstUsedChunk * CHUNK_SIZE(T);</div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span> </div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>    <span class="comment">// then the unused chunks at the end of the new array</span></div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiFirstUsedChunk; ++i)</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>    {</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>      pNewChunksArray[pos] = m_pChunks[i];</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span>      ++pos;</div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>    }</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span> </div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>    m_uiFirstElement += 16 * CHUNK_SIZE(T);</div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>    XII_ASSERT_DEBUG(m_uiFirstElement == (16 * CHUNK_SIZE(T)) + (m_uiFirstElement % CHUNK_SIZE(T)), <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span> </div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>    XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks);</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>    m_pChunks  = pNewChunksArray;</div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span>    m_uiChunks = uiReallocSize;</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  }</div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>}</div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span> </div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00245" data-start="{" data-end="}">
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abb9f50af5a92121b3c02c831e965f1f1">  245</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#abb9f50af5a92121b3c02c831e965f1f1">xiiDequeBase&lt;T, Construct&gt;::Compact</a>()</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>{</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  ResetReduceSizeCounter();</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>  <span class="keywordflow">if</span> (IsEmpty())</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span>  {</div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>    DeallocateAll();</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>  }</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span>  <span class="comment">// this will deallocate ALL unused chunks</span></div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>  DeallocateUnusedChunks(GetRequiredChunks(m_uiCount));</div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span> </div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>  <span class="comment">// reduces the size of the index array, but keeps some spare pointers, so that scaling up is still possible without reallocation</span></div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>  CompactIndexArray(0);</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span>}</div>
</div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span> </div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00263" data-start="{" data-end="}">
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0e649eac7f0c7a6eea9ff976fbd33122">  263</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a0e649eac7f0c7a6eea9ff976fbd33122">xiiDequeBase&lt;T, Construct&gt;::Swap</a>(<a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; other)</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>{</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span>  <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_pAllocator, other.m_pAllocator);</div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>  <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_pChunks, other.m_pChunks);</div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span>  <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiChunks, other.m_uiChunks);</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>  <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiFirstElement, other.m_uiFirstElement);</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>  <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiCount, other.m_uiCount);</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span>  <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiAllocatedChunks, other.m_uiAllocatedChunks);</div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>  <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_iReduceSizeTimer, other.m_iReduceSizeTimer);</div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span>  <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiMaxCount, other.m_uiMaxCount);</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>}</div>
</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span> </div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::CompactIndexArray</a>(xiiUInt32 uiMinChunksToKeep)</div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span>{</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keyword">const</span> xiiUInt32 uiRequiredChunks = <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max&lt;xiiUInt32&gt;</a>(1, GetRequiredChunks(m_uiCount));</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>  uiMinChunksToKeep                = <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(uiRequiredChunks, uiMinChunksToKeep);</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span>  <span class="comment">// keep some spare pointers for scaling the deque up again</span></div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>  <span class="keyword">const</span> xiiUInt32 uiChunksToKeep = 16 + uiMinChunksToKeep + 16;</div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span> </div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  <span class="comment">// only reduce the index array, if we can reduce its size at least to half (the +4 is for the very small cases)</span></div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>  <span class="keywordflow">if</span> (uiChunksToKeep + 4 &gt;= m_uiChunks / 2)</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span> </div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>  T** pNewChunkArray = XII_NEW_RAW_BUFFER(m_pAllocator, T*, uiChunksToKeep);</div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span>  <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">xiiMemoryUtils::ZeroFill&lt;T*&gt;</a>(pNewChunkArray, uiChunksToKeep);</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span> </div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>  <span class="keyword">const</span> xiiUInt32 uiFirstChunk = GetFirstUsedChunk();</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span> </div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  <span class="comment">// makes sure that no more than this amount of chunks is still allocated -&gt; those can be copied over</span></div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>  DeallocateUnusedChunks(uiChunksToKeep);</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span> </div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>  <span class="comment">// moves the used chunks into the new array</span></div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiRequiredChunks; ++i)</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  {</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>    pNewChunkArray[16 + i]      = m_pChunks[uiFirstChunk + i];</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span>    m_pChunks[uiFirstChunk + i] = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>  }</div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span> </div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>  <span class="comment">// copy all still allocated chunks over to the new index array</span></div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>  <span class="comment">// since we just deallocated enough chunks, all that are found can be copied over as spare chunks</span></div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span>  {</div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>    xiiUInt32 iPos = 0;</div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span>    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiFirstChunk; ++i)</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>    {</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>      <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span>      {</div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>        XII_ASSERT_DEBUG(iPos &lt; 16 || ((iPos &gt;= 16 + uiRequiredChunks) &amp;&amp; (iPos &lt; uiChunksToKeep)), <span class="stringliteral">&quot;Implementation error.&quot;</span>);</div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span> </div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>        pNewChunkArray[iPos] = m_pChunks[i];</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>        m_pChunks[i]         = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span>        ++iPos;</div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span> </div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span>        <span class="keywordflow">if</span> (iPos == 16)</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>          iPos += uiRequiredChunks;</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>      }</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span>    }</div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span> </div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span>    <span class="keywordflow">for</span> (xiiUInt32 i = GetLastUsedChunk() + 1; i &lt; m_uiChunks; ++i)</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>    {</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>      <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span>      {</div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span>        XII_ASSERT_DEBUG(iPos &lt; 16 || ((iPos &gt;= 16 + uiRequiredChunks) &amp;&amp; (iPos &lt; uiChunksToKeep)), <span class="stringliteral">&quot;Implementation error.&quot;</span>);</div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span> </div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span>        pNewChunkArray[iPos] = m_pChunks[i];</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>        m_pChunks[i]         = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span>        ++iPos;</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span> </div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>        <span class="keywordflow">if</span> (iPos == 16)</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span>          iPos += uiRequiredChunks;</div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span>      }</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>    }</div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span>  }</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span> </div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span>  XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks);</div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>  m_pChunks        = pNewChunkArray;</div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>  m_uiChunks       = uiChunksToKeep;</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span>  m_uiFirstElement = (16 * CHUNK_SIZE(T)) + (m_uiFirstElement % CHUNK_SIZE(T));</div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>}</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span> </div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00345" data-start="{" data-end="}">
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#aab74c7d6cbaef3323571c97cbd08b625">  345</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#aab74c7d6cbaef3323571c97cbd08b625">xiiDequeBase&lt;T, Construct&gt;::SetCount</a>(xiiUInt32 uiCount)</div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span>{</div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span>  <span class="keyword">const</span> xiiUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>  <span class="keyword">const</span> xiiUInt32 uiNewCount = uiCount;</div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span> </div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>  {</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span>    <span class="comment">// grow the deque</span></div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span> </div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span>    RESERVE(uiNewCount);</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>    m_uiCount = uiNewCount;</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span> </div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span>    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>    {</div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span>      <span class="comment">// default construct the new elements</span></div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>      <span class="keywordflow">for</span> (xiiUInt32 i = uiOldCount; i &lt; uiNewCount; ++i)</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>      {</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span>        <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a0b9f518ec24d03e497b61b248ead335e">xiiMemoryUtils::Construct&lt;ConstructAll&gt;</a>(&amp;ElementAt(i), 1);</div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>      }</div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span>    }</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>    <span class="keywordflow">else</span></div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>    {</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span>      <span class="keywordflow">for</span> (xiiUInt32 i = uiOldCount; i &lt; uiNewCount; ++i)</div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>      {</div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span>        ElementAt(i);</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>      }</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>    }</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span>  }</div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span>  {</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>    {</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span>      <span class="comment">// destruct elements at the end of the deque</span></div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>      <span class="keywordflow">for</span> (xiiUInt32 i = uiNewCount; i &lt; uiOldCount; ++i)</div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span>      {</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>        <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;<span class="keyword">operator</span>[](i), 1);</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>      }</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span>    }</div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span> </div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span>    m_uiCount = uiNewCount;</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span> </div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>    <span class="comment">// if enough elements have been destructed, trigger a size reduction (the first time will not deallocate anything though)</span></div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span>    ReduceSize(uiOldCount - uiNewCount);</div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>  }</div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span>}</div>
</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span> </div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="comment">// Second template needed so that the compiler does only instantiate it when called. Otherwise the static_assert would trigger</span></div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span><span class="comment">// early.</span></div>
<div class="foldopen" id="foldopen00394" data-start="{" data-end="}">
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a1c714b11aa25638bf88b3173e0063808">  394</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a1c714b11aa25638bf88b3173e0063808">xiiDequeBase&lt;T, Construct&gt;::SetCountUninitialized</a>(xiiUInt32 uiCount)</div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>{</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>  <span class="keyword">static_assert</span>(<a class="code hl_struct" href="../../d2/dad/structxii_is_pod_type.htm">xiiIsPodType&lt;T&gt;::value</a> == xiiTypeIsPod::value, <span class="stringliteral">&quot;SetCountUninitialized is only supported for POD types.&quot;</span>);</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span> </div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>  <span class="keyword">const</span> xiiUInt32 uiOldCount = m_uiCount;</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>  <span class="keyword">const</span> xiiUInt32 uiNewCount = uiCount;</div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span> </div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>  <span class="keywordflow">if</span> (uiNewCount &gt; uiOldCount)</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>  {</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>    <span class="comment">// grow the deque</span></div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span> </div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>    RESERVE(uiNewCount);</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span>    m_uiCount = uiNewCount;</div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span> </div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>    <span class="keywordflow">for</span> (xiiUInt32 i = uiOldCount; i &lt; uiNewCount; ++i)</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>    {</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>      ElementAt(i);</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>    }</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span>  }</div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span>  {</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span>    {</div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span>      <span class="comment">// destruct elements at the end of the deque</span></div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span>      <span class="keywordflow">for</span> (xiiUInt32 i = uiNewCount; i &lt; uiOldCount; ++i)</div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>      {</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span>        <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;<span class="keyword">operator</span>[](i), 1);</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>      }</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>    }</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span> </div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span>    m_uiCount = uiNewCount;</div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span> </div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span>    <span class="comment">// if enough elements have been destructed, trigger a size reduction (the first time will not deallocate anything though)</span></div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>    ReduceSize(uiOldCount - uiNewCount);</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>  }</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span>}</div>
</div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span> </div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00432" data-start="{" data-end="}">
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae779cc2e29fe5522a439027774526114">  432</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ae779cc2e29fe5522a439027774526114">xiiDequeBase&lt;T, Construct&gt;::EnsureCount</a>(xiiUInt32 uiCount)</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>{</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span>  <span class="keywordflow">if</span> (uiCount &gt; m_uiCount)</div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>  {</div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span>    SetCount(uiCount);</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>  }</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>}</div>
</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span> </div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00441" data-start="{" data-end="}">
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#aa9bf6081af25b7f13a911032c6ec0c96">  441</a></span><span class="keyword">inline</span> xiiUInt32 <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#aa9bf6081af25b7f13a911032c6ec0c96">xiiDequeBase&lt;T, Construct&gt;::GetContiguousRange</a>(xiiUInt32 uiIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span>  XII_ASSERT_DEV(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;The deque has {0} elements. Cannot access element {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span> </div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>  <span class="keyword">const</span> xiiUInt32 uiChunkSize = CHUNK_SIZE(T);</div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span> </div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>  <span class="keyword">const</span> xiiUInt32 uiRealIndex   = m_uiFirstElement + uiIndex;</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>  <span class="keyword">const</span> xiiUInt32 uiChunkOffset = uiRealIndex % uiChunkSize;</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span> </div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>  <span class="keyword">const</span> xiiUInt32 uiRange = uiChunkSize - uiChunkOffset;</div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span> </div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a>(uiRange, GetCount() - uiIndex);</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>}</div>
</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span> </div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00456" data-start="{" data-end="}">
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">  456</a></span><span class="keyword">inline</span> T&amp; <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">xiiDequeBase&lt;T, Construct&gt;::operator[]</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span>{</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span>  XII_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;The deque has {0} elements. Cannot access element {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span> </div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span>  <span class="keyword">const</span> xiiUInt32 uiRealIndex = m_uiFirstElement + uiIndex;</div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span> </div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>  <span class="keyword">const</span> xiiUInt32 uiChunkIndex  = uiRealIndex / CHUNK_SIZE(T);</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span>  <span class="keyword">const</span> xiiUInt32 uiChunkOffset = uiRealIndex % CHUNK_SIZE(T);</div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span> </div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span>  <span class="keywordflow">return</span> m_pChunks[uiChunkIndex][uiChunkOffset];</div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span>}</div>
</div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span> </div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00469" data-start="{" data-end="}">
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ac97796a62aa99f3db56b9edf019b3ace">  469</a></span><span class="keyword">inline</span> <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">xiiDequeBase&lt;T, Construct&gt;::operator[]</a>(xiiUInt32 uiIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span>  XII_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;The deque has {0} elements. Cannot access element {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span> </div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>  <span class="keyword">const</span> xiiUInt32 uiRealIndex = m_uiFirstElement + uiIndex;</div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span> </div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span>  <span class="keyword">const</span> xiiUInt32 uiChunkIndex  = uiRealIndex / CHUNK_SIZE(T);</div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>  <span class="keyword">const</span> xiiUInt32 uiChunkOffset = uiRealIndex % CHUNK_SIZE(T);</div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span> </div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span>  <span class="keywordflow">return</span> m_pChunks[uiChunkIndex][uiChunkOffset];</div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>}</div>
</div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span> </div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00482" data-start="{" data-end="}">
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6c4f6451cce0d87574a5275236508e16">  482</a></span><span class="keyword">inline</span> T&amp; <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a6c4f6451cce0d87574a5275236508e16">xiiDequeBase&lt;T, Construct&gt;::ExpandAndGetRef</a>()</div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span>{</div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span>  RESERVE(m_uiCount + 1);</div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>  ++m_uiCount;</div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span> </div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>  T* pElement = &amp;ElementAt(m_uiCount - 1);</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span> </div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span>  <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span>  {</div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span>    <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a0b9f518ec24d03e497b61b248ead335e">xiiMemoryUtils::Construct&lt;ConstructAll&gt;</a>(pElement, 1);</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>  }</div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span> </div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>  <span class="keywordflow">return</span> *pElement;</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span>}</div>
</div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span> </div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00498" data-start="{" data-end="}">
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">  498</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">xiiDequeBase&lt;T, Construct&gt;::PushBack</a>()</div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span>{</div>
<div class="line"><a id="l00500" name="l00500"></a><span class="lineno">  500</span>  RESERVE(m_uiCount + 1);</div>
<div class="line"><a id="l00501" name="l00501"></a><span class="lineno">  501</span>  ++m_uiCount;</div>
<div class="line"><a id="l00502" name="l00502"></a><span class="lineno">  502</span> </div>
<div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span>  T* pElement = &amp;ElementAt(m_uiCount - 1);</div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span> </div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span>  <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span>  {</div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>    <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a0b9f518ec24d03e497b61b248ead335e">xiiMemoryUtils::Construct&lt;ConstructAll&gt;</a>(pElement, 1);</div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span>  }</div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span>}</div>
</div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno">  510</span> </div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00512" data-start="{" data-end="}">
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6d22f144049a0a51d1bcecd4c965456a">  512</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">xiiDequeBase&lt;T, Construct&gt;::PushBack</a>(<span class="keyword">const</span> T&amp; element)</div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span>{</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span> </div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span>  RESERVE(m_uiCount + 1);</div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno">  517</span>  ++m_uiCount;</div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span> </div>
<div class="line"><a id="l00519" name="l00519"></a><span class="lineno">  519</span>  <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a>(&amp;ElementAt(m_uiCount - 1), element, 1);</div>
<div class="line"><a id="l00520" name="l00520"></a><span class="lineno">  520</span>}</div>
</div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span> </div>
<div class="line"><a id="l00522" name="l00522"></a><span class="lineno">  522</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00523" data-start="{" data-end="}">
<div class="line"><a id="l00523" name="l00523"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a8d5383192941dd3397760a64177f0452">  523</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">xiiDequeBase&lt;T, Construct&gt;::PushBack</a>(T&amp;&amp; element)</div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span>{</div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00526" name="l00526"></a><span class="lineno">  526</span> </div>
<div class="line"><a id="l00527" name="l00527"></a><span class="lineno">  527</span>  RESERVE(m_uiCount + 1);</div>
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno">  528</span>  ++m_uiCount;</div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span> </div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span>  <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a16883e3b910453d68ffb96562b92eed4">xiiMemoryUtils::MoveConstruct&lt;T&gt;</a>(&amp;ElementAt(m_uiCount - 1), std::move(element));</div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span>}</div>
</div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span> </div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00534" data-start="{" data-end="}">
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae66a288b3a37f2a5e236499858d662ae">  534</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ae66a288b3a37f2a5e236499858d662ae">xiiDequeBase&lt;T, Construct&gt;::PopBack</a>(xiiUInt32 uiElements)</div>
<div class="line"><a id="l00535" name="l00535"></a><span class="lineno">  535</span>{</div>
<div class="line"><a id="l00536" name="l00536"></a><span class="lineno">  536</span>  XII_ASSERT_DEV(uiElements &lt;= GetCount(), <span class="stringliteral">&quot;Cannot remove {0} elements, the deque only contains {1} elements.&quot;</span>, uiElements, GetCount());</div>
<div class="line"><a id="l00537" name="l00537"></a><span class="lineno">  537</span> </div>
<div class="line"><a id="l00538" name="l00538"></a><span class="lineno">  538</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiElements; ++i)</div>
<div class="line"><a id="l00539" name="l00539"></a><span class="lineno">  539</span>  {</div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno">  540</span>    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span>      <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;<span class="keyword">operator</span>[](m_uiCount - 1), 1);</div>
<div class="line"><a id="l00542" name="l00542"></a><span class="lineno">  542</span> </div>
<div class="line"><a id="l00543" name="l00543"></a><span class="lineno">  543</span>    --m_uiCount;</div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span>  }</div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno">  545</span> </div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno">  546</span>  <span class="comment">// This may trigger a memory reduction.</span></div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span>  REDUCE_SIZE(uiElements);</div>
<div class="line"><a id="l00548" name="l00548"></a><span class="lineno">  548</span>}</div>
</div>
<div class="line"><a id="l00549" name="l00549"></a><span class="lineno">  549</span> </div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00551" data-start="{" data-end="}">
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#affcf16a7eb5ac1bb1a1ffdd8b8835da1">  551</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">xiiDequeBase&lt;T, Construct&gt;::PushFront</a>(<span class="keyword">const</span> T&amp; element)</div>
<div class="line"><a id="l00552" name="l00552"></a><span class="lineno">  552</span>{</div>
<div class="line"><a id="l00553" name="l00553"></a><span class="lineno">  553</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span> </div>
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno">  555</span>  RESERVE(m_uiCount + 1);</div>
<div class="line"><a id="l00556" name="l00556"></a><span class="lineno">  556</span>  ++m_uiCount;</div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>  --m_uiFirstElement;</div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span> </div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span>  <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a>(&amp;ElementAt(0), element, 1);</div>
<div class="line"><a id="l00560" name="l00560"></a><span class="lineno">  560</span>}</div>
</div>
<div class="line"><a id="l00561" name="l00561"></a><span class="lineno">  561</span> </div>
<div class="line"><a id="l00562" name="l00562"></a><span class="lineno">  562</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00563" data-start="{" data-end="}">
<div class="line"><a id="l00563" name="l00563"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a6432b00ce6fbe22cdf3c2007db6f6ace">  563</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">xiiDequeBase&lt;T, Construct&gt;::PushFront</a>(T&amp;&amp; element)</div>
<div class="line"><a id="l00564" name="l00564"></a><span class="lineno">  564</span>{</div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span> </div>
<div class="line"><a id="l00567" name="l00567"></a><span class="lineno">  567</span>  RESERVE(m_uiCount + 1);</div>
<div class="line"><a id="l00568" name="l00568"></a><span class="lineno">  568</span>  ++m_uiCount;</div>
<div class="line"><a id="l00569" name="l00569"></a><span class="lineno">  569</span>  --m_uiFirstElement;</div>
<div class="line"><a id="l00570" name="l00570"></a><span class="lineno">  570</span> </div>
<div class="line"><a id="l00571" name="l00571"></a><span class="lineno">  571</span>  <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a16883e3b910453d68ffb96562b92eed4">xiiMemoryUtils::MoveConstruct&lt;T&gt;</a>(&amp;ElementAt(0), std::move(element));</div>
<div class="line"><a id="l00572" name="l00572"></a><span class="lineno">  572</span>}</div>
</div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span> </div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00575" data-start="{" data-end="}">
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">  575</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">xiiDequeBase&lt;T, Construct&gt;::PushFront</a>()</div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span>{</div>
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno">  577</span>  RESERVE(m_uiCount + 1);</div>
<div class="line"><a id="l00578" name="l00578"></a><span class="lineno">  578</span>  ++m_uiCount;</div>
<div class="line"><a id="l00579" name="l00579"></a><span class="lineno">  579</span>  --m_uiFirstElement;</div>
<div class="line"><a id="l00580" name="l00580"></a><span class="lineno">  580</span> </div>
<div class="line"><a id="l00581" name="l00581"></a><span class="lineno">  581</span>  T* pElement = &amp;ElementAt(0);</div>
<div class="line"><a id="l00582" name="l00582"></a><span class="lineno">  582</span> </div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno">  583</span>  <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span>  {</div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span>    <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a0b9f518ec24d03e497b61b248ead335e">xiiMemoryUtils::Construct&lt;SkipTrivialTypes&gt;</a>(pElement, 1);</div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span>  }</div>
<div class="line"><a id="l00587" name="l00587"></a><span class="lineno">  587</span>}</div>
</div>
<div class="line"><a id="l00588" name="l00588"></a><span class="lineno">  588</span> </div>
<div class="line"><a id="l00589" name="l00589"></a><span class="lineno">  589</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00590" data-start="{" data-end="}">
<div class="line"><a id="l00590" name="l00590"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a892f55e291b53a4594c9b55f042a7488">  590</a></span><span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a892f55e291b53a4594c9b55f042a7488">xiiDequeBase&lt;T, Construct&gt;::PopFront</a>(xiiUInt32 uiElements)</div>
<div class="line"><a id="l00591" name="l00591"></a><span class="lineno">  591</span>{</div>
<div class="line"><a id="l00592" name="l00592"></a><span class="lineno">  592</span>  XII_ASSERT_DEV(uiElements &lt;= GetCount(), <span class="stringliteral">&quot;Cannot remove {0} elements, the deque only contains {1} elements.&quot;</span>, uiElements, GetCount());</div>
<div class="line"><a id="l00593" name="l00593"></a><span class="lineno">  593</span> </div>
<div class="line"><a id="l00594" name="l00594"></a><span class="lineno">  594</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiElements; ++i)</div>
<div class="line"><a id="l00595" name="l00595"></a><span class="lineno">  595</span>  {</div>
<div class="line"><a id="l00596" name="l00596"></a><span class="lineno">  596</span>    <span class="keywordflow">if</span> (Construct)</div>
<div class="line"><a id="l00597" name="l00597"></a><span class="lineno">  597</span>    {</div>
<div class="line"><a id="l00598" name="l00598"></a><span class="lineno">  598</span>      <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;<span class="keyword">operator</span>[](0), 1);</div>
<div class="line"><a id="l00599" name="l00599"></a><span class="lineno">  599</span>    }</div>
<div class="line"><a id="l00600" name="l00600"></a><span class="lineno">  600</span> </div>
<div class="line"><a id="l00601" name="l00601"></a><span class="lineno">  601</span>    --m_uiCount;</div>
<div class="line"><a id="l00602" name="l00602"></a><span class="lineno">  602</span>    ++m_uiFirstElement;</div>
<div class="line"><a id="l00603" name="l00603"></a><span class="lineno">  603</span>  }</div>
<div class="line"><a id="l00604" name="l00604"></a><span class="lineno">  604</span> </div>
<div class="line"><a id="l00605" name="l00605"></a><span class="lineno">  605</span>  <span class="comment">// might trigger a memory reduction</span></div>
<div class="line"><a id="l00606" name="l00606"></a><span class="lineno">  606</span>  REDUCE_SIZE(uiElements);</div>
<div class="line"><a id="l00607" name="l00607"></a><span class="lineno">  607</span>}</div>
</div>
<div class="line"><a id="l00608" name="l00608"></a><span class="lineno">  608</span> </div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00610" data-start="{" data-end="}">
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abb1a0ff4777547ffb34b0752f32d416d">  610</a></span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#abb1a0ff4777547ffb34b0752f32d416d">xiiDequeBase&lt;T, Construct&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno">  611</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00612" name="l00612"></a><span class="lineno">  612</span>  <span class="keywordflow">return</span> m_uiCount == 0;</div>
<div class="line"><a id="l00613" name="l00613"></a><span class="lineno">  613</span>}</div>
</div>
<div class="line"><a id="l00614" name="l00614"></a><span class="lineno">  614</span> </div>
<div class="line"><a id="l00615" name="l00615"></a><span class="lineno">  615</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00616" data-start="{" data-end="}">
<div class="line"><a id="l00616" name="l00616"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">  616</a></span>XII_ALWAYS_INLINE xiiUInt32 <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">xiiDequeBase&lt;T, Construct&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00617" name="l00617"></a><span class="lineno">  617</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00618" name="l00618"></a><span class="lineno">  618</span>  <span class="keywordflow">return</span> m_uiCount;</div>
<div class="line"><a id="l00619" name="l00619"></a><span class="lineno">  619</span>}</div>
</div>
<div class="line"><a id="l00620" name="l00620"></a><span class="lineno">  620</span> </div>
<div class="line"><a id="l00621" name="l00621"></a><span class="lineno">  621</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00622" data-start="{" data-end="}">
<div class="line"><a id="l00622" name="l00622"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#af0f74902183b70e8fe471bfffcb28a97">  622</a></span>XII_ALWAYS_INLINE <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#af0f74902183b70e8fe471bfffcb28a97">xiiDequeBase&lt;T, Construct&gt;::PeekFront</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00623" name="l00623"></a><span class="lineno">  623</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00624" name="l00624"></a><span class="lineno">  624</span>  <span class="keywordflow">return</span> operator[](0);</div>
<div class="line"><a id="l00625" name="l00625"></a><span class="lineno">  625</span>}</div>
</div>
<div class="line"><a id="l00626" name="l00626"></a><span class="lineno">  626</span> </div>
<div class="line"><a id="l00627" name="l00627"></a><span class="lineno">  627</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00628" data-start="{" data-end="}">
<div class="line"><a id="l00628" name="l00628"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a7c7bee5a1fc6a021bfd839bf333b435d">  628</a></span>XII_ALWAYS_INLINE T&amp; <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#af0f74902183b70e8fe471bfffcb28a97">xiiDequeBase&lt;T, Construct&gt;::PeekFront</a>()</div>
<div class="line"><a id="l00629" name="l00629"></a><span class="lineno">  629</span>{</div>
<div class="line"><a id="l00630" name="l00630"></a><span class="lineno">  630</span>  <span class="keywordflow">return</span> operator[](0);</div>
<div class="line"><a id="l00631" name="l00631"></a><span class="lineno">  631</span>}</div>
</div>
<div class="line"><a id="l00632" name="l00632"></a><span class="lineno">  632</span> </div>
<div class="line"><a id="l00633" name="l00633"></a><span class="lineno">  633</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00634" data-start="{" data-end="}">
<div class="line"><a id="l00634" name="l00634"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a8b20a75bcb2091ef5c434c25b049515d">  634</a></span>XII_ALWAYS_INLINE <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a8b20a75bcb2091ef5c434c25b049515d">xiiDequeBase&lt;T, Construct&gt;::PeekBack</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00635" name="l00635"></a><span class="lineno">  635</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00636" name="l00636"></a><span class="lineno">  636</span>  <span class="keywordflow">return</span> operator[](m_uiCount - 1);</div>
<div class="line"><a id="l00637" name="l00637"></a><span class="lineno">  637</span>}</div>
</div>
<div class="line"><a id="l00638" name="l00638"></a><span class="lineno">  638</span> </div>
<div class="line"><a id="l00639" name="l00639"></a><span class="lineno">  639</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00640" data-start="{" data-end="}">
<div class="line"><a id="l00640" name="l00640"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a1c0ce8012988ade695c8817edc042c0c">  640</a></span>XII_ALWAYS_INLINE T&amp; <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a8b20a75bcb2091ef5c434c25b049515d">xiiDequeBase&lt;T, Construct&gt;::PeekBack</a>()</div>
<div class="line"><a id="l00641" name="l00641"></a><span class="lineno">  641</span>{</div>
<div class="line"><a id="l00642" name="l00642"></a><span class="lineno">  642</span>  <span class="keywordflow">return</span> operator[](m_uiCount - 1);</div>
<div class="line"><a id="l00643" name="l00643"></a><span class="lineno">  643</span>}</div>
</div>
<div class="line"><a id="l00644" name="l00644"></a><span class="lineno">  644</span> </div>
<div class="line"><a id="l00645" name="l00645"></a><span class="lineno">  645</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00646" data-start="{" data-end="}">
<div class="line"><a id="l00646" name="l00646"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0a228b9beca6b5a98e04f25a1ff38706">  646</a></span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a0a228b9beca6b5a98e04f25a1ff38706">xiiDequeBase&lt;T, Construct&gt;::Contains</a>(<span class="keyword">const</span> T&amp; value)<span class="keyword"> const</span></div>
<div class="line"><a id="l00647" name="l00647"></a><span class="lineno">  647</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00648" name="l00648"></a><span class="lineno">  648</span>  <span class="keywordflow">return</span> IndexOf(value) != xiiInvalidIndex;</div>
<div class="line"><a id="l00649" name="l00649"></a><span class="lineno">  649</span>}</div>
</div>
<div class="line"><a id="l00650" name="l00650"></a><span class="lineno">  650</span> </div>
<div class="line"><a id="l00651" name="l00651"></a><span class="lineno">  651</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00652" data-start="{" data-end="}">
<div class="line"><a id="l00652" name="l00652"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a118d956f2118ab6025430d9d6d1299f7">  652</a></span>xiiUInt32 <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a118d956f2118ab6025430d9d6d1299f7">xiiDequeBase&lt;T, Construct&gt;::IndexOf</a>(<span class="keyword">const</span> T&amp; value, xiiUInt32 uiStartIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00653" name="l00653"></a><span class="lineno">  653</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00654" name="l00654"></a><span class="lineno">  654</span>  <span class="keywordflow">for</span> (xiiUInt32 i = uiStartIndex; i &lt; m_uiCount; ++i)</div>
<div class="line"><a id="l00655" name="l00655"></a><span class="lineno">  655</span>  {</div>
<div class="line"><a id="l00656" name="l00656"></a><span class="lineno">  656</span>    <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a82f92064b280ab0015bd5a88c42618bc">xiiMemoryUtils::IsEqual</a>(&amp;<span class="keyword">operator</span>[](i), &amp;value))</div>
<div class="line"><a id="l00657" name="l00657"></a><span class="lineno">  657</span>      <span class="keywordflow">return</span> i;</div>
<div class="line"><a id="l00658" name="l00658"></a><span class="lineno">  658</span>  }</div>
<div class="line"><a id="l00659" name="l00659"></a><span class="lineno">  659</span> </div>
<div class="line"><a id="l00660" name="l00660"></a><span class="lineno">  660</span>  <span class="keywordflow">return</span> xiiInvalidIndex;</div>
<div class="line"><a id="l00661" name="l00661"></a><span class="lineno">  661</span>}</div>
</div>
<div class="line"><a id="l00662" name="l00662"></a><span class="lineno">  662</span> </div>
<div class="line"><a id="l00663" name="l00663"></a><span class="lineno">  663</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00664" data-start="{" data-end="}">
<div class="line"><a id="l00664" name="l00664"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a2420fecfa1148966e1f68194438a0bdd">  664</a></span>xiiUInt32 <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a2420fecfa1148966e1f68194438a0bdd">xiiDequeBase&lt;T, Construct&gt;::LastIndexOf</a>(<span class="keyword">const</span> T&amp; value, xiiUInt32 uiStartIndex)<span class="keyword"> const</span></div>
<div class="line"><a id="l00665" name="l00665"></a><span class="lineno">  665</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00666" name="l00666"></a><span class="lineno">  666</span>  <span class="keywordflow">for</span> (xiiUInt32 i = <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a>(uiStartIndex, m_uiCount); i-- &gt; 0;)</div>
<div class="line"><a id="l00667" name="l00667"></a><span class="lineno">  667</span>  {</div>
<div class="line"><a id="l00668" name="l00668"></a><span class="lineno">  668</span>    <span class="keywordflow">if</span> (<a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a82f92064b280ab0015bd5a88c42618bc">xiiMemoryUtils::IsEqual</a>(&amp;<span class="keyword">operator</span>[](i), &amp;value))</div>
<div class="line"><a id="l00669" name="l00669"></a><span class="lineno">  669</span>      <span class="keywordflow">return</span> i;</div>
<div class="line"><a id="l00670" name="l00670"></a><span class="lineno">  670</span>  }</div>
<div class="line"><a id="l00671" name="l00671"></a><span class="lineno">  671</span>  <span class="keywordflow">return</span> xiiInvalidIndex;</div>
<div class="line"><a id="l00672" name="l00672"></a><span class="lineno">  672</span>}</div>
</div>
<div class="line"><a id="l00673" name="l00673"></a><span class="lineno">  673</span> </div>
<div class="line"><a id="l00674" name="l00674"></a><span class="lineno">  674</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00675" data-start="{" data-end="}">
<div class="line"><a id="l00675" name="l00675"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a0bec12007290a083e91d69f1837f2ab6">  675</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a0bec12007290a083e91d69f1837f2ab6">xiiDequeBase&lt;T, Construct&gt;::RemoveAtAndSwap</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a id="l00676" name="l00676"></a><span class="lineno">  676</span>{</div>
<div class="line"><a id="l00677" name="l00677"></a><span class="lineno">  677</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00678" name="l00678"></a><span class="lineno">  678</span> </div>
<div class="line"><a id="l00679" name="l00679"></a><span class="lineno">  679</span>  XII_ASSERT_DEV(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Cannot remove element {0}, the deque only contains {1} elements.&quot;</span>, uiIndex, m_uiCount);</div>
<div class="line"><a id="l00680" name="l00680"></a><span class="lineno">  680</span> </div>
<div class="line"><a id="l00681" name="l00681"></a><span class="lineno">  681</span>  <span class="keywordflow">if</span> (uiIndex + 1 &lt; m_uiCount) <span class="comment">// do not copy over the same element, if uiIndex is actually the last element</span></div>
<div class="line"><a id="l00682" name="l00682"></a><span class="lineno">  682</span>    operator[](uiIndex) = PeekBack();</div>
<div class="line"><a id="l00683" name="l00683"></a><span class="lineno">  683</span> </div>
<div class="line"><a id="l00684" name="l00684"></a><span class="lineno">  684</span>  PopBack();</div>
<div class="line"><a id="l00685" name="l00685"></a><span class="lineno">  685</span>}</div>
</div>
<div class="line"><a id="l00686" name="l00686"></a><span class="lineno">  686</span> </div>
<div class="line"><a id="l00687" name="l00687"></a><span class="lineno">  687</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00688" name="l00688"></a><span class="lineno">  688</span>XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::MoveIndexChunksLeft</a>(xiiUInt32 uiChunkDiff)</div>
<div class="line"><a id="l00689" name="l00689"></a><span class="lineno">  689</span>{</div>
<div class="line"><a id="l00690" name="l00690"></a><span class="lineno">  690</span>  <span class="keyword">const</span> xiiUInt32 uiCurFirstChunk   = GetFirstUsedChunk();</div>
<div class="line"><a id="l00691" name="l00691"></a><span class="lineno">  691</span>  <span class="keyword">const</span> xiiUInt32 uiRemainingChunks = m_uiChunks - uiCurFirstChunk;</div>
<div class="line"><a id="l00692" name="l00692"></a><span class="lineno">  692</span>  <span class="keyword">const</span> xiiUInt32 uiNewFirstChunk   = uiCurFirstChunk - uiChunkDiff;</div>
<div class="line"><a id="l00693" name="l00693"></a><span class="lineno">  693</span> </div>
<div class="line"><a id="l00694" name="l00694"></a><span class="lineno">  694</span>  <span class="comment">// ripple the chunks from the back to the front (in place)</span></div>
<div class="line"><a id="l00695" name="l00695"></a><span class="lineno">  695</span>  <span class="keywordflow">for</span> (xiiUInt32 front = 0; front &lt; uiRemainingChunks; ++front)</div>
<div class="line"><a id="l00696" name="l00696"></a><span class="lineno">  696</span>    <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(m_pChunks[uiNewFirstChunk + front], m_pChunks[front + uiCurFirstChunk]);</div>
<div class="line"><a id="l00697" name="l00697"></a><span class="lineno">  697</span> </div>
<div class="line"><a id="l00698" name="l00698"></a><span class="lineno">  698</span>  <span class="comment">// just ensures that the following subtraction is possible</span></div>
<div class="line"><a id="l00699" name="l00699"></a><span class="lineno">  699</span>  XII_ASSERT_DEBUG(m_uiFirstElement &gt; uiChunkDiff * CHUNK_SIZE(T), <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a id="l00700" name="l00700"></a><span class="lineno">  700</span> </div>
<div class="line"><a id="l00701" name="l00701"></a><span class="lineno">  701</span>  <span class="comment">// adjust which element is the first by how much the index array has been moved</span></div>
<div class="line"><a id="l00702" name="l00702"></a><span class="lineno">  702</span>  m_uiFirstElement -= uiChunkDiff * CHUNK_SIZE(T);</div>
<div class="line"><a id="l00703" name="l00703"></a><span class="lineno">  703</span>}</div>
<div class="line"><a id="l00704" name="l00704"></a><span class="lineno">  704</span> </div>
<div class="line"><a id="l00705" name="l00705"></a><span class="lineno">  705</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00706" name="l00706"></a><span class="lineno">  706</span>XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::MoveIndexChunksRight</a>(xiiUInt32 uiChunkDiff)</div>
<div class="line"><a id="l00707" name="l00707"></a><span class="lineno">  707</span>{</div>
<div class="line"><a id="l00708" name="l00708"></a><span class="lineno">  708</span>  <span class="keyword">const</span> xiiUInt32 uiCurFirstChunk = GetFirstUsedChunk();</div>
<div class="line"><a id="l00709" name="l00709"></a><span class="lineno">  709</span>  <span class="keyword">const</span> xiiUInt32 uiLastChunk     = (m_uiCount == 0) ? (m_uiFirstElement / CHUNK_SIZE(T)) : ((m_uiFirstElement + m_uiCount - 1) / CHUNK_SIZE(T));</div>
<div class="line"><a id="l00710" name="l00710"></a><span class="lineno">  710</span>  <span class="keyword">const</span> xiiUInt32 uiCopyChunks    = (uiLastChunk - uiCurFirstChunk) + 1;</div>
<div class="line"><a id="l00711" name="l00711"></a><span class="lineno">  711</span> </div>
<div class="line"><a id="l00712" name="l00712"></a><span class="lineno">  712</span>  <span class="comment">// ripple the chunks from the front to the back (in place)</span></div>
<div class="line"><a id="l00713" name="l00713"></a><span class="lineno">  713</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiCopyChunks; ++i)</div>
<div class="line"><a id="l00714" name="l00714"></a><span class="lineno">  714</span>    <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(m_pChunks[uiLastChunk - i], m_pChunks[uiLastChunk + uiChunkDiff - i]);</div>
<div class="line"><a id="l00715" name="l00715"></a><span class="lineno">  715</span> </div>
<div class="line"><a id="l00716" name="l00716"></a><span class="lineno">  716</span>  <span class="comment">// adjust which element is the first by how much the index array has been moved</span></div>
<div class="line"><a id="l00717" name="l00717"></a><span class="lineno">  717</span>  m_uiFirstElement += uiChunkDiff * CHUNK_SIZE(T);</div>
<div class="line"><a id="l00718" name="l00718"></a><span class="lineno">  718</span>}</div>
<div class="line"><a id="l00719" name="l00719"></a><span class="lineno">  719</span> </div>
<div class="line"><a id="l00720" name="l00720"></a><span class="lineno">  720</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00721" name="l00721"></a><span class="lineno">  721</span>XII_ALWAYS_INLINE xiiUInt32 <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetFirstUsedChunk</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00722" name="l00722"></a><span class="lineno">  722</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00723" name="l00723"></a><span class="lineno">  723</span>  <span class="keywordflow">return</span> m_uiFirstElement / CHUNK_SIZE(T);</div>
<div class="line"><a id="l00724" name="l00724"></a><span class="lineno">  724</span>}</div>
<div class="line"><a id="l00725" name="l00725"></a><span class="lineno">  725</span> </div>
<div class="line"><a id="l00726" name="l00726"></a><span class="lineno">  726</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00727" name="l00727"></a><span class="lineno">  727</span>XII_FORCE_INLINE xiiUInt32 <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetLastUsedChunk</a>(xiiUInt32 uiAtSize)<span class="keyword"> const</span></div>
<div class="line"><a id="l00728" name="l00728"></a><span class="lineno">  728</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00729" name="l00729"></a><span class="lineno">  729</span>  <span class="keywordflow">if</span> (uiAtSize == 0)</div>
<div class="line"><a id="l00730" name="l00730"></a><span class="lineno">  730</span>    <span class="keywordflow">return</span> GetFirstUsedChunk();</div>
<div class="line"><a id="l00731" name="l00731"></a><span class="lineno">  731</span> </div>
<div class="line"><a id="l00732" name="l00732"></a><span class="lineno">  732</span>  <span class="keywordflow">return</span> (m_uiFirstElement + uiAtSize - 1) / CHUNK_SIZE(T);</div>
<div class="line"><a id="l00733" name="l00733"></a><span class="lineno">  733</span>}</div>
<div class="line"><a id="l00734" name="l00734"></a><span class="lineno">  734</span> </div>
<div class="line"><a id="l00735" name="l00735"></a><span class="lineno">  735</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00736" name="l00736"></a><span class="lineno">  736</span>XII_ALWAYS_INLINE xiiUInt32 <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetLastUsedChunk</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00737" name="l00737"></a><span class="lineno">  737</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00738" name="l00738"></a><span class="lineno">  738</span>  <span class="keywordflow">return</span> GetLastUsedChunk(m_uiCount);</div>
<div class="line"><a id="l00739" name="l00739"></a><span class="lineno">  739</span>}</div>
<div class="line"><a id="l00740" name="l00740"></a><span class="lineno">  740</span> </div>
<div class="line"><a id="l00741" name="l00741"></a><span class="lineno">  741</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00742" name="l00742"></a><span class="lineno">  742</span>XII_FORCE_INLINE xiiUInt32 <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetRequiredChunks</a>(xiiUInt32 uiAtSize)<span class="keyword"> const</span></div>
<div class="line"><a id="l00743" name="l00743"></a><span class="lineno">  743</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00744" name="l00744"></a><span class="lineno">  744</span>  <span class="keywordflow">if</span> (uiAtSize == 0)</div>
<div class="line"><a id="l00745" name="l00745"></a><span class="lineno">  745</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00746" name="l00746"></a><span class="lineno">  746</span> </div>
<div class="line"><a id="l00747" name="l00747"></a><span class="lineno">  747</span>  <span class="keywordflow">return</span> GetLastUsedChunk(uiAtSize) - GetFirstUsedChunk() + 1;</div>
<div class="line"><a id="l00748" name="l00748"></a><span class="lineno">  748</span>}</div>
<div class="line"><a id="l00749" name="l00749"></a><span class="lineno">  749</span> </div>
<div class="line"><a id="l00750" name="l00750"></a><span class="lineno">  750</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00751" name="l00751"></a><span class="lineno">  751</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::DeallocateUnusedChunks</a>(xiiUInt32 uiMaxChunks)</div>
<div class="line"><a id="l00752" name="l00752"></a><span class="lineno">  752</span>{</div>
<div class="line"><a id="l00753" name="l00753"></a><span class="lineno">  753</span>  <span class="keywordflow">if</span> (m_uiAllocatedChunks &lt;= uiMaxChunks)</div>
<div class="line"><a id="l00754" name="l00754"></a><span class="lineno">  754</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00755" name="l00755"></a><span class="lineno">  755</span> </div>
<div class="line"><a id="l00756" name="l00756"></a><span class="lineno">  756</span>  <span class="comment">// check all unused chunks at the end, deallocate all that are allocated</span></div>
<div class="line"><a id="l00757" name="l00757"></a><span class="lineno">  757</span>  <span class="keywordflow">for</span> (xiiUInt32 i = GetLastUsedChunk() + 1; i &lt; m_uiChunks; ++i)</div>
<div class="line"><a id="l00758" name="l00758"></a><span class="lineno">  758</span>  {</div>
<div class="line"><a id="l00759" name="l00759"></a><span class="lineno">  759</span>    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a id="l00760" name="l00760"></a><span class="lineno">  760</span>    {</div>
<div class="line"><a id="l00761" name="l00761"></a><span class="lineno">  761</span>      --m_uiAllocatedChunks;</div>
<div class="line"><a id="l00762" name="l00762"></a><span class="lineno">  762</span>      XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks[i]);</div>
<div class="line"><a id="l00763" name="l00763"></a><span class="lineno">  763</span> </div>
<div class="line"><a id="l00764" name="l00764"></a><span class="lineno">  764</span>      <span class="keywordflow">if</span> (m_uiAllocatedChunks &lt;= uiMaxChunks)</div>
<div class="line"><a id="l00765" name="l00765"></a><span class="lineno">  765</span>        <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00766" name="l00766"></a><span class="lineno">  766</span>    }</div>
<div class="line"><a id="l00767" name="l00767"></a><span class="lineno">  767</span>  }</div>
<div class="line"><a id="l00768" name="l00768"></a><span class="lineno">  768</span> </div>
<div class="line"><a id="l00769" name="l00769"></a><span class="lineno">  769</span>  <span class="comment">// check all unused chunks at the front, deallocate all that are allocated</span></div>
<div class="line"><a id="l00770" name="l00770"></a><span class="lineno">  770</span>  <span class="keyword">const</span> xiiUInt32 uiFirstChunk = GetFirstUsedChunk();</div>
<div class="line"><a id="l00771" name="l00771"></a><span class="lineno">  771</span> </div>
<div class="line"><a id="l00772" name="l00772"></a><span class="lineno">  772</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiFirstChunk; ++i)</div>
<div class="line"><a id="l00773" name="l00773"></a><span class="lineno">  773</span>  {</div>
<div class="line"><a id="l00774" name="l00774"></a><span class="lineno">  774</span>    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a id="l00775" name="l00775"></a><span class="lineno">  775</span>    {</div>
<div class="line"><a id="l00776" name="l00776"></a><span class="lineno">  776</span>      --m_uiAllocatedChunks;</div>
<div class="line"><a id="l00777" name="l00777"></a><span class="lineno">  777</span>      XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks[i]);</div>
<div class="line"><a id="l00778" name="l00778"></a><span class="lineno">  778</span> </div>
<div class="line"><a id="l00779" name="l00779"></a><span class="lineno">  779</span>      <span class="keywordflow">if</span> (m_uiAllocatedChunks &lt;= uiMaxChunks)</div>
<div class="line"><a id="l00780" name="l00780"></a><span class="lineno">  780</span>        <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00781" name="l00781"></a><span class="lineno">  781</span>    }</div>
<div class="line"><a id="l00782" name="l00782"></a><span class="lineno">  782</span>  }</div>
<div class="line"><a id="l00783" name="l00783"></a><span class="lineno">  783</span>}</div>
<div class="line"><a id="l00784" name="l00784"></a><span class="lineno">  784</span> </div>
<div class="line"><a id="l00785" name="l00785"></a><span class="lineno">  785</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00786" name="l00786"></a><span class="lineno">  786</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::ResetReduceSizeCounter</a>()</div>
<div class="line"><a id="l00787" name="l00787"></a><span class="lineno">  787</span>{</div>
<div class="line"><a id="l00788" name="l00788"></a><span class="lineno">  788</span>  m_iReduceSizeTimer = CHUNK_SIZE(T) * 8; <span class="comment">// every time 8 chunks might be unused -&gt; check whether to reduce the deque&#39;s size</span></div>
<div class="line"><a id="l00789" name="l00789"></a><span class="lineno">  789</span>}</div>
<div class="line"><a id="l00790" name="l00790"></a><span class="lineno">  790</span> </div>
<div class="line"><a id="l00791" name="l00791"></a><span class="lineno">  791</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00792" name="l00792"></a><span class="lineno">  792</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::ReduceSize</a>(xiiInt32 iReduction)</div>
<div class="line"><a id="l00793" name="l00793"></a><span class="lineno">  793</span>{</div>
<div class="line"><a id="l00794" name="l00794"></a><span class="lineno">  794</span>  m_iReduceSizeTimer -= iReduction;</div>
<div class="line"><a id="l00795" name="l00795"></a><span class="lineno">  795</span> </div>
<div class="line"><a id="l00796" name="l00796"></a><span class="lineno">  796</span>  <span class="comment">// only trigger the size reduction every once in a while (after enough size reduction that actually a few chunks might be unused)</span></div>
<div class="line"><a id="l00797" name="l00797"></a><span class="lineno">  797</span>  <span class="keywordflow">if</span> (m_iReduceSizeTimer &gt; 0)</div>
<div class="line"><a id="l00798" name="l00798"></a><span class="lineno">  798</span>    <span class="keywordflow">return</span>;</div>
<div class="line"><a id="l00799" name="l00799"></a><span class="lineno">  799</span> </div>
<div class="line"><a id="l00800" name="l00800"></a><span class="lineno">  800</span>  ResetReduceSizeCounter();</div>
<div class="line"><a id="l00801" name="l00801"></a><span class="lineno">  801</span> </div>
<div class="line"><a id="l00802" name="l00802"></a><span class="lineno">  802</span>  <span class="comment">// we keep this amount of chunks</span></div>
<div class="line"><a id="l00803" name="l00803"></a><span class="lineno">  803</span>  <span class="comment">// m_uiMaxCount will be adjusted over time</span></div>
<div class="line"><a id="l00804" name="l00804"></a><span class="lineno">  804</span>  <span class="comment">// if the deque is shrunk and operates in this state long enough, m_uiMaxCount will be reduced more and more</span></div>
<div class="line"><a id="l00805" name="l00805"></a><span class="lineno">  805</span>  <span class="keyword">const</span> xiiUInt32 uiMaxChunks = (m_uiMaxCount / CHUNK_SIZE(T)) + 3; <span class="comment">// +1 because of rounding, +2 spare chunks</span></div>
<div class="line"><a id="l00806" name="l00806"></a><span class="lineno">  806</span> </div>
<div class="line"><a id="l00807" name="l00807"></a><span class="lineno">  807</span>  XII_ASSERT_DEBUG(uiMaxChunks &gt;= GetRequiredChunks(m_uiCount), <span class="stringliteral">&quot;Implementation Error.&quot;</span>);</div>
<div class="line"><a id="l00808" name="l00808"></a><span class="lineno">  808</span> </div>
<div class="line"><a id="l00809" name="l00809"></a><span class="lineno">  809</span>  DeallocateUnusedChunks(uiMaxChunks);</div>
<div class="line"><a id="l00810" name="l00810"></a><span class="lineno">  810</span> </div>
<div class="line"><a id="l00811" name="l00811"></a><span class="lineno">  811</span>  <span class="comment">// lerp between the current MaxCount and the actually active number of elements</span></div>
<div class="line"><a id="l00812" name="l00812"></a><span class="lineno">  812</span>  <span class="comment">// m_uiMaxCount is never smaller than m_uiCount, but m_uiCount might be smaller</span></div>
<div class="line"><a id="l00813" name="l00813"></a><span class="lineno">  813</span>  <span class="comment">// thus m_uiMaxCount might be reduced over time</span></div>
<div class="line"><a id="l00814" name="l00814"></a><span class="lineno">  814</span>  m_uiMaxCount = <a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(m_uiCount, (m_uiMaxCount / 2) + (m_uiCount / 2));</div>
<div class="line"><a id="l00815" name="l00815"></a><span class="lineno">  815</span> </div>
<div class="line"><a id="l00816" name="l00816"></a><span class="lineno">  816</span>  <span class="comment">// Should we really adjust the size of the index array here?</span></div>
<div class="line"><a id="l00817" name="l00817"></a><span class="lineno">  817</span>  CompactIndexArray(uiMaxChunks);</div>
<div class="line"><a id="l00818" name="l00818"></a><span class="lineno">  818</span>}</div>
<div class="line"><a id="l00819" name="l00819"></a><span class="lineno">  819</span> </div>
<div class="line"><a id="l00820" name="l00820"></a><span class="lineno">  820</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00821" name="l00821"></a><span class="lineno">  821</span>XII_ALWAYS_INLINE xiiUInt32 <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetCurMaxCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00822" name="l00822"></a><span class="lineno">  822</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00823" name="l00823"></a><span class="lineno">  823</span>  <span class="keywordflow">return</span> m_uiChunks * CHUNK_SIZE(T) - m_uiFirstElement;</div>
<div class="line"><a id="l00824" name="l00824"></a><span class="lineno">  824</span>}</div>
<div class="line"><a id="l00825" name="l00825"></a><span class="lineno">  825</span> </div>
<div class="line"><a id="l00826" name="l00826"></a><span class="lineno">  826</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00827" name="l00827"></a><span class="lineno">  827</span>XII_FORCE_INLINE T* <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::GetUnusedChunk</a>()</div>
<div class="line"><a id="l00828" name="l00828"></a><span class="lineno">  828</span>{</div>
<div class="line"><a id="l00829" name="l00829"></a><span class="lineno">  829</span>  <span class="comment">// first search for an unused, but already allocated, chunk and reuse it, if possible</span></div>
<div class="line"><a id="l00830" name="l00830"></a><span class="lineno">  830</span>  <span class="keyword">const</span> xiiUInt32 uiCurFirstChunk = GetFirstUsedChunk();</div>
<div class="line"><a id="l00831" name="l00831"></a><span class="lineno">  831</span> </div>
<div class="line"><a id="l00832" name="l00832"></a><span class="lineno">  832</span>  <span class="comment">// search the unused blocks at the start</span></div>
<div class="line"><a id="l00833" name="l00833"></a><span class="lineno">  833</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiCurFirstChunk; ++i)</div>
<div class="line"><a id="l00834" name="l00834"></a><span class="lineno">  834</span>  {</div>
<div class="line"><a id="l00835" name="l00835"></a><span class="lineno">  835</span>    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a id="l00836" name="l00836"></a><span class="lineno">  836</span>    {</div>
<div class="line"><a id="l00837" name="l00837"></a><span class="lineno">  837</span>      T* pChunk    = m_pChunks[i];</div>
<div class="line"><a id="l00838" name="l00838"></a><span class="lineno">  838</span>      m_pChunks[i] = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00839" name="l00839"></a><span class="lineno">  839</span>      <span class="keywordflow">return</span> pChunk;</div>
<div class="line"><a id="l00840" name="l00840"></a><span class="lineno">  840</span>    }</div>
<div class="line"><a id="l00841" name="l00841"></a><span class="lineno">  841</span>  }</div>
<div class="line"><a id="l00842" name="l00842"></a><span class="lineno">  842</span> </div>
<div class="line"><a id="l00843" name="l00843"></a><span class="lineno">  843</span>  <span class="keyword">const</span> xiiUInt32 uiCurLastChunk = GetLastUsedChunk();</div>
<div class="line"><a id="l00844" name="l00844"></a><span class="lineno">  844</span> </div>
<div class="line"><a id="l00845" name="l00845"></a><span class="lineno">  845</span>  <span class="comment">// search the unused blocks at the end</span></div>
<div class="line"><a id="l00846" name="l00846"></a><span class="lineno">  846</span>  <span class="keywordflow">for</span> (xiiUInt32 i = m_uiChunks - 1; i &gt; uiCurLastChunk; --i)</div>
<div class="line"><a id="l00847" name="l00847"></a><span class="lineno">  847</span>  {</div>
<div class="line"><a id="l00848" name="l00848"></a><span class="lineno">  848</span>    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a id="l00849" name="l00849"></a><span class="lineno">  849</span>    {</div>
<div class="line"><a id="l00850" name="l00850"></a><span class="lineno">  850</span>      T* pChunk    = m_pChunks[i];</div>
<div class="line"><a id="l00851" name="l00851"></a><span class="lineno">  851</span>      m_pChunks[i] = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00852" name="l00852"></a><span class="lineno">  852</span>      <span class="keywordflow">return</span> pChunk;</div>
<div class="line"><a id="l00853" name="l00853"></a><span class="lineno">  853</span>    }</div>
<div class="line"><a id="l00854" name="l00854"></a><span class="lineno">  854</span>  }</div>
<div class="line"><a id="l00855" name="l00855"></a><span class="lineno">  855</span> </div>
<div class="line"><a id="l00856" name="l00856"></a><span class="lineno">  856</span>  <span class="comment">// nothing unused found, allocate a new block</span></div>
<div class="line"><a id="l00857" name="l00857"></a><span class="lineno">  857</span>  ResetReduceSizeCounter();</div>
<div class="line"><a id="l00858" name="l00858"></a><span class="lineno">  858</span>  ++m_uiAllocatedChunks;</div>
<div class="line"><a id="l00859" name="l00859"></a><span class="lineno">  859</span>  <span class="keywordflow">return</span> XII_NEW_RAW_BUFFER(m_pAllocator, T, CHUNK_SIZE(T));</div>
<div class="line"><a id="l00860" name="l00860"></a><span class="lineno">  860</span>}</div>
<div class="line"><a id="l00861" name="l00861"></a><span class="lineno">  861</span> </div>
<div class="line"><a id="l00862" name="l00862"></a><span class="lineno">  862</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00863" name="l00863"></a><span class="lineno">  863</span>T&amp; <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::ElementAt</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a id="l00864" name="l00864"></a><span class="lineno">  864</span>{</div>
<div class="line"><a id="l00865" name="l00865"></a><span class="lineno">  865</span>  XII_ASSERT_DEBUG(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a id="l00866" name="l00866"></a><span class="lineno">  866</span> </div>
<div class="line"><a id="l00867" name="l00867"></a><span class="lineno">  867</span>  <span class="keyword">const</span> xiiUInt32 uiRealIndex = m_uiFirstElement + uiIndex;</div>
<div class="line"><a id="l00868" name="l00868"></a><span class="lineno">  868</span> </div>
<div class="line"><a id="l00869" name="l00869"></a><span class="lineno">  869</span>  <span class="keyword">const</span> xiiUInt32 uiChunkIndex  = uiRealIndex / CHUNK_SIZE(T);</div>
<div class="line"><a id="l00870" name="l00870"></a><span class="lineno">  870</span>  <span class="keyword">const</span> xiiUInt32 uiChunkOffset = uiRealIndex % CHUNK_SIZE(T);</div>
<div class="line"><a id="l00871" name="l00871"></a><span class="lineno">  871</span> </div>
<div class="line"><a id="l00872" name="l00872"></a><span class="lineno">  872</span>  XII_ASSERT_DEBUG(uiChunkIndex &lt; m_uiChunks, <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a id="l00873" name="l00873"></a><span class="lineno">  873</span> </div>
<div class="line"><a id="l00874" name="l00874"></a><span class="lineno">  874</span>  <span class="keywordflow">if</span> (m_pChunks[uiChunkIndex] == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00875" name="l00875"></a><span class="lineno">  875</span>    m_pChunks[uiChunkIndex] = GetUnusedChunk();</div>
<div class="line"><a id="l00876" name="l00876"></a><span class="lineno">  876</span> </div>
<div class="line"><a id="l00877" name="l00877"></a><span class="lineno">  877</span>  <span class="keywordflow">return</span> m_pChunks[uiChunkIndex][uiChunkOffset];</div>
<div class="line"><a id="l00878" name="l00878"></a><span class="lineno">  878</span>}</div>
<div class="line"><a id="l00879" name="l00879"></a><span class="lineno">  879</span> </div>
<div class="line"><a id="l00880" name="l00880"></a><span class="lineno">  880</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00881" name="l00881"></a><span class="lineno">  881</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;::DeallocateAll</a>()</div>
<div class="line"><a id="l00882" name="l00882"></a><span class="lineno">  882</span>{</div>
<div class="line"><a id="l00883" name="l00883"></a><span class="lineno">  883</span>  Clear();</div>
<div class="line"><a id="l00884" name="l00884"></a><span class="lineno">  884</span> </div>
<div class="line"><a id="l00885" name="l00885"></a><span class="lineno">  885</span>  xiiUInt32 i = 0;</div>
<div class="line"><a id="l00886" name="l00886"></a><span class="lineno">  886</span>  <span class="keywordflow">while</span> (m_uiAllocatedChunks &gt; 0)</div>
<div class="line"><a id="l00887" name="l00887"></a><span class="lineno">  887</span>  {</div>
<div class="line"><a id="l00888" name="l00888"></a><span class="lineno">  888</span>    <span class="keywordflow">if</span> (m_pChunks[i])</div>
<div class="line"><a id="l00889" name="l00889"></a><span class="lineno">  889</span>    {</div>
<div class="line"><a id="l00890" name="l00890"></a><span class="lineno">  890</span>      --m_uiAllocatedChunks;</div>
<div class="line"><a id="l00891" name="l00891"></a><span class="lineno">  891</span>      XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks[i]);</div>
<div class="line"><a id="l00892" name="l00892"></a><span class="lineno">  892</span>    }</div>
<div class="line"><a id="l00893" name="l00893"></a><span class="lineno">  893</span> </div>
<div class="line"><a id="l00894" name="l00894"></a><span class="lineno">  894</span>    ++i;</div>
<div class="line"><a id="l00895" name="l00895"></a><span class="lineno">  895</span>  }</div>
<div class="line"><a id="l00896" name="l00896"></a><span class="lineno">  896</span> </div>
<div class="line"><a id="l00897" name="l00897"></a><span class="lineno">  897</span>  XII_DELETE_RAW_BUFFER(m_pAllocator, m_pChunks);</div>
<div class="line"><a id="l00898" name="l00898"></a><span class="lineno">  898</span> </div>
<div class="line"><a id="l00899" name="l00899"></a><span class="lineno">  899</span>  Constructor(m_pAllocator);</div>
<div class="line"><a id="l00900" name="l00900"></a><span class="lineno">  900</span>}</div>
<div class="line"><a id="l00901" name="l00901"></a><span class="lineno">  901</span> </div>
<div class="line"><a id="l00902" name="l00902"></a><span class="lineno">  902</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00903" data-start="{" data-end="}">
<div class="line"><a id="l00903" name="l00903"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a5a1050c4ac46b7d65c8c4d014248fc9b">  903</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a5a1050c4ac46b7d65c8c4d014248fc9b">xiiDequeBase&lt;T, Construct&gt;::RemoveAtAndCopy</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a id="l00904" name="l00904"></a><span class="lineno">  904</span>{</div>
<div class="line"><a id="l00905" name="l00905"></a><span class="lineno">  905</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00906" name="l00906"></a><span class="lineno">  906</span> </div>
<div class="line"><a id="l00907" name="l00907"></a><span class="lineno">  907</span>  XII_ASSERT_DEV(uiIndex &lt; m_uiCount, <span class="stringliteral">&quot;Out of bounds access. Array has {0} elements, trying to remove element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a id="l00908" name="l00908"></a><span class="lineno">  908</span> </div>
<div class="line"><a id="l00909" name="l00909"></a><span class="lineno">  909</span>  <span class="keywordflow">for</span> (xiiUInt32 i = uiIndex + 1; i &lt; m_uiCount; ++i)</div>
<div class="line"><a id="l00910" name="l00910"></a><span class="lineno">  910</span>  {</div>
<div class="line"><a id="l00911" name="l00911"></a><span class="lineno">  911</span>    <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#aebfbcf3941811757985367ac3e1cb8de">xiiMemoryUtils::CopyOverlapped</a>(&amp;<span class="keyword">operator</span>[](i - 1), &amp;<span class="keyword">operator</span>[](i), 1);</div>
<div class="line"><a id="l00912" name="l00912"></a><span class="lineno">  912</span>  }</div>
<div class="line"><a id="l00913" name="l00913"></a><span class="lineno">  913</span> </div>
<div class="line"><a id="l00914" name="l00914"></a><span class="lineno">  914</span>  PopBack();</div>
<div class="line"><a id="l00915" name="l00915"></a><span class="lineno">  915</span>}</div>
</div>
<div class="line"><a id="l00916" name="l00916"></a><span class="lineno">  916</span> </div>
<div class="line"><a id="l00917" name="l00917"></a><span class="lineno">  917</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00918" data-start="{" data-end="}">
<div class="line"><a id="l00918" name="l00918"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ad98c5e75b76c5cc23f402039fcaa169b">  918</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ad98c5e75b76c5cc23f402039fcaa169b">xiiDequeBase&lt;T, Construct&gt;::RemoveAndCopy</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a id="l00919" name="l00919"></a><span class="lineno">  919</span>{</div>
<div class="line"><a id="l00920" name="l00920"></a><span class="lineno">  920</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00921" name="l00921"></a><span class="lineno">  921</span> </div>
<div class="line"><a id="l00922" name="l00922"></a><span class="lineno">  922</span>  xiiUInt32 uiIndex = IndexOf(value);</div>
<div class="line"><a id="l00923" name="l00923"></a><span class="lineno">  923</span> </div>
<div class="line"><a id="l00924" name="l00924"></a><span class="lineno">  924</span>  <span class="keywordflow">if</span> (uiIndex == xiiInvalidIndex)</div>
<div class="line"><a id="l00925" name="l00925"></a><span class="lineno">  925</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00926" name="l00926"></a><span class="lineno">  926</span> </div>
<div class="line"><a id="l00927" name="l00927"></a><span class="lineno">  927</span>  RemoveAtAndCopy(uiIndex);</div>
<div class="line"><a id="l00928" name="l00928"></a><span class="lineno">  928</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00929" name="l00929"></a><span class="lineno">  929</span>}</div>
</div>
<div class="line"><a id="l00930" name="l00930"></a><span class="lineno">  930</span> </div>
<div class="line"><a id="l00931" name="l00931"></a><span class="lineno">  931</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00932" data-start="{" data-end="}">
<div class="line"><a id="l00932" name="l00932"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a95d444fe3af042f55d4b77e6ffac715d">  932</a></span><span class="keywordtype">bool</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a95d444fe3af042f55d4b77e6ffac715d">xiiDequeBase&lt;T, Construct&gt;::RemoveAndSwap</a>(<span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a id="l00933" name="l00933"></a><span class="lineno">  933</span>{</div>
<div class="line"><a id="l00934" name="l00934"></a><span class="lineno">  934</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00935" name="l00935"></a><span class="lineno">  935</span> </div>
<div class="line"><a id="l00936" name="l00936"></a><span class="lineno">  936</span>  xiiUInt32 uiIndex = IndexOf(value);</div>
<div class="line"><a id="l00937" name="l00937"></a><span class="lineno">  937</span> </div>
<div class="line"><a id="l00938" name="l00938"></a><span class="lineno">  938</span>  <span class="keywordflow">if</span> (uiIndex == xiiInvalidIndex)</div>
<div class="line"><a id="l00939" name="l00939"></a><span class="lineno">  939</span>    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a id="l00940" name="l00940"></a><span class="lineno">  940</span> </div>
<div class="line"><a id="l00941" name="l00941"></a><span class="lineno">  941</span>  RemoveAtAndSwap(uiIndex);</div>
<div class="line"><a id="l00942" name="l00942"></a><span class="lineno">  942</span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a id="l00943" name="l00943"></a><span class="lineno">  943</span>}</div>
</div>
<div class="line"><a id="l00944" name="l00944"></a><span class="lineno">  944</span> </div>
<div class="line"><a id="l00945" name="l00945"></a><span class="lineno">  945</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00946" data-start="{" data-end="}">
<div class="line"><a id="l00946" name="l00946"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#a5700885bbbba08b8d6bb0b6fc9346a5e">  946</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#a5700885bbbba08b8d6bb0b6fc9346a5e">xiiDequeBase&lt;T, Construct&gt;::InsertAt</a>(xiiUInt32 uiIndex, <span class="keyword">const</span> T&amp; value)</div>
<div class="line"><a id="l00947" name="l00947"></a><span class="lineno">  947</span>{</div>
<div class="line"><a id="l00948" name="l00948"></a><span class="lineno">  948</span>  XII_CHECK_AT_COMPILETIME_MSG(Construct, <span class="stringliteral">&quot;This function is not supported on Deques that do not construct their data.&quot;</span>);</div>
<div class="line"><a id="l00949" name="l00949"></a><span class="lineno">  949</span> </div>
<div class="line"><a id="l00950" name="l00950"></a><span class="lineno">  950</span>  <span class="comment">// Index 0 inserts before the first element, Index m_uiCount inserts after the last element.</span></div>
<div class="line"><a id="l00951" name="l00951"></a><span class="lineno">  951</span>  XII_ASSERT_DEV(uiIndex &lt;= m_uiCount, <span class="stringliteral">&quot;The deque has {0} elements. Cannot insert an element at index {1}.&quot;</span>, m_uiCount, uiIndex);</div>
<div class="line"><a id="l00952" name="l00952"></a><span class="lineno">  952</span> </div>
<div class="line"><a id="l00953" name="l00953"></a><span class="lineno">  953</span>  PushBack();</div>
<div class="line"><a id="l00954" name="l00954"></a><span class="lineno">  954</span> </div>
<div class="line"><a id="l00955" name="l00955"></a><span class="lineno">  955</span>  <span class="keywordflow">for</span> (xiiUInt32 i = m_uiCount - 1; i &gt; uiIndex; --i)</div>
<div class="line"><a id="l00956" name="l00956"></a><span class="lineno">  956</span>  {</div>
<div class="line"><a id="l00957" name="l00957"></a><span class="lineno">  957</span>    <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a802d7a152c551948e45e7d0e19ae1e88">xiiMemoryUtils::Copy</a>(&amp;<span class="keyword">operator</span>[](i), &amp;<span class="keyword">operator</span>[](i - 1), 1);</div>
<div class="line"><a id="l00958" name="l00958"></a><span class="lineno">  958</span>  }</div>
<div class="line"><a id="l00959" name="l00959"></a><span class="lineno">  959</span> </div>
<div class="line"><a id="l00960" name="l00960"></a><span class="lineno">  960</span>  <a class="code hl_function" href="../../d8/d9d/classxii_memory_utils.htm#a802d7a152c551948e45e7d0e19ae1e88">xiiMemoryUtils::Copy</a>(&amp;<span class="keyword">operator</span>[](uiIndex), &amp;value, 1);</div>
<div class="line"><a id="l00961" name="l00961"></a><span class="lineno">  961</span>}</div>
</div>
<div class="line"><a id="l00962" name="l00962"></a><span class="lineno">  962</span> </div>
<div class="line"><a id="l00963" name="l00963"></a><span class="lineno">  963</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l00964" name="l00964"></a><span class="lineno">  964</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Comparer&gt;</div>
<div class="foldopen" id="foldopen00965" data-start="{" data-end="}">
<div class="line"><a id="l00965" name="l00965"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ab279b2088f63823c7afe7b8ff7c2a1bb">  965</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">xiiDequeBase&lt;T, Construct&gt;::Sort</a>(<span class="keyword">const</span> Comparer&amp; comparer)</div>
<div class="line"><a id="l00966" name="l00966"></a><span class="lineno">  966</span>{</div>
<div class="line"><a id="l00967" name="l00967"></a><span class="lineno">  967</span>  <span class="keywordflow">if</span> (m_uiCount &gt; 1)</div>
<div class="line"><a id="l00968" name="l00968"></a><span class="lineno">  968</span>    <a class="code hl_function" href="../../da/d89/classxii_sorting.htm#a3e6e0255ac3dc4d93eff8b3c18aedf4c">xiiSorting::QuickSort</a>(*<span class="keyword">this</span>, comparer);</div>
<div class="line"><a id="l00969" name="l00969"></a><span class="lineno">  969</span>}</div>
</div>
<div class="line"><a id="l00970" name="l00970"></a><span class="lineno">  970</span> </div>
<div class="line"><a id="l00971" name="l00971"></a><span class="lineno">  971</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00972" data-start="{" data-end="}">
<div class="line"><a id="l00972" name="l00972"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">  972</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">xiiDequeBase&lt;T, Construct&gt;::Sort</a>()</div>
<div class="line"><a id="l00973" name="l00973"></a><span class="lineno">  973</span>{</div>
<div class="line"><a id="l00974" name="l00974"></a><span class="lineno">  974</span>  <span class="keywordflow">if</span> (m_uiCount &gt; 1)</div>
<div class="line"><a id="l00975" name="l00975"></a><span class="lineno">  975</span>    <a class="code hl_function" href="../../da/d89/classxii_sorting.htm#a3e6e0255ac3dc4d93eff8b3c18aedf4c">xiiSorting::QuickSort</a>(*<span class="keyword">this</span>, <a class="code hl_struct" href="../../d1/deb/structxii_compare_helper.htm">xiiCompareHelper&lt;T&gt;</a>());</div>
<div class="line"><a id="l00976" name="l00976"></a><span class="lineno">  976</span>}</div>
</div>
<div class="line"><a id="l00977" name="l00977"></a><span class="lineno">  977</span> </div>
<div class="line"><a id="l00978" name="l00978"></a><span class="lineno">  978</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="foldopen" id="foldopen00979" data-start="{" data-end="}">
<div class="line"><a id="l00979" name="l00979"></a><span class="lineno"><a class="line" href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">  979</a></span>xiiUInt64 <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">xiiDequeBase&lt;T, Construct&gt;::GetHeapMemoryUsage</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00980" name="l00980"></a><span class="lineno">  980</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00981" name="l00981"></a><span class="lineno">  981</span>  <span class="keywordflow">if</span> (m_pChunks == <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00982" name="l00982"></a><span class="lineno">  982</span>    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a id="l00983" name="l00983"></a><span class="lineno">  983</span> </div>
<div class="line"><a id="l00984" name="l00984"></a><span class="lineno">  984</span>  xiiUInt64 res = m_uiChunks * <span class="keyword">sizeof</span>(T*);</div>
<div class="line"><a id="l00985" name="l00985"></a><span class="lineno">  985</span> </div>
<div class="line"><a id="l00986" name="l00986"></a><span class="lineno">  986</span>  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_uiChunks; ++i)</div>
<div class="line"><a id="l00987" name="l00987"></a><span class="lineno">  987</span>  {</div>
<div class="line"><a id="l00988" name="l00988"></a><span class="lineno">  988</span>    <span class="keywordflow">if</span> (m_pChunks[i] != <span class="keyword">nullptr</span>)</div>
<div class="line"><a id="l00989" name="l00989"></a><span class="lineno">  989</span>    {</div>
<div class="line"><a id="l00990" name="l00990"></a><span class="lineno">  990</span>      res += (xiiUInt64)(CHUNK_SIZE(T)) * (xiiUInt64)<span class="keyword">sizeof</span>(T);</div>
<div class="line"><a id="l00991" name="l00991"></a><span class="lineno">  991</span>    }</div>
<div class="line"><a id="l00992" name="l00992"></a><span class="lineno">  992</span>  }</div>
<div class="line"><a id="l00993" name="l00993"></a><span class="lineno">  993</span> </div>
<div class="line"><a id="l00994" name="l00994"></a><span class="lineno">  994</span>  <span class="keywordflow">return</span> res;</div>
<div class="line"><a id="l00995" name="l00995"></a><span class="lineno">  995</span>}</div>
</div>
</div>
<div class="line"><a id="l00996" name="l00996"></a><span class="lineno">  996</span> </div>
<div class="line"><a id="l00997" name="l00997"></a><span class="lineno">  997</span><span class="preprocessor">#undef REDUCE_SIZE</span></div>
<div class="line"><a id="l00998" name="l00998"></a><span class="lineno">  998</span><span class="preprocessor">#undef RESERVE</span></div>
<div class="line"><a id="l00999" name="l00999"></a><span class="lineno">  999</span> </div>
<div class="line"><a id="l01000" name="l01000"></a><span class="lineno"> 1000</span> </div>
<div class="line"><a id="l01001" name="l01001"></a><span class="lineno"> 1001</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01002" name="l01002"></a><span class="lineno"> 1002</span><a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>() :</div>
<div class="line"><a id="l01003" name="l01003"></a><span class="lineno"> 1003</span>  <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(A::GetAllocator())</div>
<div class="line"><a id="l01004" name="l01004"></a><span class="lineno"> 1004</span>{</div>
<div class="line"><a id="l01005" name="l01005"></a><span class="lineno"> 1005</span>}</div>
<div class="line"><a id="l01006" name="l01006"></a><span class="lineno"> 1006</span> </div>
<div class="line"><a id="l01007" name="l01007"></a><span class="lineno"> 1007</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01008" name="l01008"></a><span class="lineno"> 1008</span><a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) :</div>
<div class="line"><a id="l01009" name="l01009"></a><span class="lineno"> 1009</span>  <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(pAllocator)</div>
<div class="line"><a id="l01010" name="l01010"></a><span class="lineno"> 1010</span>{</div>
<div class="line"><a id="l01011" name="l01011"></a><span class="lineno"> 1011</span>}</div>
<div class="line"><a id="l01012" name="l01012"></a><span class="lineno"> 1012</span> </div>
<div class="line"><a id="l01013" name="l01013"></a><span class="lineno"> 1013</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01014" name="l01014"></a><span class="lineno"> 1014</span><a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;</a>&amp; other) :</div>
<div class="line"><a id="l01015" name="l01015"></a><span class="lineno"> 1015</span>  <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(other, A::GetAllocator())</div>
<div class="line"><a id="l01016" name="l01016"></a><span class="lineno"> 1016</span>{</div>
<div class="line"><a id="l01017" name="l01017"></a><span class="lineno"> 1017</span>}</div>
<div class="line"><a id="l01018" name="l01018"></a><span class="lineno"> 1018</span> </div>
<div class="line"><a id="l01019" name="l01019"></a><span class="lineno"> 1019</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01020" name="l01020"></a><span class="lineno"> 1020</span><a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;</a>&amp;&amp; other) :</div>
<div class="line"><a id="l01021" name="l01021"></a><span class="lineno"> 1021</span>  <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(std::move(other), other.GetAllocator())</div>
<div class="line"><a id="l01022" name="l01022"></a><span class="lineno"> 1022</span>{</div>
<div class="line"><a id="l01023" name="l01023"></a><span class="lineno"> 1023</span>}</div>
<div class="line"><a id="l01024" name="l01024"></a><span class="lineno"> 1024</span> </div>
<div class="line"><a id="l01025" name="l01025"></a><span class="lineno"> 1025</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01026" name="l01026"></a><span class="lineno"> 1026</span><a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; other) :</div>
<div class="line"><a id="l01027" name="l01027"></a><span class="lineno"> 1027</span>  <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(other, A::GetAllocator())</div>
<div class="line"><a id="l01028" name="l01028"></a><span class="lineno"> 1028</span>{</div>
<div class="line"><a id="l01029" name="l01029"></a><span class="lineno"> 1029</span>}</div>
<div class="line"><a id="l01030" name="l01030"></a><span class="lineno"> 1030</span> </div>
<div class="line"><a id="l01031" name="l01031"></a><span class="lineno"> 1031</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01032" name="l01032"></a><span class="lineno"> 1032</span><a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::xiiDeque</a>(<a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;&amp; other) :</div>
<div class="line"><a id="l01033" name="l01033"></a><span class="lineno"> 1033</span>  <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a>&lt;T, Construct&gt;(std::move(other), other.GetAllocator())</div>
<div class="line"><a id="l01034" name="l01034"></a><span class="lineno"> 1034</span>{</div>
<div class="line"><a id="l01035" name="l01035"></a><span class="lineno"> 1035</span>}</div>
<div class="line"><a id="l01036" name="l01036"></a><span class="lineno"> 1036</span> </div>
<div class="line"><a id="l01037" name="l01037"></a><span class="lineno"> 1037</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01038" name="l01038"></a><span class="lineno"> 1038</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l01039" name="l01039"></a><span class="lineno"> 1039</span>{</div>
<div class="line"><a id="l01040" name="l01040"></a><span class="lineno"> 1040</span>  <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(rhs);</div>
<div class="line"><a id="l01041" name="l01041"></a><span class="lineno"> 1041</span>}</div>
<div class="line"><a id="l01042" name="l01042"></a><span class="lineno"> 1042</span> </div>
<div class="line"><a id="l01043" name="l01043"></a><span class="lineno"> 1043</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01044" name="l01044"></a><span class="lineno"> 1044</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::operator=</a>(<a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a id="l01045" name="l01045"></a><span class="lineno"> 1045</span>{</div>
<div class="line"><a id="l01046" name="l01046"></a><span class="lineno"> 1046</span>  <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(std::move(rhs));</div>
<div class="line"><a id="l01047" name="l01047"></a><span class="lineno"> 1047</span>}</div>
<div class="line"><a id="l01048" name="l01048"></a><span class="lineno"> 1048</span> </div>
<div class="line"><a id="l01049" name="l01049"></a><span class="lineno"> 1049</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01050" name="l01050"></a><span class="lineno"> 1050</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::operator=</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp; rhs)</div>
<div class="line"><a id="l01051" name="l01051"></a><span class="lineno"> 1051</span>{</div>
<div class="line"><a id="l01052" name="l01052"></a><span class="lineno"> 1052</span>  <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(rhs);</div>
<div class="line"><a id="l01053" name="l01053"></a><span class="lineno"> 1053</span>}</div>
<div class="line"><a id="l01054" name="l01054"></a><span class="lineno"> 1054</span> </div>
<div class="line"><a id="l01055" name="l01055"></a><span class="lineno"> 1055</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> A, <span class="keywordtype">bool</span> Construct&gt;</div>
<div class="line"><a id="l01056" name="l01056"></a><span class="lineno"> 1056</span><span class="keywordtype">void</span> <a class="code hl_class" href="../../d8/df8/classxii_deque.htm">xiiDeque&lt;T, A, Construct&gt;::operator=</a>(<a class="code hl_class" href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase&lt;T, Construct&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a id="l01057" name="l01057"></a><span class="lineno"> 1057</span>{</div>
<div class="line"><a id="l01058" name="l01058"></a><span class="lineno"> 1058</span>  <a class="code hl_function" href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase&lt;T, Construct&gt;::operator=</a>(std::move(rhs));</div>
<div class="line"><a id="l01059" name="l01059"></a><span class="lineno"> 1059</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclassxii_allocator_base_htm"><div class="ttname"><a href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> AllocatorBase.h:22</div></div>
<div class="ttc" id="aclassxii_deque_base_htm"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm">xiiDequeBase</a></div><div class="ttdoc">A double ended queue container.</div><div class="ttdef"><b>Definition</b> Deque.h:26</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a0a228b9beca6b5a98e04f25a1ff38706"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a0a228b9beca6b5a98e04f25a1ff38706">xiiDequeBase::Contains</a></div><div class="ttdeci">bool Contains(const T &amp;value) const</div><div class="ttdoc">Checks whether there is any element in the deque with the given value.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:646</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a0bec12007290a083e91d69f1837f2ab6"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a0bec12007290a083e91d69f1837f2ab6">xiiDequeBase::RemoveAtAndSwap</a></div><div class="ttdeci">void RemoveAtAndSwap(xiiUInt32 uiIndex)</div><div class="ttdoc">Removes the element at the given index and fills the gap with the last element in the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:675</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a0e649eac7f0c7a6eea9ff976fbd33122"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a0e649eac7f0c7a6eea9ff976fbd33122">xiiDequeBase::Swap</a></div><div class="ttdeci">void Swap(xiiDequeBase&lt; T, Construct &gt; &amp;other)</div><div class="ttdoc">swaps the contents of this deque with another one</div><div class="ttdef"><b>Definition</b> Deque_inl.h:263</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a118d956f2118ab6025430d9d6d1299f7"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a118d956f2118ab6025430d9d6d1299f7">xiiDequeBase::IndexOf</a></div><div class="ttdeci">xiiUInt32 IndexOf(const T &amp;value, xiiUInt32 uiStartIndex=0) const</div><div class="ttdoc">Returns the first index at which an element with the given value could be found or xiiInvalidIndex if...</div><div class="ttdef"><b>Definition</b> Deque_inl.h:652</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a127aa133501c0b9f965ed0df17818b3d"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a127aa133501c0b9f965ed0df17818b3d">xiiDequeBase::xiiDequeBase</a></div><div class="ttdeci">xiiDequeBase(xiiAllocatorBase *pAllocator)</div><div class="ttdoc">No memory is allocated during construction.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:40</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a1c714b11aa25638bf88b3173e0063808"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a1c714b11aa25638bf88b3173e0063808">xiiDequeBase::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(xiiUInt32 uiCount)</div><div class="ttdoc">\Same as SetCount(), but new elements do not get default constructed.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:394</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a1d937b7518a530c97fcad95921939872"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a1d937b7518a530c97fcad95921939872">xiiDequeBase::~xiiDequeBase</a></div><div class="ttdeci">~xiiDequeBase()</div><div class="ttdoc">Destructor.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:66</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a2420fecfa1148966e1f68194438a0bdd"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a2420fecfa1148966e1f68194438a0bdd">xiiDequeBase::LastIndexOf</a></div><div class="ttdeci">xiiUInt32 LastIndexOf(const T &amp;value, xiiUInt32 uiStartIndex=xiiInvalidIndex) const</div><div class="ttdoc">Returns the last index at which an element with the given value could be found or xiiInvalidIndex if ...</div><div class="ttdef"><b>Definition</b> Deque_inl.h:664</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a293a0a14e5b3eca228d71c75562d40bb"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a293a0a14e5b3eca228d71c75562d40bb">xiiDequeBase::operator==</a></div><div class="ttdeci">bool operator==(const xiiDequeBase&lt; T, Construct &gt; &amp;rhs) const</div><div class="ttdoc">Comparison operator.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:114</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a5700885bbbba08b8d6bb0b6fc9346a5e"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a5700885bbbba08b8d6bb0b6fc9346a5e">xiiDequeBase::InsertAt</a></div><div class="ttdeci">void InsertAt(xiiUInt32 uiIndex, const T &amp;value)</div><div class="ttdoc">Inserts value at index by shifting all following elements. Valid insert positions are [0; GetCount].</div><div class="ttdef"><b>Definition</b> Deque_inl.h:946</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a5a1050c4ac46b7d65c8c4d014248fc9b"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a5a1050c4ac46b7d65c8c4d014248fc9b">xiiDequeBase::RemoveAtAndCopy</a></div><div class="ttdeci">void RemoveAtAndCopy(xiiUInt32 uiIndex)</div><div class="ttdoc">Removes the element at index and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:903</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a617bcbef391101ddfedc8ba3bfbc38be"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a617bcbef391101ddfedc8ba3bfbc38be">xiiDequeBase::PushFront</a></div><div class="ttdeci">void PushFront()</div><div class="ttdoc">Adds one default constructed element to the front of the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:575</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a6c4f6451cce0d87574a5275236508e16"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a6c4f6451cce0d87574a5275236508e16">xiiDequeBase::ExpandAndGetRef</a></div><div class="ttdeci">T &amp; ExpandAndGetRef()</div><div class="ttdoc">Grows the deque by one element and returns a reference to the newly created element.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:482</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a816c70b7c82c13e82a7276d43105a53c"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a816c70b7c82c13e82a7276d43105a53c">xiiDequeBase::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:616</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a892f55e291b53a4594c9b55f042a7488"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a892f55e291b53a4594c9b55f042a7488">xiiDequeBase::PopFront</a></div><div class="ttdeci">void PopFront(xiiUInt32 uiElements=1)</div><div class="ttdoc">Removes the first element from the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:590</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a8b20a75bcb2091ef5c434c25b049515d"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a8b20a75bcb2091ef5c434c25b049515d">xiiDequeBase::PeekBack</a></div><div class="ttdeci">const T &amp; PeekBack() const</div><div class="ttdoc">Returns the last element.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:634</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a95d444fe3af042f55d4b77e6ffac715d"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a95d444fe3af042f55d4b77e6ffac715d">xiiDequeBase::RemoveAndSwap</a></div><div class="ttdeci">bool RemoveAndSwap(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap with the last element in the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:932</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_a9b664f33559cfbae688e74640228e3a3"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#a9b664f33559cfbae688e74640228e3a3">xiiDequeBase::Reserve</a></div><div class="ttdeci">void Reserve(xiiUInt32 uiCount)</div><div class="ttdoc">Rearranges the internal data structures such that the amount of reserved elements can be appended wit...</div><div class="ttdef"><b>Definition</b> Deque_inl.h:157</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_aa9bf6081af25b7f13a911032c6ec0c96"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#aa9bf6081af25b7f13a911032c6ec0c96">xiiDequeBase::GetContiguousRange</a></div><div class="ttdeci">xiiUInt32 GetContiguousRange(xiiUInt32 uiStartIndex) const</div><div class="ttdoc">Returns the number of elements after uiStartIndex that are stored in contiguous memory.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:441</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_aab74c7d6cbaef3323571c97cbd08b625"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#aab74c7d6cbaef3323571c97cbd08b625">xiiDequeBase::SetCount</a></div><div class="ttdeci">void SetCount(xiiUInt32 uiCount)</div><div class="ttdoc">Sets the number of active elements in the deque. All new elements are default constructed....</div><div class="ttdef"><b>Definition</b> Deque_inl.h:345</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_abb1a0ff4777547ffb34b0752f32d416d"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#abb1a0ff4777547ffb34b0752f32d416d">xiiDequeBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Checks whether no elements are active in the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:610</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_abb9f50af5a92121b3c02c831e965f1f1"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#abb9f50af5a92121b3c02c831e965f1f1">xiiDequeBase::Compact</a></div><div class="ttdeci">void Compact()</div><div class="ttdoc">This function deallocates as much memory as possible to shrink the deque to the bare minimum size tha...</div><div class="ttdef"><b>Definition</b> Deque_inl.h:245</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_abe5332bb093bdfed4202c5fdd3739a12"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#abe5332bb093bdfed4202c5fdd3739a12">xiiDequeBase::GetHeapMemoryUsage</a></div><div class="ttdeci">xiiUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:979</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ad4e9b0d6472df9371d4e6cab9e340e01"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ad4e9b0d6472df9371d4e6cab9e340e01">xiiDequeBase::PushBack</a></div><div class="ttdeci">void PushBack()</div><div class="ttdoc">Adds one default constructed element to the back of the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:498</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ad98c5e75b76c5cc23f402039fcaa169b"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ad98c5e75b76c5cc23f402039fcaa169b">xiiDequeBase::RemoveAndCopy</a></div><div class="ttdeci">bool RemoveAndCopy(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:918</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ada04e81722f420de3a7a0c043bf0278e"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ada04e81722f420de3a7a0c043bf0278e">xiiDequeBase::operator[]</a></div><div class="ttdeci">T &amp; operator[](xiiUInt32 uiIndex)</div><div class="ttdoc">Accesses the n-th element in the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:456</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ade2c9195ef003e1289f9a73883edbc01"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ade2c9195ef003e1289f9a73883edbc01">xiiDequeBase::operator=</a></div><div class="ttdeci">void operator=(const xiiDequeBase&lt; T, Construct &gt; &amp;rhs)</div><div class="ttdoc">Assignment operator.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:72</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ae66a288b3a37f2a5e236499858d662ae"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ae66a288b3a37f2a5e236499858d662ae">xiiDequeBase::PopBack</a></div><div class="ttdeci">void PopBack(xiiUInt32 uiElements=1)</div><div class="ttdoc">Removes the last element from the deque.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:534</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ae779cc2e29fe5522a439027774526114"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ae779cc2e29fe5522a439027774526114">xiiDequeBase::EnsureCount</a></div><div class="ttdeci">void EnsureCount(xiiUInt32 uiCount)</div><div class="ttdoc">Ensures the container has at least uiCount elements. Ie. calls SetCount() if the container has fewer ...</div><div class="ttdef"><b>Definition</b> Deque_inl.h:432</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_ae8b02bcdccb800fc17228ce9cfb2fb52"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#ae8b02bcdccb800fc17228ce9cfb2fb52">xiiDequeBase::Sort</a></div><div class="ttdeci">void Sort()</div><div class="ttdoc">Sort with default comparer.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:972</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_af0f74902183b70e8fe471bfffcb28a97"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#af0f74902183b70e8fe471bfffcb28a97">xiiDequeBase::PeekFront</a></div><div class="ttdeci">const T &amp; PeekFront() const</div><div class="ttdoc">Returns the first element.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:622</div></div>
<div class="ttc" id="aclassxii_deque_base_htm_afa53969988821e65d753787b0c0fc89e"><div class="ttname"><a href="../../d1/d7d/classxii_deque_base.htm#afa53969988821e65d753787b0c0fc89e">xiiDequeBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destructs all elements and sets the count to zero. Does not deallocate any data.</div><div class="ttdef"><b>Definition</b> Deque_inl.h:129</div></div>
<div class="ttc" id="aclassxii_deque_htm"><div class="ttname"><a href="../../d8/df8/classxii_deque.htm">xiiDeque</a></div><div class="ttdef"><b>Definition</b> Deque.h:267</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a0b9f518ec24d03e497b61b248ead335e"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a0b9f518ec24d03e497b61b248ead335e">xiiMemoryUtils::Construct</a></div><div class="ttdeci">static void Construct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination.</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a16883e3b910453d68ffb96562b92eed4"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a16883e3b910453d68ffb96562b92eed4">xiiMemoryUtils::MoveConstruct</a></div><div class="ttdeci">static void MoveConstruct(T *pDestination, T &amp;&amp;source)</div><div class="ttdoc">Constructs an object of type T in a raw buffer at pDestination, by using move construction from sourc...</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a6c8728654ad1b5c0c9dcbb597a93594d"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a802d7a152c551948e45e7d0e19ae1e88"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a802d7a152c551948e45e7d0e19ae1e88">xiiMemoryUtils::Copy</a></div><div class="ttdeci">static void Copy(T *pDestination, const T *pSource, size_t uiCount=1)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a82f92064b280ab0015bd5a88c42618bc"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a82f92064b280ab0015bd5a88c42618bc">xiiMemoryUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const T *a, const T *b, size_t uiCount=1)</div><div class="ttdoc">Tests if objects of type T from pSource and pDestination are equal.</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_aa46340f1eaae0121ec1bcb712ea2755f"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">xiiMemoryUtils::ZeroFill</a></div><div class="ttdeci">static void ZeroFill(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Zeros every byte in the provided memory buffer.</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_aebfbcf3941811757985367ac3e1cb8de"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#aebfbcf3941811757985367ac3e1cb8de">xiiMemoryUtils::CopyOverlapped</a></div><div class="ttdeci">static void CopyOverlapped(T *pDestination, const T *pSource, size_t uiCount=1)</div><div class="ttdoc">Copies objects of type T from pSource to pDestination.</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_aece4fdeb5f8a35b58bd979302f3e9768"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="aclassxii_sorting_htm_a3e6e0255ac3dc4d93eff8b3c18aedf4c"><div class="ttname"><a href="../../da/d89/classxii_sorting.htm#a3e6e0255ac3dc4d93eff8b3c18aedf4c">xiiSorting::QuickSort</a></div><div class="ttdeci">static void QuickSort(Container &amp;ref_container, const Comparer &amp;comparer=Comparer())</div><div class="ttdoc">Sorts the elements in container using a in-place quick sort implementation (not stable).</div><div class="ttdef"><b>Definition</b> Sorting_inl.h:3</div></div>
<div class="ttc" id="anamespacexii_math_htm_a2c660f80f0df5bb91a751d12a93cb9cb"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:26</div></div>
<div class="ttc" id="anamespacexii_math_htm_a2e7c389d4195d010ba0c207a1e981a58"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Swap(T &amp;ref_f1, T &amp;ref_f2)</div><div class="ttdoc">Swaps the values in the two variables f1 and f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:222</div></div>
<div class="ttc" id="anamespacexii_math_htm_a4d6f8bf4858245e40a706a3aabd0a59e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition</b> Math_inl.h:38</div></div>
<div class="ttc" id="astructxii_compare_helper_htm"><div class="ttname"><a href="../../d1/deb/structxii_compare_helper.htm">xiiCompareHelper</a></div><div class="ttdoc">A comparer object is used in sorting algorithms to compare to objects of the same type.</div><div class="ttdef"><b>Definition</b> Comparer.h:7</div></div>
<div class="ttc" id="astructxii_is_pod_type_htm"><div class="ttname"><a href="../../d2/dad/structxii_is_pod_type.htm">xiiIsPodType</a></div><div class="ttdoc">If there is an % operator which takes a TypeIsPod and returns a CompileTimeTrueType T is Pod....</div><div class="ttdef"><b>Definition</b> TypeTraits.h:41</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_7f59ab18dbc50035dfc0ee7070867286.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_acc055bf9d45372e5f916366fab93514.htm">Implementation</a></li><li class="navelem"><b>Deque_inl.h</b></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:02:08 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: /home/runner/work/XII/XII/Source/Engine/Foundation/Math/Implementation/Angle_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('dd/d0f/_angle__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">Angle_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="keyword">inline</span> <span class="keyword">constexpr</span> Type <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::Pi</a>()</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span>{</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span>  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>Type<span class="keyword">&gt;</span>(3.1415926535897932384626433832795);</div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span>}</div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span> </div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00010" data-start="{" data-end="}">
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a7da06216380b9e6d3e6f04570afb9a2c">   10</a></span><span class="keyword">constexpr</span> XII_ALWAYS_INLINE Type <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a7da06216380b9e6d3e6f04570afb9a2c">xiiAngleTemplate&lt;Type&gt;::DegToRadMultiplier</a>()</div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>{</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span>  <span class="keywordflow">return</span> Pi() / (Type)180;</div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>}</div>
</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span> </div>
<div class="foldopen" id="foldopen00015" data-start="{" data-end="}">
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a7da06216380b9e6d3e6f04570afb9a2c">   15</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00016" data-start="{" data-end="}">
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#aad83b7c65f38f601d03f3d0c7fbcefc5">   16</a></span><span class="keyword">constexpr</span> XII_ALWAYS_INLINE Type <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#aad83b7c65f38f601d03f3d0c7fbcefc5">xiiAngleTemplate&lt;Type&gt;::RadToDegMultiplier</a>()</div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="foldopen" id="foldopen00018" data-start="{" data-end="}">
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#aad83b7c65f38f601d03f3d0c7fbcefc5">   18</a></span>  <span class="keywordflow">return</span> ((Type)180) / Pi();</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>}</div>
</div>
</div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span> </div>
<div class="foldopen" id="foldopen00021" data-start="{" data-end="}">
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a125b34adf00dc677204d2a7a5904b2ab">   21</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00022" data-start="{" data-end="}">
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a125b34adf00dc677204d2a7a5904b2ab">   22</a></span><span class="keyword">constexpr</span> Type <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a125b34adf00dc677204d2a7a5904b2ab">xiiAngleTemplate&lt;Type&gt;::DegToRad</a>(Type f)</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>{</div>
<div class="foldopen" id="foldopen00024" data-start="{" data-end="}">
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a56b7439a2dd2efc94c847a302a32b820">   24</a></span>  <span class="keywordflow">return</span> f * DegToRadMultiplier();</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>}</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00028" data-start="{" data-end="}">
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a56b7439a2dd2efc94c847a302a32b820">   28</a></span><span class="keyword">constexpr</span> Type <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a56b7439a2dd2efc94c847a302a32b820">xiiAngleTemplate&lt;Type&gt;::RadToDeg</a>(Type f)</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>{</div>
<div class="foldopen" id="foldopen00030" data-start="{" data-end="}">
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#ad54cb856684d34910eaa24e78e90c71f">   30</a></span>  <span class="keywordflow">return</span> f * RadToDegMultiplier();</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>}</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="foldopen" id="foldopen00033" data-start="{" data-end="}">
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a9c40ebf5138d287759bf494db230a5b2">   33</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00034" data-start="{" data-end="}">
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#ad54cb856684d34910eaa24e78e90c71f">   34</a></span><span class="keyword">constexpr</span> <span class="keyword">inline</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#ad54cb856684d34910eaa24e78e90c71f">xiiAngleTemplate&lt;Type&gt;::MakeFromDegree</a>(Type fDegree)</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>{</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a>(DegToRad(fDegree));</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>}</div>
</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00040" data-start="{" data-end="}">
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a9c40ebf5138d287759bf494db230a5b2">   40</a></span><span class="keyword">constexpr</span> XII_ALWAYS_INLINE <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a9c40ebf5138d287759bf494db230a5b2">xiiAngleTemplate&lt;Type&gt;::MakeFromRadian</a>(Type fRadian)</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>{</div>
<div class="foldopen" id="foldopen00042" data-start="{" data-end="}">
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a0981cd78050c0ee3b82197d6572d56be">   42</a></span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a>(fRadian);</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>}</div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="foldopen" id="foldopen00045" data-start="{" data-end="}">
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">   45</a></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00046" data-start="{" data-end="}">
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a0981cd78050c0ee3b82197d6572d56be">   46</a></span><span class="keyword">constexpr</span> <span class="keyword">inline</span> Type <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a0981cd78050c0ee3b82197d6572d56be">xiiAngleTemplate&lt;Type&gt;::GetDegree</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span>  <span class="keywordflow">return</span> RadToDeg(m_fRadian);</div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>}</div>
</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00052" data-start="{" data-end="}">
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">   52</a></span><span class="keyword">constexpr</span> XII_ALWAYS_INLINE Type <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">xiiAngleTemplate&lt;Type&gt;::GetRadian</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>  <span class="keywordflow">return</span> m_fRadian;</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>}</div>
</div>
</div>
<div class="foldopen" id="foldopen00056" data-start="{" data-end="}">
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a61b9cffe96c9937c13122e97f23417f9">   56</a></span> </div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00058" data-start="{" data-end="}">
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a7e9e308308a55e19b03dbf5a3fed8c66">   58</a></span><span class="keywordtype">void</span> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a7e9e308308a55e19b03dbf5a3fed8c66">xiiAngleTemplate&lt;Type&gt;::NormalizeRange</a>()</div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>{</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>  <span class="keyword">const</span> Type fTwoPi    = <span class="keyword">static_cast&lt;</span>Type<span class="keyword">&gt;</span>(2.0f) * <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::Pi</a>();</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  <span class="keyword">const</span> Type fTwoPiTen = <span class="keyword">static_cast&lt;</span>Type<span class="keyword">&gt;</span>(10.0f) * <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::Pi</a>();</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span> </div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span>  <span class="keywordflow">if</span> <span class="keyword">constexpr</span> (std::is_same_v&lt;Type, float&gt;)</div>
<div class="foldopen" id="foldopen00064" data-start="{" data-end="}">
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a2b5342a182d1fdedc3db8a49cd4a2e21">   64</a></span>  {</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>    m_fRadian = fmodf(m_fRadian, fTwoPi);</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  }</div>
<div class="foldopen" id="foldopen00067" data-start="{" data-end="}">
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#ad395aa30c07355b4af56067d542d6514">   67</a></span>  <span class="keywordflow">else</span></div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span>  {</div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>    m_fRadian = fmod(m_fRadian, fTwoPi);</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>  }</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  <span class="keywordflow">while</span> (m_fRadian &gt;= fTwoPi)</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>  {</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span>    m_fRadian -= fTwoPi;</div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  }</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>  <span class="keywordflow">while</span> (m_fRadian &lt; <span class="keyword">static_cast&lt;</span>Type<span class="keyword">&gt;</span>(0.0))</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  {</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>    m_fRadian += fTwoPi;</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span>  }</div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>}</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00084" data-start="{" data-end="}">
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a61b9cffe96c9937c13122e97f23417f9">   84</a></span><span class="keyword">inline</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a61b9cffe96c9937c13122e97f23417f9">xiiAngleTemplate&lt;Type&gt;::GetNormalizedRange</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span>  <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> out(m_fRadian);</div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  out.<a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a7e9e308308a55e19b03dbf5a3fed8c66">NormalizeRange</a>();</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>  <span class="keywordflow">return</span> out;</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>}</div>
</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span> </div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00092" data-start="{" data-end="}">
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a2b5342a182d1fdedc3db8a49cd4a2e21">   92</a></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a2b5342a182d1fdedc3db8a49cd4a2e21">xiiAngleTemplate&lt;Type&gt;::IsEqualSimple</a>(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> rhs, <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> epsilon)<span class="keyword"> const</span></div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> diff = AngleBetween(*<span class="keyword">this</span>, rhs);</div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  <span class="keywordflow">return</span> ((diff.m_fRadian &gt;= -epsilon.m_fRadian) &amp;&amp; (diff.m_fRadian &lt;= epsilon.m_fRadian));</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>}</div>
</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="foldopen" id="foldopen00100" data-start="{" data-end="}">
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#ad395aa30c07355b4af56067d542d6514">  100</a></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#ad395aa30c07355b4af56067d542d6514">xiiAngleTemplate&lt;Type&gt;::IsEqualNormalized</a>(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> rhs, <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> epsilon)<span class="keyword"> const</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  <span class="comment">// Equality between normalized angles</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> aNorm = GetNormalizedRange();</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span>  <span class="keyword">const</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> bNorm = rhs.<a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a61b9cffe96c9937c13122e97f23417f9">GetNormalizedRange</a>();</div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span> </div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>  <span class="keywordflow">return</span> aNorm.<a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a2b5342a182d1fdedc3db8a49cd4a2e21">IsEqualSimple</a>(bNorm, epsilon);</div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span>}</div>
</div>
</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span> </div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span><span class="keyword">constexpr</span> XII_ALWAYS_INLINE <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::operator-</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a>(-m_fRadian);</div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span>}</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span> </div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::operator+=</a>(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> r)</div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>{</div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span>  m_fRadian += r.m_fRadian;</div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span>}</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span> </div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::operator-=</a>(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> r)</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>{</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span>  m_fRadian -= r.m_fRadian;</div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span>}</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span> </div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span><span class="keyword">constexpr</span> <span class="keyword">inline</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::operator+</a>(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> r)<span class="keyword"> const</span></div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a>(m_fRadian + r.m_fRadian);</div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>}</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span> </div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="keyword">constexpr</span> <span class="keyword">inline</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::operator-</a>(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> r)<span class="keyword"> const</span></div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="keywordflow">return</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a>(m_fRadian - r.m_fRadian);</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>}</div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span><span class="keyword">constexpr</span> XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a>&amp; r)<span class="keyword"> const</span></div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  <span class="keywordflow">return</span> m_fRadian == r.m_fRadian;</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span>}</div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span> </div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="keyword">constexpr</span> XII_ALWAYS_INLINE std::partial_ordering <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::operator&lt;=&gt;</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a>&amp; r)<span class="keyword"> const</span></div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <span class="keywordflow">return</span> m_fRadian &lt;=&gt; r.m_fRadian;</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span>}</div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span><span class="keyword">constexpr</span> <span class="keyword">inline</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> operator*(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> a, Type f)</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>{</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a9c40ebf5138d287759bf494db230a5b2">xiiAngleTemplate&lt;Type&gt;::MakeFromRadian</a>(a.<a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>() * f);</div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>}</div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span><span class="keyword">constexpr</span> <span class="keyword">inline</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> operator*(Type f, <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> a)</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>{</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a9c40ebf5138d287759bf494db230a5b2">xiiAngleTemplate&lt;Type&gt;::MakeFromRadian</a>(a.<a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>() * f);</div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>}</div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span><span class="keyword">constexpr</span> <span class="keyword">inline</span> <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> operator/(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> a, Type f)</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span>{</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#a9c40ebf5138d287759bf494db230a5b2">xiiAngleTemplate&lt;Type&gt;::MakeFromRadian</a>(a.<a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>() / f);</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>}</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span><span class="keyword">constexpr</span> <span class="keyword">inline</span> Type operator/(<a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> a, <a class="code hl_class" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> b)</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>{</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  <span class="keywordflow">return</span> a.<a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>() / b.<a class="code hl_function" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>();</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span>}</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="ttc" id="aclassxii_angle_template_htm"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a></div><div class="ttdoc">Wrapper class for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition</b> Angle.h:10</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a0981cd78050c0ee3b82197d6572d56be"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a0981cd78050c0ee3b82197d6572d56be">xiiAngleTemplate::GetDegree</a></div><div class="ttdeci">constexpr Type GetDegree() const</div><div class="ttdoc">Returns the degree value. (Performs a conversion)</div><div class="ttdef"><b>Definition</b> Angle_inl.h:46</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a125b34adf00dc677204d2a7a5904b2ab"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a125b34adf00dc677204d2a7a5904b2ab">xiiAngleTemplate::DegToRad</a></div><div class="ttdeci">static constexpr Type DegToRad(Type f)</div><div class="ttdoc">Converts an angle in degree to radians.</div><div class="ttdef"><b>Definition</b> Angle_inl.h:22</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a2b5342a182d1fdedc3db8a49cd4a2e21"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a2b5342a182d1fdedc3db8a49cd4a2e21">xiiAngleTemplate::IsEqualSimple</a></div><div class="ttdeci">bool IsEqualSimple(xiiAngleTemplate&lt; Type &gt; rhs, xiiAngleTemplate&lt; Type &gt; epsilon) const</div><div class="ttdoc">Equality check with epsilon. Simple check without normalization. 360 degree will equal 0 degree,...</div><div class="ttdef"><b>Definition</b> Angle_inl.h:92</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a56b7439a2dd2efc94c847a302a32b820"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a56b7439a2dd2efc94c847a302a32b820">xiiAngleTemplate::RadToDeg</a></div><div class="ttdeci">static constexpr Type RadToDeg(Type f)</div><div class="ttdoc">Converts an angle in radians to degree.</div><div class="ttdef"><b>Definition</b> Angle_inl.h:28</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a61b9cffe96c9937c13122e97f23417f9"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a61b9cffe96c9937c13122e97f23417f9">xiiAngleTemplate::GetNormalizedRange</a></div><div class="ttdeci">xiiAngleTemplate&lt; Type &gt; GetNormalizedRange() const</div><div class="ttdoc">Returns an equivalent angle with range between 0 degree - 360 degree.</div><div class="ttdef"><b>Definition</b> Angle_inl.h:84</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a7da06216380b9e6d3e6f04570afb9a2c"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a7da06216380b9e6d3e6f04570afb9a2c">xiiAngleTemplate::DegToRadMultiplier</a></div><div class="ttdeci">static constexpr XII_ALWAYS_INLINE Type DegToRadMultiplier()</div><div class="ttdoc">Returns the constant to multiply with an angle in degree to convert it to radians.</div><div class="ttdef"><b>Definition</b> Angle_inl.h:10</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a7e9e308308a55e19b03dbf5a3fed8c66"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a7e9e308308a55e19b03dbf5a3fed8c66">xiiAngleTemplate::NormalizeRange</a></div><div class="ttdeci">void NormalizeRange()</div><div class="ttdoc">Brings the angle into the range of 0 degree - 360 degree.</div><div class="ttdef"><b>Definition</b> Angle_inl.h:58</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a9c40ebf5138d287759bf494db230a5b2"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a9c40ebf5138d287759bf494db230a5b2">xiiAngleTemplate::MakeFromRadian</a></div><div class="ttdeci">static constexpr xiiAngleTemplate&lt; Type &gt; MakeFromRadian(Type fRadian)</div><div class="ttdoc">Creates an instance of xiiAngleTemplate&lt;Type&gt; that was initialized from radian. (No need for any conv...</div><div class="ttdef"><b>Definition</b> Angle_inl.h:40</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_aad83b7c65f38f601d03f3d0c7fbcefc5"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#aad83b7c65f38f601d03f3d0c7fbcefc5">xiiAngleTemplate::RadToDegMultiplier</a></div><div class="ttdeci">static constexpr XII_ALWAYS_INLINE Type RadToDegMultiplier()</div><div class="ttdoc">Returns the constant to multiply with an angle in degree to convert it to radians.</div><div class="ttdef"><b>Definition</b> Angle_inl.h:16</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_ad395aa30c07355b4af56067d542d6514"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#ad395aa30c07355b4af56067d542d6514">xiiAngleTemplate::IsEqualNormalized</a></div><div class="ttdeci">bool IsEqualNormalized(xiiAngleTemplate&lt; Type &gt; rhs, xiiAngleTemplate&lt; Type &gt; epsilon) const</div><div class="ttdoc">Equality check with epsilon that uses normalized angles. Will recognize 720 degree == 0 degree.</div><div class="ttdef"><b>Definition</b> Angle_inl.h:100</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_ad54cb856684d34910eaa24e78e90c71f"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#ad54cb856684d34910eaa24e78e90c71f">xiiAngleTemplate::MakeFromDegree</a></div><div class="ttdeci">static constexpr xiiAngleTemplate&lt; Type &gt; MakeFromDegree(Type fDegree)</div><div class="ttdoc">Creates an instance of xiiAngleTemplate&lt;Type&gt; that was initialized from degree. (Performs a conversio...</div><div class="ttdef"><b>Definition</b> Angle_inl.h:34</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_afaebb218561104c8b89d645dab3d8ded"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">xiiAngleTemplate::GetRadian</a></div><div class="ttdeci">constexpr Type GetRadian() const</div><div class="ttdoc">Returns the radian value. (No need for any conversion)</div><div class="ttdef"><b>Definition</b> Angle_inl.h:52</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_c1b0860bb61ff24e678d996d14e4bcdd.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_fb7e93d80251333452775ccd3b7c417a.htm">Implementation</a></li><li class="navelem"><b>Angle_inl.h</b></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:02:11 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>

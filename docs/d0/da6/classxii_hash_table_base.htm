<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d0/da6/classxii_hash_table_base.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="../../d2/d8d/classxii_hash_table_base-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Implementation of a hashtable which stores key/value pairs.  
 <a href="../../d0/da6/classxii_hash_table_base.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../de/def/_hash_table_8h_source.htm">HashTable.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">ConstIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const iterator.  <a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">Iterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm" title="Iterator with write access.">Iterator</a> with write access.  <a href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a733f7eaca9fcf4507120a86b1281dee0"><td class="memItemLeft" align="right" valign="top"><a id="a733f7eaca9fcf4507120a86b1281dee0"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a733f7eaca9fcf4507120a86b1281dee0">operator==</a> (const <a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a733f7eaca9fcf4507120a86b1281dee0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this table to another table. <br /></td></tr>
<tr class="separator:a733f7eaca9fcf4507120a86b1281dee0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10f2f895f9d36bcb8f332e1f0323a896"><td class="memItemLeft" align="right" valign="top"><a id="a10f2f895f9d36bcb8f332e1f0323a896"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a10f2f895f9d36bcb8f332e1f0323a896">operator!=</a> (const <a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a10f2f895f9d36bcb8f332e1f0323a896"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this table to another table. <br /></td></tr>
<tr class="separator:a10f2f895f9d36bcb8f332e1f0323a896"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bde237754738cb0f4581a62b10c1f61"><td class="memItemLeft" align="right" valign="top"><a id="a8bde237754738cb0f4581a62b10c1f61"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a8bde237754738cb0f4581a62b10c1f61">Reserve</a> (xiiUInt32 uiCapacity)</td></tr>
<tr class="memdesc:a8bde237754738cb0f4581a62b10c1f61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Expands the hashtable by over-allocating the internal storage so that the load factor is lower or equal to 60% when inserting the given number of entries. <br /></td></tr>
<tr class="separator:a8bde237754738cb0f4581a62b10c1f61"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a848fa98f7c9190ffa77e84d8b88cb3a6"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a848fa98f7c9190ffa77e84d8b88cb3a6">Compact</a> ()</td></tr>
<tr class="memdesc:a848fa98f7c9190ffa77e84d8b88cb3a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to compact the hashtable to avoid wasting memory.  <a href="../../d0/da6/classxii_hash_table_base.htm#a848fa98f7c9190ffa77e84d8b88cb3a6">More...</a><br /></td></tr>
<tr class="separator:a848fa98f7c9190ffa77e84d8b88cb3a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b9f741e5574293c600f9ec72afea9f"><td class="memItemLeft" align="right" valign="top"><a id="a49b9f741e5574293c600f9ec72afea9f"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a49b9f741e5574293c600f9ec72afea9f">GetCount</a> () const</td></tr>
<tr class="memdesc:a49b9f741e5574293c600f9ec72afea9f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of active entries in the table. <br /></td></tr>
<tr class="separator:a49b9f741e5574293c600f9ec72afea9f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af682d436030330453ee5de06009d0043"><td class="memItemLeft" align="right" valign="top"><a id="af682d436030330453ee5de06009d0043"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#af682d436030330453ee5de06009d0043">IsEmpty</a> () const</td></tr>
<tr class="memdesc:af682d436030330453ee5de06009d0043"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if the hashtable does not contain any elements. <br /></td></tr>
<tr class="separator:af682d436030330453ee5de06009d0043"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e77dc508bfe72bb60bc8ae923fa6353"><td class="memItemLeft" align="right" valign="top"><a id="a6e77dc508bfe72bb60bc8ae923fa6353"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a6e77dc508bfe72bb60bc8ae923fa6353">Clear</a> ()</td></tr>
<tr class="memdesc:a6e77dc508bfe72bb60bc8ae923fa6353"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the table. <br /></td></tr>
<tr class="separator:a6e77dc508bfe72bb60bc8ae923fa6353"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a229208e1e38a74619090440bd94108bd"><td class="memTemplParams" colspan="2">template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </td></tr>
<tr class="memitem:a229208e1e38a74619090440bd94108bd"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a229208e1e38a74619090440bd94108bd">Insert</a> (CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value, ValueType *out_oldValue=nullptr)</td></tr>
<tr class="memdesc:a229208e1e38a74619090440bd94108bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts the key value pair or replaces value if an entry with the given key already exists.  <a href="../../d0/da6/classxii_hash_table_base.htm#a229208e1e38a74619090440bd94108bd">More...</a><br /></td></tr>
<tr class="separator:a229208e1e38a74619090440bd94108bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aac5653f396e07fd4136bbf2b7f262832"><td class="memTemplParams" colspan="2"><a id="aac5653f396e07fd4136bbf2b7f262832"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aac5653f396e07fd4136bbf2b7f262832"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#aac5653f396e07fd4136bbf2b7f262832">Remove</a> (const CompatibleKeyType &amp;key, ValueType *out_oldValue=nullptr)</td></tr>
<tr class="memdesc:aac5653f396e07fd4136bbf2b7f262832"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes the entry with the given key. Returns whether an entry was removed and optionally writes out the old value to out_oldValue. <br /></td></tr>
<tr class="separator:aac5653f396e07fd4136bbf2b7f262832"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a646b701c99f03b4a42780f15cba89175"><td class="memItemLeft" align="right" valign="top"><a id="a646b701c99f03b4a42780f15cba89175"></a>
<a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a646b701c99f03b4a42780f15cba89175">Remove</a> (const <a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">Iterator</a> &amp;pos)</td></tr>
<tr class="memdesc:a646b701c99f03b4a42780f15cba89175"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the key/value pair at the given <a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm" title="Iterator with write access.">Iterator</a>. Returns an iterator to the element after the given iterator. <br /></td></tr>
<tr class="separator:a646b701c99f03b4a42780f15cba89175"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1626c549c47656b86cce732d6359c33"><td class="memItemLeft" align="right" valign="top"><a id="ac1626c549c47656b86cce732d6359c33"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#ac1626c549c47656b86cce732d6359c33">Remove</a> (const <a class="el" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">ConstIterator</a> &amp;pos)=delete</td></tr>
<tr class="memdesc:ac1626c549c47656b86cce732d6359c33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cannot remove an element with just a <a class="el" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm" title="Const iterator.">ConstIterator</a>. <br /></td></tr>
<tr class="separator:ac1626c549c47656b86cce732d6359c33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bb2c25791102db37be680622f5402af"><td class="memTemplParams" colspan="2"><a id="a1bb2c25791102db37be680622f5402af"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a1bb2c25791102db37be680622f5402af"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a1bb2c25791102db37be680622f5402af">TryGetValue</a> (const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</td></tr>
<tr class="memdesc:a1bb2c25791102db37be680622f5402af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the corresponding value to out_value. <br /></td></tr>
<tr class="separator:a1bb2c25791102db37be680622f5402af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50b364084054d04a7b423e9e6c428584"><td class="memTemplParams" colspan="2"><a id="a50b364084054d04a7b423e9e6c428584"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a50b364084054d04a7b423e9e6c428584"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a50b364084054d04a7b423e9e6c428584">TryGetValue</a> (const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:a50b364084054d04a7b423e9e6c428584"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:a50b364084054d04a7b423e9e6c428584"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1f0d3c967a0322a4e6fe90ae83368d00"><td class="memTemplParams" colspan="2"><a id="a1f0d3c967a0322a4e6fe90ae83368d00"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a1f0d3c967a0322a4e6fe90ae83368d00"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a1f0d3c967a0322a4e6fe90ae83368d00">TryGetValue</a> (const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:a1f0d3c967a0322a4e6fe90ae83368d00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:a1f0d3c967a0322a4e6fe90ae83368d00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a67d421ca6cbaec53333e177277d471"><td class="memTemplParams" colspan="2"><a id="a4a67d421ca6cbaec53333e177277d471"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a4a67d421ca6cbaec53333e177277d471"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a4a67d421ca6cbaec53333e177277d471">Find</a> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a4a67d421ca6cbaec53333e177277d471"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns a <a class="el" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm" title="Const iterator.">ConstIterator</a> to it or an invalid iterator, if no such key is found. O(1) operation. <br /></td></tr>
<tr class="separator:a4a67d421ca6cbaec53333e177277d471"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab506c027ed750515afdb6d846e2b2011"><td class="memTemplParams" colspan="2"><a id="ab506c027ed750515afdb6d846e2b2011"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ab506c027ed750515afdb6d846e2b2011"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#ab506c027ed750515afdb6d846e2b2011">Find</a> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:ab506c027ed750515afdb6d846e2b2011"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns an <a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm" title="Iterator with write access.">Iterator</a> to it or an invalid iterator, if no such key is found. O(1) operation. <br /></td></tr>
<tr class="separator:ab506c027ed750515afdb6d846e2b2011"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70f0421d5453c8a15f4ccbaf899feb89"><td class="memTemplParams" colspan="2"><a id="a70f0421d5453c8a15f4ccbaf899feb89"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a70f0421d5453c8a15f4ccbaf899feb89"><td class="memTemplItemLeft" align="right" valign="top">const ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a70f0421d5453c8a15f4ccbaf899feb89">GetValue</a> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a70f0421d5453c8a15f4ccbaf899feb89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:a70f0421d5453c8a15f4ccbaf899feb89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aedfe628466463c1ad75059a1902ddde1"><td class="memTemplParams" colspan="2"><a id="aedfe628466463c1ad75059a1902ddde1"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aedfe628466463c1ad75059a1902ddde1"><td class="memTemplItemLeft" align="right" valign="top">ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#aedfe628466463c1ad75059a1902ddde1">GetValue</a> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:aedfe628466463c1ad75059a1902ddde1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:aedfe628466463c1ad75059a1902ddde1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad3741658bbda9bcf456b3b058a4123d9"><td class="memItemLeft" align="right" valign="top"><a id="ad3741658bbda9bcf456b3b058a4123d9"></a>
ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#ad3741658bbda9bcf456b3b058a4123d9">operator[]</a> (const KeyType &amp;key)</td></tr>
<tr class="memdesc:ad3741658bbda9bcf456b3b058a4123d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value to the given key if found or creates a new entry with the given key and a default constructed value. <br /></td></tr>
<tr class="separator:ad3741658bbda9bcf456b3b058a4123d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a88974b567fdac29d9b8523ad840b633f"><td class="memItemLeft" align="right" valign="top"><a id="a88974b567fdac29d9b8523ad840b633f"></a>
ValueType &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a88974b567fdac29d9b8523ad840b633f">FindOrAdd</a> (const KeyType &amp;key, bool *bExisted)</td></tr>
<tr class="memdesc:a88974b567fdac29d9b8523ad840b633f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value stored at the given key. If none exists, one is created. <em>bExisted</em> indicates whether an element needed to be created. <br /></td></tr>
<tr class="separator:a88974b567fdac29d9b8523ad840b633f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a619655aec7081012f36bdaadc3c60d34"><td class="memTemplParams" colspan="2"><a id="a619655aec7081012f36bdaadc3c60d34"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a619655aec7081012f36bdaadc3c60d34"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a619655aec7081012f36bdaadc3c60d34">Contains</a> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a619655aec7081012f36bdaadc3c60d34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns if an entry with given key exists in the table. <br /></td></tr>
<tr class="separator:a619655aec7081012f36bdaadc3c60d34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a343303117791ae7436217070edb8ea26"><td class="memItemLeft" align="right" valign="top"><a id="a343303117791ae7436217070edb8ea26"></a>
<a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a343303117791ae7436217070edb8ea26">GetIterator</a> ()</td></tr>
<tr class="memdesc:a343303117791ae7436217070edb8ea26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm" title="Iterator with write access.">Iterator</a> to the very first element. <br /></td></tr>
<tr class="separator:a343303117791ae7436217070edb8ea26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd182ab4090c58ebbfaead6505c5a2df"><td class="memItemLeft" align="right" valign="top"><a id="acd182ab4090c58ebbfaead6505c5a2df"></a>
<a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#acd182ab4090c58ebbfaead6505c5a2df">GetEndIterator</a> ()</td></tr>
<tr class="memdesc:acd182ab4090c58ebbfaead6505c5a2df"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an <a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm" title="Iterator with write access.">Iterator</a> to the first element that is not part of the hash-table. Needed to support range based for loops. <br /></td></tr>
<tr class="separator:acd182ab4090c58ebbfaead6505c5a2df"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0eb69877f124c7af92e0e3768ec4a8c7"><td class="memItemLeft" align="right" valign="top"><a id="a0eb69877f124c7af92e0e3768ec4a8c7"></a>
<a class="el" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a0eb69877f124c7af92e0e3768ec4a8c7">GetIterator</a> () const</td></tr>
<tr class="memdesc:a0eb69877f124c7af92e0e3768ec4a8c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a constant <a class="el" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm" title="Iterator with write access.">Iterator</a> to the very first element. <br /></td></tr>
<tr class="separator:a0eb69877f124c7af92e0e3768ec4a8c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64a10ef7b099fbbc35c1ec35760f171e"><td class="memItemLeft" align="right" valign="top"><a id="a64a10ef7b099fbbc35c1ec35760f171e"></a>
<a class="el" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a64a10ef7b099fbbc35c1ec35760f171e">GetEndIterator</a> () const</td></tr>
<tr class="memdesc:a64a10ef7b099fbbc35c1ec35760f171e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a <a class="el" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm" title="Const iterator.">ConstIterator</a> to the first element that is not part of the hash-table. Needed to support range based for loops. <br /></td></tr>
<tr class="separator:a64a10ef7b099fbbc35c1ec35760f171e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62a80a071f6afeeaab5ebbfeab7a27cf"><td class="memItemLeft" align="right" valign="top"><a id="a62a80a071f6afeeaab5ebbfeab7a27cf"></a>
<a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a62a80a071f6afeeaab5ebbfeab7a27cf">GetAllocator</a> () const</td></tr>
<tr class="memdesc:a62a80a071f6afeeaab5ebbfeab7a27cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this instance. <br /></td></tr>
<tr class="separator:a62a80a071f6afeeaab5ebbfeab7a27cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0ccfe867bf8a994305afa36c7210c49"><td class="memItemLeft" align="right" valign="top"><a id="ae0ccfe867bf8a994305afa36c7210c49"></a>
xiiUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#ae0ccfe867bf8a994305afa36c7210c49">GetHeapMemoryUsage</a> () const</td></tr>
<tr class="memdesc:ae0ccfe867bf8a994305afa36c7210c49"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:ae0ccfe867bf8a994305afa36c7210c49"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a323dec41a79b42ac21862da704fff211"><td class="memItemLeft" align="right" valign="top"><a id="a323dec41a79b42ac21862da704fff211"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a323dec41a79b42ac21862da704fff211">Swap</a> (<a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;other)</td></tr>
<tr class="memdesc:a323dec41a79b42ac21862da704fff211"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps this map with the other one. <br /></td></tr>
<tr class="separator:a323dec41a79b42ac21862da704fff211"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abfb44809d9c18b54531e177e46b252b6"><td class="memTemplParams" colspan="2"><a id="abfb44809d9c18b54531e177e46b252b6"></a>
template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </td></tr>
<tr class="memitem:abfb44809d9c18b54531e177e46b252b6"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Insert</b> (CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value, V *out_oldValue)</td></tr>
<tr class="separator:abfb44809d9c18b54531e177e46b252b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58a6e5e204d443de98d26055826eb86a"><td class="memTemplParams" colspan="2"><a id="a58a6e5e204d443de98d26055826eb86a"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a58a6e5e204d443de98d26055826eb86a"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Remove</b> (const CompatibleKeyType &amp;key, V *out_oldValue)</td></tr>
<tr class="separator:a58a6e5e204d443de98d26055826eb86a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a51c667222c333ada51fac7cd90da734b"><td class="memTemplParams" colspan="2"><a id="a51c667222c333ada51fac7cd90da734b"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a51c667222c333ada51fac7cd90da734b"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, V &amp;out_value) const</td></tr>
<tr class="separator:a51c667222c333ada51fac7cd90da734b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca0c163b2ac84036986dd822363787cb"><td class="memTemplParams" colspan="2"><a id="aca0c163b2ac84036986dd822363787cb"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aca0c163b2ac84036986dd822363787cb"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, const V *&amp;out_pValue) const</td></tr>
<tr class="separator:aca0c163b2ac84036986dd822363787cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6e1c1bc9869dbc4951cfa97fe1d4ac"><td class="memTemplParams" colspan="2"><a id="a1e6e1c1bc9869dbc4951cfa97fe1d4ac"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a1e6e1c1bc9869dbc4951cfa97fe1d4ac"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, V *&amp;out_pValue) const</td></tr>
<tr class="separator:a1e6e1c1bc9869dbc4951cfa97fe1d4ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7ddd74693236eb0ae14652d74206160"><td class="memTemplParams" colspan="2"><a id="aa7ddd74693236eb0ae14652d74206160"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aa7ddd74693236eb0ae14652d74206160"><td class="memTemplItemLeft" align="right" valign="top">const V *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:aa7ddd74693236eb0ae14652d74206160"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad834cd94f59776250a5f8744e184b542"><td class="memTemplParams" colspan="2"><a id="ad834cd94f59776250a5f8744e184b542"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ad834cd94f59776250a5f8744e184b542"><td class="memTemplItemLeft" align="right" valign="top">V *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:ad834cd94f59776250a5f8744e184b542"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a278e01ea9c2873cde62d7ed13e4cd155"><td class="memTemplParams" colspan="2"><a id="a278e01ea9c2873cde62d7ed13e4cd155"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a278e01ea9c2873cde62d7ed13e4cd155"><td class="memTemplItemLeft" align="right" valign="top">XII_FORCE_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Contains</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a278e01ea9c2873cde62d7ed13e4cd155"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a69a32e552fabbf7301549006ddeecafc"><td class="memTemplParams" colspan="2"><a id="a69a32e552fabbf7301549006ddeecafc"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a69a32e552fabbf7301549006ddeecafc"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>FindEntry</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a69a32e552fabbf7301549006ddeecafc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ac324b2ff91ba07417d6b3b0536cd0de7"><td class="memItemLeft" align="right" valign="top"><a id="ac324b2ff91ba07417d6b3b0536cd0de7"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#ac324b2ff91ba07417d6b3b0536cd0de7">xiiHashTableBase</a> (<a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:ac324b2ff91ba07417d6b3b0536cd0de7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an empty hashtable. Does not allocate any data yet. <br /></td></tr>
<tr class="separator:ac324b2ff91ba07417d6b3b0536cd0de7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1265ab7192761ee3fac5f559b6082a8"><td class="memItemLeft" align="right" valign="top"><a id="ac1265ab7192761ee3fac5f559b6082a8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#ac1265ab7192761ee3fac5f559b6082a8">xiiHashTableBase</a> (const <a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:ac1265ab7192761ee3fac5f559b6082a8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a copy of the given hashtable. <br /></td></tr>
<tr class="separator:ac1265ab7192761ee3fac5f559b6082a8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a859d7b67c643274772ca850fc286af7b"><td class="memItemLeft" align="right" valign="top"><a id="a859d7b67c643274772ca850fc286af7b"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a859d7b67c643274772ca850fc286af7b">xiiHashTableBase</a> (<a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;&amp;rhs, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:a859d7b67c643274772ca850fc286af7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves data from an existing hashtable into this one. <br /></td></tr>
<tr class="separator:a859d7b67c643274772ca850fc286af7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6ae109416cbfc9d32a70ced89e1d83e"><td class="memItemLeft" align="right" valign="top"><a id="af6ae109416cbfc9d32a70ced89e1d83e"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#af6ae109416cbfc9d32a70ced89e1d83e">~xiiHashTableBase</a> ()</td></tr>
<tr class="memdesc:af6ae109416cbfc9d32a70ced89e1d83e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor. <br /></td></tr>
<tr class="separator:af6ae109416cbfc9d32a70ced89e1d83e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a740c237e4982f9d678ba0f89477a9873"><td class="memItemLeft" align="right" valign="top"><a id="a740c237e4982f9d678ba0f89477a9873"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a740c237e4982f9d678ba0f89477a9873">operator=</a> (const <a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a740c237e4982f9d678ba0f89477a9873"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies the data from another hashtable into this one. <br /></td></tr>
<tr class="separator:a740c237e4982f9d678ba0f89477a9873"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d6b793a7aa3b60fe9b4f0dbf1fba73"><td class="memItemLeft" align="right" valign="top"><a id="a97d6b793a7aa3b60fe9b4f0dbf1fba73"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm#a97d6b793a7aa3b60fe9b4f0dbf1fba73">operator=</a> (<a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt; &amp;&amp;rhs)</td></tr>
<tr class="memdesc:a97d6b793a7aa3b60fe9b4f0dbf1fba73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves data from an existing hashtable into this one. <br /></td></tr>
<tr class="separator:a97d6b793a7aa3b60fe9b4f0dbf1fba73"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename KeyType, typename ValueType, typename Hasher&gt;<br />
class xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt;</h3>

<p>Implementation of a hashtable which stores key/value pairs. </p>
<p>The hashtable maps keys to values by using the hash of the key as an index into the table. This implementation uses linear-probing to resolve hash collisions which means all key/value pairs are stored in a linear array. All insertion/erasure/lookup functions take O(1) time if the table does not need to be expanded, which happens when the load gets greater than 60%. The hash function can be customized by providing a Hasher helper class like <a class="el" href="../../d6/dcd/structxii_hash_helper.htm" title="Helper struct to calculate the Hash of different types.">xiiHashHelper</a>. </p><dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d6/dcd/structxii_hash_helper.htm" title="Helper struct to calculate the Hash of different types.">xiiHashHelper</a> </dd></dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a848fa98f7c9190ffa77e84d8b88cb3a6"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a848fa98f7c9190ffa77e84d8b88cb3a6">&#9670;&nbsp;</a></span>Compact()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename K , typename V , typename H &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; K, V, H &gt;::Compact</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Tries to compact the hashtable to avoid wasting memory. </p>
<p>The resulting capacity is at least 'GetCount' (no elements get removed). Will deallocate all data, if the hashtable is empty. </p>

</div>
</div>
<a id="a229208e1e38a74619090440bd94108bd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a229208e1e38a74619090440bd94108bd">&#9670;&nbsp;</a></span>Insert()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename KeyType , typename ValueType , typename Hasher &gt; </div>
<div class="memtemplate">
template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt; KeyType, ValueType, Hasher &gt;::Insert </td>
          <td>(</td>
          <td class="paramtype">CompatibleKeyType &amp;&amp;&#160;</td>
          <td class="paramname"><em>key</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">CompatibleValueType &amp;&amp;&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ValueType *&#160;</td>
          <td class="paramname"><em>out_oldValue</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Inserts the key value pair or replaces value if an entry with the given key already exists. </p>
<p>Returns true if an existing value was replaced and optionally writes out the old value to out_oldValue. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Containers/<a class="el" href="../../de/def/_hash_table_8h_source.htm">HashTable.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Containers/Implementation/<a class="el" href="../../d9/d2b/_hash_table__inl_8h_source.htm">HashTable_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a></li>
    <li class="footer">Generated on Fri Mar 24 2023 17:20:22 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

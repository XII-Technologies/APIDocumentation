<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Containers/Implementation/HashTable_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d9/d2b/_hash_table__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">HashTable_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#ifndef xiiInvalidIndex</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#  define xiiInvalidIndex 0xFFFFFFFF</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">// ***** Const Iterator *****</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::ConstIterator</a>(<span class="keyword">const</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp; hashTable) :</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  m_pHashTable(&amp;hashTable)</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;}</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::SetToBegin</a>()</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keywordflow">if</span> (m_pHashTable-&gt;IsEmpty())</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  {</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;    m_uiCurrentIndex = m_pHashTable-&gt;m_uiCapacity;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  }</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  <span class="keywordflow">while</span> (!m_pHashTable-&gt;IsValidEntry(m_uiCurrentIndex))</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  {</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    ++m_uiCurrentIndex;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  }</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::SetToEnd</a>()</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  m_uiCurrentCount = m_pHashTable-&gt;m_uiCount;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  m_uiCurrentIndex = m_pHashTable-&gt;m_uiCapacity;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a26734052f020259435df157652fc2ff8">   38</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a26734052f020259435df157652fc2ff8">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keywordflow">return</span> m_uiCurrentCount &lt; m_pHashTable-&gt;m_uiCount;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;}</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#aefcca69034b9c1cc274009423134b741">   44</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#aefcca69034b9c1cc274009423134b741">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::operator==</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keywordflow">return</span> m_uiCurrentIndex == rhs.m_uiCurrentIndex &amp;&amp; m_pHashTable-&gt;m_pEntries == rhs.m_pHashTable-&gt;m_pEntries;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;}</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a3b4778a738e997de5d6cbed268f7059f">   50</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a3b4778a738e997de5d6cbed268f7059f">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::operator!=</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;}</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00056"></a><span class="lineno"><a class="line" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a558d72a670ebdb9f465a1e11ab785701">   56</a></span>&#160;XII_ALWAYS_INLINE <span class="keyword">const</span> K&amp; <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a558d72a670ebdb9f465a1e11ab785701">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::Key</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">return</span> m_pHashTable-&gt;m_pEntries[m_uiCurrentIndex].key;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a1d041697b1a42808a6fac1e828f19e26">   62</a></span>&#160;XII_ALWAYS_INLINE <span class="keyword">const</span> V&amp; <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a1d041697b1a42808a6fac1e828f19e26">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::Value</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordflow">return</span> m_pHashTable-&gt;m_pEntries[m_uiCurrentIndex].value;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;}</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a963b6a213b16b2e45c29de5caadf83ce">   68</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a963b6a213b16b2e45c29de5caadf83ce">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::Next</a>()</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="comment">// if we already iterated over the amount of valid elements that the hash-table stores, early out</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordflow">if</span> (m_uiCurrentCount &gt;= m_pHashTable-&gt;m_uiCount)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="comment">// increase the counter of how many elements we have seen</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  ++m_uiCurrentCount;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="comment">// increase the index of the element to look at</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  ++m_uiCurrentIndex;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="comment">// check that we don&#39;t leave the valid range of element indices</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keywordflow">while</span> (m_uiCurrentIndex &lt; m_pHashTable-&gt;m_uiCapacity)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  {</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">if</span> (m_pHashTable-&gt;IsValidEntry(m_uiCurrentIndex))</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    ++m_uiCurrentIndex;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="comment">// if we fell through this loop, we reached the end of all elements in the container</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <span class="comment">// set the m_uiCurrentCount to maximum, to enable early-out in the future and to make &#39;IsValid&#39; return &#39;false&#39;</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  m_uiCurrentCount = m_pHashTable-&gt;m_uiCount;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;}</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a34407ac39cbe09cb13206902a0e1572f">   94</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a34407ac39cbe09cb13206902a0e1572f">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator::operator++</a>()</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;{</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  Next();</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;}</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">// ***** Iterator *****</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a94268507e786f38e25e987afe966e588">xiiHashTableBase&lt;K, V, H&gt;::Iterator::Iterator</a>(<span class="keyword">const</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp; hashTable) :</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">ConstIterator</a>(hashTable)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a94268507e786f38e25e987afe966e588">xiiHashTableBase&lt;K, V, H&gt;::Iterator::Iterator</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::Iterator</a>&amp; rhs) :</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  ConstIterator(*rhs.m_pHashTable)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  this-&gt;m_uiCurrentIndex = rhs.m_uiCurrentIndex;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  this-&gt;m_uiCurrentCount = rhs.m_uiCurrentCount;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;}</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a3600ee288cb266fe302342c3347ebe4e">  117</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a3600ee288cb266fe302342c3347ebe4e">xiiHashTableBase&lt;K, V, H&gt;::Iterator::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">Iterator</a>&amp; rhs) <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  this-&gt;m_pHashTable     = rhs.m_pHashTable;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  this-&gt;m_uiCurrentIndex = rhs.m_uiCurrentIndex;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  this-&gt;m_uiCurrentCount = rhs.m_uiCurrentCount;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a6104a1de1c31c28d1c87cbfb446538d4">  125</a></span>&#160;XII_FORCE_INLINE V&amp; <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a6104a1de1c31c28d1c87cbfb446538d4">xiiHashTableBase&lt;K, V, H&gt;::Iterator::Value</a>()</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keywordflow">return</span> this-&gt;m_pHashTable-&gt;m_pEntries[this-&gt;m_uiCurrentIndex].value;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">// ***** xiiHashTableBase *****</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#ac324b2ff91ba07417d6b3b0536cd0de7">  134</a></span>&#160;<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#ac324b2ff91ba07417d6b3b0536cd0de7">xiiHashTableBase&lt;K, V, H&gt;::xiiHashTableBase</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;{</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  m_pEntries    = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  m_pEntryFlags = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  m_uiCount     = 0;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  m_uiCapacity  = 0;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  m_pAllocator  = pAllocator;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#ac324b2ff91ba07417d6b3b0536cd0de7">xiiHashTableBase&lt;K, V, H&gt;::xiiHashTableBase</a>(<span class="keyword">const</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp; other, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  m_pEntries    = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  m_pEntryFlags = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  m_uiCount     = 0;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  m_uiCapacity  = 0;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  m_pAllocator  = pAllocator;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  *<span class="keyword">this</span> = other;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;}</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#ac324b2ff91ba07417d6b3b0536cd0de7">xiiHashTableBase&lt;K, V, H&gt;::xiiHashTableBase</a>(<a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp;&amp; other, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;{</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  m_pEntries    = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  m_pEntryFlags = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  m_uiCount     = 0;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  m_uiCapacity  = 0;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  m_pAllocator  = pAllocator;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  *<span class="keyword">this</span> = std::move(other);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#af6ae109416cbfc9d32a70ced89e1d83e">  168</a></span>&#160;<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#af6ae109416cbfc9d32a70ced89e1d83e">xiiHashTableBase&lt;K, V, H&gt;::~xiiHashTableBase</a>()</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a6e77dc508bfe72bb60bc8ae923fa6353">Clear</a>();</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  XII_DELETE_RAW_BUFFER(m_pAllocator, m_pEntries);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  XII_DELETE_RAW_BUFFER(m_pAllocator, m_pEntryFlags);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  m_uiCapacity = 0;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a740c237e4982f9d678ba0f89477a9873">xiiHashTableBase&lt;K, V, H&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;{</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a6e77dc508bfe72bb60bc8ae923fa6353">Clear</a>();</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a8bde237754738cb0f4581a62b10c1f61">Reserve</a>(rhs.<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a49b9f741e5574293c600f9ec72afea9f">GetCount</a>());</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  xiiUInt32 uiCopied = 0;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; uiCopied &lt; rhs.<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a49b9f741e5574293c600f9ec72afea9f">GetCount</a>(); ++i)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">if</span> (rhs.IsValidEntry(i))</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a02b91fa3e25b22b30ab1ad5633dd2802">Insert</a>(rhs.m_pEntries[i].key, rhs.m_pEntries[i].value);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      ++uiCopied;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  }</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;}</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a740c237e4982f9d678ba0f89477a9873">xiiHashTableBase&lt;K, V, H&gt;::operator=</a>(<a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;{</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="comment">// Clear any existing data (calls destructors if necessary)</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a6e77dc508bfe72bb60bc8ae923fa6353">Clear</a>();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordflow">if</span> (m_pAllocator != rhs.m_pAllocator)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  {</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a8bde237754738cb0f4581a62b10c1f61">Reserve</a>(rhs.m_uiCapacity);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    xiiUInt32 uiCopied = 0;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; uiCopied &lt; rhs.<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a49b9f741e5574293c600f9ec72afea9f">GetCount</a>(); ++i)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      <span class="keywordflow">if</span> (rhs.IsValidEntry(i))</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      {</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a02b91fa3e25b22b30ab1ad5633dd2802">Insert</a>(std::move(rhs.m_pEntries[i].key), std::move(rhs.m_pEntries[i].value));</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        ++uiCopied;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;      }</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    rhs.<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a6e77dc508bfe72bb60bc8ae923fa6353">Clear</a>();</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    XII_DELETE_RAW_BUFFER(m_pAllocator, m_pEntries);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    XII_DELETE_RAW_BUFFER(m_pAllocator, m_pEntryFlags);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="comment">// Move all data over.</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    m_pEntries    = rhs.m_pEntries;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    m_pEntryFlags = rhs.m_pEntryFlags;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    m_uiCount     = rhs.m_uiCount;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    m_uiCapacity  = rhs.m_uiCapacity;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="comment">// Temp copy forgets all its state.</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    rhs.m_pEntries    = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    rhs.m_pEntryFlags = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    rhs.m_uiCount     = 0;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    rhs.m_uiCapacity  = 0;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a733f7eaca9fcf4507120a86b1281dee0">  235</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a733f7eaca9fcf4507120a86b1281dee0">xiiHashTableBase&lt;K, V, H&gt;::operator==</a>(<span class="keyword">const</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  <span class="keywordflow">if</span> (m_uiCount != rhs.m_uiCount)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  xiiUInt32 uiCompared = 0;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; uiCompared &lt; m_uiCount; ++i)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">if</span> (IsValidEntry(i))</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;      <span class="keyword">const</span> V* pRhsValue = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      <span class="keywordflow">if</span> (!rhs.<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a1bb2c25791102db37be680622f5402af">TryGetValue</a>(m_pEntries[i].key, pRhsValue))</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;      <span class="keywordflow">if</span> (m_pEntries[i].value != *pRhsValue)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      ++uiCompared;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a10f2f895f9d36bcb8f332e1f0323a896">  260</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a10f2f895f9d36bcb8f332e1f0323a896">xiiHashTableBase&lt;K, V, H&gt;::operator!=</a>(<span class="keyword">const</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  <span class="keywordflow">return</span> !(*<span class="keyword">this</span> == rhs);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;}</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a8bde237754738cb0f4581a62b10c1f61">  266</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a8bde237754738cb0f4581a62b10c1f61">xiiHashTableBase&lt;K, V, H&gt;::Reserve</a>(xiiUInt32 uiCapacity)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;{</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keyword">const</span> xiiUInt64 uiCap64         = <span class="keyword">static_cast&lt;</span>xiiUInt64<span class="keyword">&gt;</span>(uiCapacity);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  xiiUInt64       uiNewCapacity64 = uiCap64 + (uiCap64 * 2 / 3); <span class="comment">// ensure a maximum load of 60%</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  uiNewCapacity64 = xiiMath::Min&lt;xiiUInt64&gt;(uiNewCapacity64, 0x80000000llu); <span class="comment">// the largest power-of-two in 32 bit</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  xiiUInt32 uiNewCapacity32 = <span class="keyword">static_cast&lt;</span>xiiUInt32<span class="keyword">&gt;</span>(uiNewCapacity64 &amp; 0xFFFFFFFF);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  XII_ASSERT_DEBUG(uiCapacity &lt;= uiNewCapacity32, <span class="stringliteral">&quot;xiiHashSet/Map do not support more than 2 billion entries.&quot;</span>);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="keywordflow">if</span> (m_uiCapacity &gt;= uiNewCapacity32)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  uiNewCapacity32 = xiiMath::Max&lt;xiiUInt32&gt;(<a class="code" href="../../d1/d37/namespacexii_math.htm#aa9382e85ca22aab9c1929586b2ec9b38">xiiMath::PowerOfTwo_Ceil</a>(uiNewCapacity32), CAPACITY_ALIGNMENT);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  SetCapacity(uiNewCapacity32);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;}</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00284"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a848fa98f7c9190ffa77e84d8b88cb3a6">  284</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a848fa98f7c9190ffa77e84d8b88cb3a6">xiiHashTableBase&lt;K, V, H&gt;::Compact</a>()</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;{</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#af682d436030330453ee5de06009d0043">IsEmpty</a>())</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="comment">// completely deallocate all data, if the table is empty.</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    XII_DELETE_RAW_BUFFER(m_pAllocator, m_pEntries);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    XII_DELETE_RAW_BUFFER(m_pAllocator, m_pEntryFlags);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    m_uiCapacity = 0;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiNewCapacity = <a class="code" href="../../d1/d37/namespacexii_math.htm#aa9382e85ca22aab9c1929586b2ec9b38">xiiMath::PowerOfTwo_Ceil</a>(m_uiCount + (CAPACITY_ALIGNMENT - 1)) &amp; ~(CAPACITY_ALIGNMENT - 1);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keywordflow">if</span> (m_uiCapacity != uiNewCapacity)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      SetCapacity(uiNewCapacity);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;}</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00302"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a49b9f741e5574293c600f9ec72afea9f">  302</a></span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a49b9f741e5574293c600f9ec72afea9f">xiiHashTableBase&lt;K, V, H&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  <span class="keywordflow">return</span> m_uiCount;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;}</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#af682d436030330453ee5de06009d0043">  308</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#af682d436030330453ee5de06009d0043">xiiHashTableBase&lt;K, V, H&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keywordflow">return</span> m_uiCount == 0;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00314"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a6e77dc508bfe72bb60bc8ae923fa6353">  314</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a6e77dc508bfe72bb60bc8ae923fa6353">xiiHashTableBase&lt;K, V, H&gt;::Clear</a>()</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_uiCapacity; ++i)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  {</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">if</span> (IsValidEntry(i))</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    {</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;      <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;m_pEntries[i].key, 1);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;      <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;m_pEntries[i].value, 1);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    }</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  }</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">xiiMemoryUtils::ZeroFill</a>(m_pEntryFlags, GetFlagsCapacity());</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  m_uiCount = 0;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType, <span class="keyword">typename</span> CompatibleValueType&gt;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a02b91fa3e25b22b30ab1ad5633dd2802">xiiHashTableBase&lt;K, V, H&gt;::Insert</a>(CompatibleKeyType&amp;&amp; key, CompatibleValueType&amp;&amp; value, V* out_pOldValue <span class="comment">/*= nullptr*/</span>)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;{</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a8bde237754738cb0f4581a62b10c1f61">Reserve</a>(m_uiCount + 1);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  xiiUInt32 uiIndex        = H::Hash(key) &amp; (m_uiCapacity - 1);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  xiiUInt32 uiDeletedIndex = xiiInvalidIndex;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  xiiUInt32 uiCounter = 0;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  <span class="keywordflow">while</span> (!IsFreeEntry(uiIndex) &amp;&amp; uiCounter &lt; m_uiCapacity)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keywordflow">if</span> (IsDeletedEntry(uiIndex))</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    {</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;      <span class="keywordflow">if</span> (uiDeletedIndex == xiiInvalidIndex)</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        uiDeletedIndex = uiIndex;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    }</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (H::Equal(m_pEntries[uiIndex].key, key))</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    {</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;      <span class="keywordflow">if</span> (out_pOldValue != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        *out_pOldValue = std::move(m_pEntries[uiIndex].value);</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;      m_pEntries[uiIndex].value = std::forward&lt;CompatibleValueType&gt;(value); <span class="comment">// Either move or copy assignment.</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    }</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    ++uiIndex;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">if</span> (uiIndex == m_uiCapacity)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;      uiIndex = 0;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;    ++uiCounter;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160; </div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  <span class="comment">// new entry</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  uiIndex = uiDeletedIndex != xiiInvalidIndex ? uiDeletedIndex : uiIndex;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160; </div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  <span class="comment">// Both constructions might either be a move or a copy.</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a86dc640bd82c5855ecbace5d95b1549e">xiiMemoryUtils::CopyOrMoveConstruct</a>(&amp;m_pEntries[uiIndex].key, std::forward&lt;CompatibleKeyType&gt;(key));</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a86dc640bd82c5855ecbace5d95b1549e">xiiMemoryUtils::CopyOrMoveConstruct</a>(&amp;m_pEntries[uiIndex].value, std::forward&lt;CompatibleValueType&gt;(value));</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  MarkEntryAsValid(uiIndex);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  ++m_uiCount;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160; </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;}</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a61a55f0964be78ad4db6dfddc4026312">xiiHashTableBase&lt;K, V, H&gt;::Remove</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, V* out_pOldValue <span class="comment">/*= nullptr*/</span>)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;{</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  xiiUInt32 uiIndex = FindEntry(key);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <span class="keywordflow">if</span> (uiIndex != xiiInvalidIndex)</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  {</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    <span class="keywordflow">if</span> (out_pOldValue != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;      *out_pOldValue = std::move(m_pEntries[uiIndex].value);</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    RemoveInternal(uiIndex);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160; </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;}</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160; </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="keyword">typename</span> <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::Iterator</a> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a61a55f0964be78ad4db6dfddc4026312">xiiHashTableBase&lt;K, V, H&gt;::Remove</a>(<span class="keyword">const</span> <span class="keyword">typename</span> <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::Iterator</a>&amp; pos)</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;{</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  XII_ASSERT_DEBUG(pos.m_pHashTable == <span class="keyword">this</span>, <span class="stringliteral">&quot;Iterator from wrong hashtable&quot;</span>);</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  Iterator  it      = pos;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  xiiUInt32 uiIndex = pos.m_uiCurrentIndex;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  ++it;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  --it.m_uiCurrentCount;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  RemoveInternal(uiIndex);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::RemoveInternal</a>(xiiUInt32 uiIndex)</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;{</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;m_pEntries[uiIndex].key, 1);</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;m_pEntries[uiIndex].value, 1);</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  xiiUInt32 uiNextIndex = uiIndex + 1;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  <span class="keywordflow">if</span> (uiNextIndex == m_uiCapacity)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    uiNextIndex = 0;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <span class="comment">// if the next entry is free we are at the end of a chain and</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  <span class="comment">// can immediately mark this entry as free as well</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <span class="keywordflow">if</span> (IsFreeEntry(uiNextIndex))</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;    MarkEntryAsFree(uiIndex);</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="comment">// run backwards and free all deleted entries in this chain</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    xiiUInt32 uiPrevIndex = (uiIndex != 0) ? uiIndex : m_uiCapacity;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    --uiPrevIndex;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160; </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    <span class="keywordflow">while</span> (IsDeletedEntry(uiPrevIndex))</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      MarkEntryAsFree(uiPrevIndex);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160; </div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;      <span class="keywordflow">if</span> (uiPrevIndex == 0)</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        uiPrevIndex = m_uiCapacity;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;      --uiPrevIndex;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;  }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  {</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    MarkEntryAsDeleted(uiIndex);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;  }</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  --m_uiCount;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;}</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160; </div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a1bb2c25791102db37be680622f5402af">xiiHashTableBase&lt;K, V, H&gt;::TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, V&amp; out_value)<span class="keyword"> const</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  xiiUInt32 uiIndex = FindEntry(key);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;  <span class="keywordflow">if</span> (uiIndex != xiiInvalidIndex)</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;  {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    out_value = m_pEntries[uiIndex].value;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;  }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160; </div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;}</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a1bb2c25791102db37be680622f5402af">xiiHashTableBase&lt;K, V, H&gt;::TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, <span class="keyword">const</span> V*&amp; out_pValue)<span class="keyword"> const</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  xiiUInt32 uiIndex = FindEntry(key);</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  <span class="keywordflow">if</span> (uiIndex != xiiInvalidIndex)</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  {</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    out_pValue = &amp;m_pEntries[uiIndex].value;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  }</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160; </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;}</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160; </div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a1bb2c25791102db37be680622f5402af">xiiHashTableBase&lt;K, V, H&gt;::TryGetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key, V*&amp; out_pValue)<span class="keyword"> const</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  xiiUInt32 uiIndex = FindEntry(key);</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  <span class="keywordflow">if</span> (uiIndex != xiiInvalidIndex)</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  {</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;    out_pValue = &amp;m_pEntries[uiIndex].value;</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  }</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160; </div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00484"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a4a67d421ca6cbaec53333e177277d471">  484</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">typename</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator</a> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a4a67d421ca6cbaec53333e177277d471">xiiHashTableBase&lt;K, V, H&gt;::Find</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key)<span class="keyword"> const</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  xiiUInt32 uiIndex = FindEntry(key);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  <span class="keywordflow">if</span> (uiIndex == xiiInvalidIndex)</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  {</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#acd182ab4090c58ebbfaead6505c5a2df">GetEndIterator</a>();</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;  ConstIterator it(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  it.m_uiCurrentIndex = uiIndex;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  it.m_uiCurrentCount = 0; <span class="comment">// we do not know the &#39;count&#39; (which is used as an optimization), so we just use 0</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160; </div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;  <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00501"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#ab506c027ed750515afdb6d846e2b2011">  501</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">typename</span> <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::Iterator</a> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a4a67d421ca6cbaec53333e177277d471">xiiHashTableBase&lt;K, V, H&gt;::Find</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key)</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;{</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  xiiUInt32 uiIndex = FindEntry(key);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  <span class="keywordflow">if</span> (uiIndex == xiiInvalidIndex)</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  {</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#acd182ab4090c58ebbfaead6505c5a2df">GetEndIterator</a>();</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;  }</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160; </div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;  Iterator it(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;  it.m_uiCurrentIndex = uiIndex;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;  it.m_uiCurrentCount = 0; <span class="comment">// we do not know the &#39;count&#39; (which is used as an optimization), so we just use 0</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;  <span class="keywordflow">return</span> it;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;}</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160; </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> V* <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a70f0421d5453c8a15f4ccbaf899feb89">xiiHashTableBase&lt;K, V, H&gt;::GetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key)<span class="keyword"> const</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;  xiiUInt32 uiIndex = FindEntry(key);</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;  <span class="keywordflow">return</span> (uiIndex != xiiInvalidIndex) ? &amp;m_pEntries[uiIndex].value : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;}</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160; </div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="keyword">inline</span> V* <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a70f0421d5453c8a15f4ccbaf899feb89">xiiHashTableBase&lt;K, V, H&gt;::GetValue</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key)</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;{</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;  xiiUInt32 uiIndex = FindEntry(key);</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;  <span class="keywordflow">return</span> (uiIndex != xiiInvalidIndex) ? &amp;m_pEntries[uiIndex].value : <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;}</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160; </div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00533"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#ad3741658bbda9bcf456b3b058a4123d9">  533</a></span>&#160;<span class="keyword">inline</span> V&amp; <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#ad3741658bbda9bcf456b3b058a4123d9">xiiHashTableBase&lt;K, V, H&gt;::operator[]</a>(<span class="keyword">const</span> K&amp; key)</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;{</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a7c350c97854c595ecd25fcd0302f5e00">FindOrAdd</a>(key, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;}</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160; </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00539"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a7c350c97854c595ecd25fcd0302f5e00">  539</a></span>&#160;V&amp; <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a7c350c97854c595ecd25fcd0302f5e00">xiiHashTableBase&lt;K, V, H&gt;::FindOrAdd</a>(<span class="keyword">const</span> K&amp; key, <span class="keywordtype">bool</span>* out_pExisted)</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;{</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiHash  = H::Hash(key);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  xiiUInt32       uiIndex = FindEntry(uiHash, key);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160; </div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  <span class="keywordflow">if</span> (out_pExisted)</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  {</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    *out_pExisted = uiIndex != xiiInvalidIndex;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;  }</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160; </div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  <span class="keywordflow">if</span> (uiIndex == xiiInvalidIndex)</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;  {</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a8bde237754738cb0f4581a62b10c1f61">Reserve</a>(m_uiCount + 1);</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;    <span class="comment">// search for suitable insertion index again, table might have been resized</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    uiIndex = uiHash &amp; (m_uiCapacity - 1);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keywordflow">while</span> (IsValidEntry(uiIndex))</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;    {</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;      ++uiIndex;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;      <span class="keywordflow">if</span> (uiIndex == m_uiCapacity)</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        uiIndex = 0;</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    }</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160; </div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="comment">// new entry</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a>(&amp;m_pEntries[uiIndex].key, key, 1);</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a245cf437a25b93067264757598b0365a">xiiMemoryUtils::DefaultConstruct</a>(&amp;m_pEntries[uiIndex].value, 1);</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;    MarkEntryAsValid(uiIndex);</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    ++m_uiCount;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  }</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;  <span class="keywordflow">return</span> m_pEntries[uiIndex].value;</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;}</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160; </div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a619655aec7081012f36bdaadc3c60d34">xiiHashTableBase&lt;K, V, H&gt;::Contains</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key)<span class="keyword"> const</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;  <span class="keywordflow">return</span> FindEntry(key) != xiiInvalidIndex;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;}</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160; </div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00579"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a343303117791ae7436217070edb8ea26">  579</a></span>&#160;XII_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::Iterator</a> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a343303117791ae7436217070edb8ea26">xiiHashTableBase&lt;K, V, H&gt;::GetIterator</a>()</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;{</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;  Iterator iterator(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;  iterator.SetToBegin();</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;  <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;}</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160; </div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00587"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#acd182ab4090c58ebbfaead6505c5a2df">  587</a></span>&#160;XII_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code" href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::Iterator</a> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#acd182ab4090c58ebbfaead6505c5a2df">xiiHashTableBase&lt;K, V, H&gt;::GetEndIterator</a>()</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;{</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  Iterator iterator(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;  iterator.SetToEnd();</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;  <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;}</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;XII_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator</a> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a343303117791ae7436217070edb8ea26">xiiHashTableBase&lt;K, V, H&gt;::GetIterator</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;  ConstIterator iterator(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  iterator.SetToBegin();</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;  <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;}</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;XII_ALWAYS_INLINE <span class="keyword">typename</span> <a class="code" href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">xiiHashTableBase&lt;K, V, H&gt;::ConstIterator</a> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#acd182ab4090c58ebbfaead6505c5a2df">xiiHashTableBase&lt;K, V, H&gt;::GetEndIterator</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;  ConstIterator iterator(*<span class="keyword">this</span>);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;  iterator.SetToEnd();</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;  <span class="keywordflow">return</span> iterator;</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;}</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160; </div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00611"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a62a80a071f6afeeaab5ebbfeab7a27cf">  611</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a62a80a071f6afeeaab5ebbfeab7a27cf">xiiHashTableBase&lt;K, V, H&gt;::GetAllocator</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;  <span class="keywordflow">return</span> m_pAllocator;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;}</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160; </div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00617"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#ae0ccfe867bf8a994305afa36c7210c49">  617</a></span>&#160;xiiUInt64 <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#ae0ccfe867bf8a994305afa36c7210c49">xiiHashTableBase&lt;K, V, H&gt;::GetHeapMemoryUsage</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;  <span class="keywordflow">return</span> ((xiiUInt64)m_uiCapacity * <span class="keyword">sizeof</span>(Entry)) + (<span class="keyword">sizeof</span>(xiiUInt32) * (xiiUInt64)GetFlagsCapacity());</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;}</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160; </div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;<span class="comment">// private methods</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::SetCapacity</a>(xiiUInt32 uiCapacity)</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;{</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;  XII_ASSERT_DEV(<a class="code" href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">xiiMath::IsPowerOf2</a>(uiCapacity), <span class="stringliteral">&quot;uiCapacity must be a power of two to avoid modulo during lookup.&quot;</span>);</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiOldCapacity = m_uiCapacity;</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;  m_uiCapacity                  = uiCapacity;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160; </div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;  Entry*     pOldEntries    = m_pEntries;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;  xiiUInt32* pOldEntryFlags = m_pEntryFlags;</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160; </div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  m_pEntries    = XII_NEW_RAW_BUFFER(m_pAllocator, Entry, m_uiCapacity);</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  m_pEntryFlags = XII_NEW_RAW_BUFFER(m_pAllocator, xiiUInt32, GetFlagsCapacity());</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;  <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">xiiMemoryUtils::ZeroFill</a>(m_pEntryFlags, GetFlagsCapacity());</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160; </div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  m_uiCount = 0;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiOldCapacity; ++i)</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  {</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keywordflow">if</span> (GetFlags(pOldEntryFlags, i) == VALID_ENTRY)</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    {</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;      XII_VERIFY(!<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a02b91fa3e25b22b30ab1ad5633dd2802">Insert</a>(std::move(pOldEntries[i].key), std::move(pOldEntries[i].value)), <span class="stringliteral">&quot;Implementation error&quot;</span>);</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160; </div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;      <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;pOldEntries[i].key, 1);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;      <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a>(&amp;pOldEntries[i].value, 1);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    }</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160; </div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  XII_DELETE_RAW_BUFFER(m_pAllocator, pOldEntries);</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;  XII_DELETE_RAW_BUFFER(m_pAllocator, pOldEntryFlags);</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;}</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160; </div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::FindEntry</a>(<span class="keyword">const</span> CompatibleKeyType&amp; key)<span class="keyword"> const</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;  <span class="keywordflow">return</span> FindEntry(H::Hash(key), key);</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;}</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160; </div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CompatibleKeyType&gt;</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;<span class="keyword">inline</span> xiiUInt32 <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::FindEntry</a>(xiiUInt32 uiHash, <span class="keyword">const</span> CompatibleKeyType&amp; key)<span class="keyword"> const</span></div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  <span class="keywordflow">if</span> (m_uiCapacity &gt; 0)</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;  {</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    xiiUInt32 uiIndex   = uiHash &amp; (m_uiCapacity - 1);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    xiiUInt32 uiCounter = 0;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;    <span class="keywordflow">while</span> (!IsFreeEntry(uiIndex) &amp;&amp; uiCounter &lt; m_uiCapacity)</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    {</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;      <span class="keywordflow">if</span> (IsValidEntry(uiIndex) &amp;&amp; H::Equal(m_pEntries[uiIndex].key, key))</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160; </div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;      ++uiIndex;</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;      <span class="keywordflow">if</span> (uiIndex == m_uiCapacity)</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;        uiIndex = 0;</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160; </div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;      ++uiCounter;</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    }</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;  }</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;  <span class="comment">// not found</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;  <span class="keywordflow">return</span> xiiInvalidIndex;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;}</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160; </div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;<span class="preprocessor">#define XII_HASHTABLE_USE_BITFLAGS XII_ON</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160; </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;XII_FORCE_INLINE xiiUInt32 <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::GetFlagsCapacity</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_HASHTABLE_USE_BITFLAGS)</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;  <span class="keywordflow">return</span> (m_uiCapacity + 15) / 16;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  <span class="keywordflow">return</span> m_uiCapacity;</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;}</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160; </div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::GetFlags</a>(xiiUInt32* pFlags, xiiUInt32 uiEntryIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_HASHTABLE_USE_BITFLAGS)</span></div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiIndex    = uiEntryIndex / 16;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiSubIndex = (uiEntryIndex &amp; 15) * 2;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;  <span class="keywordflow">return</span> (pFlags[uiIndex] &gt;&gt; uiSubIndex) &amp; FLAGS_MASK;</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;  <span class="keywordflow">return</span> pFlags[uiEntryIndex] &amp; FLAGS_MASK;</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;}</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160; </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::SetFlags</a>(xiiUInt32 uiEntryIndex, xiiUInt32 uiFlags)</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;{</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_HASHTABLE_USE_BITFLAGS)</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiIndex    = uiEntryIndex / 16;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiSubIndex = (uiEntryIndex &amp; 15) * 2;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;  XII_ASSERT_DEBUG(uiIndex &lt; GetFlagsCapacity(), <span class="stringliteral">&quot;Out of bounds access&quot;</span>);</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;  m_pEntryFlags[uiIndex] &amp;= ~(FLAGS_MASK &lt;&lt; uiSubIndex);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;  m_pEntryFlags[uiIndex] |= (uiFlags &lt;&lt; uiSubIndex);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;  XII_ASSERT_DEV(uiEntryIndex &lt; GetFlagsCapacity(), <span class="stringliteral">&quot;Out of bounds access&quot;</span>);</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  m_pEntryFlags[uiEntryIndex] = uiFlags;</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;}</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160; </div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::IsFreeEntry</a>(xiiUInt32 uiEntryIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;  <span class="keywordflow">return</span> GetFlags(m_pEntryFlags, uiEntryIndex) == FREE_ENTRY;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;}</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160; </div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::IsValidEntry</a>(xiiUInt32 uiEntryIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;  <span class="keywordflow">return</span> GetFlags(m_pEntryFlags, uiEntryIndex) == VALID_ENTRY;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;}</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160; </div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::IsDeletedEntry</a>(xiiUInt32 uiEntryIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;  <span class="keywordflow">return</span> GetFlags(m_pEntryFlags, uiEntryIndex) == DELETED_ENTRY;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;}</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160; </div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::MarkEntryAsFree</a>(xiiUInt32 uiEntryIndex)</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;{</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;  SetFlags(uiEntryIndex, FREE_ENTRY);</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;}</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160; </div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::MarkEntryAsValid</a>(xiiUInt32 uiEntryIndex)</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;{</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;  SetFlags(uiEntryIndex, VALID_ENTRY);</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;}</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160; </div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H&gt;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;::MarkEntryAsDeleted</a>(xiiUInt32 uiEntryIndex)</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;{</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;  SetFlags(uiEntryIndex, DELETED_ENTRY);</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;}</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160; </div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160; </div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;<a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::xiiHashTable</a>() :</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt;K, V, H&gt;(A::<a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a62a80a071f6afeeaab5ebbfeab7a27cf">GetAllocator</a>())</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;{</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;}</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160; </div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::xiiHashTable</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) :</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt;K, V, H&gt;(pAllocator)</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;{</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;}</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160; </div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::xiiHashTable</a>(<span class="keyword">const</span> <a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;</a>&amp; other) :</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt;K, V, H&gt;(other, A::GetAllocator())</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;{</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;}</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160; </div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::xiiHashTable</a>(<span class="keyword">const</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp; other) :</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt;K, V, H&gt;(other, A::GetAllocator())</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;{</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;}</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160; </div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::xiiHashTable</a>(<a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;</a>&amp;&amp; other) :</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt;K, V, H&gt;(std::move(other), other.GetAllocator())</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;{</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;}</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160; </div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::xiiHashTable</a>(<a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp;&amp; other) :</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a>&lt;K, V, H&gt;(std::move(other), other.GetAllocator())</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;{</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;}</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160; </div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;{</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a740c237e4982f9d678ba0f89477a9873">xiiHashTableBase&lt;K, V, H&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;}</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160; </div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::operator=</a>(<span class="keyword">const</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;{</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a740c237e4982f9d678ba0f89477a9873">xiiHashTableBase&lt;K, V, H&gt;::operator=</a>(rhs);</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;}</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160; </div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::operator=</a>(<a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;{</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a740c237e4982f9d678ba0f89477a9873">xiiHashTableBase&lt;K, V, H&gt;::operator=</a>(std::move(rhs));</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;}</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160; </div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> K, <span class="keyword">typename</span> V, <span class="keyword">typename</span> H, <span class="keyword">typename</span> A&gt;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable&lt;K, V, H, A&gt;::operator=</a>(<a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;K, V, H&gt;</a>&amp;&amp; rhs)</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;{</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;  <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a740c237e4982f9d678ba0f89477a9873">xiiHashTableBase&lt;K, V, H&gt;::operator=</a>(std::move(rhs));</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;}</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160; </div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Hasher&gt;</div>
<div class="line"><a name="l00821"></a><span class="lineno"><a class="line" href="../../d0/da6/classxii_hash_table_base.htm#a323dec41a79b42ac21862da704fff211">  821</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d0/da6/classxii_hash_table_base.htm#a323dec41a79b42ac21862da704fff211">xiiHashTableBase&lt;KeyType, ValueType, Hasher&gt;::Swap</a>(<a class="code" href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase&lt;KeyType, ValueType, Hasher&gt;</a>&amp; other)</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;{</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_pEntries, other.m_pEntries);</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_pEntryFlags, other.m_pEntryFlags);</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiCount, other.m_uiCount);</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_uiCapacity, other.m_uiCapacity);</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a>(this-&gt;m_pAllocator, other.m_pAllocator);</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructxii_hash_table_base_1_1_iterator_htm_a94268507e786f38e25e987afe966e588"><div class="ttname"><a href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a94268507e786f38e25e987afe966e588">xiiHashTableBase::Iterator::Iterator</a></div><div class="ttdeci">XII_ALWAYS_INLINE Iterator(const Iterator &amp;rhs)</div><div class="ttdoc">Creates a new iterator from another.</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a245cf437a25b93067264757598b0365a"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a245cf437a25b93067264757598b0365a">xiiMemoryUtils::DefaultConstruct</a></div><div class="ttdeci">static void DefaultConstruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Default constructs uiCount objects of type T in a raw buffer at pDestination regardless of T being a ...</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_const_iterator_htm"><div class="ttname"><a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm">xiiHashTableBase::ConstIterator</a></div><div class="ttdoc">Const iterator.</div><div class="ttdef"><b>Definition:</b> HashTable.h:22</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_const_iterator_htm_a963b6a213b16b2e45c29de5caadf83ce"><div class="ttname"><a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a963b6a213b16b2e45c29de5caadf83ce">xiiHashTableBase::ConstIterator::Next</a></div><div class="ttdeci">void Next()</div><div class="ttdoc">Advances the iterator to the next element in the map. The iterator will not be valid anymore,...</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:68</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_const_iterator_htm_aefcca69034b9c1cc274009423134b741"><div class="ttname"><a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#aefcca69034b9c1cc274009423134b741">xiiHashTableBase::ConstIterator::operator==</a></div><div class="ttdeci">bool operator==(const typename xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt;::ConstIterator &amp;rhs) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:44</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a740c237e4982f9d678ba0f89477a9873"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a740c237e4982f9d678ba0f89477a9873">xiiHashTableBase::operator=</a></div><div class="ttdeci">void operator=(const xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;rhs)</div><div class="ttdoc">Copies the data from another hashtable into this one.</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_aece4fdeb5f8a35b58bd979302f3e9768"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">xiiMemoryUtils::CopyConstruct</a></div><div class="ttdeci">static void CopyConstruct(Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</div><div class="ttdoc">Constructs uiCount objects of type T in a raw buffer at pDestination, by creating uiCount copies of c...</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_ae0ccfe867bf8a994305afa36c7210c49"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#ae0ccfe867bf8a994305afa36c7210c49">xiiHashTableBase::GetHeapMemoryUsage</a></div><div class="ttdeci">xiiUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:617</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a1bb2c25791102db37be680622f5402af"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a1bb2c25791102db37be680622f5402af">xiiHashTableBase::TryGetValue</a></div><div class="ttdeci">bool TryGetValue(const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</div><div class="ttdoc">Returns whether an entry with the given key was found and if found writes out the corresponding value...</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a61a55f0964be78ad4db6dfddc4026312"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a61a55f0964be78ad4db6dfddc4026312">xiiHashTableBase::Remove</a></div><div class="ttdeci">bool Remove(const CompatibleKeyType &amp;key, ValueType *out_pOldValue=nullptr)</div><div class="ttdoc">Removes the entry with the given key. Returns whether an entry was removed and optionally writes out ...</div></div>
<div class="ttc" id="anamespacexii_math_htm_aa9382e85ca22aab9c1929586b2ec9b38"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#aa9382e85ca22aab9c1929586b2ec9b38">xiiMath::PowerOfTwo_Ceil</a></div><div class="ttdeci">XII_FOUNDATION_DLL xiiUInt32 PowerOfTwo_Ceil(xiiUInt32 value)</div><div class="ttdoc">Returns the next power-of-two that is &gt;= value.</div><div class="ttdef"><b>Definition:</b> Math.cpp:47</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_iterator_htm_a6104a1de1c31c28d1c87cbfb446538d4"><div class="ttname"><a href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a6104a1de1c31c28d1c87cbfb446538d4">xiiHashTableBase::Iterator::Value</a></div><div class="ttdeci">XII_FORCE_INLINE ValueType &amp; Value()</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:125</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_const_iterator_htm_a3b4778a738e997de5d6cbed268f7059f"><div class="ttname"><a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a3b4778a738e997de5d6cbed268f7059f">xiiHashTableBase::ConstIterator::operator!=</a></div><div class="ttdeci">bool operator!=(const typename xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt;::ConstIterator &amp;rhs) const</div><div class="ttdoc">Checks whether the two iterators point to the same element.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:50</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_aa46340f1eaae0121ec1bcb712ea2755f"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">xiiMemoryUtils::ZeroFill</a></div><div class="ttdeci">static void ZeroFill(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Zeros every byte in the provided memory buffer.</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a8bde237754738cb0f4581a62b10c1f61"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a8bde237754738cb0f4581a62b10c1f61">xiiHashTableBase::Reserve</a></div><div class="ttdeci">void Reserve(xiiUInt32 uiCapacity)</div><div class="ttdoc">Expands the hashtable by over-allocating the internal storage so that the load factor is lower or equ...</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:266</div></div>
<div class="ttc" id="anamespacexii_math_htm_a2e7c389d4195d010ba0c207a1e981a58"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Swap(T &amp;ref_f1, T &amp;ref_f2)</div><div class="ttdoc">Swaps the values in the two variables f1 and f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:224</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_af6ae109416cbfc9d32a70ced89e1d83e"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#af6ae109416cbfc9d32a70ced89e1d83e">xiiHashTableBase::~xiiHashTableBase</a></div><div class="ttdeci">~xiiHashTableBase()</div><div class="ttdoc">Destructor.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:168</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a70f0421d5453c8a15f4ccbaf899feb89"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a70f0421d5453c8a15f4ccbaf899feb89">xiiHashTableBase::GetValue</a></div><div class="ttdeci">const ValueType * GetValue(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr.</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a343303117791ae7436217070edb8ea26"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a343303117791ae7436217070edb8ea26">xiiHashTableBase::GetIterator</a></div><div class="ttdeci">Iterator GetIterator()</div><div class="ttdoc">Returns an Iterator to the very first element.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:579</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_const_iterator_htm_a1d041697b1a42808a6fac1e828f19e26"><div class="ttname"><a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a1d041697b1a42808a6fac1e828f19e26">xiiHashTableBase::ConstIterator::Value</a></div><div class="ttdeci">const ValueType &amp; Value() const</div><div class="ttdoc">Returns the 'value' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:62</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a848fa98f7c9190ffa77e84d8b88cb3a6"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a848fa98f7c9190ffa77e84d8b88cb3a6">xiiHashTableBase::Compact</a></div><div class="ttdeci">void Compact()</div><div class="ttdoc">Tries to compact the hashtable to avoid wasting memory.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:284</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_ad3741658bbda9bcf456b3b058a4123d9"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#ad3741658bbda9bcf456b3b058a4123d9">xiiHashTableBase::operator[]</a></div><div class="ttdeci">ValueType &amp; operator[](const KeyType &amp;key)</div><div class="ttdoc">Returns the value to the given key if found or creates a new entry with the given key and a default c...</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:533</div></div>
<div class="ttc" id="anamespacexii_math_htm_a12b773e8c11bb90d8edc742cdad5d2f1"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">xiiMath::IsPowerOf2</a></div><div class="ttdeci">constexpr XII_FORCE_INLINE bool IsPowerOf2(xiiInt32 value)</div><div class="ttdoc">Returns true, if there exists some x with 2^x == value.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:254</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_const_iterator_htm_a26734052f020259435df157652fc2ff8"><div class="ttname"><a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a26734052f020259435df157652fc2ff8">xiiHashTableBase::ConstIterator::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks whether this iterator points to a valid element.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:38</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_iterator_htm"><div class="ttname"><a href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm">xiiHashTableBase::Iterator</a></div><div class="ttdoc">Iterator with write access.</div><div class="ttdef"><b>Definition:</b> HashTable.h:69</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm">xiiHashTableBase</a></div><div class="ttdoc">Implementation of a hashtable which stores key/value pairs.</div><div class="ttdef"><b>Definition:</b> HashTable.h:18</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_iterator_htm_a3600ee288cb266fe302342c3347ebe4e"><div class="ttname"><a href="../../d7/dcf/structxii_hash_table_base_1_1_iterator.htm#a3600ee288cb266fe302342c3347ebe4e">xiiHashTableBase::Iterator::operator=</a></div><div class="ttdeci">XII_ALWAYS_INLINE void operator=(const Iterator &amp;rhs)</div><div class="ttdoc">Assigns one iterator no another.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:117</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a733f7eaca9fcf4507120a86b1281dee0"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a733f7eaca9fcf4507120a86b1281dee0">xiiHashTableBase::operator==</a></div><div class="ttdeci">bool operator==(const xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;rhs) const</div><div class="ttdoc">Compares this table to another table.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:235</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a49b9f741e5574293c600f9ec72afea9f"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a49b9f741e5574293c600f9ec72afea9f">xiiHashTableBase::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active entries in the table.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:302</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a323dec41a79b42ac21862da704fff211"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a323dec41a79b42ac21862da704fff211">xiiHashTableBase::Swap</a></div><div class="ttdeci">void Swap(xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;other)</div><div class="ttdoc">Swaps this map with the other one.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:821</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_const_iterator_htm_a558d72a670ebdb9f465a1e11ab785701"><div class="ttname"><a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a558d72a670ebdb9f465a1e11ab785701">xiiHashTableBase::ConstIterator::Key</a></div><div class="ttdeci">const KeyType &amp; Key() const</div><div class="ttdoc">Returns the 'key' of the element that this iterator points to.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:56</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a86dc640bd82c5855ecbace5d95b1549e"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a86dc640bd82c5855ecbace5d95b1549e">xiiMemoryUtils::CopyOrMoveConstruct</a></div><div class="ttdeci">static void CopyOrMoveConstruct(Destination *pDestination, Source &amp;&amp;source)</div><div class="ttdoc">This function will either move call MoveConstruct or CopyConstruct for a single element source,...</div></div>
<div class="ttc" id="aclassxii_allocator_base_htm"><div class="ttname"><a href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:21</div></div>
<div class="ttc" id="astructxii_hash_table_base_1_1_const_iterator_htm_a34407ac39cbe09cb13206902a0e1572f"><div class="ttname"><a href="../../d2/d41/structxii_hash_table_base_1_1_const_iterator.htm#a34407ac39cbe09cb13206902a0e1572f">xiiHashTableBase::ConstIterator::operator++</a></div><div class="ttdeci">void operator++()</div><div class="ttdoc">Shorthand for 'Next'.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:94</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_ac324b2ff91ba07417d6b3b0536cd0de7"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#ac324b2ff91ba07417d6b3b0536cd0de7">xiiHashTableBase::xiiHashTableBase</a></div><div class="ttdeci">xiiHashTableBase(xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Creates an empty hashtable. Does not allocate any data yet.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:134</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_af682d436030330453ee5de06009d0043"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#af682d436030330453ee5de06009d0043">xiiHashTableBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the hashtable does not contain any elements.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:308</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_a6c8728654ad1b5c0c9dcbb597a93594d"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">xiiMemoryUtils::Destruct</a></div><div class="ttdeci">static void Destruct(T *pDestination, size_t uiCount=1)</div><div class="ttdoc">Destructs uiCount objects of type T at pDestination.</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a10f2f895f9d36bcb8f332e1f0323a896"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a10f2f895f9d36bcb8f332e1f0323a896">xiiHashTableBase::operator!=</a></div><div class="ttdeci">bool operator!=(const xiiHashTableBase&lt; KeyType, ValueType, Hasher &gt; &amp;rhs) const</div><div class="ttdoc">Compares this table to another table.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:260</div></div>
<div class="ttc" id="aclassxii_hash_table_htm"><div class="ttname"><a href="../../d8/dc2/classxii_hash_table.htm">xiiHashTable</a></div><div class="ttdef"><b>Definition:</b> HashTable.h:264</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a02b91fa3e25b22b30ab1ad5633dd2802"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a02b91fa3e25b22b30ab1ad5633dd2802">xiiHashTableBase::Insert</a></div><div class="ttdeci">bool Insert(CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value, ValueType *out_pOldValue=nullptr)</div><div class="ttdoc">Inserts the key value pair or replaces value if an entry with the given key already exists.</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a6e77dc508bfe72bb60bc8ae923fa6353"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a6e77dc508bfe72bb60bc8ae923fa6353">xiiHashTableBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the table.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:314</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a4a67d421ca6cbaec53333e177277d471"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a4a67d421ca6cbaec53333e177277d471">xiiHashTableBase::Find</a></div><div class="ttdeci">ConstIterator Find(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Searches for key, returns a ConstIterator to it or an invalid iterator, if no such key is found....</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:484</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a7c350c97854c595ecd25fcd0302f5e00"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a7c350c97854c595ecd25fcd0302f5e00">xiiHashTableBase::FindOrAdd</a></div><div class="ttdeci">ValueType &amp; FindOrAdd(const KeyType &amp;key, bool *pExisted)</div><div class="ttdoc">Returns the value stored at the given key. If none exists, one is created. bExisted indicates whether...</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:539</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a619655aec7081012f36bdaadc3c60d34"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a619655aec7081012f36bdaadc3c60d34">xiiHashTableBase::Contains</a></div><div class="ttdeci">bool Contains(const CompatibleKeyType &amp;key) const</div><div class="ttdoc">Returns if an entry with given key exists in the table.</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_a62a80a071f6afeeaab5ebbfeab7a27cf"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#a62a80a071f6afeeaab5ebbfeab7a27cf">xiiHashTableBase::GetAllocator</a></div><div class="ttdeci">xiiAllocatorBase * GetAllocator() const</div><div class="ttdoc">Returns the allocator that is used by this instance.</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:611</div></div>
<div class="ttc" id="aclassxii_hash_table_base_htm_acd182ab4090c58ebbfaead6505c5a2df"><div class="ttname"><a href="../../d0/da6/classxii_hash_table_base.htm#acd182ab4090c58ebbfaead6505c5a2df">xiiHashTableBase::GetEndIterator</a></div><div class="ttdeci">Iterator GetEndIterator()</div><div class="ttdoc">Returns an Iterator to the first element that is not part of the hash-table. Needed to support range ...</div><div class="ttdef"><b>Definition:</b> HashTable_inl.h:587</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_7f59ab18dbc50035dfc0ee7070867286.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_acc055bf9d45372e5f916366fab93514.htm">Implementation</a></li><li class="navelem"><b>HashTable_inl.h</b></li>
    <li class="footer">Generated on Fri Jun 16 2023 14:12:42 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

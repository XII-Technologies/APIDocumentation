<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Math/Implementation/BoundingSphere_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d9/d6f/_bounding_sphere__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">BoundingSphere_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Mat4.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00006"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#ab29bdcaf8caaaabbfc3cde668450992a">    6</a></span>&#160;XII_FORCE_INLINE <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ab29bdcaf8caaaabbfc3cde668450992a">xiiBoundingSphereTemplate&lt;Type&gt;::xiiBoundingSphereTemplate</a>()</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;{</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_COMPILE_FOR_DEBUG)</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  <span class="comment">// Initialize all data to NaN in debug mode to find problems with uninitialized data easier.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="comment">// m_vCenter is already initialized to NaN by its own constructor.</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;  <span class="keyword">const</span> Type TypeNaN = xiiMath::NaN&lt;Type&gt;();</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  m_fRadius          = TypeNaN;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;}</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#af7b6e5334173d3f8903dd21102f50459">   17</a></span>&#160;XII_FORCE_INLINE <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ab29bdcaf8caaaabbfc3cde668450992a">xiiBoundingSphereTemplate&lt;Type&gt;::xiiBoundingSphereTemplate</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vCenter, Type fRadius) :</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  m_vCenter(vCenter), m_fRadius(fRadius)</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;{</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;}</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a693d1bc86eb09c371a5ea478f009c208">   23</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a693d1bc86eb09c371a5ea478f009c208">xiiBoundingSphereTemplate&lt;Type&gt;::SetZero</a>()</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  m_vCenter.SetZero();</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  m_fRadius = 0.0f;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;}</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae8bc580df1b64ad4dac86266b70afd15">   30</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae8bc580df1b64ad4dac86266b70afd15">xiiBoundingSphereTemplate&lt;Type&gt;::IsZero</a>(Type fEpsilon <span class="comment">/* = xiiMath::DefaultEpsilon&lt;Type&gt;() */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keywordflow">return</span> m_vCenter.IsZero(fEpsilon) &amp;&amp; <a class="code" href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">xiiMath::IsZero</a>(m_fRadius, fEpsilon);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a6d3ef02d63319009bff3083b16459cfc">   36</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a6d3ef02d63319009bff3083b16459cfc">xiiBoundingSphereTemplate&lt;Type&gt;::SetInvalid</a>()</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  m_vCenter.SetZero();</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  m_fRadius = -xiiMath::SmallEpsilon&lt;Type&gt;();</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;}</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#aec97f1e17f2252554e530afeb7357567">   43</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#aec97f1e17f2252554e530afeb7357567">xiiBoundingSphereTemplate&lt;Type&gt;::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordflow">return</span> (m_vCenter.IsValid() &amp;&amp; m_fRadius &gt;= 0.0f);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;}</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a5d485d2bbfa866051dc6c8760673f17a">   49</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a5d485d2bbfa866051dc6c8760673f17a">xiiBoundingSphereTemplate&lt;Type&gt;::IsNaN</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keywordflow">return</span> (m_vCenter.IsNaN() || xiiMath::IsNaN(m_fRadius));</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;}</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#acaa11fe09e9bd6030e7e30977f983894">   55</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#acaa11fe09e9bd6030e7e30977f983894">xiiBoundingSphereTemplate&lt;Type&gt;::SetElements</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vCenter, Type fRadius)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;{</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  m_vCenter = vCenter;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  m_fRadius = fRadius;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  XII_ASSERT_DEBUG(IsValid(), <span class="stringliteral">&quot;The sphere was created with invalid values.&quot;</span>);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;}</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00064"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a80193ef1d62c8c60e85f0040e7bc8fd3">   64</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a80193ef1d62c8c60e85f0040e7bc8fd3">xiiBoundingSphereTemplate&lt;Type&gt;::ExpandToInclude</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vPoint)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keyword">const</span> Type fDistSQR = (vPoint - m_vCenter).GetLengthSquared();</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(m_fRadius) &lt; fDistSQR)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    m_fRadius = <a class="code" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a>(fDistSQR);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#aec9db03e07e352bc9e86f04f4b1cbd0e">   73</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a80193ef1d62c8c60e85f0040e7bc8fd3">xiiBoundingSphereTemplate&lt;Type&gt;::ExpandToInclude</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  <span class="keyword">const</span> Type fReqRadius = (rhs.m_vCenter - m_vCenter).GetLength() + rhs.m_fRadius;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  m_fRadius = <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(m_fRadius, fReqRadius);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#ab7905bdaac8b200e46f9fc506bd65a27">   81</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ab7905bdaac8b200e46f9fc506bd65a27">xiiBoundingSphereTemplate&lt;Type&gt;::Grow</a>(Type fDiff)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  XII_ASSERT_DEBUG(IsValid(), <span class="stringliteral">&quot;Cannot grow a sphere that is invalid.&quot;</span>);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  m_fRadius += fDiff;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  XII_ASSERT_DEBUG(IsValid(), <span class="stringliteral">&quot;The grown sphere has become invalid.&quot;</span>);</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a6a9fea36ddcec67afac9cba4f59b5485">   91</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a6a9fea36ddcec67afac9cba4f59b5485">xiiBoundingSphereTemplate&lt;Type&gt;::IsIdentical</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  <span class="keywordflow">return</span> (m_vCenter.IsIdentical(rhs.m_vCenter) &amp;&amp; m_fRadius == rhs.m_fRadius);</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;}</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#af6780eefe68e16016c31f17fc276465c">   97</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#af6780eefe68e16016c31f17fc276465c">xiiBoundingSphereTemplate&lt;Type&gt;::IsEqual</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs, Type fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordflow">return</span> (m_vCenter.IsEqual(rhs.m_vCenter, fEpsilon) &amp;&amp; <a class="code" href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">xiiMath::IsEqual</a>(m_fRadius, rhs.m_fRadius, fEpsilon));</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;}</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;{</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a6a9fea36ddcec67afac9cba4f59b5485">IsIdentical</a>(rhs);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; lhs, <span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;{</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keywordflow">return</span> !lhs.<a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a6a9fea36ddcec67afac9cba4f59b5485">IsIdentical</a>(rhs);</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae7979964408018ed38e43c448914730a">  115</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae7979964408018ed38e43c448914730a">xiiBoundingSphereTemplate&lt;Type&gt;::Translate</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vTranslation)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  m_vCenter += vTranslation;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#aa7b595722f621ecff2fd21fe1ce37800">  121</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#aa7b595722f621ecff2fd21fe1ce37800">xiiBoundingSphereTemplate&lt;Type&gt;::ScaleFromCenter</a>(Type fScale)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;{</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  XII_ASSERT_DEBUG(fScale &gt;= 0.0f, <span class="stringliteral">&quot;Cannot invert the sphere.&quot;</span>);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  m_fRadius *= fScale;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;}</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae773cba15bdae9d0952c3e11bb43d0c5">  131</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae773cba15bdae9d0952c3e11bb43d0c5">xiiBoundingSphereTemplate&lt;Type&gt;::ScaleFromOrigin</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vScale)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  XII_ASSERT_DEBUG(vScale.x &gt;= 0.0f, <span class="stringliteral">&quot;Cannot invert the sphere.&quot;</span>);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  XII_ASSERT_DEBUG(vScale.y &gt;= 0.0f, <span class="stringliteral">&quot;Cannot invert the sphere.&quot;</span>);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  XII_ASSERT_DEBUG(vScale.z &gt;= 0.0f, <span class="stringliteral">&quot;Cannot invert the sphere.&quot;</span>);</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  m_vCenter = m_vCenter.CompMul(vScale);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="comment">// Scale the radius by the maximum scaling factor (the sphere cannot become an ellipsoid,</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="comment">// so to be a &#39;bounding&#39; sphere, it should be as large as possible.</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  m_fRadius *= <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(vScale.x, vScale.y, vScale.z);</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;}</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#ad320a1dbfc60fe192dc29d744ca50752">  145</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ad320a1dbfc60fe192dc29d744ca50752">xiiBoundingSphereTemplate&lt;Type&gt;::TransformFromOrigin</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/classxii_mat4_template.htm">xiiMat4Template&lt;Type&gt;</a>&amp; mTransform)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;{</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  m_vCenter = mTransform.<a class="code" href="../../d1/dec/classxii_mat4_template.htm#ad143eddbdd5e71bd018b013439c0c120">TransformPosition</a>(m_vCenter);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a> Scale = mTransform.<a class="code" href="../../d1/dec/classxii_mat4_template.htm#a3e0db63cc2dac827fe433d16247e5f97">GetScalingFactors</a>();</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  m_fRadius *= <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(Scale.x, Scale.y, Scale.z);</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;}</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a38bf494dafd4350db92297c289297118">  154</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a38bf494dafd4350db92297c289297118">xiiBoundingSphereTemplate&lt;Type&gt;::TransformFromCenter</a>(<span class="keyword">const</span> <a class="code" href="../../d1/dec/classxii_mat4_template.htm">xiiMat4Template&lt;Type&gt;</a>&amp; mTransform)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;{</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  m_vCenter += mTransform.<a class="code" href="../../d1/dec/classxii_mat4_template.htm#a6b5d1228cdbe6fda34c621dd0fad3184">GetTranslationVector</a>();</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a> Scale = mTransform.<a class="code" href="../../d1/dec/classxii_mat4_template.htm#a3e0db63cc2dac827fe433d16247e5f97">GetScalingFactors</a>();</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  m_fRadius *= <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(Scale.x, Scale.y, Scale.z);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;}</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a07eff45caa8016fd8d2a13f4b8c7be40">  163</a></span>&#160;Type <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a07eff45caa8016fd8d2a13f4b8c7be40">xiiBoundingSphereTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keywordflow">return</span> (vPoint - m_vCenter).GetLength() - m_fRadius;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;}</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00169"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#adc2c820d742a73adc586440c762ca406">  169</a></span>&#160;Type <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a07eff45caa8016fd8d2a13f4b8c7be40">xiiBoundingSphereTemplate&lt;Type&gt;::GetDistanceTo</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <span class="keywordflow">return</span> (rhs.m_vCenter - m_vCenter).GetLength() - m_fRadius - rhs.m_fRadius;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#aa3582b68594ea926746e7c87f1965c27">  175</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#aa3582b68594ea926746e7c87f1965c27">xiiBoundingSphereTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keywordflow">return</span> (vPoint - m_vCenter).GetLengthSquared() &lt;= <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(m_fRadius);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;}</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a1f9656c1bf1c2baabc26bd1a43c060c2">  181</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#aa3582b68594ea926746e7c87f1965c27">xiiBoundingSphereTemplate&lt;Type&gt;::Contains</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordflow">return</span> (rhs.m_vCenter - m_vCenter).GetLength() + rhs.m_fRadius &lt;= m_fRadius;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#aa978b09e239e830d9f52f81d1a3fff0b">  187</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#aefef38c6ad5ce13dfc1a304d7a5ae739">xiiBoundingSphereTemplate&lt;Type&gt;::Overlaps</a>(<span class="keyword">const</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keywordflow">return</span> (rhs.m_vCenter - m_vCenter).GetLengthSquared() &lt; <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(rhs.m_fRadius + m_fRadius);</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;}</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00193"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae0e5e3692952a90c02094170ef0c9af9">  193</a></span>&#160;<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae0e5e3692952a90c02094170ef0c9af9">xiiBoundingSphereTemplate&lt;Type&gt;::GetClampedPoint</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vPoint)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;{</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a> vDir     = vPoint - m_vCenter;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keyword">const</span> Type                  fDistSQR = vDir.<a class="code" href="../../d9/d9a/classxii_vec3_template.htm#a20c6aefe09afd9ee32cee75ac3490b61">GetLengthSquared</a>();</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="comment">// return the point, if it is already inside the sphere</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keywordflow">if</span> (fDistSQR &lt;= <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(m_fRadius))</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">return</span> vPoint;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="comment">// otherwise return a point on the surface of the sphere</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">const</span> Type fLength = <a class="code" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a>(fDistSQR);</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keywordflow">return</span> m_vCenter + m_fRadius * (vDir / fLength);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;}</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00210"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a6ad3bff7129714d993f02c75b2853e15">  210</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#aa3582b68594ea926746e7c87f1965c27">xiiBoundingSphereTemplate&lt;Type&gt;::Contains</a>(</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pPoints,</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  xiiUInt32                    uiNumPoints,</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  xiiUInt32                    uiStride <span class="comment">/* = sizeof(xiiVec3Template) */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  XII_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  XII_ASSERT_DEBUG(uiNumPoints &gt; 0, <span class="stringliteral">&quot;The array must contain at least one point.&quot;</span>);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  XII_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160; </div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  <span class="keyword">const</span> Type fRadiusSQR = <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(m_fRadius);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">if</span> ((*pCur - m_vCenter).GetLengthSquared() &gt; fRadiusSQR)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    pCur = <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#ab25d38b037822ed8c510f8756feaf7e7">xiiMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  }</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;}</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#aefef38c6ad5ce13dfc1a304d7a5ae739">  235</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#aefef38c6ad5ce13dfc1a304d7a5ae739">xiiBoundingSphereTemplate&lt;Type&gt;::Overlaps</a>(</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pPoints,</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  xiiUInt32                    uiNumPoints,</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  xiiUInt32                    uiStride <span class="comment">/* = sizeof(xiiVec3Template) */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  XII_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  XII_ASSERT_DEBUG(uiNumPoints &gt; 0, <span class="stringliteral">&quot;The array must contain at least one point.&quot;</span>);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  XII_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keyword">const</span> Type fRadiusSQR = <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(m_fRadius);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">if</span> ((*pCur - m_vCenter).GetLengthSquared() &lt;= fRadiusSQR)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    pCur = <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#ab25d38b037822ed8c510f8756feaf7e7">xiiMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  }</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a4557475810efa0432f86d10be6f65cff">  260</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a4557475810efa0432f86d10be6f65cff">xiiBoundingSphereTemplate&lt;Type&gt;::SetFromPoints</a>(</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pPoints,</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  xiiUInt32                    uiNumPoints,</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  xiiUInt32                    uiStride <span class="comment">/* = sizeof(xiiVec3Template) */</span>)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  XII_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  XII_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  XII_ASSERT_DEBUG(uiNumPoints &gt; 0, <span class="stringliteral">&quot;The array must contain at least one point.&quot;</span>);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a> vCenter(0.0f);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    vCenter += *pCur;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    pCur = <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#ab25d38b037822ed8c510f8756feaf7e7">xiiMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  vCenter /= (Type)uiNumPoints;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  Type fMaxDistSQR = 0.0f;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  pCur = &amp;pPoints[0];</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keyword">const</span> Type fDistSQR = (*pCur - vCenter).GetLengthSquared();</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    fMaxDistSQR         = <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(fMaxDistSQR, fDistSQR);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    pCur = <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#ab25d38b037822ed8c510f8756feaf7e7">xiiMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  }</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  m_vCenter = vCenter;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  m_fRadius = <a class="code" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a>(fMaxDistSQR);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  XII_ASSERT_DEBUG(IsValid(), <span class="stringliteral">&quot;The point cloud contained corrupted data.&quot;</span>);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;}</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a938fb66744036731ba15de54429ffe5d">  299</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a80193ef1d62c8c60e85f0040e7bc8fd3">xiiBoundingSphereTemplate&lt;Type&gt;::ExpandToInclude</a>(</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pPoints,</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  xiiUInt32                    uiNumPoints,</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  xiiUInt32                    uiStride <span class="comment">/* = sizeof(xiiVec3Template) */</span>)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;{</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  XII_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  XII_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160; </div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  Type fMaxDistSQR = 0.0f;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  {</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">const</span> Type fDistSQR = (*pCur - m_vCenter).GetLengthSquared();</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    fMaxDistSQR         = <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(fMaxDistSQR, fDistSQR);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160; </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    pCur = <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#ab25d38b037822ed8c510f8756feaf7e7">xiiMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(m_fRadius) &lt; fMaxDistSQR)</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    m_fRadius = <a class="code" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a>(fMaxDistSQR);</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a83001db854c35b3c9e94ff3a5f5868d1">  324</a></span>&#160;Type <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a07eff45caa8016fd8d2a13f4b8c7be40">xiiBoundingSphereTemplate&lt;Type&gt;::GetDistanceTo</a>(</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pPoints,</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  xiiUInt32                    uiNumPoints,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  xiiUInt32                    uiStride <span class="comment">/* = sizeof(xiiVec3Template) */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  XII_ASSERT_DEBUG(pPoints != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The array must not be empty.&quot;</span>);</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  XII_ASSERT_DEBUG(uiNumPoints &gt; 0, <span class="stringliteral">&quot;The array must contain at least one point.&quot;</span>);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  XII_ASSERT_DEBUG(uiStride &gt;= <span class="keyword">sizeof</span>(<a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>), <span class="stringliteral">&quot;The data must not overlap.&quot;</span>);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* pCur = &amp;pPoints[0];</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  Type fMinDistSQR = xiiMath::MaxValue&lt;Type&gt;();</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; uiNumPoints; ++i)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <span class="keyword">const</span> Type fDistSQR = (*pCur - m_vCenter).GetLengthSquared();</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    fMinDistSQR = <a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a>(fMinDistSQR, fDistSQR);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160; </div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    pCur = <a class="code" href="../../d8/d9d/classxii_memory_utils.htm#ab25d38b037822ed8c510f8756feaf7e7">xiiMemoryUtils::AddByteOffset</a>(pCur, uiStride);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  }</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a>(fMinDistSQR);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00350"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae306aa33ed2e7328d3ec737e24a8e3d4">  350</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#ae306aa33ed2e7328d3ec737e24a8e3d4">xiiBoundingSphereTemplate&lt;Type&gt;::GetRayIntersection</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vRayStartPos, <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vRayDirNormalized, Type* out_pIntersectionDistance <span class="comment">/* = nullptr */</span>, <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* out_pIntersection <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  XII_ASSERT_DEBUG(vRayDirNormalized.<a class="code" href="../../d9/d9a/classxii_vec3_template.htm#a87cdc5a0c4bf781b495dfbb7617d5414">IsNormalized</a>(), <span class="stringliteral">&quot;The ray direction must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="comment">// Ugly Code taken from &#39;Real Time Rendering First Edition&#39; Page 299</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  <span class="keyword">const</span> Type                  fRadiusSQR = <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(m_fRadius);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a> vRelPos    = m_vCenter - vRayStartPos;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <span class="keyword">const</span> Type d             = vRelPos.<a class="code" href="../../d9/d9a/classxii_vec3_template.htm#a29f0f6353abb8f23538f847533b56b4a">Dot</a>(vRayDirNormalized);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  <span class="keyword">const</span> Type fRelPosLenSQR = vRelPos.<a class="code" href="../../d9/d9a/classxii_vec3_template.htm#a20c6aefe09afd9ee32cee75ac3490b61">GetLengthSquared</a>();</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160; </div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  <span class="keywordflow">if</span> (d &lt; 0.0f &amp;&amp; fRelPosLenSQR &gt; fRadiusSQR)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <span class="keyword">const</span> Type m2 = fRelPosLenSQR - <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(d);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  <span class="keywordflow">if</span> (m2 &gt; fRadiusSQR)</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keyword">const</span> Type q = <a class="code" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a>(fRadiusSQR - m2);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  Type fIntersectionTime;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="keywordflow">if</span> (fRelPosLenSQR &gt; fRadiusSQR)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    fIntersectionTime = d - q;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    fIntersectionTime = d + q;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160; </div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <span class="keywordflow">if</span> (out_pIntersectionDistance)</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    *out_pIntersectionDistance = fIntersectionTime;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  <span class="keywordflow">if</span> (out_pIntersection)</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    *out_pIntersection = vRayStartPos + vRayDirNormalized * fIntersectionTime;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160; </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;}</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="../../dd/d79/classxii_bounding_sphere_template.htm#a909963bb233c3de64014635759bfa08d">  388</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dd/d79/classxii_bounding_sphere_template.htm#a909963bb233c3de64014635759bfa08d">xiiBoundingSphereTemplate&lt;Type&gt;::GetLineSegmentIntersection</a>(<span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vLineStartPos, <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>&amp; vLineEndPos, Type* out_pHitFraction <span class="comment">/* = nullptr */</span>, <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>* out_pIntersection <span class="comment">/* = nullptr */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  Type fIntersection = 0.0f;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a> vDir     = vLineEndPos - vLineStartPos;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <a class="code" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template&lt;Type&gt;</a>       vDirNorm = vDir;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  <span class="keyword">const</span> Type                  fLen     = vDirNorm.<a class="code" href="../../d9/d9a/classxii_vec3_template.htm#a6b0f884fe98ccb70c264d38f66eeae86">GetLengthAndNormalize</a>();</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  <span class="keywordflow">if</span> (!GetRayIntersection(vLineStartPos, vDirNorm, &amp;fIntersection))</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  <span class="keywordflow">if</span> (fIntersection &gt; fLen)</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="keywordflow">if</span> (out_pHitFraction)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    *out_pHitFraction = fIntersection / fLen;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  <span class="keywordflow">if</span> (out_pIntersection)</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    *out_pIntersection = vLineStartPos + vDirNorm * fIntersection;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;}</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="preprocessor">#include &lt;Foundation/Math/Implementation/AllClasses_inl.h&gt;</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a5d485d2bbfa866051dc6c8760673f17a"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a5d485d2bbfa866051dc6c8760673f17a">xiiBoundingSphereTemplate::IsNaN</a></div><div class="ttdeci">bool IsNaN() const</div><div class="ttdoc">Returns whether any value is NaN.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:49</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_aa7b595722f621ecff2fd21fe1ce37800"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#aa7b595722f621ecff2fd21fe1ce37800">xiiBoundingSphereTemplate::ScaleFromCenter</a></div><div class="ttdeci">void ScaleFromCenter(Type fScale)</div><div class="ttdoc">Scales the sphere's size, does not change its center position.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:121</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_aa3582b68594ea926746e7c87f1965c27"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#aa3582b68594ea926746e7c87f1965c27">xiiBoundingSphereTemplate::Contains</a></div><div class="ttdeci">bool Contains(const xiiVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns true if the given point is inside the sphere.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:175</div></div>
<div class="ttc" id="aclassxii_memory_utils_htm_ab25d38b037822ed8c510f8756feaf7e7"><div class="ttname"><a href="../../d8/d9d/classxii_memory_utils.htm#ab25d38b037822ed8c510f8756feaf7e7">xiiMemoryUtils::AddByteOffset</a></div><div class="ttdeci">static T * AddByteOffset(T *pPtr, ptrdiff_t iOffset)</div><div class="ttdoc">Returns the address stored in ptr plus the given byte offset iOffset, cast to type T.</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a38bf494dafd4350db92297c289297118"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a38bf494dafd4350db92297c289297118">xiiBoundingSphereTemplate::TransformFromCenter</a></div><div class="ttdeci">void TransformFromCenter(const xiiMat4Template&lt; Type &gt; &amp;mTransform)</div><div class="ttdoc">Transforms the sphere with the given matrix from its own center. I.e. rotations have no effect,...</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:154</div></div>
<div class="ttc" id="aclassxii_vec3_template_htm_a6b0f884fe98ccb70c264d38f66eeae86"><div class="ttname"><a href="../../d9/d9a/classxii_vec3_template.htm#a6b0f884fe98ccb70c264d38f66eeae86">xiiVec3Template::GetLengthAndNormalize</a></div><div class="ttdeci">Type GetLengthAndNormalize()</div><div class="ttdoc">Normalizes this vector and returns its previous length in one operation. More efficient than calling ...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:82</div></div>
<div class="ttc" id="aclassxii_vec3_template_htm_a20c6aefe09afd9ee32cee75ac3490b61"><div class="ttname"><a href="../../d9/d9a/classxii_vec3_template.htm#a20c6aefe09afd9ee32cee75ac3490b61">xiiVec3Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:66</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a6a9fea36ddcec67afac9cba4f59b5485"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a6a9fea36ddcec67afac9cba4f59b5485">xiiBoundingSphereTemplate::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const xiiBoundingSphereTemplate &amp;rhs) const</div><div class="ttdoc">Tests whether two spheres are identical.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:91</div></div>
<div class="ttc" id="aclassxii_mat4_template_htm_a6b5d1228cdbe6fda34c621dd0fad3184"><div class="ttname"><a href="../../d1/dec/classxii_mat4_template.htm#a6b5d1228cdbe6fda34c621dd0fad3184">xiiMat4Template::GetTranslationVector</a></div><div class="ttdeci">const xiiVec3Template&lt; Type &gt; GetTranslationVector() const</div><div class="ttdoc">Returns the first 3 components of the last column.</div><div class="ttdef"><b>Definition:</b> Mat4_inl.h:351</div></div>
<div class="ttc" id="anamespacexii_math_htm_a4d6f8bf4858245e40a706a3aabd0a59e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:59</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_ab7905bdaac8b200e46f9fc506bd65a27"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#ab7905bdaac8b200e46f9fc506bd65a27">xiiBoundingSphereTemplate::Grow</a></div><div class="ttdeci">void Grow(Type fDiff)</div><div class="ttdoc">Increases the size of the sphere by the given amount.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:81</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_ab29bdcaf8caaaabbfc3cde668450992a"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#ab29bdcaf8caaaabbfc3cde668450992a">xiiBoundingSphereTemplate::xiiBoundingSphereTemplate</a></div><div class="ttdeci">xiiBoundingSphereTemplate()</div><div class="ttdoc">Default constructor does not initialize any data.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:6</div></div>
<div class="ttc" id="aclassxii_mat4_template_htm"><div class="ttname"><a href="../../d1/dec/classxii_mat4_template.htm">xiiMat4Template</a></div><div class="ttdoc">A 4x4 component matrix class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:171</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_aec97f1e17f2252554e530afeb7357567"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#aec97f1e17f2252554e530afeb7357567">xiiBoundingSphereTemplate::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Returns whether the sphere has valid values.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:43</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_ae0e5e3692952a90c02094170ef0c9af9"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#ae0e5e3692952a90c02094170ef0c9af9">xiiBoundingSphereTemplate::GetClampedPoint</a></div><div class="ttdeci">const xiiVec3Template&lt; Type &gt; GetClampedPoint(const xiiVec3Template&lt; Type &gt; &amp;vPoint)</div><div class="ttdoc">Clamps the given position to the volume of the sphere. The resulting point will always be inside the ...</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:193</div></div>
<div class="ttc" id="anamespacexii_math_htm_a76f446939ad58af387fb79b8fd9deff7"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">xiiMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:271</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_acaa11fe09e9bd6030e7e30977f983894"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#acaa11fe09e9bd6030e7e30977f983894">xiiBoundingSphereTemplate::SetElements</a></div><div class="ttdeci">void SetElements(const xiiVec3Template&lt; Type &gt; &amp;vCenter, Type fRadius)</div><div class="ttdoc">Sets the sphere to the given values.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:55</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a80193ef1d62c8c60e85f0040e7bc8fd3"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a80193ef1d62c8c60e85f0040e7bc8fd3">xiiBoundingSphereTemplate::ExpandToInclude</a></div><div class="ttdeci">void ExpandToInclude(const xiiVec3Template&lt; Type &gt; &amp;vPoint)</div><div class="ttdoc">Increases the sphere's radius to include this point. Does NOT change its position,...</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:64</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a4557475810efa0432f86d10be6f65cff"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a4557475810efa0432f86d10be6f65cff">xiiBoundingSphereTemplate::SetFromPoints</a></div><div class="ttdeci">void SetFromPoints(const xiiVec3Template&lt; Type &gt; *pPoints, xiiUInt32 uiNumPoints, xiiUInt32 uiStride=sizeof(xiiVec3Template&lt; Type &gt;))</div><div class="ttdoc">Initializes the sphere to be the bounding sphere of all the given points (not necessarily the smalles...</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:260</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a6d3ef02d63319009bff3083b16459cfc"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a6d3ef02d63319009bff3083b16459cfc">xiiBoundingSphereTemplate::SetInvalid</a></div><div class="ttdeci">void SetInvalid()</div><div class="ttdoc">Sets the bounding sphere to invalid values.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:36</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_ae7979964408018ed38e43c448914730a"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#ae7979964408018ed38e43c448914730a">xiiBoundingSphereTemplate::Translate</a></div><div class="ttdeci">void Translate(const xiiVec3Template&lt; Type &gt; &amp;vTranslation)</div><div class="ttdoc">Moves the sphere by the given vector.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:115</div></div>
<div class="ttc" id="anamespacexii_math_htm_a20047812a62c07b9ac2144a5520c18f0"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">xiiMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition:</b> Math_inl.h:259</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_ad320a1dbfc60fe192dc29d744ca50752"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#ad320a1dbfc60fe192dc29d744ca50752">xiiBoundingSphereTemplate::TransformFromOrigin</a></div><div class="ttdeci">void TransformFromOrigin(const xiiMat4Template&lt; Type &gt; &amp;mTransform)</div><div class="ttdoc">Transforms the sphere with the given matrix from the world origin. I.e. scalings and rotations will i...</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:145</div></div>
<div class="ttc" id="aclassxii_vec3_template_htm_a87cdc5a0c4bf781b495dfbb7617d5414"><div class="ttname"><a href="../../d9/d9a/classxii_vec3_template.htm#a87cdc5a0c4bf781b495dfbb7617d5414">xiiVec3Template::IsNormalized</a></div><div class="ttdeci">bool IsNormalized(Type fEpsilon=xiiMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:125</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_ae8bc580df1b64ad4dac86266b70afd15"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#ae8bc580df1b64ad4dac86266b70afd15">xiiBoundingSphereTemplate::IsZero</a></div><div class="ttdeci">bool IsZero(Type fEpsilon=xiiMath::DefaultEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Checks whether the sphere is all zero.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:30</div></div>
<div class="ttc" id="anamespacexii_math_htm_ae7fbda648b6f9bcc4dc23962d06c93f4"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a></div><div class="ttdeci">XII_ALWAYS_INLINE double Sqrt(double f)</div><div class="ttdoc">Returns the square root of f.</div><div class="ttdef"><b>Definition:</b> MathDouble_inl.h:84</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a909963bb233c3de64014635759bfa08d"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a909963bb233c3de64014635759bfa08d">xiiBoundingSphereTemplate::GetLineSegmentIntersection</a></div><div class="ttdeci">bool GetLineSegmentIntersection(const xiiVec3Template&lt; Type &gt; &amp;vLineStartPos, const xiiVec3Template&lt; Type &gt; &amp;vLineEndPos, Type *out_pHitFraction=nullptr, xiiVec3Template&lt; Type &gt; *out_pIntersection=nullptr) const</div><div class="ttdoc">Returns true if the line segment intersects the sphere.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:388</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_ae306aa33ed2e7328d3ec737e24a8e3d4"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#ae306aa33ed2e7328d3ec737e24a8e3d4">xiiBoundingSphereTemplate::GetRayIntersection</a></div><div class="ttdeci">bool GetRayIntersection(const xiiVec3Template&lt; Type &gt; &amp;vRayStartPos, const xiiVec3Template&lt; Type &gt; &amp;vRayDir, Type *out_pIntersectionDistance=nullptr, xiiVec3Template&lt; Type &gt; *out_pIntersection=nullptr) const</div><div class="ttdoc">Computes the intersection of a ray with this sphere. Returns true if there was an intersection....</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:350</div></div>
<div class="ttc" id="aclassxii_vec3_template_htm_a29f0f6353abb8f23538f847533b56b4a"><div class="ttname"><a href="../../d9/d9a/classxii_vec3_template.htm#a29f0f6353abb8f23538f847533b56b4a">xiiVec3Template::Dot</a></div><div class="ttdeci">Type Dot(const xiiVec3Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Dot-product of the two vectors (commutative, order does not matter)</div><div class="ttdef"><b>Definition:</b> Vec3_inl.h:301</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a693d1bc86eb09c371a5ea478f009c208"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a693d1bc86eb09c371a5ea478f009c208">xiiBoundingSphereTemplate::SetZero</a></div><div class="ttdeci">void SetZero()</div><div class="ttdoc">Sets all elements to Zero. The sphere is thus 'valid'.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:23</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_a07eff45caa8016fd8d2a13f4b8c7be40"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#a07eff45caa8016fd8d2a13f4b8c7be40">xiiBoundingSphereTemplate::GetDistanceTo</a></div><div class="ttdeci">Type GetDistanceTo(const xiiVec3Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Computes the distance of the point to the sphere's surface. Returns negative values for points inside...</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:163</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm">xiiBoundingSphereTemplate</a></div><div class="ttdoc">An implementation of a bounding sphere.</div><div class="ttdef"><b>Definition:</b> BoundingSphere.h:10</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_aefef38c6ad5ce13dfc1a304d7a5ae739"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#aefef38c6ad5ce13dfc1a304d7a5ae739">xiiBoundingSphereTemplate::Overlaps</a></div><div class="ttdeci">bool Overlaps(const xiiVec3Template&lt; Type &gt; *pPoints, xiiUInt32 uiNumPoints, xiiUInt32 uiStride=sizeof(xiiVec3Template&lt; Type &gt;)) const</div><div class="ttdoc">Checks whether any of the given points is inside the sphere.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:235</div></div>
<div class="ttc" id="aclassxii_mat4_template_htm_a3e0db63cc2dac827fe433d16247e5f97"><div class="ttname"><a href="../../d1/dec/classxii_mat4_template.htm#a3e0db63cc2dac827fe433d16247e5f97">xiiMat4Template::GetScalingFactors</a></div><div class="ttdeci">const xiiVec3Template&lt; Type &gt; GetScalingFactors() const</div><div class="ttdoc">Returns the 3 scaling factors that are encoded in the matrix.</div><div class="ttdef"><b>Definition:</b> Mat4_inl.h:658</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_af6780eefe68e16016c31f17fc276465c"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#af6780eefe68e16016c31f17fc276465c">xiiBoundingSphereTemplate::IsEqual</a></div><div class="ttdeci">bool IsEqual(const xiiBoundingSphereTemplate &amp;rhs, Type fEpsilon=xiiMath::DefaultEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Tests whether two spheres are equal within some threshold.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:97</div></div>
<div class="ttc" id="anamespacexii_math_htm_a2c660f80f0df5bb91a751d12a93cb9cb"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:47</div></div>
<div class="ttc" id="anamespacexii_math_htm_acadcf58b1a805ed9e8127057834a0b0a"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Square(T f)</div><div class="ttdoc">Returns f * f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:29</div></div>
<div class="ttc" id="aclassxii_vec3_template_htm"><div class="ttname"><a href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template</a></div><div class="ttdoc">A 3-component vector class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:138</div></div>
<div class="ttc" id="aclassxii_mat4_template_htm_ad143eddbdd5e71bd018b013439c0c120"><div class="ttname"><a href="../../d1/dec/classxii_mat4_template.htm#ad143eddbdd5e71bd018b013439c0c120">xiiMat4Template::TransformPosition</a></div><div class="ttdeci">const xiiVec3Template&lt; Type &gt; TransformPosition(const xiiVec3Template&lt; Type &gt; &amp;v) const</div><div class="ttdoc">Matrix-vector multiplication, assuming the 4th component of the vector is one (default behavior).</div><div class="ttdef"><b>Definition:</b> Mat4_inl.h:266</div></div>
<div class="ttc" id="aclassxii_bounding_sphere_template_htm_ae773cba15bdae9d0952c3e11bb43d0c5"><div class="ttname"><a href="../../dd/d79/classxii_bounding_sphere_template.htm#ae773cba15bdae9d0952c3e11bb43d0c5">xiiBoundingSphereTemplate::ScaleFromOrigin</a></div><div class="ttdeci">void ScaleFromOrigin(const xiiVec3Template&lt; Type &gt; &amp;vScale)</div><div class="ttdoc">Scales the sphere in world unites, meaning its center position will change as well.</div><div class="ttdef"><b>Definition:</b> BoundingSphere_inl.h:131</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_c1b0860bb61ff24e678d996d14e4bcdd.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_fb7e93d80251333452775ccd3b7c417a.htm">Implementation</a></li><li class="navelem"><b>BoundingSphere_inl.h</b></li>
    <li class="footer">Generated on Sat Aug 12 2023 21:47:51 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

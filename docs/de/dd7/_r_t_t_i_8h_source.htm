<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Reflection/Implementation/RTTI.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/dd7/_r_t_t_i_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">RTTI.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Configuration/Plugin.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/StaticRTTI.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;Foundation/Utilities/EnumerableClass.h&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">// *****************************************</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">// ***** Runtime Type Information Data *****</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">struct </span><a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm">xiiRTTIAllocator</a>;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">class </span><a class="code" href="../../da/d25/classxii_abstract_property.htm">xiiAbstractProperty</a>;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">class </span><a class="code" href="../../de/d27/classxii_abstract_function_property.htm">xiiAbstractFunctionProperty</a>;</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">class </span><a class="code" href="../../d8/d84/classxii_abstract_message_handler.htm">xiiAbstractMessageHandler</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="keyword">struct </span><a class="code" href="../../df/dfe/structxii_message_sender_info.htm">xiiMessageSenderInfo</a>;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">class </span><a class="code" href="../../d5/df0/classxii_property_attribute.htm">xiiPropertyAttribute</a>;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">class </span><a class="code" href="../../d9/d55/classxii_message.htm">xiiMessage</a>;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">using</span> xiiMessageId = xiiUInt16;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm">   31</a></span>&#160;<span class="keyword">class </span>XII_FOUNDATION_DLL <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a> : <span class="keyword">public</span> <a class="code" href="../../dc/d54/classxii_enumerable.htm">xiiEnumerable</a>&lt;xiiRTTI&gt;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  XII_DECLARE_ENUMERABLE_CLASS(<a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szName, <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* pParentType, xiiUInt32 uiTypeSize, xiiUInt32 uiTypeVersion, xiiUInt32 uiVariantType, <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;xiiTypeFlags&gt;</a> flags, <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm">xiiRTTIAllocator</a>* pAllocator, <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractProperty*&gt;</a> properties, <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractFunctionProperty*&gt;</a> functions, <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiPropertyAttribute*&gt;</a> attributes, <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractMessageHandler*&gt;</a> messageHandlers, <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiMessageSenderInfo&gt;</a> messageSenders, <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* (*fnVerifyParent)());</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  ~<a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>();</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  <span class="keywordtype">void</span> VerifyCorrectness() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> VerifyCorrectnessForAllTypes();</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#accc34132ae2159282d51668181fac524">   49</a></span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#accc34132ae2159282d51668181fac524">GetTypeName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_szTypeName; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#a71963127487a83932158f4a058cb1a0e">   52</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt64 <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#a71963127487a83932158f4a058cb1a0e">GetTypeNameHash</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeNameHash; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#ae2919dc64704ee7fdbcad8eb6b10af24">   55</a></span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#ae2919dc64704ee7fdbcad8eb6b10af24">GetParentType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pParentType; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#ab04580f3ca5f9e4a86b7a523d6806a20">   58</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../dd/dba/structxii_variant_type.htm#a0ab11c9dae08774c11eec36483643874">xiiVariantType::Enum</a> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#ab04580f3ca5f9e4a86b7a523d6806a20">GetVariantType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span><a class="code" href="../../dd/dba/structxii_variant_type.htm#a0ab11c9dae08774c11eec36483643874">xiiVariantType::Enum</a><span class="keyword">&gt;</span>(m_uiVariantType); }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#ab01841286e6950143394487153c63c22">   61</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#ab01841286e6950143394487153c63c22">IsDerivedFrom</a>(<span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* pBaseType) <span class="keyword">const</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">const</span> xiiUInt32 thisGeneration = m_ParentHierarchy.GetCount();</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">const</span> xiiUInt32 baseGeneration = pBaseType-&gt;m_ParentHierarchy.<a class="code" href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">GetCount</a>();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    XII_ASSERT_DEBUG(thisGeneration &gt; 0 &amp;&amp; baseGeneration &gt; 0, <span class="stringliteral">&quot;SetupParentHierarchy() has not been called&quot;</span>);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> thisGeneration &gt;= baseGeneration &amp;&amp; m_ParentHierarchy.GetData()[thisGeneration - baseGeneration] == pBaseType;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> BASE&gt;</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#a4cd2c980696b661e6bf20f3fc9d343e3">   71</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#a4cd2c980696b661e6bf20f3fc9d343e3">IsDerivedFrom</a>() const <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> IsDerivedFrom(xiiGetStaticRTTI&lt;BASE&gt;());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#ae59f24c0bcd56c237d2eba28cabacf8b">   77</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm">xiiRTTIAllocator</a>* <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#ae59f24c0bcd56c237d2eba28cabacf8b">GetAllocator</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pAllocator; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#a4c018b7ada2cd03ea3deacde9a2900e2">   80</a></span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractProperty*&gt;</a>&amp; <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#a4c018b7ada2cd03ea3deacde9a2900e2">GetProperties</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Properties; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractFunctionProperty*&gt;</a>&amp; GetFunctions()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Functions; }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiPropertyAttribute*&gt;</a>&amp; GetAttributes()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_Attributes; }</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keyword">const</span> Type* GetAttributeByType() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  <span class="keywordtype">void</span> GetAllProperties(<a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;xiiAbstractProperty*, 32&gt;</a>&amp; out_properties) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#aa7838365864432bf2f97698ac6c99c01">   94</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#aa7838365864432bf2f97698ac6c99c01">GetTypeSize</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeSize; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00097"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#a831874f77928738d8adfb3d38abf2aaa">   97</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#a831874f77928738d8adfb3d38abf2aaa">GetTypeVersion</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiTypeVersion; }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#a186cc40a241aa0482a6fefc8ed9a0277">  100</a></span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;xiiTypeFlags&gt;</a>&amp; <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#a186cc40a241aa0482a6fefc8ed9a0277">GetTypeFlags</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_TypeFlags; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* FindTypeByName(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sName); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* FindTypeByNameHash(xiiUInt64 uiNameHash); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* FindTypeByNameHash32(xiiUInt32 uiNameHash);</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <a class="code" href="../../da/d25/classxii_abstract_property.htm">xiiAbstractProperty</a>* FindPropertyByName(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sName, <span class="keywordtype">bool</span> bSearchBaseTypes = <span class="keyword">true</span>) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#a3a2d7face036174d0ca889c0b99d1739">  113</a></span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#a3a2d7face036174d0ca889c0b99d1739">GetPluginName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_szPluginName; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#a40a0a830addbb1b134c0446561117b0d">  116</a></span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractMessageHandler*&gt;</a>&amp; <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#a40a0a830addbb1b134c0446561117b0d">GetMessageHandlers</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_MessageHandlers; }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keywordtype">bool</span> DispatchMessage(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../d9/d55/classxii_message.htm">xiiMessage</a>&amp; ref_msg) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keywordtype">bool</span> DispatchMessage(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../d9/d55/classxii_message.htm">xiiMessage</a>&amp; ref_msg) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> MessageType&gt;</div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#a0477fa81b5243134d6348f59ad2fa6d1">  128</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#a0477fa81b5243134d6348f59ad2fa6d1">CanHandleMessage</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> CanHandleMessage(MessageType::GetTypeMsgId());</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="../../db/d89/classxii_r_t_t_i.htm#addc7dacc0bde5aa4141a5049200076be">  134</a></span>&#160;  <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm#addc7dacc0bde5aa4141a5049200076be">CanHandleMessage</a>(xiiMessageId <span class="keywordtype">id</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    XII_ASSERT_DEBUG(m_bGatheredDynamicMessageHandlers, <span class="stringliteral">&quot;Message handler table should have been gathered at this point.\n&quot;</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                                                        <span class="stringliteral">&quot;If this assert is triggered for a type loaded from a dynamic plugin,\n&quot;</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                                                        <span class="stringliteral">&quot;you may have forgotten to instantiate a xiiPlugin object inside your plugin DLL.&quot;</span>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiIndex = <span class="keywordtype">id</span> - m_uiMsgIdOffset;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keywordflow">return</span> uiIndex &lt; m_DynamicMessageHandlers.GetCount() &amp;&amp; m_DynamicMessageHandlers.GetData()[uiIndex] != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  }</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  XII_ALWAYS_INLINE <span class="keyword">const</span> <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiMessageSenderInfo&gt;</a>&amp; GetMessageSender()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_MessageSenders; }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="../../dc/da4/classxii_dynamic_array.htm">xiiDynamicArray&lt;const xiiRTTI*&gt;</a>&amp; GetAllTypesDerivedFrom(</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>*                   pBaseType,</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <a class="code" href="../../dc/da4/classxii_dynamic_array.htm">xiiDynamicArray&lt;const xiiRTTI*&gt;</a>&amp; out_derivedTypes,</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordtype">bool</span>                             bSortByName);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">protected</span>:</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                               m_szPluginName = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>*                               m_szTypeName;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractProperty*&gt;</a>         m_Properties;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractFunctionProperty*&gt;</a> m_Functions;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiPropertyAttribute*&gt;</a>        m_Attributes;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keywordtype">void</span>                                      UpdateType(<span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* pParentType, xiiUInt32 uiTypeSize, xiiUInt32 uiTypeVersion, xiiUInt32 uiVariantType, <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;xiiTypeFlags&gt;</a> flags);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordtype">void</span>                                      RegisterType();</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <span class="keywordtype">void</span>                                      UnregisterType();</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <span class="keywordtype">void</span> GatherDynamicMessageHandlers();</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="keywordtype">void</span> SetupParentHierarchy();</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>*    m_pParentType;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm">xiiRTTIAllocator</a>* m_pAllocator;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  xiiUInt32                 m_uiVariantType;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  xiiUInt32                 m_uiTypeSize;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  xiiUInt32                 m_uiTypeVersion  = 0;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  xiiUInt64                 m_uiTypeNameHash = 0;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;xiiTypeFlags&gt;</a> m_TypeFlags;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  xiiUInt32                 m_uiMsgIdOffset = 0;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keywordtype">bool</span> m_bGatheredDynamicMessageHandlers = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* (*m_VerifyParent)();</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiAbstractMessageHandler*&gt;</a> m_MessageHandlers;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  <a class="code" href="../../dc/da4/classxii_dynamic_array.htm">xiiDynamicArray&lt;xiiAbstractMessageHandler*, xiiStaticAllocatorWrapper&gt;</a></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    m_DynamicMessageHandlers; <span class="comment">// do not track this data, it won&#39;t be deallocated before shutdown</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <a class="code" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;xiiMessageSenderInfo&gt;</a> m_MessageSenders;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;const xiiRTTI*, 8&gt;</a> m_ParentHierarchy;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  XII_MAKE_SUBSYSTEM_STARTUP_FRIEND(Foundation, Reflection);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> AssignPlugin(<span class="keyword">const</span> <span class="keywordtype">char</span>* szPluginName);</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> SanityCheckType(<a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* pType);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> PluginEventHandler(<span class="keyword">const</span> <a class="code" href="../../d9/dc8/structxii_plugin_event.htm">xiiPluginEvent</a>&amp; EventData);</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;};</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">// ***********************************</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">// ***** Object Allocator Struct *****</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="../../d9/d89/structxii_r_t_t_i_allocator.htm">  205</a></span>&#160;<span class="keyword">struct </span>XII_FOUNDATION_DLL <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm">xiiRTTIAllocator</a></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div>
<div class="line"><a name="l00208"></a><span class="lineno"><a class="line" href="../../d9/d89/structxii_r_t_t_i_allocator.htm#a743c5e9e6cc050eba2a8d15918fb3d57">  208</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm#a743c5e9e6cc050eba2a8d15918fb3d57">CanAllocate</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="../../d9/d89/structxii_r_t_t_i_allocator.htm#ae7e2a5d067857736839cfb961527d728">  212</a></span>&#160;  <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;T&gt;</a> <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm#ae7e2a5d067857736839cfb961527d728">Allocate</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  {</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordflow">return</span> AllocateInternal(pAllocator).Cast&lt;T&gt;();</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  }</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="../../d9/d89/structxii_r_t_t_i_allocator.htm#acedf3db737756c95c9d0e8ab892ce80b">  219</a></span>&#160;  <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;T&gt;</a> <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm#acedf3db737756c95c9d0e8ab892ce80b">Clone</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator = <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">return</span> CloneInternal(pObject, pAllocator).Cast&lt;T&gt;();</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  }</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Deallocate(<span class="keywordtype">void</span>* pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator = <span class="keyword">nullptr</span>) = 0; <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a> AllocateInternal(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) = 0;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a> CloneInternal(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;Cloning is not supported by this allocator.&quot;</span>);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;};</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160; </div>
<div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm">  237</a></span>&#160;<span class="keyword">struct </span>XII_FOUNDATION_DLL <a class="code" href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm">xiiRTTINoAllocator</a> : <span class="keyword">public</span> <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm">xiiRTTIAllocator</a></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;{</div>
<div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a357ccf8a3c2bbd17f751aad0d152c049">  240</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a357ccf8a3c2bbd17f751aad0d152c049">CanAllocate</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; } <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a6696f2afce48bc98fccb4ddc6b8e8281">  243</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a> <a class="code" href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a6696f2afce48bc98fccb4ddc6b8e8281">AllocateInternal</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;This function should never be called.&quot;</span>);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a2a2130976aff83235ff14e6abad0745b">  250</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a2a2130976aff83235ff14e6abad0745b">Deallocate</a>(<span class="keywordtype">void</span>* pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  {</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;This function should never be called.&quot;</span>);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;};</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> CLASS, <span class="keyword">typename</span> AllocatorWrapper = xiiDefaultAllocatorWrapper&gt;</div>
<div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm">  258</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm">xiiRTTIDefaultAllocator</a> : <span class="keyword">public</span> <a class="code" href="../../d9/d89/structxii_r_t_t_i_allocator.htm">xiiRTTIAllocator</a></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;{</div>
<div class="line"><a name="l00261"></a><span class="lineno"><a class="line" href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a226178dd5a4eb94b01d2bc2eae2075a0">  261</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a> <a class="code" href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a226178dd5a4eb94b01d2bc2eae2075a0">AllocateInternal</a>(<a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    {</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    }</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">return</span> XII_NEW(pAllocator, CLASS);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno"><a class="line" href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a6f5f433f9bd78de5841e626854396acc">  272</a></span>&#160;  <span class="keyword">virtual</span> <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a> <a class="code" href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a6f5f433f9bd78de5841e626854396acc">CloneInternal</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    {</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">return</span> CloneImpl(pObject, pAllocator, <a class="code" href="../../da/d04/structxii_trait_int.htm">xiiTraitInt</a>&lt;std::is_copy_constructible&lt;CLASS&gt;::value&gt;());</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno"><a class="line" href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a280c5adc9dc0d2be1029927c30ae81c7">  283</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a280c5adc9dc0d2be1029927c30ae81c7">Deallocate</a>(<span class="keywordtype">void</span>* pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator) <span class="keyword">override</span> <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  {</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">if</span> (pAllocator == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    {</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      pAllocator = AllocatorWrapper::GetAllocator();</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    }</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    CLASS* pPointer = <span class="keyword">static_cast&lt;</span>CLASS*<span class="keyword">&gt;</span>(pObject);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    XII_DELETE(pAllocator, pPointer);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  }</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160; </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a> CloneImpl(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator, <a class="code" href="../../da/d04/structxii_trait_int.htm">xiiTraitInt&lt;0&gt;</a>)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    XII_REPORT_FAILURE(<span class="stringliteral">&quot;Clone failed since the type is not copy constructible&quot;</span>);</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a>(<span class="keyword">nullptr</span>, pAllocator);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <a class="code" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance&lt;void&gt;</a> CloneImpl(<span class="keyword">const</span> <span class="keywordtype">void</span>* pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator, <a class="code" href="../../da/d04/structxii_trait_int.htm">xiiTraitInt&lt;1&gt;</a>)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  {</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keywordflow">return</span> XII_NEW(pAllocator, CLASS, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>CLASS*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructxii_internal_1_1_new_instance_htm"><div class="ttname"><a href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance</a></div><div class="ttdef"><b>Definition:</b> AllocatorBase_inl.h:17</div></div>
<div class="ttc" id="astructxii_r_t_t_i_default_allocator_htm_a226178dd5a4eb94b01d2bc2eae2075a0"><div class="ttname"><a href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a226178dd5a4eb94b01d2bc2eae2075a0">xiiRTTIDefaultAllocator::AllocateInternal</a></div><div class="ttdeci">virtual xiiInternal::NewInstance&lt; void &gt; AllocateInternal(xiiAllocatorBase *pAllocator) override</div><div class="ttdoc">Returns a new instance that was allocated with the given allocator.</div><div class="ttdef"><b>Definition:</b> RTTI.h:261</div></div>
<div class="ttc" id="astructxii_r_t_t_i_no_allocator_htm_a6696f2afce48bc98fccb4ddc6b8e8281"><div class="ttname"><a href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a6696f2afce48bc98fccb4ddc6b8e8281">xiiRTTINoAllocator::AllocateInternal</a></div><div class="ttdeci">virtual xiiInternal::NewInstance&lt; void &gt; AllocateInternal(xiiAllocatorBase *pAllocator) override</div><div class="ttdoc">Will trigger an assert.</div><div class="ttdef"><b>Definition:</b> RTTI.h:243</div></div>
<div class="ttc" id="aclassxii_array_ptr_htm"><div class="ttname"><a href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt; xiiAbstractProperty * &gt;</a></div></div>
<div class="ttc" id="astructxii_r_t_t_i_allocator_htm_acedf3db737756c95c9d0e8ab892ce80b"><div class="ttname"><a href="../../d9/d89/structxii_r_t_t_i_allocator.htm#acedf3db737756c95c9d0e8ab892ce80b">xiiRTTIAllocator::Clone</a></div><div class="ttdeci">xiiInternal::NewInstance&lt; T &gt; Clone(const void *pObject, xiiAllocatorBase *pAllocator=nullptr)</div><div class="ttdoc">Clones the given instance.</div><div class="ttdef"><b>Definition:</b> RTTI.h:219</div></div>
<div class="ttc" id="astructxii_r_t_t_i_no_allocator_htm_a2a2130976aff83235ff14e6abad0745b"><div class="ttname"><a href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a2a2130976aff83235ff14e6abad0745b">xiiRTTINoAllocator::Deallocate</a></div><div class="ttdeci">virtual void Deallocate(void *pObject, xiiAllocatorBase *pAllocator) override</div><div class="ttdoc">Will trigger an assert.</div><div class="ttdef"><b>Definition:</b> RTTI.h:250</div></div>
<div class="ttc" id="aclassxii_abstract_message_handler_htm"><div class="ttname"><a href="../../d8/d84/classxii_abstract_message_handler.htm">xiiAbstractMessageHandler</a></div><div class="ttdoc">The base class for all message handlers that a type provides.</div><div class="ttdef"><b>Definition:</b> MessageHandler.h:11</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_a831874f77928738d8adfb3d38abf2aaa"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#a831874f77928738d8adfb3d38abf2aaa">xiiRTTI::GetTypeVersion</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 GetTypeVersion() const</div><div class="ttdoc">Returns the version number of this type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:97</div></div>
<div class="ttc" id="astructxii_plugin_event_htm"><div class="ttname"><a href="../../d9/dc8/structxii_plugin_event.htm">xiiPluginEvent</a></div><div class="ttdoc">The data that is broadcast whenever a plugin is (un-) loaded.</div><div class="ttdef"><b>Definition:</b> Plugin.h:10</div></div>
<div class="ttc" id="astructxii_r_t_t_i_allocator_htm"><div class="ttname"><a href="../../d9/d89/structxii_r_t_t_i_allocator.htm">xiiRTTIAllocator</a></div><div class="ttdoc">The interface for an allocator that creates instances of reflected types.</div><div class="ttdef"><b>Definition:</b> RTTI.h:205</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_accc34132ae2159282d51668181fac524"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#accc34132ae2159282d51668181fac524">xiiRTTI::GetTypeName</a></div><div class="ttdeci">const XII_ALWAYS_INLINE char * GetTypeName() const</div><div class="ttdoc">Returns the name of this type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:49</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_ae59f24c0bcd56c237d2eba28cabacf8b"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#ae59f24c0bcd56c237d2eba28cabacf8b">xiiRTTI::GetAllocator</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiRTTIAllocator * GetAllocator() const</div><div class="ttdoc">Returns the object through which instances of this type can be allocated.</div><div class="ttdef"><b>Definition:</b> RTTI.h:77</div></div>
<div class="ttc" id="aclassxii_hybrid_array_htm"><div class="ttname"><a href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition:</b> HybridArray.h:11</div></div>
<div class="ttc" id="astructxii_r_t_t_i_default_allocator_htm_a280c5adc9dc0d2be1029927c30ae81c7"><div class="ttname"><a href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a280c5adc9dc0d2be1029927c30ae81c7">xiiRTTIDefaultAllocator::Deallocate</a></div><div class="ttdeci">virtual void Deallocate(void *pObject, xiiAllocatorBase *pAllocator) override</div><div class="ttdoc">Deletes the given instance with the given allocator.</div><div class="ttdef"><b>Definition:</b> RTTI.h:283</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_ab04580f3ca5f9e4a86b7a523d6806a20"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#ab04580f3ca5f9e4a86b7a523d6806a20">xiiRTTI::GetVariantType</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiVariantType::Enum GetVariantType() const</div><div class="ttdoc">Returns the corresponding variant type for this type or Invalid if there is none.</div><div class="ttdef"><b>Definition:</b> RTTI.h:58</div></div>
<div class="ttc" id="astructxii_trait_int_htm"><div class="ttname"><a href="../../da/d04/structxii_trait_int.htm">xiiTraitInt</a></div><div class="ttdoc">Type traits.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:9</div></div>
<div class="ttc" id="aclassxii_message_htm"><div class="ttname"><a href="../../d9/d55/classxii_message.htm">xiiMessage</a></div><div class="ttdoc">Base class for all message types. Each message type has it's own id which is used to dispatch message...</div><div class="ttdef"><b>Definition:</b> Message.h:21</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a></div><div class="ttdoc">This enumerable class holds information about reflected types. Each instance represents one type that...</div><div class="ttdef"><b>Definition:</b> RTTI.h:31</div></div>
<div class="ttc" id="astructxii_string_view_htm"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></div><div class="ttdoc">xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...</div><div class="ttdef"><b>Definition:</b> StringView.h:23</div></div>
<div class="ttc" id="aclassxii_property_attribute_htm"><div class="ttname"><a href="../../d5/df0/classxii_property_attribute.htm">xiiPropertyAttribute</a></div><div class="ttdoc">Base class of all attributes can be used to decorate a RTTI property.</div><div class="ttdef"><b>Definition:</b> PropertyAttributes.h:10</div></div>
<div class="ttc" id="astructxii_r_t_t_i_default_allocator_htm"><div class="ttname"><a href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm">xiiRTTIDefaultAllocator</a></div><div class="ttdoc">Default implementation of xiiRTTIAllocator that allocates instances via the given allocator.</div><div class="ttdef"><b>Definition:</b> RTTI.h:258</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_ab01841286e6950143394487153c63c22"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#ab01841286e6950143394487153c63c22">xiiRTTI::IsDerivedFrom</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsDerivedFrom(const xiiRTTI *pBaseType) const</div><div class="ttdoc">Returns true if this type is derived from the given type (or of the same type).</div><div class="ttdef"><b>Definition:</b> RTTI.h:61</div></div>
<div class="ttc" id="astructxii_r_t_t_i_allocator_htm_ae7e2a5d067857736839cfb961527d728"><div class="ttname"><a href="../../d9/d89/structxii_r_t_t_i_allocator.htm#ae7e2a5d067857736839cfb961527d728">xiiRTTIAllocator::Allocate</a></div><div class="ttdeci">xiiInternal::NewInstance&lt; T &gt; Allocate(xiiAllocatorBase *pAllocator=nullptr)</div><div class="ttdoc">Allocates one instance.</div><div class="ttdef"><b>Definition:</b> RTTI.h:212</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_a71963127487a83932158f4a058cb1a0e"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#a71963127487a83932158f4a058cb1a0e">xiiRTTI::GetTypeNameHash</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt64 GetTypeNameHash() const</div><div class="ttdoc">Returns the hash of the name of this type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:52</div></div>
<div class="ttc" id="astructxii_r_t_t_i_no_allocator_htm_a357ccf8a3c2bbd17f751aad0d152c049"><div class="ttname"><a href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm#a357ccf8a3c2bbd17f751aad0d152c049">xiiRTTINoAllocator::CanAllocate</a></div><div class="ttdeci">virtual bool CanAllocate() const override</div><div class="ttdoc">Returns false, because this type of allocator is used for classes that shall not be allocated dynamic...</div><div class="ttdef"><b>Definition:</b> RTTI.h:240</div></div>
<div class="ttc" id="aclassxii_array_base_htm_a43100f93e19bb795ea0980dae2b28e0b"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">xiiArrayBase::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:164</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_a4c018b7ada2cd03ea3deacde9a2900e2"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#a4c018b7ada2cd03ea3deacde9a2900e2">xiiRTTI::GetProperties</a></div><div class="ttdeci">const XII_ALWAYS_INLINE xiiArrayPtr&lt; xiiAbstractProperty * &gt; &amp; GetProperties() const</div><div class="ttdoc">Returns the array of properties that this type has. Does NOT include properties from base classes.</div><div class="ttdef"><b>Definition:</b> RTTI.h:80</div></div>
<div class="ttc" id="astructxii_variant_type_htm_a0ab11c9dae08774c11eec36483643874"><div class="ttname"><a href="../../dd/dba/structxii_variant_type.htm#a0ab11c9dae08774c11eec36483643874">xiiVariantType::Enum</a></div><div class="ttdeci">Enum</div><div class="ttdoc">This enum describes the type of data that is currently stored inside the variant. Note that changes t...</div><div class="ttdef"><b>Definition:</b> VariantType.h:25</div></div>
<div class="ttc" id="aclassxii_allocator_base_htm"><div class="ttname"><a href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:21</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_a0477fa81b5243134d6348f59ad2fa6d1"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#a0477fa81b5243134d6348f59ad2fa6d1">xiiRTTI::CanHandleMessage</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool CanHandleMessage() const</div><div class="ttdoc">Returns whether this type can handle the given message type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:128</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_addc7dacc0bde5aa4141a5049200076be"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#addc7dacc0bde5aa4141a5049200076be">xiiRTTI::CanHandleMessage</a></div><div class="ttdeci">bool CanHandleMessage(xiiMessageId id) const</div><div class="ttdoc">Returns whether this type can handle the message type with the given id.</div><div class="ttdef"><b>Definition:</b> RTTI.h:134</div></div>
<div class="ttc" id="aclassxii_abstract_property_htm"><div class="ttname"><a href="../../da/d25/classxii_abstract_property.htm">xiiAbstractProperty</a></div><div class="ttdoc">This is the base interface for all properties in the reflection system. It provides enough informatio...</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:149</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_a186cc40a241aa0482a6fefc8ed9a0277"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#a186cc40a241aa0482a6fefc8ed9a0277">xiiRTTI::GetTypeFlags</a></div><div class="ttdeci">const XII_ALWAYS_INLINE xiiBitflags&lt; xiiTypeFlags &gt; &amp; GetTypeFlags() const</div><div class="ttdoc">Returns the type flags.</div><div class="ttdef"><b>Definition:</b> RTTI.h:100</div></div>
<div class="ttc" id="aclassxii_dynamic_array_htm"><div class="ttname"><a href="../../dc/da4/classxii_dynamic_array.htm">xiiDynamicArray</a></div><div class="ttdef"><b>Definition:</b> DynamicArray.h:80</div></div>
<div class="ttc" id="astructxii_r_t_t_i_allocator_htm_a743c5e9e6cc050eba2a8d15918fb3d57"><div class="ttname"><a href="../../d9/d89/structxii_r_t_t_i_allocator.htm#a743c5e9e6cc050eba2a8d15918fb3d57">xiiRTTIAllocator::CanAllocate</a></div><div class="ttdeci">virtual bool CanAllocate() const</div><div class="ttdoc">Returns whether the type that is represented by this allocator, can be dynamically allocated at runti...</div><div class="ttdef"><b>Definition:</b> RTTI.h:208</div></div>
<div class="ttc" id="astructxii_bitflags_htm"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt; xiiTypeFlags &gt;</a></div></div>
<div class="ttc" id="astructxii_message_sender_info_htm"><div class="ttname"><a href="../../df/dfe/structxii_message_sender_info.htm">xiiMessageSenderInfo</a></div><div class="ttdef"><b>Definition:</b> MessageHandler.h:41</div></div>
<div class="ttc" id="aclassxii_abstract_function_property_htm"><div class="ttname"><a href="../../de/d27/classxii_abstract_function_property.htm">xiiAbstractFunctionProperty</a></div><div class="ttdoc">The base class for a property that represents a function.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:531</div></div>
<div class="ttc" id="astructxii_r_t_t_i_default_allocator_htm_a6f5f433f9bd78de5841e626854396acc"><div class="ttname"><a href="../../d9/de2/structxii_r_t_t_i_default_allocator.htm#a6f5f433f9bd78de5841e626854396acc">xiiRTTIDefaultAllocator::CloneInternal</a></div><div class="ttdeci">virtual xiiInternal::NewInstance&lt; void &gt; CloneInternal(const void *pObject, xiiAllocatorBase *pAllocator) override</div><div class="ttdoc">Clones the given instance with the given allocator.</div><div class="ttdef"><b>Definition:</b> RTTI.h:272</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_aa7838365864432bf2f97698ac6c99c01"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#aa7838365864432bf2f97698ac6c99c01">xiiRTTI::GetTypeSize</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 GetTypeSize() const</div><div class="ttdoc">Returns the size (in bytes) of an instance of this type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:94</div></div>
<div class="ttc" id="astructxii_r_t_t_i_no_allocator_htm"><div class="ttname"><a href="../../d0/dd9/structxii_r_t_t_i_no_allocator.htm">xiiRTTINoAllocator</a></div><div class="ttdoc">Dummy Allocator for types that should not be allocatable through the reflection system.</div><div class="ttdef"><b>Definition:</b> RTTI.h:237</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_a4cd2c980696b661e6bf20f3fc9d343e3"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#a4cd2c980696b661e6bf20f3fc9d343e3">xiiRTTI::IsDerivedFrom</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsDerivedFrom() const</div><div class="ttdoc">Returns true if this type is derived from or identical to the given type.</div><div class="ttdef"><b>Definition:</b> RTTI.h:71</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_a40a0a830addbb1b134c0446561117b0d"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#a40a0a830addbb1b134c0446561117b0d">xiiRTTI::GetMessageHandlers</a></div><div class="ttdeci">const XII_ALWAYS_INLINE xiiArrayPtr&lt; xiiAbstractMessageHandler * &gt; &amp; GetMessageHandlers() const</div><div class="ttdoc">Returns the array of message handlers that this type has.</div><div class="ttdef"><b>Definition:</b> RTTI.h:116</div></div>
<div class="ttc" id="aclassxii_enumerable_htm"><div class="ttname"><a href="../../dc/d54/classxii_enumerable.htm">xiiEnumerable</a></div><div class="ttdoc">Base class to add the ability to another class to enumerate all active instance of it,...</div><div class="ttdef"><b>Definition:</b> EnumerableClass.h:27</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_ae2919dc64704ee7fdbcad8eb6b10af24"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#ae2919dc64704ee7fdbcad8eb6b10af24">xiiRTTI::GetParentType</a></div><div class="ttdeci">const XII_ALWAYS_INLINE xiiRTTI * GetParentType() const</div><div class="ttdoc">Returns the type that is the base class of this type. May be nullptr if this type has no base class.</div><div class="ttdef"><b>Definition:</b> RTTI.h:55</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm_a3a2d7face036174d0ca889c0b99d1739"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm#a3a2d7face036174d0ca889c0b99d1739">xiiRTTI::GetPluginName</a></div><div class="ttdeci">const XII_ALWAYS_INLINE char * GetPluginName() const</div><div class="ttdoc">Returns the name of the plugin which this type is declared in.</div><div class="ttdef"><b>Definition:</b> RTTI.h:113</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f1e13142959a2e7970d979e1f6f7bcb1.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_44ac7f88d9b5593e444e5c7bf3d69918.htm">Implementation</a></li><li class="navelem"><b>RTTI.h</b></li>
    <li class="footer">Generated on Sat Jul 1 2023 22:50:18 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

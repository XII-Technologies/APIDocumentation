<!-- HTML header for doxygen 1.11.0-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: /home/runner/work/XII/XII/Source/Engine/Foundation/SimdMath/Implementation/AVX/AVXVec4d_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript">
  DoxygenAwesomeDarkModeToggle.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript">
  DoxygenAwesomeFragmentCopyButton.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript">
  DoxygenAwesomeParagraphLink.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
  DoxygenAwesomeInteractiveToc.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('de/d89/_a_v_x_vec4d__inl_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">AVXVec4d_inl.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span>XII_ALWAYS_INLINE xiiSimdVec4d::xiiSimdVec4d()</div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span>{</div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span>  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span> </div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span><span class="preprocessor">#if XII_ENABLED(XII_COMPILE_FOR_DEBUG)</span></div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span>  <span class="comment">// Initialize all data to NaN in debug mode to find problems with uninitialized data easier.</span></div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span>  m_v = _mm256_set1_pd(<a class="code hl_function" href="../../d1/d37/namespacexii_math.htm#a794f0339ad168c57748133cd2687fe4d">xiiMath::NaN&lt;double&gt;</a>());</div>
<div class="line"><a id="l00010" name="l00010"></a><span class="lineno">   10</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00011" name="l00011"></a><span class="lineno">   11</span>}</div>
<div class="line"><a id="l00012" name="l00012"></a><span class="lineno">   12</span> </div>
<div class="line"><a id="l00013" name="l00013"></a><span class="lineno">   13</span>XII_ALWAYS_INLINE xiiSimdVec4d::xiiSimdVec4d(<span class="keywordtype">double</span> fXyzw)</div>
<div class="line"><a id="l00014" name="l00014"></a><span class="lineno">   14</span>{</div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span>  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno">   16</span> </div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>  m_v = _mm256_set1_pd(fXyzw);</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span>}</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span> </div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>XII_ALWAYS_INLINE xiiSimdVec4d::xiiSimdVec4d(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; fXyzw)</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span>{</div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span> </div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  m_v = fXyzw.m_v;</div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>}</div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>XII_ALWAYS_INLINE xiiSimdVec4d::xiiSimdVec4d(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z, <span class="keywordtype">double</span> w)</div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span>{</div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  XII_CHECK_SIMD_DOUBLE_ALIGNMENT(<span class="keyword">this</span>);</div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span> </div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  m_v = _mm256_setr_pd(x, y, z, w);</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span>}</div>
<div class="line"><a id="l00033" name="l00033"></a><span class="lineno">   33</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Set(<span class="keywordtype">double</span> fXyzw)</div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span>{</div>
<div class="line"><a id="l00036" name="l00036"></a><span class="lineno">   36</span>  m_v = _mm256_set1_pd(fXyzw);</div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>}</div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00039" name="l00039"></a><span class="lineno">   39</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Set(<span class="keywordtype">double</span> x, <span class="keywordtype">double</span> y, <span class="keywordtype">double</span> z, <span class="keywordtype">double</span> w)</div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>{</div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span>  m_v = _mm256_setr_pd(x, y, z, w);</div>
<div class="line"><a id="l00042" name="l00042"></a><span class="lineno">   42</span>}</div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span> </div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::SetX(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a id="l00045" name="l00045"></a><span class="lineno">   45</span>{</div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  m_v = _mm256_blend_pd(m_v, f.m_v, 0x1);</div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span>}</div>
<div class="line"><a id="l00048" name="l00048"></a><span class="lineno">   48</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::SetY(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span>{</div>
<div class="line"><a id="l00051" name="l00051"></a><span class="lineno">   51</span>  m_v = _mm256_blend_pd(m_v, f.m_v, 0x2);</div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>}</div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00054" name="l00054"></a><span class="lineno">   54</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::SetZ(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>{</div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span>  m_v = _mm256_blend_pd(m_v, f.m_v, 0x4);</div>
<div class="line"><a id="l00057" name="l00057"></a><span class="lineno">   57</span>}</div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span> </div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::SetW(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a id="l00060" name="l00060"></a><span class="lineno">   60</span>{</div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  m_v = _mm256_blend_pd(m_v, f.m_v, 0x8);</div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>}</div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00064" name="l00064"></a><span class="lineno">   64</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::SetZero()</div>
<div class="line"><a id="l00065" name="l00065"></a><span class="lineno">   65</span>{</div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  m_v = _mm256_setzero_pd();</div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span>}</div>
<div class="line"><a id="l00068" name="l00068"></a><span class="lineno">   68</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Load&lt;1&gt;(<span class="keyword">const</span> <span class="keywordtype">double</span>* pValues)</div>
<div class="line"><a id="l00071" name="l00071"></a><span class="lineno">   71</span>{</div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  m_v = _mm256_maskload_pd(pValues, _mm256_set_epi64x(0, 0, 0, -1));</div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span>}</div>
<div class="line"><a id="l00074" name="l00074"></a><span class="lineno">   74</span> </div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Load&lt;2&gt;(<span class="keyword">const</span> <span class="keywordtype">double</span>* pValues)</div>
<div class="line"><a id="l00077" name="l00077"></a><span class="lineno">   77</span>{</div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  m_v = _mm256_maskload_pd(pValues, _mm256_set_epi64x(0, 0, -1, -1));</div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span>}</div>
<div class="line"><a id="l00080" name="l00080"></a><span class="lineno">   80</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Load&lt;3&gt;(<span class="keyword">const</span> <span class="keywordtype">double</span>* pValues)</div>
<div class="line"><a id="l00083" name="l00083"></a><span class="lineno">   83</span>{</div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  m_v = _mm256_maskload_pd(pValues, _mm256_set_epi64x(0, -1, -1, -1));</div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span>}</div>
<div class="line"><a id="l00086" name="l00086"></a><span class="lineno">   86</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Load&lt;4&gt;(<span class="keyword">const</span> <span class="keywordtype">double</span>* pValues)</div>
<div class="line"><a id="l00089" name="l00089"></a><span class="lineno">   89</span>{</div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  m_v = _mm256_loadu_pd(pValues);</div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span>}</div>
<div class="line"><a id="l00092" name="l00092"></a><span class="lineno">   92</span> </div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Store&lt;1&gt;(<span class="keywordtype">double</span>* pValues)<span class="keyword"> const</span></div>
<div class="line"><a id="l00095" name="l00095"></a><span class="lineno">   95</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  _mm256_maskstore_pd(pValues, _mm256_set_epi64x(0, 0, 0, -1), m_v);</div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span>}</div>
<div class="line"><a id="l00098" name="l00098"></a><span class="lineno">   98</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Store&lt;2&gt;(<span class="keywordtype">double</span>* pValues)<span class="keyword"> const</span></div>
<div class="line"><a id="l00101" name="l00101"></a><span class="lineno">  101</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  _mm256_maskstore_pd(pValues, _mm256_set_epi64x(0, 0, -1, -1), m_v);</div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span>}</div>
<div class="line"><a id="l00104" name="l00104"></a><span class="lineno">  104</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Store&lt;3&gt;(<span class="keywordtype">double</span>* pValues)<span class="keyword"> const</span></div>
<div class="line"><a id="l00107" name="l00107"></a><span class="lineno">  107</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  _mm256_maskstore_pd(pValues, _mm256_set_epi64x(0, -1, -1, -1), m_v);</div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span>}</div>
<div class="line"><a id="l00110" name="l00110"></a><span class="lineno">  110</span> </div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span>XII_ALWAYS_INLINE <span class="keywordtype">void</span> xiiSimdVec4d::Store&lt;4&gt;(<span class="keywordtype">double</span>* pValues)<span class="keyword"> const</span></div>
<div class="line"><a id="l00113" name="l00113"></a><span class="lineno">  113</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  _mm256_storeu_pd(pValues, m_v);</div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span>}</div>
<div class="line"><a id="l00116" name="l00116"></a><span class="lineno">  116</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_512</span></div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="line"><a id="l00119" name="l00119"></a><span class="lineno">  119</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetReciprocal&lt;xiiMathDoubleBits::BITS_14&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00122" name="l00122"></a><span class="lineno">  122</span>  <span class="keywordflow">return</span> _mm256_rcp14_pd(m_v);</div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>}</div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00125" name="l00125"></a><span class="lineno">  125</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetReciprocal&lt;xiiMathDoubleBits::BITS_27&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00128" name="l00128"></a><span class="lineno">  128</span>  __m256d x0 = _mm256_rcp14_pd(m_v);</div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span> </div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span>  <span class="comment">// One Newton-Raphson iteration.</span></div>
<div class="line"><a id="l00131" name="l00131"></a><span class="lineno">  131</span>  <span class="keywordflow">return</span> _mm256_mul_pd(x0, _mm256_sub_pd(_mm256_set1_pd(2.0), _mm256_mul_pd(m_v, x0)));</div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>}</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span> </div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00135" name="l00135"></a><span class="lineno">  135</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetReciprocal&lt;xiiMathDoubleBits::FULL&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00138" name="l00138"></a><span class="lineno">  138</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  <span class="keywordflow">return</span> _mm256_div_pd(_mm256_set1_pd(1.0), m_v);</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span>}</div>
<div class="line"><a id="l00141" name="l00141"></a><span class="lineno">  141</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_512</span></div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span> </div>
<div class="line"><a id="l00144" name="l00144"></a><span class="lineno">  144</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetSqrt&lt;xiiMathDoubleBits::BITS_14&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00147" name="l00147"></a><span class="lineno">  147</span>  <span class="keywordflow">return</span> _mm256_mul_pd(m_v, _mm256_maskz_rsqrt14_pd(0xf, m_v));</div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>}</div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span> </div>
<div class="line"><a id="l00150" name="l00150"></a><span class="lineno">  150</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetSqrt&lt;xiiMathDoubleBits::BITS_27&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00153" name="l00153"></a><span class="lineno">  153</span>  __m256d x0 = _mm256_maskz_rsqrt14_pd(0xF, m_v);</div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span> </div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span>  <span class="comment">// One Newton-Raphson iteration.</span></div>
<div class="line"><a id="l00156" name="l00156"></a><span class="lineno">  156</span>  __m256d x1 = _mm256_mul_pd(_mm256_mul_pd(_mm256_set1_pd(0.5), x0), _mm256_sub_pd(_mm256_set1_pd(3.0), _mm256_mul_pd(_mm256_mul_pd(m_v, x0), x0)));</div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span> </div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span>  <span class="keywordflow">return</span> _mm256_mul_pd(m_v, x1);</div>
<div class="line"><a id="l00159" name="l00159"></a><span class="lineno">  159</span>}</div>
<div class="line"><a id="l00160" name="l00160"></a><span class="lineno">  160</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00163" name="l00163"></a><span class="lineno">  163</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno">  164</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetSqrt&lt;xiiMathDoubleBits::FULL&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00166" name="l00166"></a><span class="lineno">  166</span>  <span class="keywordflow">return</span> _mm256_sqrt_pd(m_v);</div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>}</div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_512</span></div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span> </div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetInvSqrt&lt;xiiMathDoubleBits::BITS_14&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="keywordflow">return</span> _mm256_maskz_rsqrt14_pd(0xF, m_v);</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>}</div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetInvSqrt&lt;xiiMathDoubleBits::BITS_27&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span>  __m256d x0 = _mm256_maskz_rsqrt14_pd(0xF, m_v);</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span> </div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  <span class="comment">// One Newton-Raphson iteration.</span></div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>  <span class="keywordflow">return</span> _mm256_mul_pd(_mm256_mul_pd(_mm256_set1_pd(0.5), x0), _mm256_sub_pd(_mm256_set1_pd(3.0), _mm256_mul_pd(_mm256_mul_pd(m_v, x0), x0)));</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>}</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::GetInvSqrt&lt;xiiMathDoubleBits::FULL&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  <span class="keywordflow">return</span> _mm256_div_pd(_mm256_set1_pd(1.0), _mm256_sqrt_pd(m_v));</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>}</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span><span class="keyword">template</span> &lt;xiiInt32 N, xiiMathDoubleBits::Enum acc&gt;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span><span class="keywordtype">void</span> xiiSimdVec4d::NormalizeIfNotZero(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; fEpsilon)</div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>{</div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> sqLength  = GetLengthSquared&lt;N&gt;();</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>  __m256d       isNotZero = _mm256_cmp_pd(sqLength.m_v, fEpsilon.m_v, _CMP_GT_OQ);</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>  m_v                     = _mm256_mul_pd(m_v, sqLength.GetInvSqrt&lt;acc&gt;().m_v);</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>  m_v                     = _mm256_and_pd(isNotZero, m_v);</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>}</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span><span class="keyword">template</span> &lt;xiiInt32 N&gt;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdVec4d::IsZero()<span class="keyword"> const</span></div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span>  <span class="keyword">const</span> xiiInt32 mask = XII_BIT(N) - 1;</div>
<div class="line"><a id="l00207" name="l00207"></a><span class="lineno">  207</span>  <span class="keywordflow">return</span> (_mm256_movemask_pd(_mm256_cmp_pd(m_v, _mm256_setzero_pd(), _CMP_EQ_OQ)) &amp; mask) == mask;</div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span>}</div>
<div class="line"><a id="l00209" name="l00209"></a><span class="lineno">  209</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span><span class="keyword">template</span> &lt;xiiInt32 N&gt;</div>
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno">  211</span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdVec4d::IsZero(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  <span class="keyword">const</span> xiiInt32 mask   = XII_BIT(N) - 1;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span>  __m256d        absVal = Abs().m_v;</div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span>  <span class="keywordflow">return</span> (_mm256_movemask_pd(_mm256_cmp_pd(absVal, fEpsilon.m_v, _CMP_LT_OQ)) &amp; mask) == mask;</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>}</div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span> </div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span><span class="keyword">template</span> &lt;xiiInt32 N&gt;</div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span><span class="keyword">inline</span> <span class="keywordtype">bool</span> xiiSimdVec4d::IsNaN()<span class="keyword"> const</span></div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  <span class="comment">// NAN -&gt; (exponent = all 1, mantissa = non-zero)s</span></div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  <span class="comment">// Mantissa Mask  -&gt;  XII_BIT(MANTISSA_BITS) - 1  -&gt;   XII_BIT(52) - 1</span></div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <span class="comment">// Exponent Mask  -&gt;  MAX_BITS XOR MANTISSA_BTIS  -&gt;  (XII_BIT(63) - 1) ^ ((XII_BIT(52) - 1)</span></div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  <span class="keyword">alignas</span>(32) <span class="keyword">const</span> xiiUInt64 s_exponentMask[4] = {0x7FF0000000000000ull, 0x7FF0000000000000ull, 0x7FF0000000000000ull, 0x7FF0000000000000ull};</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span>  <span class="keyword">alignas</span>(32) <span class="keyword">const</span> xiiUInt64 s_mantissaMask[4] = {0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu, 0xFFFFFFFFu};</div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span> </div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>  __m256d exponentMask = _mm256_load_pd(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">double</span>*<span class="keyword">&gt;</span>(s_exponentMask));</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  __m256d mantissaMask = _mm256_load_pd(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">double</span>*<span class="keyword">&gt;</span>(s_mantissaMask));</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  __m256d exponentAll1 = _mm256_cmp_pd(_mm256_and_pd(m_v, exponentMask), exponentMask, _CMP_EQ_OQ);</div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  __m256d mantissaNon0 = _mm256_cmp_pd(_mm256_and_pd(m_v, mantissaMask), _mm256_setzero_pd(), _CMP_NEQ_OQ);</div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span> </div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span>  <span class="keyword">const</span> xiiInt32 mask = XII_BIT(N) - 1;</div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  <span class="keywordflow">return</span> (_mm256_movemask_pd(_mm256_and_pd(exponentAll1, mantissaNon0)) &amp; mask) != 0;</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>}</div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span><span class="keyword">template</span> &lt;xiiInt32 N&gt;</div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>XII_ALWAYS_INLINE <span class="keywordtype">bool</span> xiiSimdVec4d::IsValid()<span class="keyword"> const</span></div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  <span class="comment">// Check the 8 exponent bits.</span></div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="comment">// NAN -&gt; (exponent = all 1, mantissa = non-zero)</span></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  <span class="comment">// INF -&gt; (exponent = all 1, mantissa = zero)</span></div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span> </div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span>  <span class="keyword">alignas</span>(32) <span class="keyword">const</span> xiiUInt64 s_exponentMask[4] = {0x7FF0000000000000ull, 0x7FF0000000000000ull, 0x7FF0000000000000ull, 0x7FF0000000000000ull};</div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span> </div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  __m256d exponentMask = _mm256_load_pd(<span class="keyword">reinterpret_cast&lt;</span><span class="keyword">const </span><span class="keywordtype">double</span>*<span class="keyword">&gt;</span>(s_exponentMask));</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span> </div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span>  __m256d exponentNot1 = _mm256_cmp_pd(_mm256_and_pd(m_v, exponentMask), exponentMask, _CMP_NEQ_OQ);</div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span> </div>
<div class="line"><a id="l00251" name="l00251"></a><span class="lineno">  251</span>  <span class="keyword">const</span> xiiInt32 mask = XII_BIT(N) - 1;</div>
<div class="line"><a id="l00252" name="l00252"></a><span class="lineno">  252</span>  <span class="keywordflow">return</span> (_mm256_movemask_pd(exponentNot1) &amp; mask) == mask;</div>
<div class="line"><a id="l00253" name="l00253"></a><span class="lineno">  253</span>}</div>
<div class="line"><a id="l00254" name="l00254"></a><span class="lineno">  254</span> </div>
<div class="line"><a id="l00255" name="l00255"></a><span class="lineno">  255</span><span class="keyword">template</span> &lt;xiiInt32 N&gt;</div>
<div class="line"><a id="l00256" name="l00256"></a><span class="lineno">  256</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::GetComponent()<span class="keyword"> const</span></div>
<div class="line"><a id="l00257" name="l00257"></a><span class="lineno">  257</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00258" name="l00258"></a><span class="lineno">  258</span>  <span class="keywordflow">return</span> _mm256_permute4x64_pd(m_v, XII_SHUFFLE(N, N, N, N));</div>
<div class="line"><a id="l00259" name="l00259"></a><span class="lineno">  259</span>}</div>
<div class="line"><a id="l00260" name="l00260"></a><span class="lineno">  260</span> </div>
<div class="line"><a id="l00261" name="l00261"></a><span class="lineno">  261</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::x()<span class="keyword"> const</span></div>
<div class="line"><a id="l00262" name="l00262"></a><span class="lineno">  262</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00263" name="l00263"></a><span class="lineno">  263</span>  <span class="keywordflow">return</span> GetComponent&lt;0&gt;();</div>
<div class="line"><a id="l00264" name="l00264"></a><span class="lineno">  264</span>}</div>
<div class="line"><a id="l00265" name="l00265"></a><span class="lineno">  265</span> </div>
<div class="line"><a id="l00266" name="l00266"></a><span class="lineno">  266</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::y()<span class="keyword"> const</span></div>
<div class="line"><a id="l00267" name="l00267"></a><span class="lineno">  267</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00268" name="l00268"></a><span class="lineno">  268</span>  <span class="keywordflow">return</span> GetComponent&lt;1&gt;();</div>
<div class="line"><a id="l00269" name="l00269"></a><span class="lineno">  269</span>}</div>
<div class="line"><a id="l00270" name="l00270"></a><span class="lineno">  270</span> </div>
<div class="line"><a id="l00271" name="l00271"></a><span class="lineno">  271</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::z()<span class="keyword"> const</span></div>
<div class="line"><a id="l00272" name="l00272"></a><span class="lineno">  272</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00273" name="l00273"></a><span class="lineno">  273</span>  <span class="keywordflow">return</span> GetComponent&lt;2&gt;();</div>
<div class="line"><a id="l00274" name="l00274"></a><span class="lineno">  274</span>}</div>
<div class="line"><a id="l00275" name="l00275"></a><span class="lineno">  275</span> </div>
<div class="line"><a id="l00276" name="l00276"></a><span class="lineno">  276</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::w()<span class="keyword"> const</span></div>
<div class="line"><a id="l00277" name="l00277"></a><span class="lineno">  277</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00278" name="l00278"></a><span class="lineno">  278</span>  <span class="keywordflow">return</span> GetComponent&lt;3&gt;();</div>
<div class="line"><a id="l00279" name="l00279"></a><span class="lineno">  279</span>}</div>
<div class="line"><a id="l00280" name="l00280"></a><span class="lineno">  280</span> </div>
<div class="line"><a id="l00281" name="l00281"></a><span class="lineno">  281</span><span class="keyword">template</span> &lt;xiiSwizzle::Enum s&gt;</div>
<div class="line"><a id="l00282" name="l00282"></a><span class="lineno">  282</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::Get()<span class="keyword"> const</span></div>
<div class="line"><a id="l00283" name="l00283"></a><span class="lineno">  283</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00284" name="l00284"></a><span class="lineno">  284</span>  <span class="keywordflow">return</span> _mm256_permute4x64_pd(m_v, XII_TO_SHUFFLE(s));</div>
<div class="line"><a id="l00285" name="l00285"></a><span class="lineno">  285</span>}</div>
<div class="line"><a id="l00286" name="l00286"></a><span class="lineno">  286</span> </div>
<div class="line"><a id="l00287" name="l00287"></a><span class="lineno">  287</span><span class="keyword">template</span> &lt;xiiSwizzle::Enum s&gt;</div>
<div class="line"><a id="l00288" name="l00288"></a><span class="lineno">  288</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> <a class="code hl_function" href="../../d5/dba/classxii_simd_vec4d.htm#af7408ea9e8fe30f0266927fe7fb9a70e">xiiSimdVec4d::GetCombined</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; other)<span class="keyword"> const</span></div>
<div class="line"><a id="l00289" name="l00289"></a><span class="lineno">  289</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00290" name="l00290"></a><span class="lineno">  290</span>  <span class="comment">// \todo Foundation: Evaluate a possible AVX-512 intrinsic.</span></div>
<div class="line"><a id="l00291" name="l00291"></a><span class="lineno">  291</span>  __m256d permuteThis  = _mm256_permute4x64_pd(m_v, XII_TO_SHUFFLE(s));</div>
<div class="line"><a id="l00292" name="l00292"></a><span class="lineno">  292</span>  __m256d permuteOther = _mm256_permute4x64_pd(other.m_v, XII_TO_SHUFFLE(s));</div>
<div class="line"><a id="l00293" name="l00293"></a><span class="lineno">  293</span>  <span class="keywordflow">return</span> _mm256_permute2f128_pd(permuteOther, permuteThis, 0x012);</div>
<div class="line"><a id="l00294" name="l00294"></a><span class="lineno">  294</span>}</div>
<div class="line"><a id="l00295" name="l00295"></a><span class="lineno">  295</span> </div>
<div class="line"><a id="l00296" name="l00296"></a><span class="lineno">  296</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::operator-()<span class="keyword"> const</span></div>
<div class="line"><a id="l00297" name="l00297"></a><span class="lineno">  297</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00298" name="l00298"></a><span class="lineno">  298</span>  <span class="keywordflow">return</span> _mm256_sub_pd(_mm256_setzero_pd(), m_v);</div>
<div class="line"><a id="l00299" name="l00299"></a><span class="lineno">  299</span>}</div>
<div class="line"><a id="l00300" name="l00300"></a><span class="lineno">  300</span> </div>
<div class="line"><a id="l00301" name="l00301"></a><span class="lineno">  301</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::operator+(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00302" name="l00302"></a><span class="lineno">  302</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00303" name="l00303"></a><span class="lineno">  303</span>  <span class="keywordflow">return</span> _mm256_add_pd(m_v, v.m_v);</div>
<div class="line"><a id="l00304" name="l00304"></a><span class="lineno">  304</span>}</div>
<div class="line"><a id="l00305" name="l00305"></a><span class="lineno">  305</span> </div>
<div class="line"><a id="l00306" name="l00306"></a><span class="lineno">  306</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::operator-(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00307" name="l00307"></a><span class="lineno">  307</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00308" name="l00308"></a><span class="lineno">  308</span>  <span class="keywordflow">return</span> _mm256_sub_pd(m_v, v.m_v);</div>
<div class="line"><a id="l00309" name="l00309"></a><span class="lineno">  309</span>}</div>
<div class="line"><a id="l00310" name="l00310"></a><span class="lineno">  310</span> </div>
<div class="line"><a id="l00311" name="l00311"></a><span class="lineno">  311</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::operator*(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a id="l00312" name="l00312"></a><span class="lineno">  312</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00313" name="l00313"></a><span class="lineno">  313</span>  <span class="keywordflow">return</span> _mm256_mul_pd(m_v, f.m_v);</div>
<div class="line"><a id="l00314" name="l00314"></a><span class="lineno">  314</span>}</div>
<div class="line"><a id="l00315" name="l00315"></a><span class="lineno">  315</span> </div>
<div class="line"><a id="l00316" name="l00316"></a><span class="lineno">  316</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::operator/(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)<span class="keyword"> const</span></div>
<div class="line"><a id="l00317" name="l00317"></a><span class="lineno">  317</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00318" name="l00318"></a><span class="lineno">  318</span>  <span class="keywordflow">return</span> _mm256_div_pd(m_v, f.m_v);</div>
<div class="line"><a id="l00319" name="l00319"></a><span class="lineno">  319</span>}</div>
<div class="line"><a id="l00320" name="l00320"></a><span class="lineno">  320</span> </div>
<div class="line"><a id="l00321" name="l00321"></a><span class="lineno">  321</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::CompMul(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00322" name="l00322"></a><span class="lineno">  322</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00323" name="l00323"></a><span class="lineno">  323</span>  <span class="keywordflow">return</span> _mm256_mul_pd(m_v, v.m_v);</div>
<div class="line"><a id="l00324" name="l00324"></a><span class="lineno">  324</span>}</div>
<div class="line"><a id="l00325" name="l00325"></a><span class="lineno">  325</span> </div>
<div class="line"><a id="l00326" name="l00326"></a><span class="lineno">  326</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_512</span></div>
<div class="line"><a id="l00327" name="l00327"></a><span class="lineno">  327</span> </div>
<div class="line"><a id="l00328" name="l00328"></a><span class="lineno">  328</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00329" name="l00329"></a><span class="lineno">  329</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::CompDiv&lt;xiiMathDoubleBits::BITS_14&gt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00330" name="l00330"></a><span class="lineno">  330</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00331" name="l00331"></a><span class="lineno">  331</span>  <span class="keywordflow">return</span> _mm256_mul_pd(m_v, _mm256_rcp14_pd(v.m_v));</div>
<div class="line"><a id="l00332" name="l00332"></a><span class="lineno">  332</span>}</div>
<div class="line"><a id="l00333" name="l00333"></a><span class="lineno">  333</span> </div>
<div class="line"><a id="l00334" name="l00334"></a><span class="lineno">  334</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00335" name="l00335"></a><span class="lineno">  335</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::CompDiv&lt;xiiMathDoubleBits::BITS_27&gt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00336" name="l00336"></a><span class="lineno">  336</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00337" name="l00337"></a><span class="lineno">  337</span>  __m256d x0 = _mm256_rcp14_pd(v.m_v);</div>
<div class="line"><a id="l00338" name="l00338"></a><span class="lineno">  338</span> </div>
<div class="line"><a id="l00339" name="l00339"></a><span class="lineno">  339</span>  <span class="comment">// One iteration of Newton-Raphson</span></div>
<div class="line"><a id="l00340" name="l00340"></a><span class="lineno">  340</span>  __m256d x1 = _mm256_mul_pd(x0, _mm256_sub_pd(_mm256_set1_pd(2.0), _mm256_mul_pd(v.m_v, x0)));</div>
<div class="line"><a id="l00341" name="l00341"></a><span class="lineno">  341</span> </div>
<div class="line"><a id="l00342" name="l00342"></a><span class="lineno">  342</span>  <span class="keywordflow">return</span> _mm256_mul_pd(m_v, x1);</div>
<div class="line"><a id="l00343" name="l00343"></a><span class="lineno">  343</span>}</div>
<div class="line"><a id="l00344" name="l00344"></a><span class="lineno">  344</span> </div>
<div class="line"><a id="l00345" name="l00345"></a><span class="lineno">  345</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00346" name="l00346"></a><span class="lineno">  346</span> </div>
<div class="line"><a id="l00347" name="l00347"></a><span class="lineno">  347</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00348" name="l00348"></a><span class="lineno">  348</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::CompDiv&lt;xiiMathDoubleBits::FULL&gt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00349" name="l00349"></a><span class="lineno">  349</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00350" name="l00350"></a><span class="lineno">  350</span>  <span class="keywordflow">return</span> _mm256_div_pd(m_v, v.m_v);</div>
<div class="line"><a id="l00351" name="l00351"></a><span class="lineno">  351</span>}</div>
<div class="line"><a id="l00352" name="l00352"></a><span class="lineno">  352</span> </div>
<div class="line"><a id="l00353" name="l00353"></a><span class="lineno">  353</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::CompMin(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00354" name="l00354"></a><span class="lineno">  354</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00355" name="l00355"></a><span class="lineno">  355</span>  <span class="keywordflow">return</span> _mm256_min_pd(m_v, v.m_v);</div>
<div class="line"><a id="l00356" name="l00356"></a><span class="lineno">  356</span>}</div>
<div class="line"><a id="l00357" name="l00357"></a><span class="lineno">  357</span> </div>
<div class="line"><a id="l00358" name="l00358"></a><span class="lineno">  358</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::CompMax(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00359" name="l00359"></a><span class="lineno">  359</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00360" name="l00360"></a><span class="lineno">  360</span>  <span class="keywordflow">return</span> _mm256_max_pd(m_v, v.m_v);</div>
<div class="line"><a id="l00361" name="l00361"></a><span class="lineno">  361</span>}</div>
<div class="line"><a id="l00362" name="l00362"></a><span class="lineno">  362</span> </div>
<div class="line"><a id="l00363" name="l00363"></a><span class="lineno">  363</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::Abs()<span class="keyword"> const</span></div>
<div class="line"><a id="l00364" name="l00364"></a><span class="lineno">  364</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00365" name="l00365"></a><span class="lineno">  365</span>  <span class="keywordflow">return</span> _mm256_andnot_pd(_mm256_set1_pd(-0.0), m_v);</div>
<div class="line"><a id="l00366" name="l00366"></a><span class="lineno">  366</span>}</div>
<div class="line"><a id="l00367" name="l00367"></a><span class="lineno">  367</span> </div>
<div class="line"><a id="l00368" name="l00368"></a><span class="lineno">  368</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::Round()<span class="keyword"> const</span></div>
<div class="line"><a id="l00369" name="l00369"></a><span class="lineno">  369</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00370" name="l00370"></a><span class="lineno">  370</span>  <span class="keywordflow">return</span> _mm256_round_pd(m_v, _MM_FROUND_NINT);</div>
<div class="line"><a id="l00371" name="l00371"></a><span class="lineno">  371</span>}</div>
<div class="line"><a id="l00372" name="l00372"></a><span class="lineno">  372</span> </div>
<div class="line"><a id="l00373" name="l00373"></a><span class="lineno">  373</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::Floor()<span class="keyword"> const</span></div>
<div class="line"><a id="l00374" name="l00374"></a><span class="lineno">  374</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00375" name="l00375"></a><span class="lineno">  375</span>  <span class="keywordflow">return</span> _mm256_round_pd(m_v, _MM_FROUND_FLOOR);</div>
<div class="line"><a id="l00376" name="l00376"></a><span class="lineno">  376</span>}</div>
<div class="line"><a id="l00377" name="l00377"></a><span class="lineno">  377</span> </div>
<div class="line"><a id="l00378" name="l00378"></a><span class="lineno">  378</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::Ceil()<span class="keyword"> const</span></div>
<div class="line"><a id="l00379" name="l00379"></a><span class="lineno">  379</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00380" name="l00380"></a><span class="lineno">  380</span>  <span class="keywordflow">return</span> _mm256_round_pd(m_v, _MM_FROUND_CEIL);</div>
<div class="line"><a id="l00381" name="l00381"></a><span class="lineno">  381</span>}</div>
<div class="line"><a id="l00382" name="l00382"></a><span class="lineno">  382</span> </div>
<div class="line"><a id="l00383" name="l00383"></a><span class="lineno">  383</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::Trunc()<span class="keyword"> const</span></div>
<div class="line"><a id="l00384" name="l00384"></a><span class="lineno">  384</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00385" name="l00385"></a><span class="lineno">  385</span>  <span class="keywordflow">return</span> _mm256_round_pd(m_v, _MM_FROUND_TRUNC);</div>
<div class="line"><a id="l00386" name="l00386"></a><span class="lineno">  386</span>}</div>
<div class="line"><a id="l00387" name="l00387"></a><span class="lineno">  387</span> </div>
<div class="line"><a id="l00388" name="l00388"></a><span class="lineno">  388</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::FlipSign(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a>&amp; vCmp)<span class="keyword"> const</span></div>
<div class="line"><a id="l00389" name="l00389"></a><span class="lineno">  389</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00390" name="l00390"></a><span class="lineno">  390</span>  __m256d mask = _mm256_setr_pd(vCmp.x() ? -0.0 : 0.0, vCmp.y() ? -0.0 : 0.0, vCmp.z() ? -0.0 : 0.0, vCmp.w() ? -0.0 : 0.0);</div>
<div class="line"><a id="l00391" name="l00391"></a><span class="lineno">  391</span>  <span class="keywordflow">return</span> _mm256_xor_pd(m_v, _mm256_and_pd(mask, _mm256_set1_pd(-0.0)));</div>
<div class="line"><a id="l00392" name="l00392"></a><span class="lineno">  392</span>}</div>
<div class="line"><a id="l00393" name="l00393"></a><span class="lineno">  393</span> </div>
<div class="line"><a id="l00394" name="l00394"></a><span class="lineno">  394</span><span class="comment">// static</span></div>
<div class="line"><a id="l00395" name="l00395"></a><span class="lineno">  395</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::Select(<span class="keyword">const</span> <a class="code hl_class" href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a>&amp; vCmp, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; vIfTrue, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; vIfFalse)</div>
<div class="line"><a id="l00396" name="l00396"></a><span class="lineno">  396</span>{</div>
<div class="line"><a id="l00397" name="l00397"></a><span class="lineno">  397</span>  __m256d mask = _mm256_setr_pd(vCmp.x() ? -0.0 : 0.0, vCmp.y() ? -0.0 : 0.0, vCmp.z() ? -0.0 : 0.0, vCmp.w() ? -0.0 : 0.0);</div>
<div class="line"><a id="l00398" name="l00398"></a><span class="lineno">  398</span>  <span class="keywordflow">return</span> _mm256_blendv_pd(vIfFalse.m_v, vIfTrue.m_v, mask);</div>
<div class="line"><a id="l00399" name="l00399"></a><span class="lineno">  399</span>}</div>
<div class="line"><a id="l00400" name="l00400"></a><span class="lineno">  400</span> </div>
<div class="line"><a id="l00401" name="l00401"></a><span class="lineno">  401</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; xiiSimdVec4d::operator+=(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)</div>
<div class="line"><a id="l00402" name="l00402"></a><span class="lineno">  402</span>{</div>
<div class="line"><a id="l00403" name="l00403"></a><span class="lineno">  403</span>  m_v = _mm256_add_pd(m_v, v.m_v);</div>
<div class="line"><a id="l00404" name="l00404"></a><span class="lineno">  404</span>  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00405" name="l00405"></a><span class="lineno">  405</span>}</div>
<div class="line"><a id="l00406" name="l00406"></a><span class="lineno">  406</span> </div>
<div class="line"><a id="l00407" name="l00407"></a><span class="lineno">  407</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; xiiSimdVec4d::operator-=(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)</div>
<div class="line"><a id="l00408" name="l00408"></a><span class="lineno">  408</span>{</div>
<div class="line"><a id="l00409" name="l00409"></a><span class="lineno">  409</span>  m_v = _mm256_sub_pd(m_v, v.m_v);</div>
<div class="line"><a id="l00410" name="l00410"></a><span class="lineno">  410</span>  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00411" name="l00411"></a><span class="lineno">  411</span>}</div>
<div class="line"><a id="l00412" name="l00412"></a><span class="lineno">  412</span> </div>
<div class="line"><a id="l00413" name="l00413"></a><span class="lineno">  413</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; xiiSimdVec4d::operator*=(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a id="l00414" name="l00414"></a><span class="lineno">  414</span>{</div>
<div class="line"><a id="l00415" name="l00415"></a><span class="lineno">  415</span>  m_v = _mm256_mul_pd(m_v, f.m_v);</div>
<div class="line"><a id="l00416" name="l00416"></a><span class="lineno">  416</span>  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00417" name="l00417"></a><span class="lineno">  417</span>}</div>
<div class="line"><a id="l00418" name="l00418"></a><span class="lineno">  418</span> </div>
<div class="line"><a id="l00419" name="l00419"></a><span class="lineno">  419</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; xiiSimdVec4d::operator/=(<span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; f)</div>
<div class="line"><a id="l00420" name="l00420"></a><span class="lineno">  420</span>{</div>
<div class="line"><a id="l00421" name="l00421"></a><span class="lineno">  421</span>  m_v = _mm256_div_pd(m_v, f.m_v);</div>
<div class="line"><a id="l00422" name="l00422"></a><span class="lineno">  422</span>  <span class="keywordflow">return</span> *<span class="keyword">this</span>;</div>
<div class="line"><a id="l00423" name="l00423"></a><span class="lineno">  423</span>}</div>
<div class="line"><a id="l00424" name="l00424"></a><span class="lineno">  424</span> </div>
<div class="line"><a id="l00425" name="l00425"></a><span class="lineno">  425</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a> xiiSimdVec4d::operator==(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00426" name="l00426"></a><span class="lineno">  426</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00427" name="l00427"></a><span class="lineno">  427</span>  <span class="keywordflow">return</span> _mm256_cvtpd_ps(_mm256_cmp_pd(m_v, v.m_v, _CMP_EQ_OQ));</div>
<div class="line"><a id="l00428" name="l00428"></a><span class="lineno">  428</span>}</div>
<div class="line"><a id="l00429" name="l00429"></a><span class="lineno">  429</span> </div>
<div class="line"><a id="l00430" name="l00430"></a><span class="lineno">  430</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a> xiiSimdVec4d::operator!=(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00431" name="l00431"></a><span class="lineno">  431</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00432" name="l00432"></a><span class="lineno">  432</span>  <span class="keywordflow">return</span> _mm256_cvtpd_ps(_mm256_cmp_pd(m_v, v.m_v, _CMP_NEQ_OQ));</div>
<div class="line"><a id="l00433" name="l00433"></a><span class="lineno">  433</span>}</div>
<div class="line"><a id="l00434" name="l00434"></a><span class="lineno">  434</span> </div>
<div class="line"><a id="l00435" name="l00435"></a><span class="lineno">  435</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a> xiiSimdVec4d::operator&lt;=(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00436" name="l00436"></a><span class="lineno">  436</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00437" name="l00437"></a><span class="lineno">  437</span>  <span class="keywordflow">return</span> _mm256_cvtpd_ps(_mm256_cmp_pd(m_v, v.m_v, _CMP_LE_OQ));</div>
<div class="line"><a id="l00438" name="l00438"></a><span class="lineno">  438</span>}</div>
<div class="line"><a id="l00439" name="l00439"></a><span class="lineno">  439</span> </div>
<div class="line"><a id="l00440" name="l00440"></a><span class="lineno">  440</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a> xiiSimdVec4d::operator&lt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00441" name="l00441"></a><span class="lineno">  441</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00442" name="l00442"></a><span class="lineno">  442</span>  <span class="keywordflow">return</span> _mm256_cvtpd_ps(_mm256_cmp_pd(m_v, v.m_v, _CMP_LT_OQ));</div>
<div class="line"><a id="l00443" name="l00443"></a><span class="lineno">  443</span>}</div>
<div class="line"><a id="l00444" name="l00444"></a><span class="lineno">  444</span> </div>
<div class="line"><a id="l00445" name="l00445"></a><span class="lineno">  445</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a> xiiSimdVec4d::operator&gt;=(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00446" name="l00446"></a><span class="lineno">  446</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00447" name="l00447"></a><span class="lineno">  447</span>  <span class="keywordflow">return</span> _mm256_cvtpd_ps(_mm256_cmp_pd(m_v, v.m_v, _CMP_GE_OQ));</div>
<div class="line"><a id="l00448" name="l00448"></a><span class="lineno">  448</span>}</div>
<div class="line"><a id="l00449" name="l00449"></a><span class="lineno">  449</span> </div>
<div class="line"><a id="l00450" name="l00450"></a><span class="lineno">  450</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a> xiiSimdVec4d::operator&gt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00451" name="l00451"></a><span class="lineno">  451</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00452" name="l00452"></a><span class="lineno">  452</span>  <span class="keywordflow">return</span> _mm256_cvtpd_ps(_mm256_cmp_pd(m_v, v.m_v, _CMP_GT_OQ));</div>
<div class="line"><a id="l00453" name="l00453"></a><span class="lineno">  453</span>}</div>
<div class="line"><a id="l00454" name="l00454"></a><span class="lineno">  454</span> </div>
<div class="line"><a id="l00455" name="l00455"></a><span class="lineno">  455</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00456" name="l00456"></a><span class="lineno">  456</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalSum&lt;2&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00457" name="l00457"></a><span class="lineno">  457</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00458" name="l00458"></a><span class="lineno">  458</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_2</span></div>
<div class="line"><a id="l00459" name="l00459"></a><span class="lineno">  459</span>  __m256d a = _mm256_hadd_pd(m_v, m_v);</div>
<div class="line"><a id="l00460" name="l00460"></a><span class="lineno">  460</span>  <span class="keywordflow">return</span> _mm256_permute4x64_pd(a, XII_TO_SHUFFLE(xiiSwizzle::XXXX));</div>
<div class="line"><a id="l00461" name="l00461"></a><span class="lineno">  461</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00462" name="l00462"></a><span class="lineno">  462</span>  <span class="keywordflow">return</span> GetComponentM&lt;0&gt;() + GetComponent&lt;1&gt;();</div>
<div class="line"><a id="l00463" name="l00463"></a><span class="lineno">  463</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00464" name="l00464"></a><span class="lineno">  464</span>}</div>
<div class="line"><a id="l00465" name="l00465"></a><span class="lineno">  465</span> </div>
<div class="line"><a id="l00466" name="l00466"></a><span class="lineno">  466</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00467" name="l00467"></a><span class="lineno">  467</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalSum&lt;3&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00468" name="l00468"></a><span class="lineno">  468</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00469" name="l00469"></a><span class="lineno">  469</span>  <span class="keywordflow">return</span> HorizontalSum&lt;2&gt;() + GetComponent&lt;2&gt;();</div>
<div class="line"><a id="l00470" name="l00470"></a><span class="lineno">  470</span>}</div>
<div class="line"><a id="l00471" name="l00471"></a><span class="lineno">  471</span> </div>
<div class="line"><a id="l00472" name="l00472"></a><span class="lineno">  472</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00473" name="l00473"></a><span class="lineno">  473</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalSum&lt;4&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00474" name="l00474"></a><span class="lineno">  474</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00475" name="l00475"></a><span class="lineno">  475</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_2</span></div>
<div class="line"><a id="l00476" name="l00476"></a><span class="lineno">  476</span>  <span class="comment">// Adapted from Peter Cordes answer:</span></div>
<div class="line"><a id="l00477" name="l00477"></a><span class="lineno">  477</span>  <span class="comment">//  https://stackoverflow.com/questions/49941645/get-sum-of-values-stored-in-m256d-with-sse-avx/49943540#49943540</span></div>
<div class="line"><a id="l00478" name="l00478"></a><span class="lineno">  478</span> </div>
<div class="line"><a id="l00479" name="l00479"></a><span class="lineno">  479</span>  __m128d vlow  = _mm256_castpd256_pd128(m_v);</div>
<div class="line"><a id="l00480" name="l00480"></a><span class="lineno">  480</span>  __m128d vhigh = _mm256_extractf128_pd(m_v, 1); <span class="comment">// High 128</span></div>
<div class="line"><a id="l00481" name="l00481"></a><span class="lineno">  481</span> </div>
<div class="line"><a id="l00482" name="l00482"></a><span class="lineno">  482</span>  vlow = _mm_add_pd(vlow, vhigh); <span class="comment">// Reduce down to 128</span></div>
<div class="line"><a id="l00483" name="l00483"></a><span class="lineno">  483</span> </div>
<div class="line"><a id="l00484" name="l00484"></a><span class="lineno">  484</span>  __m128d high64 = _mm_unpackhi_pd(vlow, vlow);</div>
<div class="line"><a id="l00485" name="l00485"></a><span class="lineno">  485</span>  <span class="keywordflow">return</span> _mm_cvtsd_f64(_mm_add_sd(vlow, high64)); <span class="comment">// Reduce to scalar</span></div>
<div class="line"><a id="l00486" name="l00486"></a><span class="lineno">  486</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00487" name="l00487"></a><span class="lineno">  487</span>  <span class="keywordflow">return</span> (GetComponent&lt;0&gt;() + GetComponent&lt;1&gt;()) + (GetComponent&lt;2&gt;() + GetComponent&lt;3&gt;());</div>
<div class="line"><a id="l00488" name="l00488"></a><span class="lineno">  488</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00489" name="l00489"></a><span class="lineno">  489</span>}</div>
<div class="line"><a id="l00490" name="l00490"></a><span class="lineno">  490</span> </div>
<div class="line"><a id="l00491" name="l00491"></a><span class="lineno">  491</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00492" name="l00492"></a><span class="lineno">  492</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalMin&lt;2&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00493" name="l00493"></a><span class="lineno">  493</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00494" name="l00494"></a><span class="lineno">  494</span>  <span class="keywordflow">return</span> _mm256_min_pd(GetComponent&lt;0&gt;().m_v, GetComponent&lt;1&gt;().m_v);</div>
<div class="line"><a id="l00495" name="l00495"></a><span class="lineno">  495</span>}</div>
<div class="line"><a id="l00496" name="l00496"></a><span class="lineno">  496</span> </div>
<div class="line"><a id="l00497" name="l00497"></a><span class="lineno">  497</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00498" name="l00498"></a><span class="lineno">  498</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalMin&lt;3&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00499" name="l00499"></a><span class="lineno">  499</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00500" name="l00500"></a><span class="lineno">  500</span>  <span class="keywordflow">return</span> _mm256_min_pd(_mm256_min_pd(GetComponent&lt;0&gt;().m_v, GetComponent&lt;1&gt;().m_v), GetComponent&lt;2&gt;().m_v);</div>
<div class="line"><a id="l00501" name="l00501"></a><span class="lineno">  501</span>}</div>
<div class="line"><a id="l00502" name="l00502"></a><span class="lineno">  502</span> </div>
<div class="line"><a id="l00503" name="l00503"></a><span class="lineno">  503</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00504" name="l00504"></a><span class="lineno">  504</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalMin&lt;4&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00505" name="l00505"></a><span class="lineno">  505</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00506" name="l00506"></a><span class="lineno">  506</span>  __m256d xyxyzwzw = _mm256_min_pd(_mm256_permute4x64_pd(m_v, XII_TO_SHUFFLE(xiiSwizzle::ZWXY)), m_v);</div>
<div class="line"><a id="l00507" name="l00507"></a><span class="lineno">  507</span>  __m256d zwzwxyxy = _mm256_permute4x64_pd(xyxyzwzw, XII_TO_SHUFFLE(xiiSwizzle::YXWZ));</div>
<div class="line"><a id="l00508" name="l00508"></a><span class="lineno">  508</span>  <span class="keywordflow">return</span> _mm256_min_pd(xyxyzwzw, zwzwxyxy);</div>
<div class="line"><a id="l00509" name="l00509"></a><span class="lineno">  509</span>}</div>
<div class="line"><a id="l00510" name="l00510"></a><span class="lineno">  510</span> </div>
<div class="line"><a id="l00511" name="l00511"></a><span class="lineno">  511</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00512" name="l00512"></a><span class="lineno">  512</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalMax&lt;2&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00513" name="l00513"></a><span class="lineno">  513</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00514" name="l00514"></a><span class="lineno">  514</span>  <span class="keywordflow">return</span> _mm256_max_pd(GetComponent&lt;0&gt;().m_v, GetComponent&lt;1&gt;().m_v);</div>
<div class="line"><a id="l00515" name="l00515"></a><span class="lineno">  515</span>}</div>
<div class="line"><a id="l00516" name="l00516"></a><span class="lineno">  516</span> </div>
<div class="line"><a id="l00517" name="l00517"></a><span class="lineno">  517</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00518" name="l00518"></a><span class="lineno">  518</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalMax&lt;3&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00519" name="l00519"></a><span class="lineno">  519</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00520" name="l00520"></a><span class="lineno">  520</span>  <span class="keywordflow">return</span> _mm256_max_pd(_mm256_max_pd(GetComponent&lt;0&gt;().m_v, GetComponent&lt;1&gt;().m_v), GetComponent&lt;2&gt;().m_v);</div>
<div class="line"><a id="l00521" name="l00521"></a><span class="lineno">  521</span>}</div>
<div class="line"><a id="l00522" name="l00522"></a><span class="lineno">  522</span> </div>
<div class="line"><a id="l00523" name="l00523"></a><span class="lineno">  523</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00524" name="l00524"></a><span class="lineno">  524</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::HorizontalMax&lt;4&gt;()<span class="keyword"> const</span></div>
<div class="line"><a id="l00525" name="l00525"></a><span class="lineno">  525</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00526" name="l00526"></a><span class="lineno">  526</span>  __m256d xyxyzwzw = _mm256_max_pd(_mm256_permute4x64_pd(m_v, XII_TO_SHUFFLE(xiiSwizzle::ZWXY)), m_v);</div>
<div class="line"><a id="l00527" name="l00527"></a><span class="lineno">  527</span>  __m256d zwzwxyxy = _mm256_permute4x64_pd(xyxyzwzw, XII_TO_SHUFFLE(xiiSwizzle::YXWZ));</div>
<div class="line"><a id="l00528" name="l00528"></a><span class="lineno">  528</span>  <span class="keywordflow">return</span> _mm256_max_pd(xyxyzwzw, zwzwxyxy);</div>
<div class="line"><a id="l00529" name="l00529"></a><span class="lineno">  529</span>}</div>
<div class="line"><a id="l00530" name="l00530"></a><span class="lineno">  530</span> </div>
<div class="line"><a id="l00531" name="l00531"></a><span class="lineno">  531</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00532" name="l00532"></a><span class="lineno">  532</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::Dot&lt;1&gt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00533" name="l00533"></a><span class="lineno">  533</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00534" name="l00534"></a><span class="lineno">  534</span>  <span class="keywordflow">return</span> CompMul(v).HorizontalSum&lt;1&gt;();</div>
<div class="line"><a id="l00535" name="l00535"></a><span class="lineno">  535</span>}</div>
<div class="line"><a id="l00536" name="l00536"></a><span class="lineno">  536</span> </div>
<div class="line"><a id="l00537" name="l00537"></a><span class="lineno">  537</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00538" name="l00538"></a><span class="lineno">  538</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::Dot&lt;2&gt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00539" name="l00539"></a><span class="lineno">  539</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00540" name="l00540"></a><span class="lineno">  540</span>  <span class="keywordflow">return</span> CompMul(v).HorizontalSum&lt;2&gt;();</div>
<div class="line"><a id="l00541" name="l00541"></a><span class="lineno">  541</span>}</div>
<div class="line"><a id="l00542" name="l00542"></a><span class="lineno">  542</span> </div>
<div class="line"><a id="l00543" name="l00543"></a><span class="lineno">  543</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00544" name="l00544"></a><span class="lineno">  544</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::Dot&lt;3&gt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00545" name="l00545"></a><span class="lineno">  545</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00546" name="l00546"></a><span class="lineno">  546</span>  <span class="keywordflow">return</span> CompMul(v).HorizontalSum&lt;3&gt;();</div>
<div class="line"><a id="l00547" name="l00547"></a><span class="lineno">  547</span>}</div>
<div class="line"><a id="l00548" name="l00548"></a><span class="lineno">  548</span> </div>
<div class="line"><a id="l00549" name="l00549"></a><span class="lineno">  549</span><span class="keyword">template</span> &lt;&gt;</div>
<div class="line"><a id="l00550" name="l00550"></a><span class="lineno">  550</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a> xiiSimdVec4d::Dot&lt;4&gt;(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00551" name="l00551"></a><span class="lineno">  551</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00552" name="l00552"></a><span class="lineno">  552</span>  <span class="keywordflow">return</span> CompMul(v).HorizontalSum&lt;4&gt;();</div>
<div class="line"><a id="l00553" name="l00553"></a><span class="lineno">  553</span>}</div>
<div class="line"><a id="l00554" name="l00554"></a><span class="lineno">  554</span> </div>
<div class="foldopen" id="foldopen00555" data-start="{" data-end="}">
<div class="line"><a id="l00555" name="l00555"></a><span class="lineno"><a class="line" href="../../d5/dba/classxii_simd_vec4d.htm#a8df1dd4b84eb69c15007fbb2c2a00168">  555</a></span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> <a class="code hl_function" href="../../d5/dba/classxii_simd_vec4d.htm#a8df1dd4b84eb69c15007fbb2c2a00168">xiiSimdVec4d::CrossRH</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; v)<span class="keyword"> const</span></div>
<div class="line"><a id="l00556" name="l00556"></a><span class="lineno">  556</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00557" name="l00557"></a><span class="lineno">  557</span>  __m256d a = _mm256_mul_pd(m_v, _mm256_permute4x64_pd(v.m_v, XII_TO_SHUFFLE(xiiSwizzle::YZXW)));</div>
<div class="line"><a id="l00558" name="l00558"></a><span class="lineno">  558</span>  __m256d b = _mm256_mul_pd(v.m_v, _mm256_permute4x64_pd(m_v, XII_TO_SHUFFLE(xiiSwizzle::YZXW)));</div>
<div class="line"><a id="l00559" name="l00559"></a><span class="lineno">  559</span>  __m256d c = _mm256_sub_pd(a, b);</div>
<div class="line"><a id="l00560" name="l00560"></a><span class="lineno">  560</span> </div>
<div class="line"><a id="l00561" name="l00561"></a><span class="lineno">  561</span>  <span class="keywordflow">return</span> _mm256_permute4x64_pd(c, XII_TO_SHUFFLE(xiiSwizzle::YZXW));</div>
<div class="line"><a id="l00562" name="l00562"></a><span class="lineno">  562</span>}</div>
</div>
<div class="line"><a id="l00563" name="l00563"></a><span class="lineno">  563</span> </div>
<div class="foldopen" id="foldopen00564" data-start="{" data-end="}">
<div class="line"><a id="l00564" name="l00564"></a><span class="lineno"><a class="line" href="../../d5/dba/classxii_simd_vec4d.htm#a0d583bee5256656b40a608d88710cbeb">  564</a></span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> <a class="code hl_function" href="../../d5/dba/classxii_simd_vec4d.htm#a0d583bee5256656b40a608d88710cbeb">xiiSimdVec4d::GetOrthogonalVector</a>()<span class="keyword"> const</span></div>
<div class="line"><a id="l00565" name="l00565"></a><span class="lineno">  565</span><span class="keyword"></span>{</div>
<div class="line"><a id="l00566" name="l00566"></a><span class="lineno">  566</span>  <span class="comment">// See http://blog.selfshadow.com/2011/10/17/perp-vectors/ - this is Stark&#39;s first variant, SIMDified.</span></div>
<div class="line"><a id="l00567" name="l00567"></a><span class="lineno">  567</span>  <span class="keywordflow">return</span> <a class="code hl_function" href="../../d5/dba/classxii_simd_vec4d.htm#a8df1dd4b84eb69c15007fbb2c2a00168">CrossRH</a>(_mm256_and_pd(m_v, _mm256_cmp_pd(m_v, HorizontalMin&lt;3&gt;().m_v, _CMP_EQ_OQ)));</div>
<div class="line"><a id="l00568" name="l00568"></a><span class="lineno">  568</span>}</div>
</div>
<div class="line"><a id="l00569" name="l00569"></a><span class="lineno">  569</span> </div>
<div class="line"><a id="l00570" name="l00570"></a><span class="lineno">  570</span><span class="comment">// static</span></div>
<div class="line"><a id="l00571" name="l00571"></a><span class="lineno">  571</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::MulAdd(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; a, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; b, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; c)</div>
<div class="line"><a id="l00572" name="l00572"></a><span class="lineno">  572</span>{</div>
<div class="line"><a id="l00573" name="l00573"></a><span class="lineno">  573</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_2</span></div>
<div class="line"><a id="l00574" name="l00574"></a><span class="lineno">  574</span>  <span class="keywordflow">return</span> _mm256_fmadd_pd(a.m_v, b.m_v, c.m_v);</div>
<div class="line"><a id="l00575" name="l00575"></a><span class="lineno">  575</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00576" name="l00576"></a><span class="lineno">  576</span>  <span class="keywordflow">return</span> a.CompMul(b) + c;</div>
<div class="line"><a id="l00577" name="l00577"></a><span class="lineno">  577</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00578" name="l00578"></a><span class="lineno">  578</span>}</div>
<div class="line"><a id="l00579" name="l00579"></a><span class="lineno">  579</span> </div>
<div class="line"><a id="l00580" name="l00580"></a><span class="lineno">  580</span><span class="comment">// static</span></div>
<div class="line"><a id="l00581" name="l00581"></a><span class="lineno">  581</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::MulAdd(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; a, <span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; b, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; c)</div>
<div class="line"><a id="l00582" name="l00582"></a><span class="lineno">  582</span>{</div>
<div class="line"><a id="l00583" name="l00583"></a><span class="lineno">  583</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_2</span></div>
<div class="line"><a id="l00584" name="l00584"></a><span class="lineno">  584</span>  <span class="keywordflow">return</span> _mm256_fmadd_pd(a.m_v, b.m_v, c.m_v);</div>
<div class="line"><a id="l00585" name="l00585"></a><span class="lineno">  585</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00586" name="l00586"></a><span class="lineno">  586</span>  <span class="keywordflow">return</span> a * b + c;</div>
<div class="line"><a id="l00587" name="l00587"></a><span class="lineno">  587</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00588" name="l00588"></a><span class="lineno">  588</span>}</div>
<div class="line"><a id="l00589" name="l00589"></a><span class="lineno">  589</span> </div>
<div class="line"><a id="l00590" name="l00590"></a><span class="lineno">  590</span><span class="comment">// static</span></div>
<div class="line"><a id="l00591" name="l00591"></a><span class="lineno">  591</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::MulSub(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; a, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; b, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; c)</div>
<div class="line"><a id="l00592" name="l00592"></a><span class="lineno">  592</span>{</div>
<div class="line"><a id="l00593" name="l00593"></a><span class="lineno">  593</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_2</span></div>
<div class="line"><a id="l00594" name="l00594"></a><span class="lineno">  594</span>  <span class="keywordflow">return</span> _mm256_fmsub_pd(a.m_v, b.m_v, c.m_v);</div>
<div class="line"><a id="l00595" name="l00595"></a><span class="lineno">  595</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00596" name="l00596"></a><span class="lineno">  596</span>  <span class="keywordflow">return</span> a.CompMul(b) - c;</div>
<div class="line"><a id="l00597" name="l00597"></a><span class="lineno">  597</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00598" name="l00598"></a><span class="lineno">  598</span>}</div>
<div class="line"><a id="l00599" name="l00599"></a><span class="lineno">  599</span> </div>
<div class="line"><a id="l00600" name="l00600"></a><span class="lineno">  600</span><span class="comment">// static</span></div>
<div class="line"><a id="l00601" name="l00601"></a><span class="lineno">  601</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::MulSub(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; a, <span class="keyword">const</span> <a class="code hl_class" href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a>&amp; b, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; c)</div>
<div class="line"><a id="l00602" name="l00602"></a><span class="lineno">  602</span>{</div>
<div class="line"><a id="l00603" name="l00603"></a><span class="lineno">  603</span><span class="preprocessor">#if XII_SSE_LEVEL &gt;= XII_AVX_2</span></div>
<div class="line"><a id="l00604" name="l00604"></a><span class="lineno">  604</span>  <span class="keywordflow">return</span> _mm256_fmsub_pd(a.m_v, b.m_v, c.m_v);</div>
<div class="line"><a id="l00605" name="l00605"></a><span class="lineno">  605</span><span class="preprocessor">#else</span></div>
<div class="line"><a id="l00606" name="l00606"></a><span class="lineno">  606</span>  <span class="keywordflow">return</span> a * b - c;</div>
<div class="line"><a id="l00607" name="l00607"></a><span class="lineno">  607</span><span class="preprocessor">#endif</span></div>
<div class="line"><a id="l00608" name="l00608"></a><span class="lineno">  608</span>}</div>
<div class="line"><a id="l00609" name="l00609"></a><span class="lineno">  609</span> </div>
<div class="line"><a id="l00610" name="l00610"></a><span class="lineno">  610</span><span class="comment">// static</span></div>
<div class="line"><a id="l00611" name="l00611"></a><span class="lineno">  611</span>XII_ALWAYS_INLINE <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a> xiiSimdVec4d::CopySign(<span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; vMagnitude, <span class="keyword">const</span> <a class="code hl_class" href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a>&amp; vSign)</div>
<div class="line"><a id="l00612" name="l00612"></a><span class="lineno">  612</span>{</div>
<div class="line"><a id="l00613" name="l00613"></a><span class="lineno">  613</span>  __m256d minusZero = _mm256_set1_pd(-0.0);</div>
<div class="line"><a id="l00614" name="l00614"></a><span class="lineno">  614</span>  <span class="keywordflow">return</span> _mm256_or_pd(_mm256_andnot_pd(minusZero, vMagnitude.m_v), _mm256_and_pd(minusZero, vSign.m_v));</div>
<div class="line"><a id="l00615" name="l00615"></a><span class="lineno">  615</span>}</div>
<div class="ttc" id="aclassxii_simd_double_htm"><div class="ttname"><a href="../../d7/df1/classxii_simd_double.htm">xiiSimdDouble</a></div><div class="ttdef"><b>Definition</b> SimdDouble.h:7</div></div>
<div class="ttc" id="aclassxii_simd_vec4b_htm"><div class="ttname"><a href="../../de/d88/classxii_simd_vec4b.htm">xiiSimdVec4b</a></div><div class="ttdef"><b>Definition</b> SimdVec4b.h:7</div></div>
<div class="ttc" id="aclassxii_simd_vec4d_htm"><div class="ttname"><a href="../../d5/dba/classxii_simd_vec4d.htm">xiiSimdVec4d</a></div><div class="ttdoc">A 4-component SIMD vector class.</div><div class="ttdef"><b>Definition</b> SimdVec4d.h:8</div></div>
<div class="ttc" id="aclassxii_simd_vec4d_htm_a0d583bee5256656b40a608d88710cbeb"><div class="ttname"><a href="../../d5/dba/classxii_simd_vec4d.htm#a0d583bee5256656b40a608d88710cbeb">xiiSimdVec4d::GetOrthogonalVector</a></div><div class="ttdeci">xiiSimdVec4d GetOrthogonalVector() const</div><div class="ttdoc">Generates an arbitrary vector such that Dot&lt;3&gt;(GetOrthogonalVector()) == 0.</div><div class="ttdef"><b>Definition</b> AVXVec4d_inl.h:564</div></div>
<div class="ttc" id="aclassxii_simd_vec4d_htm_a8df1dd4b84eb69c15007fbb2c2a00168"><div class="ttname"><a href="../../d5/dba/classxii_simd_vec4d.htm#a8df1dd4b84eb69c15007fbb2c2a00168">xiiSimdVec4d::CrossRH</a></div><div class="ttdeci">xiiSimdVec4d CrossRH(const xiiSimdVec4d &amp;v) const</div><div class="ttdoc">3D cross product, w is ignored.</div><div class="ttdef"><b>Definition</b> AVXVec4d_inl.h:555</div></div>
<div class="ttc" id="aclassxii_simd_vec4d_htm_af7408ea9e8fe30f0266927fe7fb9a70e"><div class="ttname"><a href="../../d5/dba/classxii_simd_vec4d.htm#af7408ea9e8fe30f0266927fe7fb9a70e">xiiSimdVec4d::GetCombined</a></div><div class="ttdeci">xiiSimdVec4d GetCombined(const xiiSimdVec4d &amp;other) const</div><div class="ttdoc">x = this[s0], y = this[s1], z = other[s2], w = other[s3]</div></div>
<div class="ttc" id="anamespacexii_math_htm_a794f0339ad168c57748133cd2687fe4d"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a794f0339ad168c57748133cd2687fe4d">xiiMath::NaN</a></div><div class="ttdeci">constexpr TYPE NaN()</div><div class="ttdoc">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.</div><div class="ttdef"><b>Definition</b> Constants_inl.h:72</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6571b00f9c254a01b1735d75b2065daf.htm">SimdMath</a></li><li class="navelem"><a class="el" href="../../dir_421677d30b51fc7bb4bb6333857496b6.htm">Implementation</a></li><li class="navelem"><a class="el" href="../../dir_21d5994ae7079aa5a83dfc037dc7732a.htm">AVX</a></li><li class="navelem"><b>AVXVec4d_inl.h</b></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:47:31 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiUnicodeUtils Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/d05/classxii_unicode_utils.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="../../da/ddb/classxii_unicode_utils-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiUnicodeUtils Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Helper functions to work with Unicode.  
 <a href="../../de/d05/classxii_unicode_utils.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d2e/_unicode_utils_8h_source.htm">UnicodeUtils.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/db2/structxii_unicode_utils_1_1_utf_inserter.htm">UtfInserter</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">[internal] Small helper class to append bytes to some arbitrary container. Used for Utf8 string building.  <a href="../../dd/db2/structxii_unicode_utils_1_1_utf_inserter.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a660bf5a88b574b4be176332064e55fbe"><td class="memTemplParams" colspan="2"><a id="a660bf5a88b574b4be176332064e55fbe"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a660bf5a88b574b4be176332064e55fbe"><td class="memTemplItemLeft" align="right" valign="top">static constexpr T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a660bf5a88b574b4be176332064e55fbe">GetMaxStringEnd</a> ()</td></tr>
<tr class="memdesc:a660bf5a88b574b4be176332064e55fbe"><td class="mdescLeft">&#160;</td><td class="mdescRight">[internal] Returns the max string end pointer for the given type <br /></td></tr>
<tr class="separator:a660bf5a88b574b4be176332064e55fbe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a875e86e7d44c803cdb639e25cddb9a9b"><td class="memItemLeft" align="right" valign="top"><a id="a875e86e7d44c803cdb639e25cddb9a9b"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a875e86e7d44c803cdb639e25cddb9a9b">IsASCII</a> (xiiUInt32 uiChar)</td></tr>
<tr class="memdesc:a875e86e7d44c803cdb639e25cddb9a9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether a character is a pure ASCII character (only the first 7 Bits are used) <br /></td></tr>
<tr class="separator:a875e86e7d44c803cdb639e25cddb9a9b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf27749722bbe4413360262185d49050"><td class="memItemLeft" align="right" valign="top"><a id="adf27749722bbe4413360262185d49050"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#adf27749722bbe4413360262185d49050">IsUtf8StartByte</a> (char iByte)</td></tr>
<tr class="memdesc:adf27749722bbe4413360262185d49050"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given byte is a start byte in a UTF-8 multi-byte sequence. <br /></td></tr>
<tr class="separator:adf27749722bbe4413360262185d49050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d197f1be47422c59038411aab8460a7"><td class="memItemLeft" align="right" valign="top"><a id="a0d197f1be47422c59038411aab8460a7"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a0d197f1be47422c59038411aab8460a7">IsUtf8ContinuationByte</a> (char iByte)</td></tr>
<tr class="memdesc:a0d197f1be47422c59038411aab8460a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given byte is a byte in a UTF-8 multi-byte sequence. <br /></td></tr>
<tr class="separator:a0d197f1be47422c59038411aab8460a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2a4f1c0608a25e654b043d0247e2310"><td class="memItemLeft" align="right" valign="top"><a id="ab2a4f1c0608a25e654b043d0247e2310"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#ab2a4f1c0608a25e654b043d0247e2310">GetUtf8SequenceLength</a> (char iFirstByte)</td></tr>
<tr class="memdesc:ab2a4f1c0608a25e654b043d0247e2310"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bytes that a UTF-8 sequence is in length, which is encoded in the first byte of the sequence. <br /></td></tr>
<tr class="separator:ab2a4f1c0608a25e654b043d0247e2310"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0fc39bd8ebfb9c1239d7176fbbbd518"><td class="memItemLeft" align="right" valign="top"><a id="af0fc39bd8ebfb9c1239d7176fbbbd518"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#af0fc39bd8ebfb9c1239d7176fbbbd518">ConvertUtf8ToUtf32</a> (const char *pFirstChar)</td></tr>
<tr class="memdesc:af0fc39bd8ebfb9c1239d7176fbbbd518"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts the UTF-8 character that starts at pFirstChar into a UTF-32 character. <br /></td></tr>
<tr class="separator:af0fc39bd8ebfb9c1239d7176fbbbd518"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33a48cbdbd69ef591d35bd227c937e3a"><td class="memItemLeft" align="right" valign="top"><a id="a33a48cbdbd69ef591d35bd227c937e3a"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a33a48cbdbd69ef591d35bd227c937e3a">GetSizeForCharacterInUtf8</a> (xiiUInt32 uiCharacter)</td></tr>
<tr class="memdesc:a33a48cbdbd69ef591d35bd227c937e3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes how many bytes the character would require, if encoded in UTF-8. <br /></td></tr>
<tr class="separator:a33a48cbdbd69ef591d35bd227c937e3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae3e0d757861751b2c145821e42cb7815"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#ae3e0d757861751b2c145821e42cb7815">MoveToNextUtf8</a> (const char *&amp;ref_szUtf8, xiiUInt32 uiNumCharacters=1)</td></tr>
<tr class="memdesc:ae3e0d757861751b2c145821e42cb7815"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string pointer ahead to the next Utf8 character sequence.  <a href="../../de/d05/classxii_unicode_utils.htm#ae3e0d757861751b2c145821e42cb7815">More...</a><br /></td></tr>
<tr class="separator:ae3e0d757861751b2c145821e42cb7815"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b36fb66c12ebc391d7df90253a529a3"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a8b36fb66c12ebc391d7df90253a529a3">MoveToNextUtf8</a> (const char *&amp;ref_szUtf8, const char *szUtf8End, xiiUInt32 uiNumCharacters=1)</td></tr>
<tr class="memdesc:a8b36fb66c12ebc391d7df90253a529a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string pointer ahead to the next Utf8 character sequence.  <a href="../../de/d05/classxii_unicode_utils.htm#a8b36fb66c12ebc391d7df90253a529a3">More...</a><br /></td></tr>
<tr class="separator:a8b36fb66c12ebc391d7df90253a529a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7a957c6c031dc9a6f86beedff3391aba"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a7a957c6c031dc9a6f86beedff3391aba">MoveToPriorUtf8</a> (const char *&amp;ref_szUtf8, xiiUInt32 uiNumCharacters=1)</td></tr>
<tr class="memdesc:a7a957c6c031dc9a6f86beedff3391aba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the given string pointer backwards to the previous Utf8 character sequence.  <a href="../../de/d05/classxii_unicode_utils.htm#a7a957c6c031dc9a6f86beedff3391aba">More...</a><br /></td></tr>
<tr class="separator:a7a957c6c031dc9a6f86beedff3391aba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1181f94b0913b9c842ee097e4d082482"><td class="memItemLeft" align="right" valign="top"><a id="a1181f94b0913b9c842ee097e4d082482"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a1181f94b0913b9c842ee097e4d082482">IsValidUtf8</a> (const char *szString, const char *szStringEnd=<a class="el" href="../../de/d05/classxii_unicode_utils.htm#a660bf5a88b574b4be176332064e55fbe">GetMaxStringEnd</a>&lt; char &gt;())</td></tr>
<tr class="memdesc:a1181f94b0913b9c842ee097e4d082482"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns false if the given string does not contain a completely valid Utf8 string. <br /></td></tr>
<tr class="separator:a1181f94b0913b9c842ee097e4d082482"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafe47651ea5b2789a723f0aa14231e60"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#aafe47651ea5b2789a723f0aa14231e60">SkipUtf8Bom</a> (const char *&amp;ref_szUtf8)</td></tr>
<tr class="memdesc:aafe47651ea5b2789a723f0aa14231e60"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the given string starts with a Utf8 Bom, the pointer is incremented behind the Bom, and the function returns true.  <a href="../../de/d05/classxii_unicode_utils.htm#aafe47651ea5b2789a723f0aa14231e60">More...</a><br /></td></tr>
<tr class="separator:aafe47651ea5b2789a723f0aa14231e60"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab19dd02de92c92ef2a0c873a61ce886e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#ab19dd02de92c92ef2a0c873a61ce886e">SkipUtf16BomLE</a> (const xiiUInt16 *&amp;ref_pUtf16)</td></tr>
<tr class="memdesc:ab19dd02de92c92ef2a0c873a61ce886e"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the given string starts with a Utf16 little endian Bom, the pointer is incremented behind the Bom, and the function returns true.  <a href="../../de/d05/classxii_unicode_utils.htm#ab19dd02de92c92ef2a0c873a61ce886e">More...</a><br /></td></tr>
<tr class="separator:ab19dd02de92c92ef2a0c873a61ce886e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5563698a1cf2bbe1cbb2fc4b7cd63d0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#ab5563698a1cf2bbe1cbb2fc4b7cd63d0">SkipUtf16BomBE</a> (const xiiUInt16 *&amp;ref_pUtf16)</td></tr>
<tr class="memdesc:ab5563698a1cf2bbe1cbb2fc4b7cd63d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">If the given string starts with a Utf16 big endian Bom, the pointer is incremented behind the Bom, and the function returns true.  <a href="../../de/d05/classxii_unicode_utils.htm#ab5563698a1cf2bbe1cbb2fc4b7cd63d0">More...</a><br /></td></tr>
<tr class="separator:ab5563698a1cf2bbe1cbb2fc4b7cd63d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3e6abac1978259e554b797bd6415295"><td class="memTemplParams" colspan="2"><a id="af3e6abac1978259e554b797bd6415295"></a>
template&lt;typename ByteIterator &gt; </td></tr>
<tr class="memitem:af3e6abac1978259e554b797bd6415295"><td class="memTemplItemLeft" align="right" valign="top">static xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#af3e6abac1978259e554b797bd6415295">DecodeUtf8ToUtf32</a> (ByteIterator &amp;ref_szUtf8Iterator)</td></tr>
<tr class="memdesc:af3e6abac1978259e554b797bd6415295"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes the next character from the given Utf8 sequence to Utf32 and increments the iterator as far as necessary. <br /></td></tr>
<tr class="separator:af3e6abac1978259e554b797bd6415295"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf73c6b6d02c3f8cd8391bc076823ee1"><td class="memTemplParams" colspan="2"><a id="aaf73c6b6d02c3f8cd8391bc076823ee1"></a>
template&lt;typename UInt16Iterator &gt; </td></tr>
<tr class="memitem:aaf73c6b6d02c3f8cd8391bc076823ee1"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#aaf73c6b6d02c3f8cd8391bc076823ee1">IsUtf16Surrogate</a> (UInt16Iterator &amp;ref_szUtf16Iterator)</td></tr>
<tr class="memdesc:aaf73c6b6d02c3f8cd8391bc076823ee1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Characters that cannot be represented in a single utf16 code point need to be split up into two surrogate pairs to form unicode characters beyond the \uFFFF range. <br /></td></tr>
<tr class="separator:aaf73c6b6d02c3f8cd8391bc076823ee1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3634422ec69791653681465f89420bee"><td class="memTemplParams" colspan="2"><a id="a3634422ec69791653681465f89420bee"></a>
template&lt;typename UInt16Iterator &gt; </td></tr>
<tr class="memitem:a3634422ec69791653681465f89420bee"><td class="memTemplItemLeft" align="right" valign="top">static xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a3634422ec69791653681465f89420bee">DecodeUtf16ToUtf32</a> (UInt16Iterator &amp;ref_szUtf16Iterator)</td></tr>
<tr class="memdesc:a3634422ec69791653681465f89420bee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes the next character from the given Utf16 sequence to Utf32 and increments the iterator as far as necessary. <br /></td></tr>
<tr class="separator:a3634422ec69791653681465f89420bee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f2ceb3c3cf013b0e6fcb03b554101f6"><td class="memTemplParams" colspan="2"><a id="a7f2ceb3c3cf013b0e6fcb03b554101f6"></a>
template&lt;typename WCharIterator &gt; </td></tr>
<tr class="memitem:a7f2ceb3c3cf013b0e6fcb03b554101f6"><td class="memTemplItemLeft" align="right" valign="top">static xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a7f2ceb3c3cf013b0e6fcb03b554101f6">DecodeWCharToUtf32</a> (WCharIterator &amp;ref_szWCharIterator)</td></tr>
<tr class="memdesc:a7f2ceb3c3cf013b0e6fcb03b554101f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes the next character from the given wchar_t sequence to Utf32 and increments the iterator as far as necessary. <br /></td></tr>
<tr class="separator:a7f2ceb3c3cf013b0e6fcb03b554101f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5d2eb272d4aa4ddcc63e3abe7697b3f5"><td class="memTemplParams" colspan="2"><a id="a5d2eb272d4aa4ddcc63e3abe7697b3f5"></a>
template&lt;typename ByteIterator &gt; </td></tr>
<tr class="memitem:a5d2eb272d4aa4ddcc63e3abe7697b3f5"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a5d2eb272d4aa4ddcc63e3abe7697b3f5">EncodeUtf32ToUtf8</a> (xiiUInt32 uiUtf32, ByteIterator &amp;ref_szUtf8Output)</td></tr>
<tr class="memdesc:a5d2eb272d4aa4ddcc63e3abe7697b3f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encodes the given Utf32 character to Utf8 and writes as many bytes to the output iterator, as necessary. <br /></td></tr>
<tr class="separator:a5d2eb272d4aa4ddcc63e3abe7697b3f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4e055d3089a9eda1046dc376ea3ae758"><td class="memTemplParams" colspan="2"><a id="a4e055d3089a9eda1046dc376ea3ae758"></a>
template&lt;typename UInt16Iterator &gt; </td></tr>
<tr class="memitem:a4e055d3089a9eda1046dc376ea3ae758"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a4e055d3089a9eda1046dc376ea3ae758">EncodeUtf32ToUtf16</a> (xiiUInt32 uiUtf32, UInt16Iterator &amp;ref_szUtf16Output)</td></tr>
<tr class="memdesc:a4e055d3089a9eda1046dc376ea3ae758"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encodes the given Utf32 character to Utf16 and writes as many bytes to the output iterator, as necessary. <br /></td></tr>
<tr class="separator:a4e055d3089a9eda1046dc376ea3ae758"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1811c259073e1f54bf4e4f2631403c6a"><td class="memTemplParams" colspan="2"><a id="a1811c259073e1f54bf4e4f2631403c6a"></a>
template&lt;typename WCharIterator &gt; </td></tr>
<tr class="memitem:a1811c259073e1f54bf4e4f2631403c6a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a1811c259073e1f54bf4e4f2631403c6a">EncodeUtf32ToWChar</a> (xiiUInt32 uiUtf32, WCharIterator &amp;ref_szWCharOutput)</td></tr>
<tr class="memdesc:a1811c259073e1f54bf4e4f2631403c6a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Encodes the given Utf32 character to wchar_t and writes as many bytes to the output iterator, as necessary. <br /></td></tr>
<tr class="separator:a1811c259073e1f54bf4e4f2631403c6a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ec772f9b0936688f4f81f0fd952d001"><td class="memTemplParams" colspan="2">template&lt;typename Container &gt; </td></tr>
<tr class="memitem:a6ec772f9b0936688f4f81f0fd952d001"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a6ec772f9b0936688f4f81f0fd952d001">RepairNonUtf8Text</a> (const char *pStartData, const char *pEndData, Container &amp;out_result)</td></tr>
<tr class="memdesc:a6ec772f9b0936688f4f81f0fd952d001"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks an array of char's, whether it is a valid Utf8 string. If not, it repairs the string, ie by either re-encoding characters or removing them. Writes the result to the desired container type (xiiString or <a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a>).  <a href="../../de/d05/classxii_unicode_utils.htm#a6ec772f9b0936688f4f81f0fd952d001">More...</a><br /></td></tr>
<tr class="separator:a6ec772f9b0936688f4f81f0fd952d001"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a88e2991d3ef6c958bec59bcd781399dd"><td class="memItemLeft" align="right" valign="top"><a id="a88e2991d3ef6c958bec59bcd781399dd"></a>
static constexpr xiiUInt16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a88e2991d3ef6c958bec59bcd781399dd">Utf16BomLE</a> = 0xFEFF</td></tr>
<tr class="memdesc:a88e2991d3ef6c958bec59bcd781399dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Byte Order Mark for Little Endian Utf16 strings. <br /></td></tr>
<tr class="separator:a88e2991d3ef6c958bec59bcd781399dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a165b71ed908e16f491f37cfadb748c8b"><td class="memItemLeft" align="right" valign="top"><a id="a165b71ed908e16f491f37cfadb748c8b"></a>
static constexpr xiiUInt16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../de/d05/classxii_unicode_utils.htm#a165b71ed908e16f491f37cfadb748c8b">Utf16BomBE</a> = 0xFFFE</td></tr>
<tr class="memdesc:a165b71ed908e16f491f37cfadb748c8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Byte Order Mark for Big Endian Utf16 strings. <br /></td></tr>
<tr class="separator:a165b71ed908e16f491f37cfadb748c8b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Helper functions to work with Unicode. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a8b36fb66c12ebc391d7df90253a529a3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a8b36fb66c12ebc391d7df90253a529a3">&#9670;&nbsp;</a></span>MoveToNextUtf8() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiUnicodeUtils::MoveToNextUtf8 </td>
          <td>(</td>
          <td class="paramtype">const char *&amp;&#160;</td>
          <td class="paramname"><em>ref_szUtf8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szUtf8End</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiNumCharacters</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves the given string pointer ahead to the next Utf8 character sequence. </p>
<p>The string may point to an invalid position (in between a character sequence). It may not point to a zero terminator already. </p>

</div>
</div>
<a id="ae3e0d757861751b2c145821e42cb7815"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae3e0d757861751b2c145821e42cb7815">&#9670;&nbsp;</a></span>MoveToNextUtf8() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiUnicodeUtils::MoveToNextUtf8 </td>
          <td>(</td>
          <td class="paramtype">const char *&amp;&#160;</td>
          <td class="paramname"><em>ref_szUtf8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiNumCharacters</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves the given string pointer ahead to the next Utf8 character sequence. </p>
<p>The string may point to an invalid position (in between a character sequence). It may not point to a zero terminator already. </p>

</div>
</div>
<a id="a7a957c6c031dc9a6f86beedff3391aba"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7a957c6c031dc9a6f86beedff3391aba">&#9670;&nbsp;</a></span>MoveToPriorUtf8()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiUnicodeUtils::MoveToPriorUtf8 </td>
          <td>(</td>
          <td class="paramtype">const char *&amp;&#160;</td>
          <td class="paramname"><em>ref_szUtf8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiNumCharacters</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves the given string pointer backwards to the previous Utf8 character sequence. </p>
<p>The string may point to an invalid position (in between a character sequence), or even the \0 terminator, as long as there is a valid string before it (and the user knows when to stop). </p>

</div>
</div>
<a id="a6ec772f9b0936688f4f81f0fd952d001"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6ec772f9b0936688f4f81f0fd952d001">&#9670;&nbsp;</a></span>RepairNonUtf8Text()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Container &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiUnicodeUtils::RepairNonUtf8Text </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pStartData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>pEndData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Container &amp;&#160;</td>
          <td class="paramname"><em>out_result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks an array of char's, whether it is a valid Utf8 string. If not, it repairs the string, ie by either re-encoding characters or removing them. Writes the result to the desired container type (xiiString or <a class="el" href="../../d4/dbb/classxii_string_builder.htm" title="xiiStringBuilder is a class that is meant for creating and modifying strings.">xiiStringBuilder</a>). </p>
<p>Returns true if the text had to be repaired, false if it was already valid.</p>
<dl class="section note"><dt>Note</dt><dd>That the for #include order reasons, the implementation is in <a class="el" href="../../da/dbb/_string_builder__inl_8h_source.htm">StringBuilder_inl.h</a>, so you need to have <a class="el" href="../../d5/df1/_string_builder_8h_source.htm">StringBuilder.h</a> included to use it. </dd></dl>

</div>
</div>
<a id="ab5563698a1cf2bbe1cbb2fc4b7cd63d0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab5563698a1cf2bbe1cbb2fc4b7cd63d0">&#9670;&nbsp;</a></span>SkipUtf16BomBE()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiUnicodeUtils::SkipUtf16BomBE </td>
          <td>(</td>
          <td class="paramtype">const xiiUInt16 *&amp;&#160;</td>
          <td class="paramname"><em>ref_pUtf16</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If the given string starts with a Utf16 big endian Bom, the pointer is incremented behind the Bom, and the function returns true. </p>
<p>Otherwise the pointer is unchanged and false is returned. </p>

</div>
</div>
<a id="ab19dd02de92c92ef2a0c873a61ce886e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab19dd02de92c92ef2a0c873a61ce886e">&#9670;&nbsp;</a></span>SkipUtf16BomLE()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiUnicodeUtils::SkipUtf16BomLE </td>
          <td>(</td>
          <td class="paramtype">const xiiUInt16 *&amp;&#160;</td>
          <td class="paramname"><em>ref_pUtf16</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If the given string starts with a Utf16 little endian Bom, the pointer is incremented behind the Bom, and the function returns true. </p>
<p>Otherwise the pointer is unchanged and false is returned. </p>

</div>
</div>
<a id="aafe47651ea5b2789a723f0aa14231e60"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aafe47651ea5b2789a723f0aa14231e60">&#9670;&nbsp;</a></span>SkipUtf8Bom()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiUnicodeUtils::SkipUtf8Bom </td>
          <td>(</td>
          <td class="paramtype">const char *&amp;&#160;</td>
          <td class="paramname"><em>ref_szUtf8</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>If the given string starts with a Utf8 Bom, the pointer is incremented behind the Bom, and the function returns true. </p>
<p>Otherwise the pointer is unchanged and false is returned. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/<a class="el" href="../../d0/d2e/_unicode_utils_8h_source.htm">UnicodeUtils.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/Implementation/<a class="el" href="../../da/dbb/_string_builder__inl_8h_source.htm">StringBuilder_inl.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Strings/Implementation/<a class="el" href="../../d6/dc7/_unicode_utils__inl_8h_source.htm">UnicodeUtils_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../de/d05/classxii_unicode_utils.htm">xiiUnicodeUtils</a></li>
    <li class="footer">Generated on Mon Oct 9 2023 19:12:18 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

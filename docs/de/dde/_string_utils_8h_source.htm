<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Strings/StringUtils.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/dde/_string_utils_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StringUtils.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;Foundation/ThirdParty/utf8/utf8.h&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Basics.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/UnicodeUtils.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Threading/AtomicInteger.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="../../df/d65/classxii_string_utils.htm">   10</a></span>&#160;<span class="keyword">class </span>XII_FOUNDATION_DLL <a class="code" href="../../df/d65/classxii_string_utils.htm">xiiStringUtils</a></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  <span class="keyword">static</span> constexpr <span class="keywordtype">bool</span> IsNullOrEmpty(<span class="keyword">const</span> T* pString); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsNullOrEmpty(<span class="keyword">const</span> T* pString, <span class="keyword">const</span> T* pStringEnd);</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> UpdateStringEnd(<span class="keyword">const</span> T* pStringStart, <span class="keyword">const</span> T*&amp; ref_pStringEnd);</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="keyword">static</span> constexpr xiiUInt32 GetStringElementCount(<span class="keyword">const</span> T* pString); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keyword">static</span> xiiUInt32 GetStringElementCount(<span class="keyword">const</span> T* pString, <span class="keyword">const</span> T* pStringEnd); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">static</span> xiiUInt32 GetCharacterCount(<span class="keyword">const</span> <span class="keywordtype">char</span>* szUtf8, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> GetCharacterAndElementCount(<span class="keyword">const</span> <span class="keywordtype">char</span>* szUtf8, xiiUInt32&amp; ref_uiCharacterCount, xiiUInt32&amp; ref_uiElementCount, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keyword">static</span> xiiUInt32 Copy(<span class="keywordtype">char</span>* szDest, xiiUInt32 uiDstSize, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSource, <span class="keyword">const</span> <span class="keywordtype">char</span>* pSourceEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keyword">static</span> xiiUInt32 CopyN(<span class="keywordtype">char</span>* szDest, xiiUInt32 uiDstSize, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSource, xiiUInt32 uiCharsToCopy, <span class="keyword">const</span> <span class="keywordtype">char</span>* pSourceEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keyword">static</span> xiiUInt32 ToUpperChar(xiiUInt32 uiChar); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keyword">static</span> xiiUInt32 ToLowerChar(xiiUInt32 uiChar); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keyword">static</span> xiiUInt32 ToUpperString(<span class="keywordtype">char</span>* szString, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keyword">static</span> xiiUInt32 ToLowerString(<span class="keywordtype">char</span>* szString, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keyword">static</span> xiiInt32 CompareChars(xiiUInt32 uiCharacter1, xiiUInt32 uiCharacter2); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  <span class="keyword">static</span> xiiInt32 CompareChars(<span class="keyword">const</span> <span class="keywordtype">char</span>* szUtf8Char1, <span class="keyword">const</span> <span class="keywordtype">char</span>* szUtf8Char2); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160; </div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keyword">static</span> xiiInt32 CompareChars_NoCase(xiiUInt32 uiCharacter1, xiiUInt32 uiCharacter2); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keyword">static</span> xiiInt32 CompareChars_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* szUtf8Char1, <span class="keyword">const</span> <span class="keywordtype">char</span>* szUtf8Char2); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsEqual(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString1, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString1End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsEqualN(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString1, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, xiiUInt32 uiCharsToCompare, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString1End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsEqual_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString1, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString1End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsEqualN_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString1, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, xiiUInt32 uiCharsToCompare, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString1End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keyword">static</span> xiiInt32 Compare(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString1, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString1End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keyword">static</span> xiiInt32 CompareN(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString1, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, xiiUInt32 uiCharsToCompare, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString1End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keyword">static</span> xiiInt32 Compare_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString1, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString1End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keyword">static</span> xiiInt32 CompareN_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString1, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2, xiiUInt32 uiCharsToCompare, <span class="keyword">const</span> <span class="keywordtype">char</span>* pString1End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* pString2End = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <span class="keyword">static</span> xiiInt32 snprintf(<span class="keywordtype">char</span>* szDst, xiiUInt32 uiDstSize, <span class="keyword">const</span> <span class="keywordtype">char</span>* szFormat, ...); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">static</span> xiiInt32 vsnprintf(<span class="keywordtype">char</span>* szDst, xiiUInt32 uiDstSize, <span class="keyword">const</span> <span class="keywordtype">char</span>* szFormat, va_list szAp); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> StartsWith(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartsWith, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartsWithEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> StartsWith_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartsWith, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartsWithEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> EndsWith(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, <span class="keyword">const</span> <span class="keywordtype">char</span>* szEndsWith, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* szEndsWithEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> EndsWith_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, <span class="keyword">const</span> <span class="keywordtype">char</span>* szEndsWith, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* szEndsWithEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* FindSubString(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSource, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* pSourceEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFindEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* FindSubString_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSource, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* pSourceEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFindEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* FindLastSubString(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSource, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt = <span class="keyword">nullptr</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* pSourceEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFindEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* FindLastSubString_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* szSource, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFind, <span class="keyword">const</span> <span class="keywordtype">char</span>* szStartSearchAt = <span class="keyword">nullptr</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* pSourceEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;(), <span class="keyword">const</span> <span class="keywordtype">char</span>* szStringToFindEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno"><a class="line" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">  206</a></span>&#160;  <span class="keyword">using</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">XII_CHARACTER_FILTER</a> = bool (*)(xiiUInt32 uiChar);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* SkipCharacters(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, <a class="code" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">XII_CHARACTER_FILTER</a> skipCharacterCB, <span class="keywordtype">bool</span> bAlwaysSkipFirst = <span class="keyword">false</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* FindWordEnd(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, <a class="code" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">XII_CHARACTER_FILTER</a> isDelimiterCB, <span class="keywordtype">bool</span> bAlwaysSkipFirst = <span class="keyword">true</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> Trim(<span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; ref_pString, <span class="keyword">const</span> <span class="keywordtype">char</span>*&amp; ref_pStringEnd, <span class="keyword">const</span> <span class="keywordtype">char</span>* szTrimCharsStart, <span class="keyword">const</span> <span class="keywordtype">char</span>* szTrimCharsEnd); <span class="comment">// [tested] via xiiStringView and xiiStringBuilder</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsWhiteSpace(xiiUInt32 uiChar); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsDecimalDigit(xiiUInt32 uiChar); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsHexDigit(xiiUInt32 uiChar); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsWordDelimiter_English(xiiUInt32 uiChar); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsIdentifierDelimiter_C_Code(xiiUInt32 uiChar); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">bool</span> IsValidIdentifierName(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* FindWholeWord(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">XII_CHARACTER_FILTER</a> isDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span>* FindWholeWord_NoCase(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSearchFor, <a class="code" href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">XII_CHARACTER_FILTER</a> isDelimiterCB, <span class="keyword">const</span> <span class="keywordtype">char</span>* pStringEnd = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;()); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> FindUIntAtTheEnd(<span class="keyword">const</span> <span class="keywordtype">char</span>* szString, xiiUInt32&amp; out_uiValue, xiiUInt32* pStringLengthBeforeUInt = <span class="keyword">nullptr</span>); <span class="comment">// [tested]</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> OutputFormattedInt(<span class="keywordtype">char</span>* szOutputBuffer, xiiUInt32 uiBufferSize, xiiUInt32&amp; ref_uiWritePos, xiiInt64 value, xiiUInt8 uiWidth, <span class="keywordtype">bool</span> bPadZeros, xiiUInt8 uiBase);</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> OutputFormattedUInt(<span class="keywordtype">char</span>* szOutputBuffer, xiiUInt32 uiBufferSize, xiiUInt32&amp; ref_uiWritePos, xiiUInt64 value, xiiUInt8 uiWidth, <span class="keywordtype">bool</span> bPadZeros, xiiUInt8 uiBase, <span class="keywordtype">bool</span> bUpperCase);</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span> OutputFormattedFloat(<span class="keywordtype">char</span>* szOutputBuffer, xiiUInt32 uiBufferSize, xiiUInt32&amp; ref_uiWritePos, <span class="keywordtype">double</span> value, xiiUInt8 uiWidth, <span class="keywordtype">bool</span> bPadZeros, xiiInt8 iPrecision, <span class="keywordtype">bool</span> bScientific, <span class="keywordtype">bool</span> bRemoveTrailingZeroes = <span class="keyword">false</span>);</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_COMPILE_FOR_DEBUG)</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span>               AddUsedStringLength(xiiUInt32 uiLength);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span>               PrintStringLengthStatistics();</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../db/d8e/classxii_atomic_integer.htm">xiiAtomicInteger32</a> g_MaxUsedStringLength;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../db/d8e/classxii_atomic_integer.htm">xiiAtomicInteger32</a> g_UsedStringLengths[256];</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  XII_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">void</span> AddUsedStringLength(xiiUInt32)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  }</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  XII_ALWAYS_INLINE <span class="keyword">static</span> <span class="keywordtype">void</span> PrintStringLengthStatistics() {}</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;};</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160; </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="preprocessor">#include &lt;Foundation/Strings/Implementation/StringUtils_inl.h&gt;</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_atomic_integer_htm"><div class="ttname"><a href="../../db/d8e/classxii_atomic_integer.htm">xiiAtomicInteger&lt; xiiInt32 &gt;</a></div></div>
<div class="ttc" id="aclassxii_string_utils_htm"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm">xiiStringUtils</a></div><div class="ttdoc">Helper functions to work with UTF-8 strings (which include pure ASCII strings)</div><div class="ttdef"><b>Definition:</b> StringUtils.h:10</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_af474cd805cbd076c00d508adacd057bd"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#af474cd805cbd076c00d508adacd057bd">xiiStringUtils::XII_CHARACTER_FILTER</a></div><div class="ttdeci">bool(*)(xiiUInt32 uiChar) XII_CHARACTER_FILTER</div><div class="ttdoc">Function Definition for a function that determines whether a (Utf32) character belongs to a certain c...</div><div class="ttdef"><b>Definition:</b> StringUtils.h:206</div></div>
<div class="ttc" id="astructxii_result_htm"><div class="ttname"><a href="../../dd/dad/structxii_result.htm">xiiResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:54</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b0d9e1007714c8956662e529025ab552.htm">Strings</a></li><li class="navelem"><b>StringUtils.h</b></li>
    <li class="footer">Generated on Thu Dec 28 2023 07:57:12 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

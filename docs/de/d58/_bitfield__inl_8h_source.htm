<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Containers/Implementation/Bitfield_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('de/d58/_bitfield__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Bitfield_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d9/d8d/classxii_bitfield.htm">xiiBitfield&lt;Container&gt;::GetBitInt</a>(xiiUInt32 uiBitIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  <span class="keywordflow">return</span> (uiBitIndex &gt;&gt; 5); <span class="comment">// div 32</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;}</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d9/d8d/classxii_bitfield.htm">xiiBitfield&lt;Container&gt;::GetBitMask</a>(xiiUInt32 uiBitIndex)<span class="keyword"> const</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  <span class="keywordflow">return</span> 1 &lt;&lt; (uiBitIndex &amp; 0x1F); <span class="comment">// modulo 32, shifted to bit position</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;}</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#adcdf30c8f58cdbbf3e77d8d209857e2e">   16</a></span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d9/d8d/classxii_bitfield.htm#adcdf30c8f58cdbbf3e77d8d209857e2e">xiiBitfield&lt;Container&gt;::GetCount</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  <span class="keywordflow">return</span> m_uiCount;</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;}</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span>&gt; <span class="comment">// Second template needed so that the compiler only instantiates it when called. Needed to prevent errors with containers that do not support this.</span></div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#afa50cc0f06e3b478b90983a356f37799">   23</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#afa50cc0f06e3b478b90983a356f37799">xiiBitfield&lt;Container&gt;::SetCountUninitialized</a>(xiiUInt32 uiBitCount)</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiInts = (uiBitCount + 31) &gt;&gt; 5;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  m_Container.SetCountUninitialized(uiInts);</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  m_uiCount = uiBitCount;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a9ad2778e76beb59fbbb3e9d5f2b51f3a">   32</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a9ad2778e76beb59fbbb3e9d5f2b51f3a">xiiBitfield&lt;Container&gt;::SetCount</a>(xiiUInt32 uiBitCount, <span class="keywordtype">bool</span> bSetNew)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keywordflow">if</span> (m_uiCount == uiBitCount)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiOldBits = m_uiCount;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  SetCountUninitialized(uiBitCount);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="comment">// if there are new bits, initialize them</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  <span class="keywordflow">if</span> (uiBitCount &gt; uiOldBits)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  {</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keywordflow">if</span> (bSetNew)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      SetBitRange(uiOldBits, uiBitCount - uiOldBits);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;      ClearBitRange(uiOldBits, uiBitCount - uiOldBits);</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  }</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a9b41ce94d73f61a55f267a39d4b023bf">   52</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a9b41ce94d73f61a55f267a39d4b023bf">xiiBitfield&lt;Container&gt;::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="keywordflow">return</span> m_uiCount == 0;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;}</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a1ca04bb6b3023ec53ba2add1c639245f">   58</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a1ca04bb6b3023ec53ba2add1c639245f">xiiBitfield&lt;Container&gt;::IsAnyBitSet</a>(xiiUInt32 uiFirstBit <span class="comment">/*= 0*/</span>, xiiUInt32 uiNumBits <span class="comment">/*= 0xFFFFFFFF*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  XII_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastBit = xiiMath::Min&lt;xiiUInt32&gt;(uiFirstBit + uiNumBits, m_uiCount - 1);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastInt  = GetBitInt(uiLastBit);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="comment">// all within the same int</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    {</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <span class="keywordflow">if</span> (IsBitSet(i))</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    }</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  {</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    <span class="comment">// check the bits in the first int individually</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;      <span class="keywordflow">if</span> (IsBitSet(i))</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="comment">// check the bits in the ints in between with one operation</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    {</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      <span class="keywordflow">if</span> ((m_Container[i] &amp; 0xFFFFFFFF) != 0)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="comment">// check the bits in the last int individually</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    {</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;      <span class="keywordflow">if</span> (IsBitSet(i))</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    }</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  }</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;}</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a1a4a344392e8592dc494b49afd2907fd">  110</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a1a4a344392e8592dc494b49afd2907fd">xiiBitfield&lt;Container&gt;::IsNoBitSet</a>(xiiUInt32 uiFirstBit <span class="comment">/*= 0*/</span>, xiiUInt32 uiLastBit <span class="comment">/*= 0xFFFFFFFF*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">return</span> !IsAnyBitSet(uiFirstBit, uiLastBit);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00116"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a5b5bc21358817b1b2550fe501c29ba24">  116</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a5b5bc21358817b1b2550fe501c29ba24">xiiBitfield&lt;Container&gt;::AreAllBitsSet</a>(xiiUInt32 uiFirstBit <span class="comment">/*= 0*/</span>, xiiUInt32 uiNumBits <span class="comment">/*= 0xFFFFFFFF*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  XII_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastBit = xiiMath::Min&lt;xiiUInt32&gt;(uiFirstBit + uiNumBits, m_uiCount - 1);</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastInt  = GetBitInt(uiLastBit);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="comment">// all within the same int</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;      <span class="keywordflow">if</span> (!IsBitSet(i))</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">const</span> xiiUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="comment">// check the bits in the first int individually</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    {</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      <span class="keywordflow">if</span> (!IsBitSet(i))</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    }</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="comment">// check the bits in the ints in between with one operation</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      <span class="keywordflow">if</span> (m_Container[i] != 0xFFFFFFFF)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="comment">// check the bits in the last int individually</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;      <span class="keywordflow">if</span> (!IsBitSet(i))</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    }</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  }</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;}</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a14d058b16b33c9bd32e5194ec06a5c45">  168</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a14d058b16b33c9bd32e5194ec06a5c45">xiiBitfield&lt;Container&gt;::Clear</a>()</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;{</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  m_uiCount = 0;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  m_Container.Clear();</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;}</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a48826facb0abb3ed53e095ca0b6ef281">  175</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a48826facb0abb3ed53e095ca0b6ef281">xiiBitfield&lt;Container&gt;::SetBit</a>(xiiUInt32 uiBit)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;{</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  XII_ASSERT_DEBUG(uiBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, m_uiCount);</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  m_Container[GetBitInt(uiBit)] |= GetBitMask(uiBit);</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;}</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a95603758703fdbe17becb1bbb58ad064">  183</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a95603758703fdbe17becb1bbb58ad064">xiiBitfield&lt;Container&gt;::ClearBit</a>(xiiUInt32 uiBit)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;{</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  XII_ASSERT_DEBUG(uiBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, m_uiCount);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  m_Container[GetBitInt(uiBit)] &amp;= ~GetBitMask(uiBit);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;}</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a20bc8e770be3e20b7489109de3122e71">  191</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a20bc8e770be3e20b7489109de3122e71">xiiBitfield&lt;Container&gt;::SetBitValue</a>(xiiUInt32 uiBit, <span class="keywordtype">bool</span> bValue)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keywordflow">if</span> (bValue)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  {</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    SetBit(uiBit);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    ClearBit(uiBit);</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  }</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;}</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a5a00c7b5ba184dc51afbcca71517a10e">  204</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a5a00c7b5ba184dc51afbcca71517a10e">xiiBitfield&lt;Container&gt;::IsBitSet</a>(xiiUInt32 uiBit)<span class="keyword"> const</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  XII_ASSERT_DEBUG(uiBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, m_uiCount);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160; </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="keywordflow">return</span> (m_Container[GetBitInt(uiBit)] &amp; GetBitMask(uiBit)) != 0;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;}</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00212"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a0baa4b7ad887af67b8347346f874d4ac">  212</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a0baa4b7ad887af67b8347346f874d4ac">xiiBitfield&lt;Container&gt;::ClearAllBits</a>()</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;{</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_Container.GetCount(); ++i)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    m_Container[i] = 0;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;}</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#af8750e3e8bc835a04571fede728a6992">  219</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#af8750e3e8bc835a04571fede728a6992">xiiBitfield&lt;Container&gt;::SetAllBits</a>()</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;{</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; m_Container.GetCount(); ++i)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    m_Container[i] = 0xFFFFFFFF;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160; </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00226"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a16626b5ef28cd30717e4708d17f4f30c">  226</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a16626b5ef28cd30717e4708d17f4f30c">xiiBitfield&lt;Container&gt;::SetBitRange</a>(xiiUInt32 uiFirstBit, xiiUInt32 uiNumBits)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;{</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  XII_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastBit = uiFirstBit + uiNumBits - 1;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastInt  = GetBitInt(uiLastBit);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  <span class="comment">// all within the same int</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      SetBit(i);</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="comment">// set the bits in the first int individually</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    SetBit(i);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="comment">// set the bits in the ints in between with one operation</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    m_Container[i] = 0xFFFFFFFF;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  <span class="comment">// set the bits in the last int individually</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    SetBit(i);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160; </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> Container&gt;</div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="line" href="../../d9/d8d/classxii_bitfield.htm#a68a80b4a141a4d1aa78aa49195537259">  264</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../d9/d8d/classxii_bitfield.htm#a68a80b4a141a4d1aa78aa49195537259">xiiBitfield&lt;Container&gt;::ClearBitRange</a>(xiiUInt32 uiFirstBit, xiiUInt32 uiNumBits)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;{</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keywordflow">if</span> (m_uiCount == 0 || uiNumBits == 0)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160; </div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  XII_ASSERT_DEBUG(uiFirstBit &lt; m_uiCount, <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, m_uiCount);</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastBit = uiFirstBit + uiNumBits - 1;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiFirstInt = GetBitInt(uiFirstBit);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiLastInt  = GetBitInt(uiLastBit);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  <span class="comment">// all within the same int</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <span class="keywordflow">if</span> (uiFirstInt == uiLastInt)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  {</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;      ClearBit(i);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiNextIntBit = (uiFirstInt + 1) * 32;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiPrevIntBit = uiLastInt * 32;</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160; </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="comment">// set the bits in the first int individually</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstBit; i &lt; uiNextIntBit; ++i)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    ClearBit(i);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160; </div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="comment">// set the bits in the ints in between with one operation</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = uiFirstInt + 1; i &lt; uiLastInt; ++i)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    m_Container[i] = 0;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="comment">// set the bits in the last int individually</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = uiPrevIntBit; i &lt;= uiLastBit; ++i)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    ClearBit(i);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;}</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#afa023aa31311e4ea9b128adbbed30bf3">  306</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#afa023aa31311e4ea9b128adbbed30bf3">xiiStaticBitfield&lt;T&gt;::xiiStaticBitfield</a>()</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;{</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  static_assert(std::is_unsigned&lt;T&gt;::value, <span class="stringliteral">&quot;Storage type must be unsigned&quot;</span>);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;}</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../dc/d89/classxii_static_bitfield.htm">xiiStaticBitfield&lt;T&gt;</a> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm">xiiStaticBitfield&lt;T&gt;::FromMask</a>(StorageType bits)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;{</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm">xiiStaticBitfield&lt;T&gt;</a>(bits);</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;}</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00318"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a98ad8751c579e3e8379b406ef73ee822">  318</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a98ad8751c579e3e8379b406ef73ee822">xiiStaticBitfield&lt;T&gt;::IsAnyBitSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordflow">return</span> m_Storage != 0;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;}</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00324"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#af710ee3ba89aafdaf7a48ac1e061a5a0">  324</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#af710ee3ba89aafdaf7a48ac1e061a5a0">xiiStaticBitfield&lt;T&gt;::IsNoBitSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  <span class="keywordflow">return</span> m_Storage == 0;</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a4933b988bb8b8594c89044198fa906d3">  330</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a4933b988bb8b8594c89044198fa906d3">xiiStaticBitfield&lt;T&gt;::AreAllBitsSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keyword">const</span> T inv = ~m_Storage;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  <span class="keywordflow">return</span> inv == 0;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;}</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00337"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#ace268b63f77f3c8b99c3b4126b5cbbf3">  337</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#ace268b63f77f3c8b99c3b4126b5cbbf3">xiiStaticBitfield&lt;T&gt;::ClearBitRange</a>(xiiUInt32 uiFirstBit, xiiUInt32 uiNumBits)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;{</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  XII_ASSERT_DEBUG(uiFirstBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access first bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, GetStorageTypeBitCount());</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  T mask = (uiNumBits / 8 &gt;= <span class="keyword">sizeof</span>(T)) ? (~static_cast&lt;T&gt;(0)) : ((<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) &lt;&lt; uiNumBits) - 1);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  mask &lt;&lt;= uiFirstBit;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  mask = ~mask;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  m_Storage &amp;= mask;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a311ca558d446e73e892f3c2ea5fa66c1">  348</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a311ca558d446e73e892f3c2ea5fa66c1">xiiStaticBitfield&lt;T&gt;::SetBitRange</a>(xiiUInt32 uiFirstBit, xiiUInt32 uiNumBits)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  XII_ASSERT_DEBUG(uiFirstBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access first bit {0}, the bitfield only has {1} bits.&quot;</span>, uiFirstBit, GetStorageTypeBitCount());</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  T mask = (uiNumBits / 8 &gt;= <span class="keyword">sizeof</span>(T)) ? (~static_cast&lt;T&gt;(0)) : ((<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1) &lt;&lt; uiNumBits) - 1);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  mask &lt;&lt;= uiFirstBit;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  m_Storage |= mask;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a652bbb96aed09bac597cc937a7ec5843">  358</a></span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a652bbb96aed09bac597cc937a7ec5843">xiiStaticBitfield&lt;T&gt;::GetNumBitsSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">xiiMath::CountBits</a>(m_Storage);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;}</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00364"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a7fbbd498913708ea0ee8f9c2e567541c">  364</a></span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a7fbbd498913708ea0ee8f9c2e567541c">xiiStaticBitfield&lt;T&gt;::GetHighestBitSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  <span class="keywordflow">return</span> m_Storage == 0 ? GetStorageTypeBitCount() : <a class="code" href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">xiiMath::FirstBitHigh</a>(m_Storage);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;}</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160; </div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00370"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#aa73bcf8631b38114ca3a59a770a3aabc">  370</a></span>&#160;XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#aa73bcf8631b38114ca3a59a770a3aabc">xiiStaticBitfield&lt;T&gt;::GetLowestBitSet</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  <span class="keywordflow">return</span> m_Storage == 0 ? GetStorageTypeBitCount() : <a class="code" href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">xiiMath::FirstBitLow</a>(m_Storage);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a5038c722b70146e68f18133c9957a0d1">  376</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a5038c722b70146e68f18133c9957a0d1">xiiStaticBitfield&lt;T&gt;::SetAllBits</a>()</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;{</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  m_Storage = xiiMath::MaxValue&lt;T&gt;(); <span class="comment">// possible because we assert that T is unsigned</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;}</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00382"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a164636966f2a80fb2defe497e469fab9">  382</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a164636966f2a80fb2defe497e469fab9">xiiStaticBitfield&lt;T&gt;::ClearAllBits</a>()</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;{</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  m_Storage = 0;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;}</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00388"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#abf2ae68489eac187c9299e543b66d67d">  388</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#abf2ae68489eac187c9299e543b66d67d">xiiStaticBitfield&lt;T&gt;::IsBitSet</a>(xiiUInt32 uiBit)<span class="keyword"> const</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  XII_ASSERT_DEBUG(uiBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, GetStorageTypeBitCount());</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <span class="keywordflow">return</span> (m_Storage &amp; (<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1u) &lt;&lt; uiBit)) != 0;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;}</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00396"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#aa06087b8da370a5795a87359e4e85004">  396</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#aa06087b8da370a5795a87359e4e85004">xiiStaticBitfield&lt;T&gt;::ClearBit</a>(xiiUInt32 uiBit)</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;{</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  XII_ASSERT_DEBUG(uiBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, GetStorageTypeBitCount());</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160; </div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  m_Storage &amp;= ~(<span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1u) &lt;&lt; uiBit);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;}</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; </div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00404"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#ae7850ac181d7b0f0f831c6492422b633">  404</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#ae7850ac181d7b0f0f831c6492422b633">xiiStaticBitfield&lt;T&gt;::SetBitValue</a>(xiiUInt32 uiBit, <span class="keywordtype">bool</span> bValue)</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;{</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <span class="keywordflow">if</span> (bValue)</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  {</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    SetBit(uiBit);</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  }</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    ClearBit(uiBit);</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;}</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a100b257649f6a1c6af482550845fa95a">  417</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a100b257649f6a1c6af482550845fa95a">xiiStaticBitfield&lt;T&gt;::SetBit</a>(xiiUInt32 uiBit)</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;{</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  XII_ASSERT_DEBUG(uiBit &lt; GetStorageTypeBitCount(), <span class="stringliteral">&quot;Cannot access bit {0}, the bitfield only has {1} bits.&quot;</span>, uiBit, GetStorageTypeBitCount());</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160; </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  m_Storage |= <span class="keyword">static_cast&lt;</span>T<span class="keyword">&gt;</span>(1u) &lt;&lt; uiBit;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;}</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160; </div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00425"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a5d9a492a876bafd334821dd913514583">  425</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a5d9a492a876bafd334821dd913514583">xiiStaticBitfield&lt;T&gt;::SetValue</a>(T value)</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;{</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  m_Storage = value;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;}</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00431"></a><span class="lineno"><a class="line" href="../../dc/d89/classxii_static_bitfield.htm#a8157d97230c4ca70a1790cc366565a02">  431</a></span>&#160;XII_ALWAYS_INLINE T <a class="code" href="../../dc/d89/classxii_static_bitfield.htm#a8157d97230c4ca70a1790cc366565a02">xiiStaticBitfield&lt;T&gt;::GetValue</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;  <span class="keywordflow">return</span> m_Storage;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_static_bitfield_htm_ace268b63f77f3c8b99c3b4126b5cbbf3"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#ace268b63f77f3c8b99c3b4126b5cbbf3">xiiStaticBitfield::ClearBitRange</a></div><div class="ttdeci">void ClearBitRange(xiiUInt32 uiFirstBit, xiiUInt32 uiNumBits)</div><div class="ttdoc">Clears the range starting at uiFirstBit up to (and including) uiLastBit to 0.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:337</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_af8750e3e8bc835a04571fede728a6992"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#af8750e3e8bc835a04571fede728a6992">xiiBitfield::SetAllBits</a></div><div class="ttdeci">void SetAllBits()</div><div class="ttdoc">Sets all bits to 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:219</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a5038c722b70146e68f18133c9957a0d1"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a5038c722b70146e68f18133c9957a0d1">xiiStaticBitfield::SetAllBits</a></div><div class="ttdeci">void SetAllBits()</div><div class="ttdoc">Sets all bits to 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:376</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_af710ee3ba89aafdaf7a48ac1e061a5a0"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#af710ee3ba89aafdaf7a48ac1e061a5a0">xiiStaticBitfield::IsNoBitSet</a></div><div class="ttdeci">bool IsNoBitSet() const</div><div class="ttdoc">Returns true, if the bitfield is all zero.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:324</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a0baa4b7ad887af67b8347346f874d4ac"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a0baa4b7ad887af67b8347346f874d4ac">xiiBitfield::ClearAllBits</a></div><div class="ttdeci">void ClearAllBits()</div><div class="ttdoc">Clears all bits to 0.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:212</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_adcdf30c8f58cdbbf3e77d8d209857e2e"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#adcdf30c8f58cdbbf3e77d8d209857e2e">xiiBitfield::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of bits that this bitfield stores.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:16</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a5b5bc21358817b1b2550fe501c29ba24"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a5b5bc21358817b1b2550fe501c29ba24">xiiBitfield::AreAllBitsSet</a></div><div class="ttdeci">bool AreAllBitsSet(xiiUInt32 uiFirstBit=0, xiiUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is not empty and all bits are set to one.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:116</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a7fbbd498913708ea0ee8f9c2e567541c"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a7fbbd498913708ea0ee8f9c2e567541c">xiiStaticBitfield::GetHighestBitSet</a></div><div class="ttdeci">xiiUInt32 GetHighestBitSet() const</div><div class="ttdoc">Returns the index of the highest bit that is set. Returns the max index+1 in case no bit is set,...</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:364</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a16626b5ef28cd30717e4708d17f4f30c"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a16626b5ef28cd30717e4708d17f4f30c">xiiBitfield::SetBitRange</a></div><div class="ttdeci">void SetBitRange(xiiUInt32 uiFirstBit, xiiUInt32 uiNumBits)</div><div class="ttdoc">Sets the range starting at uiFirstBit up to (and including) uiLastBit to 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:226</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a1a4a344392e8592dc494b49afd2907fd"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a1a4a344392e8592dc494b49afd2907fd">xiiBitfield::IsNoBitSet</a></div><div class="ttdeci">bool IsNoBitSet(xiiUInt32 uiFirstBit=0, xiiUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is empty or all bits are set to zero.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:110</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a311ca558d446e73e892f3c2ea5fa66c1"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a311ca558d446e73e892f3c2ea5fa66c1">xiiStaticBitfield::SetBitRange</a></div><div class="ttdeci">void SetBitRange(xiiUInt32 uiFirstBit, xiiUInt32 uiNumBits)</div><div class="ttdoc">Sets the range starting at uiFirstBit up to (and including) uiLastBit to 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:348</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_ae7850ac181d7b0f0f831c6492422b633"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#ae7850ac181d7b0f0f831c6492422b633">xiiStaticBitfield::SetBitValue</a></div><div class="ttdeci">void SetBitValue(xiiUInt32 uiBit, bool bValue)</div><div class="ttdoc">Sets the given bit to 1 or 0 depending on the given value.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:404</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm">xiiStaticBitfield</a></div><div class="ttdef"><b>Definition:</b> Bitfield.h:89</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_abf2ae68489eac187c9299e543b66d67d"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#abf2ae68489eac187c9299e543b66d67d">xiiStaticBitfield::IsBitSet</a></div><div class="ttdeci">bool IsBitSet(xiiUInt32 uiBit) const</div><div class="ttdoc">Returns true, if the given bit is set to 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:388</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_aa73bcf8631b38114ca3a59a770a3aabc"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#aa73bcf8631b38114ca3a59a770a3aabc">xiiStaticBitfield::GetLowestBitSet</a></div><div class="ttdeci">xiiUInt32 GetLowestBitSet() const</div><div class="ttdoc">Returns the index of the lowest bit that is set. Returns the max index+1 in case no bit is set,...</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:370</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a68a80b4a141a4d1aa78aa49195537259"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a68a80b4a141a4d1aa78aa49195537259">xiiBitfield::ClearBitRange</a></div><div class="ttdeci">void ClearBitRange(xiiUInt32 uiFirstBit, xiiUInt32 uiNumBits)</div><div class="ttdoc">Clears the range starting at uiFirstBit up to (and including) uiLastBit to 0.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:264</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a9b41ce94d73f61a55f267a39d4b023bf"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a9b41ce94d73f61a55f267a39d4b023bf">xiiBitfield::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the bitfield does not store any bits.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:52</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a1ca04bb6b3023ec53ba2add1c639245f"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a1ca04bb6b3023ec53ba2add1c639245f">xiiBitfield::IsAnyBitSet</a></div><div class="ttdeci">bool IsAnyBitSet(xiiUInt32 uiFirstBit=0, xiiUInt32 uiNumBits=0xFFFFFFFF) const</div><div class="ttdoc">Returns true, if the bitfield is not empty and any bit is 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:58</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a98ad8751c579e3e8379b406ef73ee822"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a98ad8751c579e3e8379b406ef73ee822">xiiStaticBitfield::IsAnyBitSet</a></div><div class="ttdeci">bool IsAnyBitSet() const</div><div class="ttdoc">Returns true, if the bitfield is not zero.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:318</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_aa06087b8da370a5795a87359e4e85004"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#aa06087b8da370a5795a87359e4e85004">xiiStaticBitfield::ClearBit</a></div><div class="ttdeci">void ClearBit(xiiUInt32 uiBit)</div><div class="ttdoc">Clears the given bit to 0.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:396</div></div>
<div class="ttc" id="aclassxii_bitfield_htm"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm">xiiBitfield</a></div><div class="ttdoc">A template interface, that turns any array class into a bitfield.</div><div class="ttdef"><b>Definition:</b> Bitfield.h:15</div></div>
<div class="ttc" id="anamespacexii_math_htm_a09aa3acbc035c35a37a9a9cf192a9771"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">xiiMath::CountBits</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 CountBits(xiiUInt32 value)</div><div class="ttdoc">Returns the number of bits set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:203</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a5d9a492a876bafd334821dd913514583"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a5d9a492a876bafd334821dd913514583">xiiStaticBitfield::SetValue</a></div><div class="ttdeci">void SetValue(T value)</div><div class="ttdoc">Sets the raw uint that stores all bits.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:425</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a8157d97230c4ca70a1790cc366565a02"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a8157d97230c4ca70a1790cc366565a02">xiiStaticBitfield::GetValue</a></div><div class="ttdeci">T GetValue() const</div><div class="ttdoc">Returns the raw uint that stores all bits.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:431</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a4933b988bb8b8594c89044198fa906d3"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a4933b988bb8b8594c89044198fa906d3">xiiStaticBitfield::AreAllBitsSet</a></div><div class="ttdeci">bool AreAllBitsSet() const</div><div class="ttdoc">Returns true, if the bitfield is not empty and all bits are set to one.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:330</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a95603758703fdbe17becb1bbb58ad064"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a95603758703fdbe17becb1bbb58ad064">xiiBitfield::ClearBit</a></div><div class="ttdeci">void ClearBit(xiiUInt32 uiBit)</div><div class="ttdoc">Clears the given bit to 0.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:183</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a652bbb96aed09bac597cc937a7ec5843"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a652bbb96aed09bac597cc937a7ec5843">xiiStaticBitfield::GetNumBitsSet</a></div><div class="ttdeci">xiiUInt32 GetNumBitsSet() const</div><div class="ttdoc">Returns the count of how many bits are set in total.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:358</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_afa50cc0f06e3b478b90983a356f37799"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#afa50cc0f06e3b478b90983a356f37799">xiiBitfield::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(xiiUInt32 uiBitCount)</div><div class="ttdoc">Resizes the Bitfield to hold the given number of bits. This version does NOT initialize new bits!</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:23</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_afa023aa31311e4ea9b128adbbed30bf3"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#afa023aa31311e4ea9b128adbbed30bf3">xiiStaticBitfield::xiiStaticBitfield</a></div><div class="ttdeci">xiiStaticBitfield()</div><div class="ttdoc">Initializes the bitfield to all zero.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:306</div></div>
<div class="ttc" id="anamespacexii_math_htm_a7e3584835296e437fd4c4c0354576c5a"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">xiiMath::FirstBitHigh</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 FirstBitHigh(xiiUInt32 value)</div><div class="ttdoc">Returns the index of the most significant bit set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:137</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a14d058b16b33c9bd32e5194ec06a5c45"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a14d058b16b33c9bd32e5194ec06a5c45">xiiBitfield::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Discards all bits and sets count to zero.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:168</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a48826facb0abb3ed53e095ca0b6ef281"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a48826facb0abb3ed53e095ca0b6ef281">xiiBitfield::SetBit</a></div><div class="ttdeci">void SetBit(xiiUInt32 uiBit)</div><div class="ttdoc">Sets the given bit to 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:175</div></div>
<div class="ttc" id="anamespacexii_math_htm_afb37092634e9c088d935bc573bd0081e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">xiiMath::FirstBitLow</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 FirstBitLow(xiiUInt32 value)</div><div class="ttdoc">Returns the index of the least significant bit set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:88</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a5a00c7b5ba184dc51afbcca71517a10e"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a5a00c7b5ba184dc51afbcca71517a10e">xiiBitfield::IsBitSet</a></div><div class="ttdeci">bool IsBitSet(xiiUInt32 uiBit) const</div><div class="ttdoc">Returns true, if the given bit is set to 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:204</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a20bc8e770be3e20b7489109de3122e71"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a20bc8e770be3e20b7489109de3122e71">xiiBitfield::SetBitValue</a></div><div class="ttdeci">void SetBitValue(xiiUInt32 uiBit, bool bValue)</div><div class="ttdoc">Sets the given bit to 1 or 0 depending on the given value.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:191</div></div>
<div class="ttc" id="aclassxii_bitfield_htm_a9ad2778e76beb59fbbb3e9d5f2b51f3a"><div class="ttname"><a href="../../d9/d8d/classxii_bitfield.htm#a9ad2778e76beb59fbbb3e9d5f2b51f3a">xiiBitfield::SetCount</a></div><div class="ttdeci">void SetCount(xiiUInt32 uiBitCount, bool bSetNew=false)</div><div class="ttdoc">Resizes the Bitfield to hold the given number of bits. If bSetNew is true, new bits are set to 1,...</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:32</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a164636966f2a80fb2defe497e469fab9"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a164636966f2a80fb2defe497e469fab9">xiiStaticBitfield::ClearAllBits</a></div><div class="ttdeci">void ClearAllBits()</div><div class="ttdoc">Clears all bits to 0. Same as Clear().</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:382</div></div>
<div class="ttc" id="aclassxii_static_bitfield_htm_a100b257649f6a1c6af482550845fa95a"><div class="ttname"><a href="../../dc/d89/classxii_static_bitfield.htm#a100b257649f6a1c6af482550845fa95a">xiiStaticBitfield::SetBit</a></div><div class="ttdeci">void SetBit(xiiUInt32 uiBit)</div><div class="ttdoc">Sets the given bit to 1.</div><div class="ttdef"><b>Definition:</b> Bitfield_inl.h:417</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_7f59ab18dbc50035dfc0ee7070867286.htm">Containers</a></li><li class="navelem"><a class="el" href="../../dir_acc055bf9d45372e5f916366fab93514.htm">Implementation</a></li><li class="navelem"><b>Bitfield_inl.h</b></li>
    <li class="footer">Generated on Sat Oct 14 2023 14:38:00 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

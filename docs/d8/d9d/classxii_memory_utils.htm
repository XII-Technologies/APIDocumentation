<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiMemoryUtils Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d8/d9d/classxii_memory_utils.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../df/d0e/classxii_memory_utils-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiMemoryUtils Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This class provides functions to work on raw memory.  
 <a href="../../d8/d9d/classxii_memory_utils.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../da/d0b/_memory_utils_8h_source.htm">MemoryUtils.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:aa56d5db99ef502c492ecaf151466ae02"><td class="memItemLeft" align="right" valign="top"><a id="aa56d5db99ef502c492ecaf151466ae02"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ConstructorFunction</b> = void(*)(void *pDestination)</td></tr>
<tr class="separator:aa56d5db99ef502c492ecaf151466ae02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59485f76a227c83159f23d1b386a5acd"><td class="memItemLeft" align="right" valign="top"><a id="a59485f76a227c83159f23d1b386a5acd"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>CopyConstructorFunction</b> = void(*)(void *pDestination, const void *pSource)</td></tr>
<tr class="separator:a59485f76a227c83159f23d1b386a5acd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9232a9ce21d6aca6298a2aa5b04b3945"><td class="memItemLeft" align="right" valign="top"><a id="a9232a9ce21d6aca6298a2aa5b04b3945"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>DestructorFunction</b> = void(*)(void *pDestination)</td></tr>
<tr class="separator:a9232a9ce21d6aca6298a2aa5b04b3945"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a296eedd2da3e91fb9d83166a3f657463"><td class="memTemplParams" colspan="2"><a id="a296eedd2da3e91fb9d83166a3f657463"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a296eedd2da3e91fb9d83166a3f657463"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Construct</b> (T *pDestination, size_t uiCount)</td></tr>
<tr class="separator:a296eedd2da3e91fb9d83166a3f657463"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad84669858128d91fe586c26fa56b6a95"><td class="memTemplParams" colspan="2"><a id="ad84669858128d91fe586c26fa56b6a95"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ad84669858128d91fe586c26fa56b6a95"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiMemoryUtils::ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeConstructorFunction</b> ()</td></tr>
<tr class="separator:ad84669858128d91fe586c26fa56b6a95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d82dafbd5d12305d05c35b651dc0b8e"><td class="memTemplParams" colspan="2"><a id="a8d82dafbd5d12305d05c35b651dc0b8e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8d82dafbd5d12305d05c35b651dc0b8e"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DefaultConstruct</b> (T *pDestination, size_t uiCount)</td></tr>
<tr class="separator:a8d82dafbd5d12305d05c35b651dc0b8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7fcb05268b4cdaf3af84c28945095830"><td class="memTemplParams" colspan="2"><a id="a7fcb05268b4cdaf3af84c28945095830"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7fcb05268b4cdaf3af84c28945095830"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiMemoryUtils::ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeDefaultConstructorFunction</b> ()</td></tr>
<tr class="separator:a7fcb05268b4cdaf3af84c28945095830"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd5f9f838b9a5ee766dc8b0af1806d35"><td class="memTemplParams" colspan="2"><a id="afd5f9f838b9a5ee766dc8b0af1806d35"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:afd5f9f838b9a5ee766dc8b0af1806d35"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstruct</b> (Destination *pDestination, const Source &amp;copy, size_t uiCount)</td></tr>
<tr class="separator:afd5f9f838b9a5ee766dc8b0af1806d35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a4d5cfb993b4d5187959f4a7dc6fcfc"><td class="memTemplParams" colspan="2"><a id="a9a4d5cfb993b4d5187959f4a7dc6fcfc"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9a4d5cfb993b4d5187959f4a7dc6fcfc"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstructArray</b> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="separator:a9a4d5cfb993b4d5187959f4a7dc6fcfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6670181d79a5ab15e17a281b42095174"><td class="memTemplParams" colspan="2"><a id="a6670181d79a5ab15e17a281b42095174"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6670181d79a5ab15e17a281b42095174"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiMemoryUtils::CopyConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeCopyConstructorFunction</b> ()</td></tr>
<tr class="separator:a6670181d79a5ab15e17a281b42095174"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8959ea95ba3d3da19ee0966eecd79924"><td class="memTemplParams" colspan="2"><a id="a8959ea95ba3d3da19ee0966eecd79924"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8959ea95ba3d3da19ee0966eecd79924"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MoveConstruct</b> (T *pDestination, T &amp;&amp;source)</td></tr>
<tr class="separator:a8959ea95ba3d3da19ee0966eecd79924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f8cce0975231e29cfefebb94edb5630"><td class="memTemplParams" colspan="2"><a id="a8f8cce0975231e29cfefebb94edb5630"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8f8cce0975231e29cfefebb94edb5630"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MoveConstruct</b> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="separator:a8f8cce0975231e29cfefebb94edb5630"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12d7cce52003d844b987635a7923e986"><td class="memTemplParams" colspan="2"><a id="a12d7cce52003d844b987635a7923e986"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a12d7cce52003d844b987635a7923e986"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOrMoveConstruct</b> (Destination *pDestination, Source &amp;&amp;source)</td></tr>
<tr class="separator:a12d7cce52003d844b987635a7923e986"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a446205c1ac680585e6d36698b90db2d9"><td class="memTemplParams" colspan="2"><a id="a446205c1ac680585e6d36698b90db2d9"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a446205c1ac680585e6d36698b90db2d9"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateConstruct</b> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="separator:a446205c1ac680585e6d36698b90db2d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87011aa787504b99b7186a05055d37e5"><td class="memTemplParams" colspan="2"><a id="a87011aa787504b99b7186a05055d37e5"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a87011aa787504b99b7186a05055d37e5"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Destruct</b> (T *pDestination, size_t uiCount)</td></tr>
<tr class="separator:a87011aa787504b99b7186a05055d37e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acc5834dab73853bcdc3e0ac33aa94b50"><td class="memTemplParams" colspan="2"><a id="acc5834dab73853bcdc3e0ac33aa94b50"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:acc5834dab73853bcdc3e0ac33aa94b50"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiMemoryUtils::DestructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeDestructorFunction</b> ()</td></tr>
<tr class="separator:acc5834dab73853bcdc3e0ac33aa94b50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a282d33b6eae5b27e41ff6af606a19dd6"><td class="memTemplParams" colspan="2"><a id="a282d33b6eae5b27e41ff6af606a19dd6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a282d33b6eae5b27e41ff6af606a19dd6"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Copy</b> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="separator:a282d33b6eae5b27e41ff6af606a19dd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed1be67ce4affd30ddfd0f383de2054a"><td class="memTemplParams" colspan="2"><a id="aed1be67ce4affd30ddfd0f383de2054a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aed1be67ce4affd30ddfd0f383de2054a"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOverlapped</b> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="separator:aed1be67ce4affd30ddfd0f383de2054a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed53f12fe6d3d6155ca703de779d2432"><td class="memTemplParams" colspan="2"><a id="aed53f12fe6d3d6155ca703de779d2432"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aed53f12fe6d3d6155ca703de779d2432"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Relocate</b> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="separator:aed53f12fe6d3d6155ca703de779d2432"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a612a0a6399e6506f69b5ae6e4d2b607c"><td class="memTemplParams" colspan="2"><a id="a612a0a6399e6506f69b5ae6e4d2b607c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a612a0a6399e6506f69b5ae6e4d2b607c"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateOverlapped</b> (T *pDestination, T *pSource, size_t uiCount)</td></tr>
<tr class="separator:a612a0a6399e6506f69b5ae6e4d2b607c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ab85a3f68a743115c60d6fafcee4102"><td class="memTemplParams" colspan="2"><a id="a0ab85a3f68a743115c60d6fafcee4102"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0ab85a3f68a743115c60d6fafcee4102"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T &amp;source, size_t uiCount)</td></tr>
<tr class="separator:a0ab85a3f68a743115c60d6fafcee4102"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97b3f9ab3b3abf7f0aed24b554fbf1dd"><td class="memTemplParams" colspan="2"><a id="a97b3f9ab3b3abf7f0aed24b554fbf1dd"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a97b3f9ab3b3abf7f0aed24b554fbf1dd"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, T &amp;&amp;source, size_t uiCount)</td></tr>
<tr class="separator:a97b3f9ab3b3abf7f0aed24b554fbf1dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a578772b714b5b6ee1db931eb4cec2685"><td class="memTemplParams" colspan="2"><a id="a578772b714b5b6ee1db931eb4cec2685"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a578772b714b5b6ee1db931eb4cec2685"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T *pSource, size_t uiSourceCount, size_t uiCount)</td></tr>
<tr class="separator:a578772b714b5b6ee1db931eb4cec2685"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b7ebec3b2d3bd91426ab96f9352f490"><td class="memTemplParams" colspan="2"><a id="a9b7ebec3b2d3bd91426ab96f9352f490"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9b7ebec3b2d3bd91426ab96f9352f490"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsEqual</b> (const T *a, const T *b, size_t uiCount)</td></tr>
<tr class="separator:a9b7ebec3b2d3bd91426ab96f9352f490"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3dc304f5c13bf004717d121b62b9b329"><td class="memTemplParams" colspan="2"><a id="a3dc304f5c13bf004717d121b62b9b329"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3dc304f5c13bf004717d121b62b9b329"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ZeroFill</b> (T *pDestination, size_t uiCount)</td></tr>
<tr class="separator:a3dc304f5c13bf004717d121b62b9b329"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68f58542c7a40cf036a78d45711b333b"><td class="memTemplParams" colspan="2"><a id="a68f58542c7a40cf036a78d45711b333b"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:a68f58542c7a40cf036a78d45711b333b"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ZeroFillArray</b> (T(&amp;destination)[N])</td></tr>
<tr class="separator:a68f58542c7a40cf036a78d45711b333b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1fe876de1c98abeb73de8df144656c0"><td class="memTemplParams" colspan="2"><a id="af1fe876de1c98abeb73de8df144656c0"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af1fe876de1c98abeb73de8df144656c0"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>PatternFill</b> (T *pDestination, xiiUInt8 uiBytePattern, size_t uiCount)</td></tr>
<tr class="separator:af1fe876de1c98abeb73de8df144656c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5571a89ba82040a6d6490321eb02042b"><td class="memTemplParams" colspan="2"><a id="a5571a89ba82040a6d6490321eb02042b"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:a5571a89ba82040a6d6490321eb02042b"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>PatternFillArray</b> (T(&amp;destination)[N], xiiUInt8 uiBytePattern)</td></tr>
<tr class="separator:a5571a89ba82040a6d6490321eb02042b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6007f6fc532c6edbb5c41d8d028f45"><td class="memTemplParams" colspan="2"><a id="a1e6007f6fc532c6edbb5c41d8d028f45"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1e6007f6fc532c6edbb5c41d8d028f45"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Compare</b> (const T *a, const T *b, size_t uiCount)</td></tr>
<tr class="separator:a1e6007f6fc532c6edbb5c41d8d028f45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d75e1cf59d5e2838cda245c9d00aecb"><td class="memTemplParams" colspan="2"><a id="a2d75e1cf59d5e2838cda245c9d00aecb"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2d75e1cf59d5e2838cda245c9d00aecb"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE T *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AddByteOffset</b> (T *pPtr, std::ptrdiff_t iOffset)</td></tr>
<tr class="separator:a2d75e1cf59d5e2838cda245c9d00aecb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0213a57bff07f41a694478e2904fd3e9"><td class="memTemplParams" colspan="2"><a id="a0213a57bff07f41a694478e2904fd3e9"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0213a57bff07f41a694478e2904fd3e9"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE T *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AlignBackwards</b> (T *pPtr, size_t uiAlignment)</td></tr>
<tr class="separator:a0213a57bff07f41a694478e2904fd3e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2077cd9ce3a1d141a72aff8daf1f22e"><td class="memTemplParams" colspan="2"><a id="ae2077cd9ce3a1d141a72aff8daf1f22e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae2077cd9ce3a1d141a72aff8daf1f22e"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE T *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AlignForwards</b> (T *pPtr, size_t uiAlignment)</td></tr>
<tr class="separator:ae2077cd9ce3a1d141a72aff8daf1f22e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b96965a085f18ce79a2162ad334dd48"><td class="memTemplParams" colspan="2"><a id="a9b96965a085f18ce79a2162ad334dd48"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9b96965a085f18ce79a2162ad334dd48"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>AlignSize</b> (T uiSize, T uiAlignment)</td></tr>
<tr class="separator:a9b96965a085f18ce79a2162ad334dd48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea253d9b6a84db69061c7b344fc77215"><td class="memTemplParams" colspan="2"><a id="aea253d9b6a84db69061c7b344fc77215"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aea253d9b6a84db69061c7b344fc77215"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsAligned</b> (const T *pPtr, size_t uiAlignment)</td></tr>
<tr class="separator:aea253d9b6a84db69061c7b344fc77215"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5780da4781f6a619a77845a6060a86b0"><td class="memTemplParams" colspan="2"><a id="a5780da4781f6a619a77845a6060a86b0"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5780da4781f6a619a77845a6060a86b0"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsSizeAligned</b> (T uiSize, T uiAlignment)</td></tr>
<tr class="separator:a5780da4781f6a619a77845a6060a86b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6cf9472157332d94feb1021e30837d30"><td class="memTemplParams" colspan="2"><a id="a6cf9472157332d94feb1021e30837d30"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6cf9472157332d94feb1021e30837d30"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Construct</b> (T *pDestination, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a6cf9472157332d94feb1021e30837d30"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e9c868502b001042e42705a85dd84e4"><td class="memTemplParams" colspan="2"><a id="a5e9c868502b001042e42705a85dd84e4"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5e9c868502b001042e42705a85dd84e4"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Construct</b> (T *pDestination, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:a5e9c868502b001042e42705a85dd84e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae146c41b9bf8b73a4df818f346f15f3"><td class="memTemplParams" colspan="2"><a id="aae146c41b9bf8b73a4df818f346f15f3"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aae146c41b9bf8b73a4df818f346f15f3"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiMemoryUtils::ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeConstructorFunction</b> (<a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:aae146c41b9bf8b73a4df818f346f15f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96992d95d862e672abcea9dbeae5b4ff"><td class="memTemplParams" colspan="2"><a id="a96992d95d862e672abcea9dbeae5b4ff"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a96992d95d862e672abcea9dbeae5b4ff"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiMemoryUtils::ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeConstructorFunction</b> (<a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:a96992d95d862e672abcea9dbeae5b4ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bff6c225b972ed0f98205963896057a"><td class="memTemplParams" colspan="2"><a id="a5bff6c225b972ed0f98205963896057a"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a5bff6c225b972ed0f98205963896057a"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstruct</b> (Destination *pDestination, const Source &amp;copy, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a5bff6c225b972ed0f98205963896057a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2bec7d08aee49507e8afdad8ed431e92"><td class="memTemplParams" colspan="2"><a id="a2bec7d08aee49507e8afdad8ed431e92"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a2bec7d08aee49507e8afdad8ed431e92"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstruct</b> (Destination *pDestination, const Source &amp;copy, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:a2bec7d08aee49507e8afdad8ed431e92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79518c2b72021525937d9c78002ceb59"><td class="memTemplParams" colspan="2"><a id="a79518c2b72021525937d9c78002ceb59"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a79518c2b72021525937d9c78002ceb59"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstructArray</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a79518c2b72021525937d9c78002ceb59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3cbb9256fee9eb8ce22ed38d26056a46"><td class="memTemplParams" colspan="2"><a id="a3cbb9256fee9eb8ce22ed38d26056a46"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3cbb9256fee9eb8ce22ed38d26056a46"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyConstructArray</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:a3cbb9256fee9eb8ce22ed38d26056a46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0771b11b4a1c5672fba22ce14b33df72"><td class="memTemplParams" colspan="2"><a id="a0771b11b4a1c5672fba22ce14b33df72"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a0771b11b4a1c5672fba22ce14b33df72"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOrMoveConstruct</b> (Destination *pDestination, const Source &amp;source, NotRValueReference)</td></tr>
<tr class="separator:a0771b11b4a1c5672fba22ce14b33df72"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a224eedbc53d3797d9900d45cffc25854"><td class="memTemplParams" colspan="2"><a id="a224eedbc53d3797d9900d45cffc25854"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a224eedbc53d3797d9900d45cffc25854"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOrMoveConstruct</b> (Destination *pDestination, Source &amp;&amp;source, IsRValueReference)</td></tr>
<tr class="separator:a224eedbc53d3797d9900d45cffc25854"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a693804061b050540c712fd8f8251c4"><td class="memTemplParams" colspan="2"><a id="a4a693804061b050540c712fd8f8251c4"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4a693804061b050540c712fd8f8251c4"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateConstruct</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a4a693804061b050540c712fd8f8251c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a455f7c00b16e500ce0108e0ce2ef9354"><td class="memTemplParams" colspan="2"><a id="a455f7c00b16e500ce0108e0ce2ef9354"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a455f7c00b16e500ce0108e0ce2ef9354"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateConstruct</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:a455f7c00b16e500ce0108e0ce2ef9354"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab221b9f4690263eb88c7fc3ef8c27faf"><td class="memTemplParams" colspan="2"><a id="ab221b9f4690263eb88c7fc3ef8c27faf"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab221b9f4690263eb88c7fc3ef8c27faf"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateConstruct</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:ab221b9f4690263eb88c7fc3ef8c27faf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a281d29dc850d4ef03eab4fe7d38f95"><td class="memTemplParams" colspan="2"><a id="a1a281d29dc850d4ef03eab4fe7d38f95"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1a281d29dc850d4ef03eab4fe7d38f95"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Destruct</b> (T *pDestination, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a1a281d29dc850d4ef03eab4fe7d38f95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7cdf0e2a0ecbaaf4e991426c7feaf2e9"><td class="memTemplParams" colspan="2"><a id="a7cdf0e2a0ecbaaf4e991426c7feaf2e9"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7cdf0e2a0ecbaaf4e991426c7feaf2e9"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiMemoryUtils::DestructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeDestructorFunction</b> (<a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a7cdf0e2a0ecbaaf4e991426c7feaf2e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ce1aac091f1cec544bb3c039a80740a"><td class="memTemplParams" colspan="2"><a id="a5ce1aac091f1cec544bb3c039a80740a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5ce1aac091f1cec544bb3c039a80740a"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiMemoryUtils::DestructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><b>MakeDestructorFunction</b> (<a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:a5ce1aac091f1cec544bb3c039a80740a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7d9bc1dfecf7f2f8a6e47d291325556"><td class="memTemplParams" colspan="2"><a id="aa7d9bc1dfecf7f2f8a6e47d291325556"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa7d9bc1dfecf7f2f8a6e47d291325556"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Copy</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:aa7d9bc1dfecf7f2f8a6e47d291325556"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c414f06b1af8f665e0dfeb193c28b89"><td class="memTemplParams" colspan="2"><a id="a2c414f06b1af8f665e0dfeb193c28b89"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2c414f06b1af8f665e0dfeb193c28b89"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Copy</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:a2c414f06b1af8f665e0dfeb193c28b89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21130e38aacc859fbac43f669a8bc505"><td class="memTemplParams" colspan="2"><a id="a21130e38aacc859fbac43f669a8bc505"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a21130e38aacc859fbac43f669a8bc505"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>CopyOverlapped</b> (T *pDestination, const T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a21130e38aacc859fbac43f669a8bc505"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b8b64b5f6262d5427ee683cf6de8c58"><td class="memTemplParams" colspan="2"><a id="a3b8b64b5f6262d5427ee683cf6de8c58"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3b8b64b5f6262d5427ee683cf6de8c58"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Relocate</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a3b8b64b5f6262d5427ee683cf6de8c58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a95eea27e8bc9205049b95cba0882e665"><td class="memTemplParams" colspan="2"><a id="a95eea27e8bc9205049b95cba0882e665"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a95eea27e8bc9205049b95cba0882e665"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Relocate</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:a95eea27e8bc9205049b95cba0882e665"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ed4a5775ab39dcd7f92cc94c4976324"><td class="memTemplParams" colspan="2"><a id="a7ed4a5775ab39dcd7f92cc94c4976324"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a7ed4a5775ab39dcd7f92cc94c4976324"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Relocate</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:a7ed4a5775ab39dcd7f92cc94c4976324"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac105aa764881cb3c7a1cfdb026f232dd"><td class="memTemplParams" colspan="2"><a id="ac105aa764881cb3c7a1cfdb026f232dd"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ac105aa764881cb3c7a1cfdb026f232dd"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateOverlapped</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:ac105aa764881cb3c7a1cfdb026f232dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5291ed2eb0f594460d3b7560f538127"><td class="memTemplParams" colspan="2"><a id="ae5291ed2eb0f594460d3b7560f538127"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae5291ed2eb0f594460d3b7560f538127"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>RelocateOverlapped</b> (T *pDestination, T *pSource, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:ae5291ed2eb0f594460d3b7560f538127"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a884a31d8de6844c621d2eec029870a71"><td class="memTemplParams" colspan="2"><a id="a884a31d8de6844c621d2eec029870a71"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a884a31d8de6844c621d2eec029870a71"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T &amp;source, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a884a31d8de6844c621d2eec029870a71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1abee92813e5af50bfbb1ce058e8c85"><td class="memTemplParams" colspan="2"><a id="ab1abee92813e5af50bfbb1ce058e8c85"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab1abee92813e5af50bfbb1ce058e8c85"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T &amp;source, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:ab1abee92813e5af50bfbb1ce058e8c85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaad383e773142fa988c42005208eb9c6"><td class="memTemplParams" colspan="2"><a id="aaad383e773142fa988c42005208eb9c6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aaad383e773142fa988c42005208eb9c6"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, T &amp;&amp;source, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:aaad383e773142fa988c42005208eb9c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa564ab6226b76d1db8769716197d117d"><td class="memTemplParams" colspan="2"><a id="aa564ab6226b76d1db8769716197d117d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa564ab6226b76d1db8769716197d117d"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, T &amp;&amp;source, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:aa564ab6226b76d1db8769716197d117d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43bfed0a52199667ea0dd1d910f0aa99"><td class="memTemplParams" colspan="2"><a id="a43bfed0a52199667ea0dd1d910f0aa99"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a43bfed0a52199667ea0dd1d910f0aa99"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T *pSource, size_t uiSourceCount, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a43bfed0a52199667ea0dd1d910f0aa99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af422e8a0146285e500672e0972cee9a6"><td class="memTemplParams" colspan="2"><a id="af422e8a0146285e500672e0972cee9a6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af422e8a0146285e500672e0972cee9a6"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Prepend</b> (T *pDestination, const T *pSource, size_t uiSourceCount, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsMemRelocatable</a>)</td></tr>
<tr class="separator:af422e8a0146285e500672e0972cee9a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a207e24f4885d327eaf17e2fb322ad4"><td class="memTemplParams" colspan="2"><a id="a5a207e24f4885d327eaf17e2fb322ad4"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5a207e24f4885d327eaf17e2fb322ad4"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsEqual</b> (const T *a, const T *b, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsPod</a>)</td></tr>
<tr class="separator:a5a207e24f4885d327eaf17e2fb322ad4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf30da6182821a656079ae0a0b9e4ed3"><td class="memTemplParams" colspan="2"><a id="aaf30da6182821a656079ae0a0b9e4ed3"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aaf30da6182821a656079ae0a0b9e4ed3"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>IsEqual</b> (const T *a, const T *b, size_t uiCount, <a class="el" href="../../da/d04/structxii_trait_int.htm">xiiTypeIsClass</a>)</td></tr>
<tr class="separator:aaf30da6182821a656079ae0a0b9e4ed3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af3da14f91515aad7930bd6524a70f40b"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:af3da14f91515aad7930bd6524a70f40b"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#af3da14f91515aad7930bd6524a70f40b">Construct</a> (T *pDestination, size_t uiCount=1)</td></tr>
<tr class="memdesc:af3da14f91515aad7930bd6524a70f40b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination.s</em>.  <a href="../../d8/d9d/classxii_memory_utils.htm#af3da14f91515aad7930bd6524a70f40b">More...</a><br /></td></tr>
<tr class="separator:af3da14f91515aad7930bd6524a70f40b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24a2580c2e0aaa578ef931e902108885"><td class="memTemplParams" colspan="2"><a id="a24a2580c2e0aaa578ef931e902108885"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a24a2580c2e0aaa578ef931e902108885"><td class="memTemplItemLeft" align="right" valign="top">static ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a24a2580c2e0aaa578ef931e902108885">MakeConstructorFunction</a> ()</td></tr>
<tr class="memdesc:a24a2580c2e0aaa578ef931e902108885"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a function pointer to construct an instance of T. Returns nullptr for trivial types. <br /></td></tr>
<tr class="separator:a24a2580c2e0aaa578ef931e902108885"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a245cf437a25b93067264757598b0365a"><td class="memTemplParams" colspan="2"><a id="a245cf437a25b93067264757598b0365a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a245cf437a25b93067264757598b0365a"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a245cf437a25b93067264757598b0365a">DefaultConstruct</a> (T *pDestination, size_t uiCount=1)</td></tr>
<tr class="memdesc:a245cf437a25b93067264757598b0365a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em> regardless of T being a class, POD or trivial. <br /></td></tr>
<tr class="separator:a245cf437a25b93067264757598b0365a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abebce9b6c8f39ea5b07e82c0f0a63e8d"><td class="memTemplParams" colspan="2"><a id="abebce9b6c8f39ea5b07e82c0f0a63e8d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:abebce9b6c8f39ea5b07e82c0f0a63e8d"><td class="memTemplItemLeft" align="right" valign="top">static ConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#abebce9b6c8f39ea5b07e82c0f0a63e8d">MakeDefaultConstructorFunction</a> ()</td></tr>
<tr class="memdesc:abebce9b6c8f39ea5b07e82c0f0a63e8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a function pointer to construct an instance of T. Always returns a constructor function regardless of T being a class, POD or trivial. <br /></td></tr>
<tr class="separator:abebce9b6c8f39ea5b07e82c0f0a63e8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aece4fdeb5f8a35b58bd979302f3e9768"><td class="memTemplParams" colspan="2"><a id="aece4fdeb5f8a35b58bd979302f3e9768"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:aece4fdeb5f8a35b58bd979302f3e9768"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#aece4fdeb5f8a35b58bd979302f3e9768">CopyConstruct</a> (Destination *pDestination, const Source &amp;copy, size_t uiCount=1)</td></tr>
<tr class="memdesc:aece4fdeb5f8a35b58bd979302f3e9768"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em>, by creating <em>uiCount</em> copies of <em>copy</em>. <br /></td></tr>
<tr class="separator:aece4fdeb5f8a35b58bd979302f3e9768"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8fab7dfd33a7693c95a8c58def775fd"><td class="memTemplParams" colspan="2"><a id="ae8fab7dfd33a7693c95a8c58def775fd"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ae8fab7dfd33a7693c95a8c58def775fd"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#ae8fab7dfd33a7693c95a8c58def775fd">CopyConstructArray</a> (T *pDestination, const T *pSource, size_t uiCount)</td></tr>
<tr class="memdesc:ae8fab7dfd33a7693c95a8c58def775fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em> from an existing array of objects at <em>pSource</em> by using copy construction. <br /></td></tr>
<tr class="separator:ae8fab7dfd33a7693c95a8c58def775fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd29e031ed851a32b64de8e4b99069d7"><td class="memTemplParams" colspan="2"><a id="acd29e031ed851a32b64de8e4b99069d7"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:acd29e031ed851a32b64de8e4b99069d7"><td class="memTemplItemLeft" align="right" valign="top">static CopyConstructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#acd29e031ed851a32b64de8e4b99069d7">MakeCopyConstructorFunction</a> ()</td></tr>
<tr class="memdesc:acd29e031ed851a32b64de8e4b99069d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a function pointer to copy construct an instance of T. <br /></td></tr>
<tr class="separator:acd29e031ed851a32b64de8e4b99069d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16883e3b910453d68ffb96562b92eed4"><td class="memTemplParams" colspan="2"><a id="a16883e3b910453d68ffb96562b92eed4"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a16883e3b910453d68ffb96562b92eed4"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a16883e3b910453d68ffb96562b92eed4">MoveConstruct</a> (T *pDestination, T &amp;&amp;source)</td></tr>
<tr class="memdesc:a16883e3b910453d68ffb96562b92eed4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs an object of type T in a raw buffer at <em>pDestination</em>, by using move construction from <em>source</em>. <br /></td></tr>
<tr class="separator:a16883e3b910453d68ffb96562b92eed4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab365456e389316a9c6c123b0d67b34e"><td class="memTemplParams" colspan="2"><a id="aab365456e389316a9c6c123b0d67b34e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aab365456e389316a9c6c123b0d67b34e"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#aab365456e389316a9c6c123b0d67b34e">MoveConstruct</a> (T *pDestination, T *pSource, size_t uiCount=1)</td></tr>
<tr class="memdesc:aab365456e389316a9c6c123b0d67b34e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em> from an existing array of objects at <em>pSource</em> by using move construction. <br /></td></tr>
<tr class="separator:aab365456e389316a9c6c123b0d67b34e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86dc640bd82c5855ecbace5d95b1549e"><td class="memTemplParams" colspan="2"><a id="a86dc640bd82c5855ecbace5d95b1549e"></a>
template&lt;typename Destination , typename Source &gt; </td></tr>
<tr class="memitem:a86dc640bd82c5855ecbace5d95b1549e"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a86dc640bd82c5855ecbace5d95b1549e">CopyOrMoveConstruct</a> (Destination *pDestination, Source &amp;&amp;source)</td></tr>
<tr class="memdesc:a86dc640bd82c5855ecbace5d95b1549e"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function will either move call MoveConstruct or CopyConstruct for a single element <em>source</em>, depending on whether it was called with a rvalue reference or a const reference to <em>source</em>. <br /></td></tr>
<tr class="separator:a86dc640bd82c5855ecbace5d95b1549e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acddb7a04ed071f62321060eb8c59ab87"><td class="memTemplParams" colspan="2"><a id="acddb7a04ed071f62321060eb8c59ab87"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:acddb7a04ed071f62321060eb8c59ab87"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#acddb7a04ed071f62321060eb8c59ab87">RelocateConstruct</a> (T *pDestination, T *pSource, size_t uiCount=1)</td></tr>
<tr class="memdesc:acddb7a04ed071f62321060eb8c59ab87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination</em> from an existing array of objects at <em>pSource</em> by using move construction if availble, otherwise by copy construction. Calls destructor of source elements in any case (if it is a non primitive or memrelocatable type). <br /></td></tr>
<tr class="separator:acddb7a04ed071f62321060eb8c59ab87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c8728654ad1b5c0c9dcbb597a93594d"><td class="memTemplParams" colspan="2"><a id="a6c8728654ad1b5c0c9dcbb597a93594d"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a6c8728654ad1b5c0c9dcbb597a93594d"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a6c8728654ad1b5c0c9dcbb597a93594d">Destruct</a> (T *pDestination, size_t uiCount=1)</td></tr>
<tr class="memdesc:a6c8728654ad1b5c0c9dcbb597a93594d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructs <em>uiCount</em> objects of type T at <em>pDestination</em>. <br /></td></tr>
<tr class="separator:a6c8728654ad1b5c0c9dcbb597a93594d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e650fe41b1daf971f0aa240cabd7e4b"><td class="memTemplParams" colspan="2"><a id="a3e650fe41b1daf971f0aa240cabd7e4b"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a3e650fe41b1daf971f0aa240cabd7e4b"><td class="memTemplItemLeft" align="right" valign="top">static DestructorFunction&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a3e650fe41b1daf971f0aa240cabd7e4b">MakeDestructorFunction</a> ()</td></tr>
<tr class="memdesc:a3e650fe41b1daf971f0aa240cabd7e4b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a function pointer to destruct an instance of T. Returns nullptr for POD-types. <br /></td></tr>
<tr class="separator:a3e650fe41b1daf971f0aa240cabd7e4b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a802d7a152c551948e45e7d0e19ae1e88"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a802d7a152c551948e45e7d0e19ae1e88"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a802d7a152c551948e45e7d0e19ae1e88">Copy</a> (T *pDestination, const T *pSource, size_t uiCount=1)</td></tr>
<tr class="memdesc:a802d7a152c551948e45e7d0e19ae1e88"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies objects of type T from <em>pSource</em> to <em>pDestination</em>.  <a href="../../d8/d9d/classxii_memory_utils.htm#a802d7a152c551948e45e7d0e19ae1e88">More...</a><br /></td></tr>
<tr class="separator:a802d7a152c551948e45e7d0e19ae1e88"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae398b2ac13d3229a487d1fbfa657b8eb"><td class="memItemLeft" align="right" valign="top"><a id="ae398b2ac13d3229a487d1fbfa657b8eb"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#ae398b2ac13d3229a487d1fbfa657b8eb">RawByteCopy</a> (void *pDestination, const void *pSource, size_t uiNumBytesToCopy)</td></tr>
<tr class="memdesc:ae398b2ac13d3229a487d1fbfa657b8eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies exactly <em>uiNumBytesToCopy</em> from <em>pSource</em> to <em>pDestination</em>, independent of the involved types and their sizes. <br /></td></tr>
<tr class="separator:ae398b2ac13d3229a487d1fbfa657b8eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebfbcf3941811757985367ac3e1cb8de"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aebfbcf3941811757985367ac3e1cb8de"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#aebfbcf3941811757985367ac3e1cb8de">CopyOverlapped</a> (T *pDestination, const T *pSource, size_t uiCount=1)</td></tr>
<tr class="memdesc:aebfbcf3941811757985367ac3e1cb8de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies objects of type T from <em>pSource</em> to <em>pDestination</em>.  <a href="../../d8/d9d/classxii_memory_utils.htm#aebfbcf3941811757985367ac3e1cb8de">More...</a><br /></td></tr>
<tr class="separator:aebfbcf3941811757985367ac3e1cb8de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af833dc3b0241b97da5b6e2e96d67499f"><td class="memTemplParams" colspan="2"><a id="af833dc3b0241b97da5b6e2e96d67499f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af833dc3b0241b97da5b6e2e96d67499f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#af833dc3b0241b97da5b6e2e96d67499f">Relocate</a> (T *pDestination, T *pSource, size_t uiCount=1)</td></tr>
<tr class="memdesc:af833dc3b0241b97da5b6e2e96d67499f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves objects of type T from <em>pSource</em> to <em>pDestination</em>. <br /></td></tr>
<tr class="separator:af833dc3b0241b97da5b6e2e96d67499f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87bf347cd7290d597774bfead29edb46"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a87bf347cd7290d597774bfead29edb46"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a87bf347cd7290d597774bfead29edb46">RelocateOverlapped</a> (T *pDestination, T *pSource, size_t uiCount=1)</td></tr>
<tr class="memdesc:a87bf347cd7290d597774bfead29edb46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves objects of type T from <em>pSource</em> to <em>pDestination</em>.  <a href="../../d8/d9d/classxii_memory_utils.htm#a87bf347cd7290d597774bfead29edb46">More...</a><br /></td></tr>
<tr class="separator:a87bf347cd7290d597774bfead29edb46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37c0501684dc3bcc11f47bf8d77bcfa5"><td class="memTemplParams" colspan="2"><a id="a37c0501684dc3bcc11f47bf8d77bcfa5"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a37c0501684dc3bcc11f47bf8d77bcfa5"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a37c0501684dc3bcc11f47bf8d77bcfa5">Prepend</a> (T *pDestination, const T &amp;source, size_t uiCount)</td></tr>
<tr class="memdesc:a37c0501684dc3bcc11f47bf8d77bcfa5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves <em>uiCount</em> objects in <em>pDestination</em> by one object and copies <em>source</em> to the free space. <br /></td></tr>
<tr class="separator:a37c0501684dc3bcc11f47bf8d77bcfa5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92a1e1a322b07566aec73065a5c599f0"><td class="memTemplParams" colspan="2"><a id="a92a1e1a322b07566aec73065a5c599f0"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a92a1e1a322b07566aec73065a5c599f0"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a92a1e1a322b07566aec73065a5c599f0">Prepend</a> (T *pDestination, T &amp;&amp;source, size_t uiCount)</td></tr>
<tr class="memdesc:a92a1e1a322b07566aec73065a5c599f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves <em>uiCount</em> objects in <em>pDestination</em> by one object and moves <em>source</em> to the free space. <br /></td></tr>
<tr class="separator:a92a1e1a322b07566aec73065a5c599f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8b797b996ed13cf68f5878d3cf7427b"><td class="memTemplParams" colspan="2"><a id="af8b797b996ed13cf68f5878d3cf7427b"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af8b797b996ed13cf68f5878d3cf7427b"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#af8b797b996ed13cf68f5878d3cf7427b">Prepend</a> (T *pDestination, const T *pSource, size_t uiSourceCount, size_t uiCount)</td></tr>
<tr class="memdesc:af8b797b996ed13cf68f5878d3cf7427b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves <em>uiCount</em> objects in <em>pDestination</em> by <em>uiSourceCount</em> objects and copies <em>source</em> to the free space. <br /></td></tr>
<tr class="separator:af8b797b996ed13cf68f5878d3cf7427b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f92064b280ab0015bd5a88c42618bc"><td class="memTemplParams" colspan="2"><a id="a82f92064b280ab0015bd5a88c42618bc"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a82f92064b280ab0015bd5a88c42618bc"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a82f92064b280ab0015bd5a88c42618bc">IsEqual</a> (const T *a, const T *b, size_t uiCount=1)</td></tr>
<tr class="memdesc:a82f92064b280ab0015bd5a88c42618bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tests if objects of type T from <em>pSource</em> and <em>pDestination</em> are equal. <br /></td></tr>
<tr class="separator:a82f92064b280ab0015bd5a88c42618bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa46340f1eaae0121ec1bcb712ea2755f"><td class="memTemplParams" colspan="2"><a id="aa46340f1eaae0121ec1bcb712ea2755f"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aa46340f1eaae0121ec1bcb712ea2755f"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#aa46340f1eaae0121ec1bcb712ea2755f">ZeroFill</a> (T *pDestination, size_t uiCount=1)</td></tr>
<tr class="memdesc:aa46340f1eaae0121ec1bcb712ea2755f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Zeros every byte in the provided memory buffer. <br /></td></tr>
<tr class="separator:aa46340f1eaae0121ec1bcb712ea2755f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab22975a84bca9a46570480a3513858bd"><td class="memTemplParams" colspan="2"><a id="ab22975a84bca9a46570480a3513858bd"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:ab22975a84bca9a46570480a3513858bd"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#ab22975a84bca9a46570480a3513858bd">ZeroFill</a> (T(&amp;destination)[N])=delete</td></tr>
<tr class="memdesc:ab22975a84bca9a46570480a3513858bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload to prevent confusing calling this on a single object or a static array of objects. Use <a class="el" href="../../d8/d9d/classxii_memory_utils.htm#ac489879b6d9d0d6e7846d27f694d6a09" title="Zeros every byte in the provided memory buffer.">ZeroFillArray()</a> instead. <br /></td></tr>
<tr class="separator:ab22975a84bca9a46570480a3513858bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac489879b6d9d0d6e7846d27f694d6a09"><td class="memTemplParams" colspan="2"><a id="ac489879b6d9d0d6e7846d27f694d6a09"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:ac489879b6d9d0d6e7846d27f694d6a09"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#ac489879b6d9d0d6e7846d27f694d6a09">ZeroFillArray</a> (T(&amp;destination)[N])</td></tr>
<tr class="memdesc:ac489879b6d9d0d6e7846d27f694d6a09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Zeros every byte in the provided memory buffer. <br /></td></tr>
<tr class="separator:ac489879b6d9d0d6e7846d27f694d6a09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82d1689dbbce07b7432809db6f56db84"><td class="memTemplParams" colspan="2"><a id="a82d1689dbbce07b7432809db6f56db84"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a82d1689dbbce07b7432809db6f56db84"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a82d1689dbbce07b7432809db6f56db84">PatternFill</a> (T *pDestination, xiiUInt8 uiBytePattern, size_t uiCount=1)</td></tr>
<tr class="memdesc:a82d1689dbbce07b7432809db6f56db84"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills every byte of the provided buffer with the given value. <br /></td></tr>
<tr class="separator:a82d1689dbbce07b7432809db6f56db84"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a84ef6c03f22c57b5e91bb0c56e208bb4"><td class="memTemplParams" colspan="2"><a id="a84ef6c03f22c57b5e91bb0c56e208bb4"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:a84ef6c03f22c57b5e91bb0c56e208bb4"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a84ef6c03f22c57b5e91bb0c56e208bb4">PatternFill</a> (T(&amp;destination)[N], xiiUInt8 uiBytePattern)=delete</td></tr>
<tr class="memdesc:a84ef6c03f22c57b5e91bb0c56e208bb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Overload to prevent confusing calling this on a single object or a static array of objects. Use <a class="el" href="../../d8/d9d/classxii_memory_utils.htm#ac0657820caa2f079d1f1595316f2f992" title="Fills every byte of the provided buffer with the given value.">PatternFillArray()</a> instead. <br /></td></tr>
<tr class="separator:a84ef6c03f22c57b5e91bb0c56e208bb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0657820caa2f079d1f1595316f2f992"><td class="memTemplParams" colspan="2"><a id="ac0657820caa2f079d1f1595316f2f992"></a>
template&lt;typename T , size_t N&gt; </td></tr>
<tr class="memitem:ac0657820caa2f079d1f1595316f2f992"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#ac0657820caa2f079d1f1595316f2f992">PatternFillArray</a> (T(&amp;destination)[N], xiiUInt8 uiBytePattern)</td></tr>
<tr class="memdesc:ac0657820caa2f079d1f1595316f2f992"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fills every byte of the provided buffer with the given value. <br /></td></tr>
<tr class="separator:ac0657820caa2f079d1f1595316f2f992"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5a4a8c395b376137b66eaa16e633ab6"><td class="memTemplParams" colspan="2"><a id="af5a4a8c395b376137b66eaa16e633ab6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af5a4a8c395b376137b66eaa16e633ab6"><td class="memTemplItemLeft" align="right" valign="top">static xiiInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#af5a4a8c395b376137b66eaa16e633ab6">Compare</a> (const T *a, const T *b, size_t uiCount=1)</td></tr>
<tr class="memdesc:af5a4a8c395b376137b66eaa16e633ab6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares two buffers of raw memory byte wise. <br /></td></tr>
<tr class="separator:af5a4a8c395b376137b66eaa16e633ab6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a763dcee45dee6711685b5c9f6aed4442"><td class="memItemLeft" align="right" valign="top"><a id="a763dcee45dee6711685b5c9f6aed4442"></a>
static xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a763dcee45dee6711685b5c9f6aed4442">RawByteCompare</a> (const void *a, const void *b, size_t uiNumBytesToCompare)</td></tr>
<tr class="memdesc:a763dcee45dee6711685b5c9f6aed4442"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares exactly <em>uiNumBytesToCompare</em> from <em>a</em> and <em>b</em>, independent of the involved types and their sizes. <br /></td></tr>
<tr class="separator:a763dcee45dee6711685b5c9f6aed4442"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee3226374fb68e7198a3d4aecd6c74c0"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:aee3226374fb68e7198a3d4aecd6c74c0"><td class="memTemplItemLeft" align="right" valign="top">static T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#aee3226374fb68e7198a3d4aecd6c74c0">AddByteOffset</a> (T *pPtr, std::ptrdiff_t iOffset)</td></tr>
<tr class="memdesc:aee3226374fb68e7198a3d4aecd6c74c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the address stored in <em>ptr</em> plus the given byte offset <em>iOffset</em>, cast to type <em>T</em>.  <a href="../../d8/d9d/classxii_memory_utils.htm#aee3226374fb68e7198a3d4aecd6c74c0">More...</a><br /></td></tr>
<tr class="separator:aee3226374fb68e7198a3d4aecd6c74c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a29c4bbca4faffdf508bd5a24bf52d563"><td class="memTemplParams" colspan="2"><a id="a29c4bbca4faffdf508bd5a24bf52d563"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a29c4bbca4faffdf508bd5a24bf52d563"><td class="memTemplItemLeft" align="right" valign="top">static T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a29c4bbca4faffdf508bd5a24bf52d563">AlignBackwards</a> (T *pPtr, size_t uiAlignment)</td></tr>
<tr class="memdesc:a29c4bbca4faffdf508bd5a24bf52d563"><td class="mdescLeft">&#160;</td><td class="mdescRight">Aligns the pointer <em>ptr</em> by moving its address backwards to the previous multiple of <em>uiAlignment</em>. <br /></td></tr>
<tr class="separator:a29c4bbca4faffdf508bd5a24bf52d563"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabfccfea65b8bacddffdd4cdebb11a39"><td class="memTemplParams" colspan="2"><a id="aabfccfea65b8bacddffdd4cdebb11a39"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aabfccfea65b8bacddffdd4cdebb11a39"><td class="memTemplItemLeft" align="right" valign="top">static T *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#aabfccfea65b8bacddffdd4cdebb11a39">AlignForwards</a> (T *pPtr, size_t uiAlignment)</td></tr>
<tr class="memdesc:aabfccfea65b8bacddffdd4cdebb11a39"><td class="mdescLeft">&#160;</td><td class="mdescRight">Aligns the pointer <em>ptr</em> by moving its address forwards to the next multiple of <em>uiAlignment</em>. <br /></td></tr>
<tr class="separator:aabfccfea65b8bacddffdd4cdebb11a39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a49b9826f878346f165be1d4b0f85a819"><td class="memTemplParams" colspan="2"><a id="a49b9826f878346f165be1d4b0f85a819"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a49b9826f878346f165be1d4b0f85a819"><td class="memTemplItemLeft" align="right" valign="top">static T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a49b9826f878346f165be1d4b0f85a819">AlignSize</a> (T uiSize, T uiAlignment)</td></tr>
<tr class="memdesc:a49b9826f878346f165be1d4b0f85a819"><td class="mdescLeft">&#160;</td><td class="mdescRight">Aligns the given size <em>uiSize</em> by rounding up to the next multiple of the size. <br /></td></tr>
<tr class="separator:a49b9826f878346f165be1d4b0f85a819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe0de153a571b0a2cf908bb4b729de36"><td class="memTemplParams" colspan="2"><a id="abe0de153a571b0a2cf908bb4b729de36"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:abe0de153a571b0a2cf908bb4b729de36"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#abe0de153a571b0a2cf908bb4b729de36">IsAligned</a> (const T *pPtr, size_t uiAlignment)</td></tr>
<tr class="memdesc:abe0de153a571b0a2cf908bb4b729de36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether <em>ptr</em> is aligned to a memory address that is a multiple of <em>uiAlignment</em>. <br /></td></tr>
<tr class="separator:abe0de153a571b0a2cf908bb4b729de36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9628a593bc5ab8c9331e5c613c26281"><td class="memTemplParams" colspan="2"><a id="ab9628a593bc5ab8c9331e5c613c26281"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab9628a593bc5ab8c9331e5c613c26281"><td class="memTemplItemLeft" align="right" valign="top">static bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#ab9628a593bc5ab8c9331e5c613c26281">IsSizeAligned</a> (T uiSize, T uiAlignment)</td></tr>
<tr class="memdesc:ab9628a593bc5ab8c9331e5c613c26281"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given size is aligned. <br /></td></tr>
<tr class="separator:ab9628a593bc5ab8c9331e5c613c26281"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b91034a167a30af9a0d78d32f0b8f6b"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm#a1b91034a167a30af9a0d78d32f0b8f6b">ReserveLower4GBAddressSpace</a> ()</td></tr>
<tr class="memdesc:a1b91034a167a30af9a0d78d32f0b8f6b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Reserves the lower 4GB of address space in 64-bit builds to ensure all allocations start above 4GB.  <a href="../../d8/d9d/classxii_memory_utils.htm#a1b91034a167a30af9a0d78d32f0b8f6b">More...</a><br /></td></tr>
<tr class="separator:a1b91034a167a30af9a0d78d32f0b8f6b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class provides functions to work on raw memory. </p>
<p>The following concepts are realized: Copy: Copying a object from a to b means that two equivalent objects will exists in both a and b. Move: Moving an object from a to b means that the object will exist in b afterwards but a will be empty afterwards, but not destructed. This strictly requires an available move constructor (compile error otherwise). Relocate: Relocating an object from a to b means that the object will exist in b afterwards but will no longer exist in a, which means a will be moved if available or copied, but destructed afterwards in any case. Construct: Constructing assumes that the destination does not contain a valid object. Overlapped: The source and destination range may overlap for the operation to be performed. The above mentioned concepts can be combined, e.g. RelocateConstruct for relocating to an uninitialized buffer. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="aee3226374fb68e7198a3d4aecd6c74c0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aee3226374fb68e7198a3d4aecd6c74c0">&#9670;&nbsp;</a></span>AddByteOffset()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static T* xiiMemoryUtils::AddByteOffset </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pPtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::ptrdiff_t&#160;</td>
          <td class="paramname"><em>iOffset</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the address stored in <em>ptr</em> plus the given byte offset <em>iOffset</em>, cast to type <em>T</em>. </p>
<p>This is useful when working with raw memory, to safely modify a pointer without having to take care of the details of pointer arithmetic. </p>

</div>
</div>
<a id="af3da14f91515aad7930bd6524a70f40b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af3da14f91515aad7930bd6524a70f40b">&#9670;&nbsp;</a></span>Construct()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void xiiMemoryUtils::Construct </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>uiCount</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructs <em>uiCount</em> objects of type T in a raw buffer at <em>pDestination.s</em>. </p>
<p>You should use 'DefaultConstruct' instead if default construction is needed for trivial types as well. </p>

</div>
</div>
<a id="a802d7a152c551948e45e7d0e19ae1e88"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a802d7a152c551948e45e7d0e19ae1e88">&#9670;&nbsp;</a></span>Copy()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void xiiMemoryUtils::Copy </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>pSource</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>uiCount</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies objects of type T from <em>pSource</em> to <em>pDestination</em>. </p>
<p>If the two buffers overlap use CopyOverlapped instead. </p>

</div>
</div>
<a id="aebfbcf3941811757985367ac3e1cb8de"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aebfbcf3941811757985367ac3e1cb8de">&#9670;&nbsp;</a></span>CopyOverlapped()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void xiiMemoryUtils::CopyOverlapped </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T *&#160;</td>
          <td class="paramname"><em>pSource</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>uiCount</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Copies objects of type T from <em>pSource</em> to <em>pDestination</em>. </p>
<p>The two buffers may overlap when using this method. </p>

</div>
</div>
<a id="a87bf347cd7290d597774bfead29edb46"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87bf347cd7290d597774bfead29edb46">&#9670;&nbsp;</a></span>RelocateOverlapped()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void xiiMemoryUtils::RelocateOverlapped </td>
          <td>(</td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pDestination</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">T *&#160;</td>
          <td class="paramname"><em>pSource</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>uiCount</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves objects of type T from <em>pSource</em> to <em>pDestination</em>. </p>
<p>The two buffers may overlap when using this method. </p>

</div>
</div>
<a id="a1b91034a167a30af9a0d78d32f0b8f6b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1b91034a167a30af9a0d78d32f0b8f6b">&#9670;&nbsp;</a></span>ReserveLower4GBAddressSpace()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiMemoryUtils::ReserveLower4GBAddressSpace </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Reserves the lower 4GB of address space in 64-bit builds to ensure all allocations start above 4GB. </p>
<dl class="section note"><dt>Note</dt><dd>Note that this does NOT reserve 4GB of RAM, only address space. This can help to detect pointer truncation. In 32-bit builds it does nothing.</dd></dl>
<p>Currently only implemented on Windows. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Memory/<a class="el" href="../../da/d0b/_memory_utils_8h_source.htm">MemoryUtils.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Memory/Implementation/MemoryUtils.cpp</li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Memory/Implementation/<a class="el" href="../../d3/de9/_memory_utils__inl_8h_source.htm">MemoryUtils_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d8/d9d/classxii_memory_utils.htm">xiiMemoryUtils</a></li>
    <li class="footer">Generated on Thu Dec 28 2023 08:05:33 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

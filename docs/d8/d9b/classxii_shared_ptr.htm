<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiSharedPtr&lt; T &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d8/d9b/classxii_shared_ptr.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../df/df4/classxii_shared_ptr-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiSharedPtr&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A Shared ptr manages a shared object and destroys that object when no one references it anymore. The managed object must derive from <a class="el" href="../../d3/dd0/classxii_ref_counted.htm" title="Base class for reference counted objects.">xiiRefCounted</a>.  
 <a href="../../d8/d9b/classxii_shared_ptr.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d1/d13/_shared_ptr_8h_source.htm">SharedPtr.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a9c30290cba84aa2b5398d1999673ea87"><td class="memItemLeft" align="right" valign="top"><a id="a9c30290cba84aa2b5398d1999673ea87"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>XII_DECLARE_MEM_RELOCATABLE_TYPE</b> ()</td></tr>
<tr class="separator:a9c30290cba84aa2b5398d1999673ea87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a83ab0f3ae15cab960ddd67b3d3baca"><td class="memItemLeft" align="right" valign="top"><a id="a4a83ab0f3ae15cab960ddd67b3d3baca"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a4a83ab0f3ae15cab960ddd67b3d3baca">xiiSharedPtr</a> ()</td></tr>
<tr class="memdesc:a4a83ab0f3ae15cab960ddd67b3d3baca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an empty shared ptr. <br /></td></tr>
<tr class="separator:a4a83ab0f3ae15cab960ddd67b3d3baca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af93d496203d7b46f8c12a21f3a09756d"><td class="memTemplParams" colspan="2"><a id="af93d496203d7b46f8c12a21f3a09756d"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:af93d496203d7b46f8c12a21f3a09756d"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#af93d496203d7b46f8c12a21f3a09756d">xiiSharedPtr</a> (const <a class="el" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance</a>&lt; U &gt; &amp;instance)</td></tr>
<tr class="memdesc:af93d496203d7b46f8c12a21f3a09756d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a shared ptr from a freshly created instance through XII_NEW or XII_DEFAULT_NEW. <br /></td></tr>
<tr class="separator:af93d496203d7b46f8c12a21f3a09756d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe865f2aa622dd636b2044ba108ebcda"><td class="memTemplParams" colspan="2"><a id="afe865f2aa622dd636b2044ba108ebcda"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:afe865f2aa622dd636b2044ba108ebcda"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#afe865f2aa622dd636b2044ba108ebcda">xiiSharedPtr</a> (U *pInstance, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:afe865f2aa622dd636b2044ba108ebcda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a shared ptr from a pointer and an allocator. The passed allocator will be used to destroy the instance when the shared ptr goes out of scope. <br /></td></tr>
<tr class="separator:afe865f2aa622dd636b2044ba108ebcda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60b31bfcfc4c22e7ed46ddd44b025f48"><td class="memItemLeft" align="right" valign="top"><a id="a60b31bfcfc4c22e7ed46ddd44b025f48"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a60b31bfcfc4c22e7ed46ddd44b025f48">xiiSharedPtr</a> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:a60b31bfcfc4c22e7ed46ddd44b025f48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructs a shared ptr from another. Both will hold a reference to the managed object afterwards. <br /></td></tr>
<tr class="separator:a60b31bfcfc4c22e7ed46ddd44b025f48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab49954c9680ebc7f4b7e8473d81df132"><td class="memTemplParams" colspan="2"><a id="ab49954c9680ebc7f4b7e8473d81df132"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:ab49954c9680ebc7f4b7e8473d81df132"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#ab49954c9680ebc7f4b7e8473d81df132">xiiSharedPtr</a> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="memdesc:ab49954c9680ebc7f4b7e8473d81df132"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructs a shared ptr from another. Both will hold a reference to the managed object afterwards. <br /></td></tr>
<tr class="separator:ab49954c9680ebc7f4b7e8473d81df132"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad38902a6797745b7501bcfaae246223a"><td class="memTemplParams" colspan="2"><a id="ad38902a6797745b7501bcfaae246223a"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:ad38902a6797745b7501bcfaae246223a"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#ad38902a6797745b7501bcfaae246223a">xiiSharedPtr</a> (<a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:ad38902a6797745b7501bcfaae246223a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructs a shared ptr from another. The other shared ptr will be empty afterwards. <br /></td></tr>
<tr class="separator:ad38902a6797745b7501bcfaae246223a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab70f21d1fcac43e78559695f205a6187"><td class="memTemplParams" colspan="2"><a id="ab70f21d1fcac43e78559695f205a6187"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:ab70f21d1fcac43e78559695f205a6187"><td class="memTemplItemLeft" align="right" valign="top">&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#ab70f21d1fcac43e78559695f205a6187">xiiSharedPtr</a> (<a class="el" href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:ab70f21d1fcac43e78559695f205a6187"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move constructs a shared ptr from a unique ptr. The unique ptr will be empty afterwards. <br /></td></tr>
<tr class="separator:ab70f21d1fcac43e78559695f205a6187"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c84304165b3a260667bb95c8567d1e2"><td class="memItemLeft" align="right" valign="top"><a id="a8c84304165b3a260667bb95c8567d1e2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a8c84304165b3a260667bb95c8567d1e2">xiiSharedPtr</a> (std::nullptr_t)</td></tr>
<tr class="memdesc:a8c84304165b3a260667bb95c8567d1e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialization with nullptr to be able to return nullptr in functions that return shared ptr. <br /></td></tr>
<tr class="separator:a8c84304165b3a260667bb95c8567d1e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15453b81368ad7f75903d80f070b5bdc"><td class="memItemLeft" align="right" valign="top"><a id="a15453b81368ad7f75903d80f070b5bdc"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a15453b81368ad7f75903d80f070b5bdc">~xiiSharedPtr</a> ()</td></tr>
<tr class="memdesc:a15453b81368ad7f75903d80f070b5bdc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the managed object using the stored allocator if no one else references it anymore. <br /></td></tr>
<tr class="separator:a15453b81368ad7f75903d80f070b5bdc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c09af6447a75d9b82b54068f4e7b9c9"><td class="memTemplParams" colspan="2"><a id="a2c09af6447a75d9b82b54068f4e7b9c9"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a2c09af6447a75d9b82b54068f4e7b9c9"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a2c09af6447a75d9b82b54068f4e7b9c9">operator=</a> (const <a class="el" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance</a>&lt; U &gt; &amp;instance)</td></tr>
<tr class="memdesc:a2c09af6447a75d9b82b54068f4e7b9c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the shared ptr from a freshly created instance through XII_NEW or XII_DEFAULT_NEW. <br /></td></tr>
<tr class="separator:a2c09af6447a75d9b82b54068f4e7b9c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1a4790ea10705cf7c999f3633f1cb78"><td class="memItemLeft" align="right" valign="top"><a id="af1a4790ea10705cf7c999f3633f1cb78"></a>
<a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#af1a4790ea10705cf7c999f3633f1cb78">operator=</a> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;other)</td></tr>
<tr class="memdesc:af1a4790ea10705cf7c999f3633f1cb78"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the shared ptr from another. Both will hold a reference to the managed object afterwards. <br /></td></tr>
<tr class="separator:af1a4790ea10705cf7c999f3633f1cb78"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af212728940b2e70389eb1444e0aa38ca"><td class="memTemplParams" colspan="2"><a id="af212728940b2e70389eb1444e0aa38ca"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:af212728940b2e70389eb1444e0aa38ca"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#af212728940b2e70389eb1444e0aa38ca">operator=</a> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="memdesc:af212728940b2e70389eb1444e0aa38ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the shared ptr from another. Both will hold a reference to the managed object afterwards. <br /></td></tr>
<tr class="separator:af212728940b2e70389eb1444e0aa38ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4490f39274f37b75ab8de047b17b1549"><td class="memTemplParams" colspan="2"><a id="a4490f39274f37b75ab8de047b17b1549"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a4490f39274f37b75ab8de047b17b1549"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a4490f39274f37b75ab8de047b17b1549">operator=</a> (<a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:a4490f39274f37b75ab8de047b17b1549"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assigns a shared ptr from another. The other shared ptr will be empty afterwards. <br /></td></tr>
<tr class="separator:a4490f39274f37b75ab8de047b17b1549"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a03b71a64025a1d9e2265f81b02a0e480"><td class="memTemplParams" colspan="2"><a id="a03b71a64025a1d9e2265f81b02a0e480"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a03b71a64025a1d9e2265f81b02a0e480"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a03b71a64025a1d9e2265f81b02a0e480">operator=</a> (<a class="el" href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="memdesc:a03b71a64025a1d9e2265f81b02a0e480"><td class="mdescLeft">&#160;</td><td class="mdescRight">Move assigns a shared ptr from a unique ptr. The unique ptr will be empty afterwards. <br /></td></tr>
<tr class="separator:a03b71a64025a1d9e2265f81b02a0e480"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ff9fed87cc7a4b7468a05b03eb672bf"><td class="memItemLeft" align="right" valign="top"><a id="a3ff9fed87cc7a4b7468a05b03eb672bf"></a>
<a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a3ff9fed87cc7a4b7468a05b03eb672bf">operator=</a> (std::nullptr_t)</td></tr>
<tr class="memdesc:a3ff9fed87cc7a4b7468a05b03eb672bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns a nullptr to the shared ptr. Same as Reset. <br /></td></tr>
<tr class="separator:a3ff9fed87cc7a4b7468a05b03eb672bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acdbc0ac2ce97ae9ba5894184acb9c89b"><td class="memItemLeft" align="right" valign="top"><a id="acdbc0ac2ce97ae9ba5894184acb9c89b"></a>
T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#acdbc0ac2ce97ae9ba5894184acb9c89b">Borrow</a> () const</td></tr>
<tr class="memdesc:acdbc0ac2ce97ae9ba5894184acb9c89b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Borrows the managed object. The shared ptr stays unmodified. <br /></td></tr>
<tr class="separator:acdbc0ac2ce97ae9ba5894184acb9c89b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3698c50c666c95a814628519b59b3965"><td class="memItemLeft" align="right" valign="top"><a id="a3698c50c666c95a814628519b59b3965"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a3698c50c666c95a814628519b59b3965">Clear</a> ()</td></tr>
<tr class="memdesc:a3698c50c666c95a814628519b59b3965"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys the managed object if no one else references it anymore and resets the shared ptr. <br /></td></tr>
<tr class="separator:a3698c50c666c95a814628519b59b3965"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a10fb5dbbdca3877ade323060bc5610d7"><td class="memItemLeft" align="right" valign="top"><a id="a10fb5dbbdca3877ade323060bc5610d7"></a>
T &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a10fb5dbbdca3877ade323060bc5610d7">operator*</a> () const</td></tr>
<tr class="memdesc:a10fb5dbbdca3877ade323060bc5610d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the managed object. <br /></td></tr>
<tr class="separator:a10fb5dbbdca3877ade323060bc5610d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecc0f49333d267fd0ece6e8a80d35b18"><td class="memItemLeft" align="right" valign="top"><a id="aecc0f49333d267fd0ece6e8a80d35b18"></a>
T *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#aecc0f49333d267fd0ece6e8a80d35b18">operator-&gt;</a> () const</td></tr>
<tr class="memdesc:aecc0f49333d267fd0ece6e8a80d35b18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the managed object. <br /></td></tr>
<tr class="separator:aecc0f49333d267fd0ece6e8a80d35b18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a502bd225820f5f5cec029cc63648e839"><td class="memItemLeft" align="right" valign="top"><a id="a502bd225820f5f5cec029cc63648e839"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a502bd225820f5f5cec029cc63648e839">operator const T *</a> () const</td></tr>
<tr class="memdesc:a502bd225820f5f5cec029cc63648e839"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the managed object. <br /></td></tr>
<tr class="separator:a502bd225820f5f5cec029cc63648e839"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a574ae2e5249ef8e9f35b32229cb72413"><td class="memItemLeft" align="right" valign="top"><a id="a574ae2e5249ef8e9f35b32229cb72413"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a574ae2e5249ef8e9f35b32229cb72413">operator T*</a> ()</td></tr>
<tr class="memdesc:a574ae2e5249ef8e9f35b32229cb72413"><td class="mdescLeft">&#160;</td><td class="mdescRight">Provides access to the managed object. <br /></td></tr>
<tr class="separator:a574ae2e5249ef8e9f35b32229cb72413"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a408cff55733d4e1d431c8c1cb7bb7b8c"><td class="memItemLeft" align="right" valign="top"><a id="a408cff55733d4e1d431c8c1cb7bb7b8c"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a408cff55733d4e1d431c8c1cb7bb7b8c">operator bool</a> () const</td></tr>
<tr class="memdesc:a408cff55733d4e1d431c8c1cb7bb7b8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if there is managed object and false if the shared ptr is empty. <br /></td></tr>
<tr class="separator:a408cff55733d4e1d431c8c1cb7bb7b8c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad90d8f179cd03c79dafa8f4d96823c00"><td class="memItemLeft" align="right" valign="top"><a id="ad90d8f179cd03c79dafa8f4d96823c00"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#ad90d8f179cd03c79dafa8f4d96823c00">operator==</a> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:ad90d8f179cd03c79dafa8f4d96823c00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the shared ptr against another shared ptr. <br /></td></tr>
<tr class="separator:ad90d8f179cd03c79dafa8f4d96823c00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6c8e8b39342525a885a351ac9c8292c8"><td class="memItemLeft" align="right" valign="top"><a id="a6c8e8b39342525a885a351ac9c8292c8"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:a6c8e8b39342525a885a351ac9c8292c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af55c7fb94a7402fe807afc49feb6699f"><td class="memItemLeft" align="right" valign="top"><a id="af55c7fb94a7402fe807afc49feb6699f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;=</b> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:af55c7fb94a7402fe807afc49feb6699f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17b57cf9e6ff77df573eb1fbcfb4d924"><td class="memItemLeft" align="right" valign="top"><a id="a17b57cf9e6ff77df573eb1fbcfb4d924"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;</b> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:a17b57cf9e6ff77df573eb1fbcfb4d924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9da11b8a425a430eb57c09be70367748"><td class="memItemLeft" align="right" valign="top"><a id="a9da11b8a425a430eb57c09be70367748"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;=</b> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;rhs) const</td></tr>
<tr class="separator:a9da11b8a425a430eb57c09be70367748"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d5aa1a7889c52320634d460b969433e"><td class="memItemLeft" align="right" valign="top"><a id="a2d5aa1a7889c52320634d460b969433e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a2d5aa1a7889c52320634d460b969433e">operator==</a> (std::nullptr_t) const</td></tr>
<tr class="memdesc:a2d5aa1a7889c52320634d460b969433e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares the shared ptr against nullptr. <br /></td></tr>
<tr class="separator:a2d5aa1a7889c52320634d460b969433e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50c6b9ab95d88c13da193c385ff4ec66"><td class="memItemLeft" align="right" valign="top"><a id="a50c6b9ab95d88c13da193c385ff4ec66"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;</b> (std::nullptr_t) const</td></tr>
<tr class="separator:a50c6b9ab95d88c13da193c385ff4ec66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcfcfa9fc72ded5646ddffcdd64a7638"><td class="memItemLeft" align="right" valign="top"><a id="abcfcfa9fc72ded5646ddffcdd64a7638"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&lt;=</b> (std::nullptr_t) const</td></tr>
<tr class="separator:abcfcfa9fc72ded5646ddffcdd64a7638"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96ba78a851c21425e82fda58df1daef9"><td class="memItemLeft" align="right" valign="top"><a id="a96ba78a851c21425e82fda58df1daef9"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;</b> (std::nullptr_t) const</td></tr>
<tr class="separator:a96ba78a851c21425e82fda58df1daef9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad282017acca346e88e6d5d9f3d0c37c6"><td class="memItemLeft" align="right" valign="top"><a id="ad282017acca346e88e6d5d9f3d0c37c6"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>operator&gt;=</b> (std::nullptr_t) const</td></tr>
<tr class="separator:ad282017acca346e88e6d5d9f3d0c37c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a346de2a8d6cf427c3cab804f094098ab"><td class="memTemplParams" colspan="2">template&lt;typename DERIVED &gt; </td></tr>
<tr class="memitem:a346de2a8d6cf427c3cab804f094098ab"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; DERIVED &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm#a346de2a8d6cf427c3cab804f094098ab">Downcast</a> () const</td></tr>
<tr class="memdesc:a346de2a8d6cf427c3cab804f094098ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a copy of this, as a xiiSharedPtr&lt;DERIVED&gt;. Downcasts the stored pointer (using static_cast).  <a href="../../d8/d9b/classxii_shared_ptr.htm#a346de2a8d6cf427c3cab804f094098ab">More...</a><br /></td></tr>
<tr class="separator:a346de2a8d6cf427c3cab804f094098ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c701f30173d25dd08c2dfca76f5773f"><td class="memTemplParams" colspan="2"><a id="a2c701f30173d25dd08c2dfca76f5773f"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a2c701f30173d25dd08c2dfca76f5773f"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiSharedPtr</b> (const <a class="el" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance</a>&lt; U &gt; &amp;instance)</td></tr>
<tr class="separator:a2c701f30173d25dd08c2dfca76f5773f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a089741b2ca880c36c04db0d2ba0f7f43"><td class="memTemplParams" colspan="2"><a id="a089741b2ca880c36c04db0d2ba0f7f43"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a089741b2ca880c36c04db0d2ba0f7f43"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiSharedPtr</b> (U *pInstance, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator)</td></tr>
<tr class="separator:a089741b2ca880c36c04db0d2ba0f7f43"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae07073449dacaf050aecf902c97f1863"><td class="memTemplParams" colspan="2"><a id="ae07073449dacaf050aecf902c97f1863"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:ae07073449dacaf050aecf902c97f1863"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiSharedPtr</b> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="separator:ae07073449dacaf050aecf902c97f1863"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f9eb4606cbe029a3e9872ef9f8dec95"><td class="memTemplParams" colspan="2"><a id="a2f9eb4606cbe029a3e9872ef9f8dec95"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a2f9eb4606cbe029a3e9872ef9f8dec95"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiSharedPtr</b> (<a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="separator:a2f9eb4606cbe029a3e9872ef9f8dec95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a479632b6087771559c8f22cf2a69213b"><td class="memTemplParams" colspan="2"><a id="a479632b6087771559c8f22cf2a69213b"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a479632b6087771559c8f22cf2a69213b"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>xiiSharedPtr</b> (<a class="el" href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="separator:a479632b6087771559c8f22cf2a69213b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5cc1c52f80a120a8306c0f8aa945eeca"><td class="memTemplParams" colspan="2"><a id="a5cc1c52f80a120a8306c0f8aa945eeca"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a5cc1c52f80a120a8306c0f8aa945eeca"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../de/d3c/structxii_internal_1_1_new_instance.htm">xiiInternal::NewInstance</a>&lt; U &gt; &amp;instance)</td></tr>
<tr class="separator:a5cc1c52f80a120a8306c0f8aa945eeca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27e043b6082a91e96e1e8973d7eddaf2"><td class="memTemplParams" colspan="2"><a id="a27e043b6082a91e96e1e8973d7eddaf2"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:a27e043b6082a91e96e1e8973d7eddaf2"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; U &gt; &amp;other)</td></tr>
<tr class="separator:a27e043b6082a91e96e1e8973d7eddaf2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef84665085a307aa9e22a541c5088afa"><td class="memTemplParams" colspan="2"><a id="aef84665085a307aa9e22a541c5088afa"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:aef84665085a307aa9e22a541c5088afa"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="separator:aef84665085a307aa9e22a541c5088afa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae158bb43b681e94e416a7ceffa4d02e2"><td class="memTemplParams" colspan="2"><a id="ae158bb43b681e94e416a7ceffa4d02e2"></a>
template&lt;typename U &gt; </td></tr>
<tr class="memitem:ae158bb43b681e94e416a7ceffa4d02e2"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt; &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>operator=</b> (<a class="el" href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr</a>&lt; U &gt; &amp;&amp;other)</td></tr>
<tr class="separator:ae158bb43b681e94e416a7ceffa4d02e2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class xiiSharedPtr&lt; T &gt;</h3>

<p>A Shared ptr manages a shared object and destroys that object when no one references it anymore. The managed object must derive from <a class="el" href="../../d3/dd0/classxii_ref_counted.htm" title="Base class for reference counted objects.">xiiRefCounted</a>. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a346de2a8d6cf427c3cab804f094098ab"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a346de2a8d6cf427c3cab804f094098ab">&#9670;&nbsp;</a></span>Downcast()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<div class="memtemplate">
template&lt;typename DERIVED &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt;DERIVED&gt; <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; T &gt;::Downcast </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns a copy of this, as a xiiSharedPtr&lt;DERIVED&gt;. Downcasts the stored pointer (using static_cast). </p>
<p>Does not check whether the cast would be valid, that is all your responsibility. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Types/<a class="el" href="../../d1/d13/_shared_ptr_8h_source.htm">SharedPtr.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Types/Implementation/<a class="el" href="../../df/dc1/_shared_ptr__inl_8h_source.htm">SharedPtr_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a></li>
    <li class="footer">Generated on Thu May 16 2024 17:17:35 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

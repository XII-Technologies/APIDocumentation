<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Reflection/Implementation/MapProperty.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d8/d5d/_map_property_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">MapProperty.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Reflection/Implementation/AbstractProperty.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; </div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="keyword">class </span><a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160; </div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00010"></a><span class="lineno"><a class="line" href="../../dd/d84/classxii_typed_map_property.htm">   10</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty</a> : <span class="keyword">public</span> <a class="code" href="../../da/d76/classxii_abstract_map_property.htm">xiiAbstractMapProperty</a></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;{</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <a class="code" href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName) :</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;    <a class="code" href="../../da/d76/classxii_abstract_map_property.htm#a575144fc3b054676570a1756c0435e1c">xiiAbstractMapProperty</a>(sPropertyName)</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;  {</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;    m_Flags = xiiPropertyFlags::GetParameterFlags&lt;Type&gt;();</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;    XII_CHECK_AT_COMPILETIME_MSG(!std::is_pointer&lt;Type&gt;::value || <a class="code" href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariant::TypeDeduction</a>&lt;<span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a35ea12912392837d91ed5e0a18795343">xiiTypeTraits&lt;Type&gt;::NonConstReferencePointerType</a>&gt;::value == <a class="code" href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0">xiiVariantType::Invalid</a>,</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;                                 <span class="stringliteral">&quot;Pointer to standard types are not supported.&quot;</span>);</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  }</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../dd/d84/classxii_typed_map_property.htm#a770caeb3323b72f5b38276e43b055545">   21</a></span>&#160;  <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a>* <a class="code" href="../../dd/d84/classxii_typed_map_property.htm#a770caeb3323b72f5b38276e43b055545">GetSpecificType</a>()<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> xiiGetStaticRTTI&lt;typename xiiTypeTraits&lt;Type&gt;::NonConstReferencePointerType&gt;(); }</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;};</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, <span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="../../d2/dc6/classxii_accessor_map_property.htm">   26</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm">xiiAccessorMapProperty</a> : <span class="keyword">public</span> <a class="code" href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty</a>&lt;Type&gt;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  <span class="keyword">using</span> RealType      = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keyword">using</span> InsertFunc      = void (Class::*)(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, Type value);</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="keyword">using</span> RemoveFunc      = void (Class::*)(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">using</span> GetValueFunc    = bool (Class::*)(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, RealType&amp; value) <span class="keyword">const</span>;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keyword">using</span> GetKeyRangeFunc = Container (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm">xiiAccessorMapProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName, GetKeyRangeFunc getKeys, GetValueFunc getValue, InsertFunc insert, RemoveFunc remove) :</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <a class="code" href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty&lt;Type&gt;</a>(sPropertyName)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    XII_ASSERT_DEBUG(getKeys != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The getKeys function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    XII_ASSERT_DEBUG(getValue != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The GetValueFunc function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    m_GetKeyRange = getKeys;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    m_GetValue    = getValue;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    m_Insert      = insert;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    m_Remove      = remove;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">if</span> (m_Insert == <span class="keyword">nullptr</span> || remove == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      xiiAbstractMapProperty::m_Flags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<a class="code" href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="../../d2/dc6/classxii_accessor_map_property.htm#ab58685b681733b62ef496c1edc39251b">   52</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm#ab58685b681733b62ef496c1edc39251b">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="comment">// this should be decltype(auto) c = ...; but MSVC 16 is too dumb for that (MSVC 15 works fine)</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    decltype((<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)()) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">return</span> begin(c) == end(c);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="line" href="../../d2/dc6/classxii_accessor_map_property.htm#a5d8414c93fb7fa3874c3142bc13891c8">   60</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm#a5d8414c93fb7fa3874c3142bc13891c8">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      <span class="comment">// this should be decltype(auto) c = ...; but MSVC 16 is too dumb for that (MSVC 15 works fine)</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      decltype((<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)()) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;      <span class="keyword">auto</span> it = begin(c);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <span class="keywordflow">if</span> (it != end(c))</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm#aef30d059c894e4c6df11072e9bda7fea">Remove</a>(pInstance, *it);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    }</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  }</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../d2/dc6/classxii_accessor_map_property.htm#acfe0379a62f3a0c2f67f75e2e6f7b9c6">   75</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm#acfe0379a62f3a0c2f67f75e2e6f7b9c6">Insert</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    XII_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(sKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  }</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="../../d2/dc6/classxii_accessor_map_property.htm#aef30d059c894e4c6df11072e9bda7fea">   81</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm#aef30d059c894e4c6df11072e9bda7fea">Remove</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey)<span class="keyword"> override</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    XII_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(sKey);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno"><a class="line" href="../../d2/dc6/classxii_accessor_map_property.htm#a6c542a233633063a4e599140561394aa">   87</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm#a6c542a233633063a4e599140561394aa">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    RealType value;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValue)(sKey, value);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="../../d2/dc6/classxii_accessor_map_property.htm#a081a68f8912821e6f7c0e68f028f41df">   93</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm#a081a68f8912821e6f7c0e68f028f41df">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetValue)(sKey, *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  }</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno"><a class="line" href="../../d2/dc6/classxii_accessor_map_property.htm#af5b3ceed84635f5f75d40a8b116d6dc6">   98</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d2/dc6/classxii_accessor_map_property.htm#af5b3ceed84635f5f75d40a8b116d6dc6">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;xiiString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    out_keys.<a class="code" href="../../da/d4c/classxii_array_base.htm#ab517ef07fbed3ecc766ac24394ae1fc8">Clear</a>();</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    decltype(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetKeyRange)();</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; key : c)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    {</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      out_keys.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(key);</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;  }</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  GetKeyRangeFunc m_GetKeyRange;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  GetValueFunc    m_GetValue;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  InsertFunc      m_Insert;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  RemoveFunc      m_Remove;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;};</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160; </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Type, <span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00117"></a><span class="lineno"><a class="line" href="../../dc/d8a/classxii_write_accessor_map_property.htm">  117</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm">xiiWriteAccessorMapProperty</a> : <span class="keyword">public</span> <a class="code" href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty</a>&lt;Type&gt;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;{</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <span class="keyword">using</span> ContainerType    = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keyword">using</span> ContainerSubType = <span class="keyword">typename</span> <a class="code" href="../../d4/da5/structxii_container_sub_type_resolver.htm">xiiContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <span class="keyword">using</span> RealType         = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  <span class="keyword">using</span> InsertFunc       = void (Class::*)(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, Type value);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keyword">using</span> RemoveFunc       = void (Class::*)(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <span class="keyword">using</span> GetContainerFunc = Container (Class::*)() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm">xiiWriteAccessorMapProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName, GetContainerFunc getContainer, InsertFunc insert, RemoveFunc remove) :</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty&lt;Type&gt;</a>(sPropertyName)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  {</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    XII_ASSERT_DEBUG(getContainer != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The get count function of a map property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    m_GetContainer = getContainer;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    m_Insert       = insert;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    m_Remove       = remove;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">if</span> (m_Insert == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      xiiAbstractMapProperty::m_Flags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<a class="code" href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a574f3e27a7c204ebc0718c66811bdbcb">  141</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a574f3e27a7c204ebc0718c66811bdbcb">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)().<a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a574f3e27a7c204ebc0718c66811bdbcb">IsEmpty</a>(); }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno"><a class="line" href="../../dc/d8a/classxii_write_accessor_map_property.htm#aa56c584e9b1cb114e8dfc225eb603ebc">  143</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#aa56c584e9b1cb114e8dfc225eb603ebc">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    decltype(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">while</span> (!<a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a574f3e27a7c204ebc0718c66811bdbcb">IsEmpty</a>(pInstance))</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      <span class="keyword">auto</span> it = c.GetIterator();</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a96e87fd9ff8eaae2a97ebd40a02706b0">Remove</a>(pInstance, it.Key());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    }</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a02a06ed9bf7472bf16bc75bb1ef0858c">  153</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a02a06ed9bf7472bf16bc75bb1ef0858c">Insert</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    XII_ASSERT_DEBUG(m_Insert != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no insert function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Insert)(sKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  }</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a96e87fd9ff8eaae2a97ebd40a02706b0">  159</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a96e87fd9ff8eaae2a97ebd40a02706b0">Remove</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey)<span class="keyword"> override</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    XII_ASSERT_DEBUG(m_Remove != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no remove function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    (<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_Remove)(sKey);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  }</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160; </div>
<div class="line"><a name="l00165"></a><span class="lineno"><a class="line" href="../../dc/d8a/classxii_write_accessor_map_property.htm#aa08e96567c5370aebca7cdf200275abb">  165</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#aa08e96567c5370aebca7cdf200275abb">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keywordflow">return</span> (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)().<a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#aa08e96567c5370aebca7cdf200275abb">Contains</a>(sKey);</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="../../dc/d8a/classxii_write_accessor_map_property.htm#adeeb359402d745dbb9f494c84b7cd860">  170</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#adeeb359402d745dbb9f494c84b7cd860">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    decltype(<span class="keyword">auto</span>)  c     = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">const</span> RealType* value = c.GetValue(sKey);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <span class="keywordflow">if</span> (value)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    {</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = *value;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    }</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> value != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  }</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a59f1eadba580250e2fdcf2724f57d6cb">  181</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../dc/d8a/classxii_write_accessor_map_property.htm#a59f1eadba580250e2fdcf2724f57d6cb">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;xiiString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    decltype(<span class="keyword">auto</span>) c = (<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)-&gt;*m_GetContainer)();</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    out_keys.<a class="code" href="../../da/d4c/classxii_array_base.htm#ab517ef07fbed3ecc766ac24394ae1fc8">Clear</a>();</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = c.GetIterator(); it.IsValid(); ++it)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      out_keys.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(it.Key());</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  }</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  GetContainerFunc m_GetContainer;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  InsertFunc       m_Insert;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  RemoveFunc       m_Remove;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;};</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, Container Class::*Member&gt;</div>
<div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="../../d9/dbd/structxii_map_property_accessor.htm">  199</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../d9/dbd/structxii_map_property_accessor.htm">xiiMapPropertyAccessor</a></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <span class="keyword">using</span> ContainerType = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Container&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keyword">using</span> Type          = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm">xiiTypeTraits&lt;typename xiiContainerSubTypeResolver&lt;ContainerType&gt;::Type</a>&gt;::NonConstReferenceType;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <span class="keyword">static</span> <span class="keyword">const</span> ContainerType&amp; GetConstContainer(<span class="keyword">const</span> Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160; </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keyword">static</span> ContainerType&amp; GetContainer(Class* pInstance) { <span class="keywordflow">return</span> (*pInstance).*Member; }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;};</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Class, <span class="keyword">typename</span> Container, <span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="../../d6/d4d/classxii_member_map_property.htm">  211</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../d6/d4d/classxii_member_map_property.htm">xiiMemberMapProperty</a> : <span class="keyword">public</span> <a class="code" href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty</a>&lt;typename xiiTypeTraits&lt;Type&gt;::NonConstReferenceType&gt;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;{</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keyword">using</span> RealType              = <span class="keyword">typename</span> <a class="code" href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits&lt;Type&gt;::NonConstReferenceType</a>;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keyword">using</span> GetConstContainerFunc = <span class="keyword">const</span> Container&amp; (*)(<span class="keyword">const</span> Class* pInstance);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keyword">using</span> GetContainerFunc      = Container&amp; (*)(Class* pInstance);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160; </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <a class="code" href="../../d6/d4d/classxii_member_map_property.htm">xiiMemberMapProperty</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPropertyName, GetConstContainerFunc constGetter, GetContainerFunc getter) :</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <a class="code" href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty&lt;RealType&gt;</a>(sPropertyName)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    XII_ASSERT_DEBUG(constGetter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The const get count function of an array property cannot be nullptr.&quot;</span>);</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160; </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    m_ConstGetter = constGetter;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    m_Getter      = getter;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span> (m_Getter == <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      xiiAbstractMapProperty::m_Flags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">Add</a>(<a class="code" href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  }</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="../../d6/d4d/classxii_member_map_property.htm#acbe4f4ba386f18c0a71c53f465739e25">  230</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d6/d4d/classxii_member_map_property.htm#acbe4f4ba386f18c0a71c53f465739e25">IsEmpty</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance)<span class="keyword"> const override </span>{ <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).IsEmpty(); }</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; </div>
<div class="line"><a name="l00232"></a><span class="lineno"><a class="line" href="../../d6/d4d/classxii_member_map_property.htm#a464a68ec4448d693c6f988d494c549d9">  232</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d6/d4d/classxii_member_map_property.htm#a464a68ec4448d693c6f988d494c549d9">Clear</a>(<span class="keywordtype">void</span>* pInstance)<span class="keyword"> override</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    XII_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Clear();</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  }</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="../../d6/d4d/classxii_member_map_property.htm#ad54697c42f9628cbaf82ac9e268c5128">  238</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d6/d4d/classxii_member_map_property.htm#ad54697c42f9628cbaf82ac9e268c5128">Insert</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, <span class="keyword">const</span> <span class="keywordtype">void</span>* pObject)<span class="keyword"> override</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    XII_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Insert(sKey, *<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>RealType*<span class="keyword">&gt;</span>(pObject));</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  }</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160; </div>
<div class="line"><a name="l00244"></a><span class="lineno"><a class="line" href="../../d6/d4d/classxii_member_map_property.htm#a63ed73a15bbd8be66d249b5d673f13ce">  244</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d6/d4d/classxii_member_map_property.htm#a63ed73a15bbd8be66d249b5d673f13ce">Remove</a>(<span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey)<span class="keyword"> override</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    XII_ASSERT_DEBUG(m_Getter != <span class="keyword">nullptr</span>, <span class="stringliteral">&quot;The property &#39;{0}&#39; has no non-const set accessor function, thus it is read-only.&quot;</span>, <a class="code" href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a>());</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    m_Getter(<span class="keyword">static_cast&lt;</span>Class*<span class="keyword">&gt;</span>(pInstance)).Remove(sKey);</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno"><a class="line" href="../../d6/d4d/classxii_member_map_property.htm#a31a88012b190e19ce1160c034d5c144a">  250</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d6/d4d/classxii_member_map_property.htm#a31a88012b190e19ce1160c034d5c144a">Contains</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).Contains(sKey);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno"><a class="line" href="../../d6/d4d/classxii_member_map_property.htm#a039525c3fe1ce422cb7afb41382d25a8">  255</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="../../d6/d4d/classxii_member_map_property.htm#a039525c3fe1ce422cb7afb41382d25a8">GetValue</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sKey, <span class="keywordtype">void</span>* pObject)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">const</span> RealType* value = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance)).GetValue(sKey);</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span> (value)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      *<span class="keyword">static_cast&lt;</span>RealType*<span class="keyword">&gt;</span>(pObject) = *value;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> value != <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno"><a class="line" href="../../d6/d4d/classxii_member_map_property.htm#a3cae9a434454464b9b4ec89bb5e99f32">  265</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="../../d6/d4d/classxii_member_map_property.htm#a3cae9a434454464b9b4ec89bb5e99f32">GetKeys</a>(<span class="keyword">const</span> <span class="keywordtype">void</span>* pInstance, <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;xiiString, 16&gt;</a>&amp; out_keys)<span class="keyword"> const override</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    decltype(<span class="keyword">auto</span>) c = m_ConstGetter(<span class="keyword">static_cast&lt;</span><span class="keyword">const </span>Class*<span class="keyword">&gt;</span>(pInstance));</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    out_keys.<a class="code" href="../../da/d4c/classxii_array_base.htm#ab517ef07fbed3ecc766ac24394ae1fc8">Clear</a>();</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">auto</span> it = c.GetIterator(); it.IsValid(); ++it)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      out_keys.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(it.Key());</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  }</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160; </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  GetConstContainerFunc m_ConstGetter;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  GetContainerFunc      m_Getter;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;};</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_array_base_htm_a8b86f58a2097871da0e0b91eecc823e4"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">xiiArrayBase&lt; T, xiiDynamicArrayBase&lt; T &gt; &gt;::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:325</div></div>
<div class="ttc" id="aclassxii_typed_map_property_htm_a770caeb3323b72f5b38276e43b055545"><div class="ttname"><a href="../../dd/d84/classxii_typed_map_property.htm#a770caeb3323b72f5b38276e43b055545">xiiTypedMapProperty::GetSpecificType</a></div><div class="ttdeci">virtual const xiiRTTI * GetSpecificType() const override</div><div class="ttdoc">Returns the type information of the constant property. Use this to cast this property to a specific v...</div><div class="ttdef"><b>Definition:</b> MapProperty.h:21</div></div>
<div class="ttc" id="aclassxii_abstract_map_property_htm_a575144fc3b054676570a1756c0435e1c"><div class="ttname"><a href="../../da/d76/classxii_abstract_map_property.htm#a575144fc3b054676570a1756c0435e1c">xiiAbstractMapProperty::xiiAbstractMapProperty</a></div><div class="ttdeci">xiiAbstractMapProperty(xiiStringView sPropertyName)</div><div class="ttdoc">Passes the property name through to xiiAbstractProperty.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:350</div></div>
<div class="ttc" id="astructxii_variant_type_htm_a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0"><div class="ttname"><a href="../../dd/dba/structxii_variant_type.htm#a38d867476ba7137c38a09976ece9ee6ba364f81759beed1225a661eaf5bb0cea0">xiiVariantType::Invalid</a></div><div class="ttdeci">@ Invalid</div><div class="ttdoc">The variant stores no (valid) data at the moment.</div><div class="ttdef"><b>Definition:</b> VariantType.h:27</div></div>
<div class="ttc" id="aclassxii_write_accessor_map_property_htm_a574f3e27a7c204ebc0718c66811bdbcb"><div class="ttname"><a href="../../dc/d8a/classxii_write_accessor_map_property.htm#a574f3e27a7c204ebc0718c66811bdbcb">xiiWriteAccessorMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:141</div></div>
<div class="ttc" id="aclassxii_member_map_property_htm_a63ed73a15bbd8be66d249b5d673f13ce"><div class="ttname"><a href="../../d6/d4d/classxii_member_map_property.htm#a63ed73a15bbd8be66d249b5d673f13ce">xiiMemberMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, xiiStringView sKey) override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:244</div></div>
<div class="ttc" id="aclassxii_member_map_property_htm_a31a88012b190e19ce1160c034d5c144a"><div class="ttname"><a href="../../d6/d4d/classxii_member_map_property.htm#a31a88012b190e19ce1160c034d5c144a">xiiMemberMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, xiiStringView sKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:250</div></div>
<div class="ttc" id="aclassxii_accessor_map_property_htm_a5d8414c93fb7fa3874c3142bc13891c8"><div class="ttname"><a href="../../d2/dc6/classxii_accessor_map_property.htm#a5d8414c93fb7fa3874c3142bc13891c8">xiiAccessorMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:60</div></div>
<div class="ttc" id="aclassxii_member_map_property_htm_a039525c3fe1ce422cb7afb41382d25a8"><div class="ttname"><a href="../../d6/d4d/classxii_member_map_property.htm#a039525c3fe1ce422cb7afb41382d25a8">xiiMemberMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, xiiStringView sKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:255</div></div>
<div class="ttc" id="aclassxii_accessor_map_property_htm_acfe0379a62f3a0c2f67f75e2e6f7b9c6"><div class="ttname"><a href="../../d2/dc6/classxii_accessor_map_property.htm#acfe0379a62f3a0c2f67f75e2e6f7b9c6">xiiAccessorMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, xiiStringView sKey, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:75</div></div>
<div class="ttc" id="aclassxii_accessor_map_property_htm_af5b3ceed84635f5f75d40a8b116d6dc6"><div class="ttname"><a href="../../d2/dc6/classxii_accessor_map_property.htm#af5b3ceed84635f5f75d40a8b116d6dc6">xiiAccessorMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, xiiHybridArray&lt; xiiString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:98</div></div>
<div class="ttc" id="aclassxii_member_map_property_htm_a464a68ec4448d693c6f988d494c549d9"><div class="ttname"><a href="../../d6/d4d/classxii_member_map_property.htm#a464a68ec4448d693c6f988d494c549d9">xiiMemberMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:232</div></div>
<div class="ttc" id="aclassxii_accessor_map_property_htm_ab58685b681733b62ef496c1edc39251b"><div class="ttname"><a href="../../d2/dc6/classxii_accessor_map_property.htm#ab58685b681733b62ef496c1edc39251b">xiiAccessorMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:52</div></div>
<div class="ttc" id="astructxii_map_property_accessor_htm"><div class="ttname"><a href="../../d9/dbd/structxii_map_property_accessor.htm">xiiMapPropertyAccessor</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:199</div></div>
<div class="ttc" id="aclassxii_hybrid_array_htm"><div class="ttname"><a href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition:</b> HybridArray.h:11</div></div>
<div class="ttc" id="aclassxii_write_accessor_map_property_htm_a59f1eadba580250e2fdcf2724f57d6cb"><div class="ttname"><a href="../../dc/d8a/classxii_write_accessor_map_property.htm#a59f1eadba580250e2fdcf2724f57d6cb">xiiWriteAccessorMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, xiiHybridArray&lt; xiiString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:181</div></div>
<div class="ttc" id="astructxii_bitflags_htm_a89cb715ce2414f2e16675f5d8503cb1c"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#a89cb715ce2414f2e16675f5d8503cb1c">xiiBitflags::Add</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Add(const xiiBitflags&lt; T &gt; &amp;rhs)</div><div class="ttdoc">Sets the given flag.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:156</div></div>
<div class="ttc" id="aclassxii_typed_map_property_htm"><div class="ttname"><a href="../../dd/d84/classxii_typed_map_property.htm">xiiTypedMapProperty</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:10</div></div>
<div class="ttc" id="aclassxii_array_base_htm_ab517ef07fbed3ecc766ac24394ae1fc8"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#ab517ef07fbed3ecc766ac24394ae1fc8">xiiArrayBase&lt; T, xiiDynamicArrayBase&lt; T &gt; &gt;::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:176</div></div>
<div class="ttc" id="aclassxii_accessor_map_property_htm_a6c542a233633063a4e599140561394aa"><div class="ttname"><a href="../../d2/dc6/classxii_accessor_map_property.htm#a6c542a233633063a4e599140561394aa">xiiAccessorMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, xiiStringView sKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:87</div></div>
<div class="ttc" id="aclassxii_member_map_property_htm_a3cae9a434454464b9b4ec89bb5e99f32"><div class="ttname"><a href="../../d6/d4d/classxii_member_map_property.htm#a3cae9a434454464b9b4ec89bb5e99f32">xiiMemberMapProperty::GetKeys</a></div><div class="ttdeci">virtual void GetKeys(const void *pInstance, xiiHybridArray&lt; xiiString, 16 &gt; &amp;out_keys) const override</div><div class="ttdoc">Writes the content of the set to out_keys.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:265</div></div>
<div class="ttc" id="aclassxii_r_t_t_i_htm"><div class="ttname"><a href="../../db/d89/classxii_r_t_t_i.htm">xiiRTTI</a></div><div class="ttdoc">This class holds information about reflected types. Each instance represents one type that is known t...</div><div class="ttdef"><b>Definition:</b> RTTI.h:29</div></div>
<div class="ttc" id="aclassxii_member_map_property_htm_acbe4f4ba386f18c0a71c53f465739e25"><div class="ttname"><a href="../../d6/d4d/classxii_member_map_property.htm#acbe4f4ba386f18c0a71c53f465739e25">xiiMemberMapProperty::IsEmpty</a></div><div class="ttdeci">virtual bool IsEmpty(const void *pInstance) const override</div><div class="ttdoc">Returns whether the set is empty.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:230</div></div>
<div class="ttc" id="astructxii_string_view_htm"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></div><div class="ttdoc">xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...</div><div class="ttdef"><b>Definition:</b> StringView.h:23</div></div>
<div class="ttc" id="aclassxii_abstract_property_htm_a6cc3cf4e5893d65b88b67ba6c6c6f0c3"><div class="ttname"><a href="../../da/d25/classxii_abstract_property.htm#a6cc3cf4e5893d65b88b67ba6c6c6f0c3">xiiAbstractProperty::GetPropertyName</a></div><div class="ttdeci">xiiStringView GetPropertyName() const</div><div class="ttdoc">Returns the name of the property.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:158</div></div>
<div class="ttc" id="aclassxii_write_accessor_map_property_htm_a02a06ed9bf7472bf16bc75bb1ef0858c"><div class="ttname"><a href="../../dc/d8a/classxii_write_accessor_map_property.htm#a02a06ed9bf7472bf16bc75bb1ef0858c">xiiWriteAccessorMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, xiiStringView sKey, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:153</div></div>
<div class="ttc" id="aclassxii_write_accessor_map_property_htm_aa08e96567c5370aebca7cdf200275abb"><div class="ttname"><a href="../../dc/d8a/classxii_write_accessor_map_property.htm#aa08e96567c5370aebca7cdf200275abb">xiiWriteAccessorMapProperty::Contains</a></div><div class="ttdeci">virtual bool Contains(const void *pInstance, xiiStringView sKey) const override</div><div class="ttdoc">Returns whether the target of pObject is in the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:165</div></div>
<div class="ttc" id="aclassxii_write_accessor_map_property_htm_adeeb359402d745dbb9f494c84b7cd860"><div class="ttname"><a href="../../dc/d8a/classxii_write_accessor_map_property.htm#adeeb359402d745dbb9f494c84b7cd860">xiiWriteAccessorMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, xiiStringView sKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:170</div></div>
<div class="ttc" id="aclassxii_abstract_map_property_htm"><div class="ttname"><a href="../../da/d76/classxii_abstract_map_property.htm">xiiAbstractMapProperty</a></div><div class="ttdoc">The base class for a property that represents a set of values.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:346</div></div>
<div class="ttc" id="astructxii_type_traits_htm_a235ccaef9604d6990ab760b4b1d4500b"><div class="ttname"><a href="../../dd/d53/structxii_type_traits.htm#a235ccaef9604d6990ab760b4b1d4500b">xiiTypeTraits::NonConstReferenceType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; T &gt;::type &gt;::type NonConstReferenceType</div><div class="ttdoc">Removes reference and const qualifier.</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:222</div></div>
<div class="ttc" id="astructxii_container_sub_type_resolver_htm"><div class="ttname"><a href="../../d4/da5/structxii_container_sub_type_resolver.htm">xiiContainerSubTypeResolver</a></div><div class="ttdoc">Template that allows to probe a container for its element type.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:453</div></div>
<div class="ttc" id="astructxii_variant_type_deduction_htm"><div class="ttname"><a href="../../de/dec/structxii_variant_type_deduction.htm">xiiVariantTypeDeduction</a></div><div class="ttdoc">A helper struct to convert the C++ type, which is passed as the template argument,...</div><div class="ttdef"><b>Definition:</b> VariantType.h:110</div></div>
<div class="ttc" id="aclassxii_member_map_property_htm_ad54697c42f9628cbaf82ac9e268c5128"><div class="ttname"><a href="../../d6/d4d/classxii_member_map_property.htm#ad54697c42f9628cbaf82ac9e268c5128">xiiMemberMapProperty::Insert</a></div><div class="ttdeci">virtual void Insert(void *pInstance, xiiStringView sKey, const void *pObject) override</div><div class="ttdoc">Inserts the target of pObject into the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:238</div></div>
<div class="ttc" id="astructxii_type_traits_htm"><div class="ttname"><a href="../../dd/d53/structxii_type_traits.htm">xiiTypeTraits</a></div><div class="ttdef"><b>Definition:</b> TypeTraits.h:210</div></div>
<div class="ttc" id="aclassxii_write_accessor_map_property_htm_aa56c584e9b1cb114e8dfc225eb603ebc"><div class="ttname"><a href="../../dc/d8a/classxii_write_accessor_map_property.htm#aa56c584e9b1cb114e8dfc225eb603ebc">xiiWriteAccessorMapProperty::Clear</a></div><div class="ttdeci">virtual void Clear(void *pInstance) override</div><div class="ttdoc">Clears the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:143</div></div>
<div class="ttc" id="aclassxii_accessor_map_property_htm_a081a68f8912821e6f7c0e68f028f41df"><div class="ttname"><a href="../../d2/dc6/classxii_accessor_map_property.htm#a081a68f8912821e6f7c0e68f028f41df">xiiAccessorMapProperty::GetValue</a></div><div class="ttdeci">virtual bool GetValue(const void *pInstance, xiiStringView sKey, void *pObject) const override</div><div class="ttdoc">Writes element at index uiIndex to the target of pObject.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:93</div></div>
<div class="ttc" id="aclassxii_write_accessor_map_property_htm"><div class="ttname"><a href="../../dc/d8a/classxii_write_accessor_map_property.htm">xiiWriteAccessorMapProperty</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:117</div></div>
<div class="ttc" id="aclassxii_write_accessor_map_property_htm_a96e87fd9ff8eaae2a97ebd40a02706b0"><div class="ttname"><a href="../../dc/d8a/classxii_write_accessor_map_property.htm#a96e87fd9ff8eaae2a97ebd40a02706b0">xiiWriteAccessorMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, xiiStringView sKey) override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:159</div></div>
<div class="ttc" id="aclassxii_member_map_property_htm"><div class="ttname"><a href="../../d6/d4d/classxii_member_map_property.htm">xiiMemberMapProperty</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:211</div></div>
<div class="ttc" id="aclassxii_accessor_map_property_htm"><div class="ttname"><a href="../../d2/dc6/classxii_accessor_map_property.htm">xiiAccessorMapProperty</a></div><div class="ttdef"><b>Definition:</b> MapProperty.h:26</div></div>
<div class="ttc" id="aclassxii_accessor_map_property_htm_aef30d059c894e4c6df11072e9bda7fea"><div class="ttname"><a href="../../d2/dc6/classxii_accessor_map_property.htm#aef30d059c894e4c6df11072e9bda7fea">xiiAccessorMapProperty::Remove</a></div><div class="ttdeci">virtual void Remove(void *pInstance, xiiStringView sKey) override</div><div class="ttdoc">Removes the target of pObject from the set.</div><div class="ttdef"><b>Definition:</b> MapProperty.h:81</div></div>
<div class="ttc" id="astructxii_property_flags_htm_a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8"><div class="ttname"><a href="../../d6/d7c/structxii_property_flags.htm#a54fed1f9480831324a7b3840218228fba0c305b63c9d85ce290a8ca87c21859c8">xiiPropertyFlags::ReadOnly</a></div><div class="ttdeci">@ ReadOnly</div><div class="ttdoc">Can only be read but not modified.</div><div class="ttdef"><b>Definition:</b> AbstractProperty.h:63</div></div>
<div class="ttc" id="astructxii_type_traits_htm_a35ea12912392837d91ed5e0a18795343"><div class="ttname"><a href="../../dd/d53/structxii_type_traits.htm#a35ea12912392837d91ed5e0a18795343">xiiTypeTraits::NonConstReferencePointerType</a></div><div class="ttdeci">typename std::remove_const&lt; typename std::remove_reference&lt; typename std::remove_pointer&lt; T &gt;::type &gt;::type &gt;::type NonConstReferencePointerType</div><div class="ttdoc">Removes reference, const and pointer qualifier Note that this removes the const and reference of the ...</div><div class="ttdef"><b>Definition:</b> TypeTraits.h:229</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_f1e13142959a2e7970d979e1f6f7bcb1.htm">Reflection</a></li><li class="navelem"><a class="el" href="../../dir_44ac7f88d9b5593e444e5c7bf3d69918.htm">Implementation</a></li><li class="navelem"><b>MapProperty.h</b></li>
    <li class="footer">Generated on Mon Oct 9 2023 19:12:13 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Strings/Implementation/StringView_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d8/d9e/_string_view__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">StringView_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;XII_ALWAYS_INLINE constexpr <a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a>() = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#a11bc8362eb79f9b0625ec4ae4b9ff331">    5</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a>(<span class="keywordtype">char</span>* pStart) :</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;  m_pStart(pStart), m_pEnd(pStart + <a class="code" href="../../df/d65/classxii_string_utils.htm">xiiStringUtils</a>::GetStringElementCount(pStart))</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;{</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;constexpr XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a>(T pStart, <span class="keyword">typename</span> std::enable_if&lt;std::is_same&lt;T, const char*&gt;::value, <span class="keywordtype">int</span>&gt;::type*) :</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;  m_pStart(pStart), m_pEnd(pStart + <a class="code" href="../../df/d65/classxii_string_utils.htm">xiiStringUtils</a>::GetStringElementCount(pStart))</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;{</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;}</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#af2277e7ba768b19d360e8104d7df8e72">   17</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a>(<span class="keyword">const</span> T&amp;&amp; str, <span class="keyword">typename</span> std::enable_if&lt;std::is_same&lt;T, const char*&gt;::value == <span class="keyword">false</span> &amp;&amp; std::is_convertible&lt;T, const char*&gt;::value, <span class="keywordtype">int</span>&gt;::type*)</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  m_pStart = str;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  m_pEnd   = m_pStart + <a class="code" href="../../df/d65/classxii_string_utils.htm#af9de18eab321e420a8c5e42fbbe4703d">xiiStringUtils::GetStringElementCount</a>(m_pStart);</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;}</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#af3875ca0d5a318c8234cdcaf9d8e1cff">   23</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStart, <span class="keyword">const</span> <span class="keywordtype">char</span>* pEnd)</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  XII_ASSERT_DEV(pStart &lt;= pEnd, <span class="stringliteral">&quot;It should start BEFORE it ends.&quot;</span>);</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  m_pStart = pStart;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  m_pEnd   = pEnd;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;}</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#a9195d941dbf5f53d05e9c2ea8a6d823e">   31</a></span>&#160;constexpr XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* pStart, xiiUInt32 uiLength) :</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  m_pStart(pStart), m_pEnd(pStart + uiLength)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;{</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;}</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> (&amp;str)[N]) :</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  m_pStart(str), m_pEnd(str + N - 1)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  static_assert(N &gt; 0, <span class="stringliteral">&quot;Not a string literal&quot;</span>);</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  XII_ASSERT_DEBUG(str[N - 1] == <span class="charliteral">&#39;\0&#39;</span>, <span class="stringliteral">&quot;Not a string literal. Manually cast to &#39;const char*&#39; if you are trying to pass a const char fixed size array.&quot;</span>);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">template</span> &lt;<span class="keywordtype">size_t</span> N&gt;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a>(<span class="keywordtype">char</span> (&amp;str)[N])</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;{</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  m_pStart = str;</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  m_pEnd   = m_pStart + <a class="code" href="../../df/d65/classxii_string_utils.htm#af9de18eab321e420a8c5e42fbbe4703d">xiiStringUtils::GetStringElementCount</a>(str, str + N);</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160; </div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#ad34523dff4fda71d3161df5e1813bf0f">   51</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ad34523dff4fda71d3161df5e1813bf0f">xiiStringView::operator++</a>()</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="../../da/d9d/structxii_string_view.htm#abf924e23fd9bf647a96f8e5550037493">IsValid</a>())</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <a class="code" href="../../de/d05/classxii_unicode_utils.htm#ab0148dc981041aa9df7c0db35277928a">xiiUnicodeUtils::MoveToNextUtf8</a>(m_pStart, m_pEnd);</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;}</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160; </div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#a9b2ce9419f867fd41b7bebd3cc1d54e3">   59</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#a9b2ce9419f867fd41b7bebd3cc1d54e3">xiiStringView::operator+=</a>(xiiUInt32 d)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;{</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  <a class="code" href="../../de/d05/classxii_unicode_utils.htm#ab0148dc981041aa9df7c0db35277928a">xiiUnicodeUtils::MoveToNextUtf8</a>(m_pStart, m_pEnd, d);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;}</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#abf924e23fd9bf647a96f8e5550037493">   63</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#abf924e23fd9bf647a96f8e5550037493">xiiStringView::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keywordflow">return</span> (m_pStart != <span class="keyword">nullptr</span>) &amp;&amp; (m_pStart &lt; m_pEnd);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#ae78b5a1542b1486c767d3f95c0bfd774">   68</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ae78b5a1542b1486c767d3f95c0bfd774">xiiStringView::SetStartPosition</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szCurPos)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;{</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  XII_ASSERT_DEV((szCurPos &gt;= m_pStart) &amp;&amp; (szCurPos &lt;= m_pEnd), <span class="stringliteral">&quot;New start position must still be inside the view&#39;s range.&quot;</span>);</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  m_pStart = szCurPos;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;}</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; </div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#a84867e3b724dda616e405bf562ca7c75">   75</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#a84867e3b724dda616e405bf562ca7c75">xiiStringView::IsEmpty</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keywordflow">return</span> m_pStart == m_pEnd || <a class="code" href="../../df/d65/classxii_string_utils.htm#acb10982c595d5619ce53fdd89313202f">xiiStringUtils::IsNullOrEmpty</a>(m_pStart);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#a3eed1e0fcd7aa1a0af2ecab95c7870df">   80</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#a3eed1e0fcd7aa1a0af2ecab95c7870df">xiiStringView::IsEqual</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a39bb50553ad3fbca2c342abbca08fee5">xiiStringUtils::IsEqual</a>(m_pStart, sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), m_pEnd, sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#ae727f5c345e7420c72dfcc7fc032bcd2">   85</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ae727f5c345e7420c72dfcc7fc032bcd2">xiiStringView::IsEqual_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sOther)<span class="keyword"> const</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a1dc8270bac3a9e25cc33ddbe2e54befd">xiiStringUtils::IsEqual_NoCase</a>(m_pStart, sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), m_pEnd, sOther.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;}</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#ac5348af2124e5d51b5576bfc6eb5de4d">   90</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ac5348af2124e5d51b5576bfc6eb5de4d">xiiStringView::StartsWith</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#afb2538341d8cd31778bebdff947e2a59">xiiStringUtils::StartsWith</a>(m_pStart, sStartsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), m_pEnd, sStartsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;}</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#ab31f6dc792051eb0eb10d7a7a86ef835">   95</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ab31f6dc792051eb0eb10d7a7a86ef835">xiiStringView::StartsWith_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sStartsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#aad408d8e65febe01930e200bfd6f73dd">xiiStringUtils::StartsWith_NoCase</a>(m_pStart, sStartsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), m_pEnd, sStartsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;}</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#ab1f708598da36589b6f78a310a64d1d8">  100</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ab1f708598da36589b6f78a310a64d1d8">xiiStringView::EndsWith</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#a45aff821fa89198e5f80f8b3754e35c8">xiiStringUtils::EndsWith</a>(m_pStart, sEndsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), m_pEnd, sEndsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;}</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#a52fd2d8486836117adc183c9f734f536">  105</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#a52fd2d8486836117adc183c9f734f536">xiiStringView::EndsWith_NoCase</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sEndsWith)<span class="keyword"> const</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../df/d65/classxii_string_utils.htm#af760d3c50a964ef80a077e3a6c5c24f1">xiiStringUtils::EndsWith_NoCase</a>(m_pStart, sEndsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), m_pEnd, sEndsWith.<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;}</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#ab8e3cab7b427f8f870b367d23a5066b6">  110</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ab8e3cab7b427f8f870b367d23a5066b6">xiiStringView::Trim</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szTrimChars)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;{</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ab8e3cab7b427f8f870b367d23a5066b6">Trim</a>(szTrimChars, szTrimChars);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;}</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#aecc3e4dfa07b682a2366f476bd091564">  115</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#ab8e3cab7b427f8f870b367d23a5066b6">xiiStringView::Trim</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* szTrimCharsStart, <span class="keyword">const</span> <span class="keywordtype">char</span>* szTrimCharsEnd)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;{</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../da/d9d/structxii_string_view.htm#abf924e23fd9bf647a96f8e5550037493">IsValid</a>())</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <a class="code" href="../../df/d65/classxii_string_utils.htm#a610ef2231671f7958ef47889d4d24f2c">xiiStringUtils::Trim</a>(m_pStart, m_pEnd, szTrimCharsStart, szTrimCharsEnd);</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;}</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;constexpr XII_ALWAYS_INLINE <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> <span class="keyword">operator</span><span class="stringliteral">&quot;&quot;</span> _xiisv(<span class="keyword">const</span> <span class="keywordtype">char</span>* pString, <span class="keywordtype">size_t</span> len)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;{</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(pString, <span class="keyword">static_cast&lt;</span>xiiUInt32<span class="keyword">&gt;</span>(len));</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Container&gt;</div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="../../da/d9d/structxii_string_view.htm#aa95867ef0fbf875abe45fa8c9702c8f4">  129</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="../../da/d9d/structxii_string_view.htm#aa95867ef0fbf875abe45fa8c9702c8f4">xiiStringView::Split</a>(<span class="keywordtype">bool</span> bReturnEmptyStrings, Container&amp; Output, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator1, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator2 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator3 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator4 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator5 <span class="comment">/*= nullptr*/</span>, <span class="keyword">const</span> <span class="keywordtype">char</span>* szSeparator6 <span class="comment">/*= nullptr*/</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  Output.Clear();</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../da/d9d/structxii_string_view.htm#a84867e3b724dda616e405bf562ca7c75">IsEmpty</a>())</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keyword">const</span> xiiUInt32 uiParams = 6;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  <span class="keyword">const</span> <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> seps[uiParams] = {szSeparator1, szSeparator2, szSeparator3, szSeparator4, szSeparator5, szSeparator6};</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span>* szReadPos = <a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>();</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160; </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span>* szFoundPos      = xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;();</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    xiiInt32    iFoundSeparator = 0;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">for</span> (xiiInt32 i = 0; i &lt; uiParams; ++i)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    {</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;      <span class="keyword">const</span> <span class="keywordtype">char</span>* szFound = <a class="code" href="../../df/d65/classxii_string_utils.htm#a0fa20e8fc3fdb98e0166ff5c1b6e83e8">xiiStringUtils::FindSubString</a>(szReadPos, seps[i].<a class="code" href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">GetStartPointer</a>(), <a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>(), seps[i].<a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      <span class="keywordflow">if</span> ((szFound != <span class="keyword">nullptr</span>) &amp;&amp; (szFound &lt; szFoundPos))</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        szFoundPos      = szFound;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        iFoundSeparator = i;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="comment">// nothing found</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <span class="keywordflow">if</span> (szFoundPos == xiiUnicodeUtils::GetMaxStringEnd&lt;char&gt;())</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;      <span class="keyword">const</span> xiiUInt32 uiLen = <a class="code" href="../../df/d65/classxii_string_utils.htm#af9de18eab321e420a8c5e42fbbe4703d">xiiStringUtils::GetStringElementCount</a>(szReadPos, <a class="code" href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">GetEndPointer</a>());</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keywordflow">if</span> (bReturnEmptyStrings || (uiLen &gt; 0))</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        Output.PushBack(<a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView</a>(szReadPos, szReadPos + uiLen));</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    }</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keywordflow">if</span> (bReturnEmptyStrings || (szFoundPos &gt; szReadPos))</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      Output.PushBack(<a class="code" href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView</a>(szReadPos, szFoundPos));</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    szReadPos = szFoundPos + seps[iFoundSeparator].<a class="code" href="../../da/d9d/structxii_string_view.htm#ad238901b4ca0413dd5d8e28728c38144">GetElementCount</a>();</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;}</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator==(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> lhs, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> rhs)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;{</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../da/d9d/structxii_string_view.htm#a3eed1e0fcd7aa1a0af2ecab95c7870df">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;}</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160; </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator!=(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> lhs, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> rhs)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;{</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordflow">return</span> !lhs.<a class="code" href="../../da/d9d/structxii_string_view.htm#a3eed1e0fcd7aa1a0af2ecab95c7870df">IsEqual</a>(rhs);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> lhs, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> rhs)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;{</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../da/d9d/structxii_string_view.htm#ab6b5f4c7fdc35fa1aad794a36299c5f0">Compare</a>(rhs) &lt; 0;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;}</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&lt;=(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> lhs, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> rhs)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;{</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../da/d9d/structxii_string_view.htm#ab6b5f4c7fdc35fa1aad794a36299c5f0">Compare</a>(rhs) &lt;= 0;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;}</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> lhs, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> rhs)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../da/d9d/structxii_string_view.htm#ab6b5f4c7fdc35fa1aad794a36299c5f0">Compare</a>(rhs) &gt; 0;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;}</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">bool</span> operator&gt;=(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> lhs, <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> rhs)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;{</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <span class="keywordflow">return</span> lhs.<a class="code" href="../../da/d9d/structxii_string_view.htm#ab6b5f4c7fdc35fa1aad794a36299c5f0">Compare</a>(rhs) &gt;= 0;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="astructxii_string_view_htm_ac5348af2124e5d51b5576bfc6eb5de4d"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ac5348af2124e5d51b5576bfc6eb5de4d">xiiStringView::StartsWith</a></div><div class="ttdeci">bool StartsWith(xiiStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:90</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_af9de18eab321e420a8c5e42fbbe4703d"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#af9de18eab321e420a8c5e42fbbe4703d">xiiStringUtils::GetStringElementCount</a></div><div class="ttdeci">static constexpr xiiUInt32 GetStringElementCount(const T *pString)</div><div class="ttdoc">Returns the number of elements of type T that the string contains, until it hits an element that is z...</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:45</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_af760d3c50a964ef80a077e3a6c5c24f1"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#af760d3c50a964ef80a077e3a6c5c24f1">xiiStringUtils::EndsWith_NoCase</a></div><div class="ttdeci">static bool EndsWith_NoCase(const char *szString, const char *szEndsWith, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:579</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a39bb50553ad3fbca2c342abbca08fee5"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a39bb50553ad3fbca2c342abbca08fee5">xiiStringUtils::IsEqual</a></div><div class="ttdeci">static bool IsEqual(const char *pString1, const char *pString2, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (bitwise).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:127</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a0fa20e8fc3fdb98e0166ff5c1b6e83e8"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a0fa20e8fc3fdb98e0166ff5c1b6e83e8">xiiStringUtils::FindSubString</a></div><div class="ttdeci">static const char * FindSubString(const char *szSource, const char *szStringToFind, const char *pSourceEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:612</div></div>
<div class="ttc" id="astructxii_string_view_htm_ab8e3cab7b427f8f870b367d23a5066b6"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ab8e3cab7b427f8f870b367d23a5066b6">xiiStringView::Trim</a></div><div class="ttdeci">void Trim(const char *szTrimChars)</div><div class="ttdoc">Removes all characters from the start and end that appear in the given strings by adjusting the begin...</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:110</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a1dc8270bac3a9e25cc33ddbe2e54befd"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a1dc8270bac3a9e25cc33ddbe2e54befd">xiiStringUtils::IsEqual_NoCase</a></div><div class="ttdeci">static bool IsEqual_NoCase(const char *pString1, const char *pString2, const char *pString1End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *pString2End=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true, if the two given strings are identical (case-insensitive).</div><div class="ttdef"><b>Definition:</b> StringUtils_inl.h:142</div></div>
<div class="ttc" id="astructxii_string_view_htm_ad238901b4ca0413dd5d8e28728c38144"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ad238901b4ca0413dd5d8e28728c38144">xiiStringView::GetElementCount</a></div><div class="ttdeci">xiiUInt32 GetElementCount() const</div><div class="ttdoc">Returns the number of bytes from the start position up to its end.</div><div class="ttdef"><b>Definition:</b> StringView.h:83</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_aad408d8e65febe01930e200bfd6f73dd"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#aad408d8e65febe01930e200bfd6f73dd">xiiStringUtils::StartsWith_NoCase</a></div><div class="ttdeci">static bool StartsWith_NoCase(const char *szString, const char *szStartsWith, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith. Ignores case.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:539</div></div>
<div class="ttc" id="astructxii_string_view_htm_a9b2ce9419f867fd41b7bebd3cc1d54e3"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a9b2ce9419f867fd41b7bebd3cc1d54e3">xiiStringView::operator+=</a></div><div class="ttdeci">void operator+=(xiiUInt32 d)</div><div class="ttdoc">Advances the start forwards by d characters. Does not move it beyond the range's end.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:59</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a610ef2231671f7958ef47889d4d24f2c"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a610ef2231671f7958ef47889d4d24f2c">xiiStringUtils::Trim</a></div><div class="ttdeci">static void Trim(const char *&amp;pString, const char *&amp;pStringEnd, const char *szTrimCharsStart, const char *szTrimCharsEnd)</div><div class="ttdoc">Removes all characters at the start and end of the string that match the respective characters and up...</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:839</div></div>
<div class="ttc" id="astructxii_string_view_htm_a52fd2d8486836117adc183c9f734f536"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a52fd2d8486836117adc183c9f734f536">xiiStringView::EndsWith_NoCase</a></div><div class="ttdeci">bool EndsWith_NoCase(xiiStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string. Case insensitive.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:105</div></div>
<div class="ttc" id="astructxii_string_view_htm_ab31f6dc792051eb0eb10d7a7a86ef835"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ab31f6dc792051eb0eb10d7a7a86ef835">xiiStringView::StartsWith_NoCase</a></div><div class="ttdeci">bool StartsWith_NoCase(xiiStringView sStartsWith) const</div><div class="ttdoc">Returns true, if this string starts with the given string. Case insensitive.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:95</div></div>
<div class="ttc" id="astructxii_string_view_htm_ab6b5f4c7fdc35fa1aad794a36299c5f0"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ab6b5f4c7fdc35fa1aad794a36299c5f0">xiiStringView::Compare</a></div><div class="ttdeci">xiiInt32 Compare(xiiStringView sOther) const</div><div class="ttdoc">Compares this string with the other one. Returns 0 for equality, -1 if this string is 'smaller',...</div><div class="ttdef"><b>Definition:</b> StringView.cpp:31</div></div>
<div class="ttc" id="astructxii_string_view_htm_ae727f5c345e7420c72dfcc7fc032bcd2"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ae727f5c345e7420c72dfcc7fc032bcd2">xiiStringView::IsEqual_NoCase</a></div><div class="ttdeci">bool IsEqual_NoCase(xiiStringView sOther) const</div><div class="ttdoc">Compares this string view with the other string view for equality.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:85</div></div>
<div class="ttc" id="astructxii_string_view_htm_a3eed1e0fcd7aa1a0af2ecab95c7870df"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a3eed1e0fcd7aa1a0af2ecab95c7870df">xiiStringView::IsEqual</a></div><div class="ttdeci">bool IsEqual(xiiStringView sOther) const</div><div class="ttdoc">Compares this string view with the other string view for equality.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:80</div></div>
<div class="ttc" id="astructxii_string_view_htm_a84867e3b724dda616e405bf562ca7c75"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a84867e3b724dda616e405bf562ca7c75">xiiStringView::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether the string is an empty string.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:75</div></div>
<div class="ttc" id="astructxii_string_view_htm_ad34523dff4fda71d3161df5e1813bf0f"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ad34523dff4fda71d3161df5e1813bf0f">xiiStringView::operator++</a></div><div class="ttdeci">void operator++()</div><div class="ttdoc">Advances the start to the next character, unless the end of the range was reached.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:51</div></div>
<div class="ttc" id="astructxii_string_view_htm_ab1f708598da36589b6f78a310a64d1d8"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ab1f708598da36589b6f78a310a64d1d8">xiiStringView::EndsWith</a></div><div class="ttdeci">bool EndsWith(xiiStringView sEndsWith) const</div><div class="ttdoc">Returns true, if this string ends with the given string.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:100</div></div>
<div class="ttc" id="astructxii_string_view_htm"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></div><div class="ttdoc">xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...</div><div class="ttdef"><b>Definition:</b> StringView.h:23</div></div>
<div class="ttc" id="aclassxii_string_utils_htm"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm">xiiStringUtils</a></div><div class="ttdoc">Helper functions to work with UTF-8 strings (which include pure ASCII strings)</div><div class="ttdef"><b>Definition:</b> StringUtils.h:10</div></div>
<div class="ttc" id="astructxii_string_view_htm_ae78b5a1542b1486c767d3f95c0bfd774"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#ae78b5a1542b1486c767d3f95c0bfd774">xiiStringView::SetStartPosition</a></div><div class="ttdeci">void SetStartPosition(const char *szCurPos)</div><div class="ttdoc">Allows to set the start position to a different value.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:68</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_afb2538341d8cd31778bebdff947e2a59"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#afb2538341d8cd31778bebdff947e2a59">xiiStringUtils::StartsWith</a></div><div class="ttdeci">static bool StartsWith(const char *szString, const char *szStartsWith, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStartsWithEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString starts with the string given in szStartsWith.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:515</div></div>
<div class="ttc" id="aclassxii_unicode_utils_htm_ab0148dc981041aa9df7c0db35277928a"><div class="ttname"><a href="../../de/d05/classxii_unicode_utils.htm#ab0148dc981041aa9df7c0db35277928a">xiiUnicodeUtils::MoveToNextUtf8</a></div><div class="ttdeci">static void MoveToNextUtf8(const char *&amp;szUtf8, xiiUInt32 uiNumCharacters=1)</div><div class="ttdoc">Moves the given string pointer ahead to the next Utf8 character sequence.</div><div class="ttdef"><b>Definition:</b> UnicodeUtils_inl.h:197</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a45aff821fa89198e5f80f8b3754e35c8"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a45aff821fa89198e5f80f8b3754e35c8">xiiStringUtils::EndsWith</a></div><div class="ttdeci">static bool EndsWith(const char *szString, const char *szEndsWith, const char *pStringEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szEndsWithEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Returns true if szString ends with the string given in szEndsWith.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:563</div></div>
<div class="ttc" id="astructxii_string_view_htm_aa6f955408eb663e55c62fb0a57bb0743"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#aa6f955408eb663e55c62fb0a57bb0743">xiiStringView::xiiStringView</a></div><div class="ttdeci">constexpr xiiStringView()</div><div class="ttdoc">Default constructor creates an invalid view.</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_acb10982c595d5619ce53fdd89313202f"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#acb10982c595d5619ce53fdd89313202f">xiiStringUtils::IsNullOrEmpty</a></div><div class="ttdeci">static constexpr bool IsNullOrEmpty(const T *pString)</div><div class="ttdoc">Returns true, if the given string is a nullptr pointer or a string that immediately terminates with a...</div></div>
<div class="ttc" id="astructxii_string_view_htm_abf924e23fd9bf647a96f8e5550037493"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#abf924e23fd9bf647a96f8e5550037493">xiiStringView::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Returns true, if the current string pointed to is non empty.</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:63</div></div>
<div class="ttc" id="astructxii_string_view_htm_aa95867ef0fbf875abe45fa8c9702c8f4"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#aa95867ef0fbf875abe45fa8c9702c8f4">xiiStringView::Split</a></div><div class="ttdeci">void Split(bool bReturnEmptyStrings, Container &amp;Output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</div><div class="ttdoc">Fills the given container with xiiStringView's which represent each found substring....</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:129</div></div>
<div class="ttc" id="astructxii_string_view_htm_a65d3c651c35878985c1a637a45ce9bd1"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a65d3c651c35878985c1a637a45ce9bd1">xiiStringView::GetStartPointer</a></div><div class="ttdeci">const char * GetStartPointer() const</div><div class="ttdoc">Returns the start of the view range.</div><div class="ttdef"><b>Definition:</b> StringView.h:92</div></div>
<div class="ttc" id="astructxii_string_view_htm_aa3e949949e0bfaa74f35eacd56e040a6"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#aa3e949949e0bfaa74f35eacd56e040a6">xiiStringView::GetEndPointer</a></div><div class="ttdeci">const char * GetEndPointer() const</div><div class="ttdoc">Returns the end of the view range. This will point to the byte AFTER the last character.</div><div class="ttdef"><b>Definition:</b> StringView.h:98</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_b0d9e1007714c8956662e529025ab552.htm">Strings</a></li><li class="navelem"><a class="el" href="../../dir_92c52eb4981d7c3a6633b9c574fc9e8f.htm">Implementation</a></li><li class="navelem"><b>StringView_inl.h</b></li>
    <li class="footer">Generated on Sun Mar 12 2023 21:19:46 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

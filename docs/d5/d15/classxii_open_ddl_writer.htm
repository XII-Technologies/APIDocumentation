<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiOpenDdlWriter Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d5/d15/classxii_open_ddl_writer.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-types">Protected Types</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="../../d2/d11/classxii_open_ddl_writer-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiOpenDdlWriter Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>The base class for OpenDDL writers.  
 <a href="../../d5/d15/classxii_open_ddl_writer.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/d29/_open_ddl_writer_8h_source.htm">OpenDdlWriter.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dc/d00/structxii_open_ddl_writer_1_1_ddl_state.htm">DdlState</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ac6621e26be4f2ce08e8e66a41c372ff5"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ac6621e26be4f2ce08e8e66a41c372ff5">TypeStringMode</a> { <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ac6621e26be4f2ce08e8e66a41c372ff5a952358fc53c0167a1ea7354f338ed5af">TypeStringMode::Compliant</a>, 
<a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ac6621e26be4f2ce08e8e66a41c372ff5a5b3571429e97357bc5cd927384ed2d10">TypeStringMode::ShortenedUnsignedInt</a>, 
<a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ac6621e26be4f2ce08e8e66a41c372ff5ace42b65744e60ed9b32e7d4f750a66a5">TypeStringMode::Shortest</a>
 }</td></tr>
<tr class="separator:ac6621e26be4f2ce08e8e66a41c372ff5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0afc2aeb0d0cc77cd1f2dff0a9f38e79"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0afc2aeb0d0cc77cd1f2dff0a9f38e79">FloatPrecisionMode</a> { <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0afc2aeb0d0cc77cd1f2dff0a9f38e79a4b8123df4e2b3456270c11394adf7607">FloatPrecisionMode::Readable</a>, 
<a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0afc2aeb0d0cc77cd1f2dff0a9f38e79a1649aed298f99d587e2eb30c1db5946b">FloatPrecisionMode::Exact</a>
 }</td></tr>
<tr class="separator:a0afc2aeb0d0cc77cd1f2dff0a9f38e79"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a99e09f562cd5f514e5bd5ceb47c64832"><td class="memItemLeft" align="right" valign="top"><a id="a99e09f562cd5f514e5bd5ceb47c64832"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a99e09f562cd5f514e5bd5ceb47c64832">xiiOpenDdlWriter</a> ()</td></tr>
<tr class="memdesc:a99e09f562cd5f514e5bd5ceb47c64832"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor. <br /></td></tr>
<tr class="separator:a99e09f562cd5f514e5bd5ceb47c64832"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd9957dd8782a95a04ebd288c9e69480"><td class="memItemLeft" align="right" valign="top"><a id="afd9957dd8782a95a04ebd288c9e69480"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#afd9957dd8782a95a04ebd288c9e69480">SetOutputStream</a> (<a class="el" href="../../d0/d18/classxii_stream_writer.htm">xiiStreamWriter</a> *pOutput)</td></tr>
<tr class="memdesc:afd9957dd8782a95a04ebd288c9e69480"><td class="mdescLeft">&#160;</td><td class="mdescRight">All output is written to this binary stream. <br /></td></tr>
<tr class="separator:afd9957dd8782a95a04ebd288c9e69480"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e38e180f3f75113688bea3fde826f2f"><td class="memItemLeft" align="right" valign="top"><a id="a8e38e180f3f75113688bea3fde826f2f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a8e38e180f3f75113688bea3fde826f2f">SetCompactMode</a> (bool compact)</td></tr>
<tr class="memdesc:a8e38e180f3f75113688bea3fde826f2f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures how much whitespace is output. <br /></td></tr>
<tr class="separator:a8e38e180f3f75113688bea3fde826f2f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a973b5d28f8a9bc3b7977781d7cd20fb3"><td class="memItemLeft" align="right" valign="top"><a id="a973b5d28f8a9bc3b7977781d7cd20fb3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a973b5d28f8a9bc3b7977781d7cd20fb3">SetPrimitiveTypeStringMode</a> (<a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ac6621e26be4f2ce08e8e66a41c372ff5">TypeStringMode</a> mode)</td></tr>
<tr class="memdesc:a973b5d28f8a9bc3b7977781d7cd20fb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures how verbose the type strings are going to be written. <br /></td></tr>
<tr class="separator:a973b5d28f8a9bc3b7977781d7cd20fb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31938bc7d10de5f8f547b84af8704ec6"><td class="memItemLeft" align="right" valign="top"><a id="a31938bc7d10de5f8f547b84af8704ec6"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a31938bc7d10de5f8f547b84af8704ec6">SetFloatPrecisionMode</a> (<a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0afc2aeb0d0cc77cd1f2dff0a9f38e79">FloatPrecisionMode</a> mode)</td></tr>
<tr class="memdesc:a31938bc7d10de5f8f547b84af8704ec6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configures how float values are output. <br /></td></tr>
<tr class="separator:a31938bc7d10de5f8f547b84af8704ec6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dc3ad1803e0634640e55b90db0b916a"><td class="memItemLeft" align="right" valign="top"><a id="a8dc3ad1803e0634640e55b90db0b916a"></a>
<a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0afc2aeb0d0cc77cd1f2dff0a9f38e79">FloatPrecisionMode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a8dc3ad1803e0634640e55b90db0b916a">GetFloatPrecisionMode</a> () const</td></tr>
<tr class="memdesc:a8dc3ad1803e0634640e55b90db0b916a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns how float values are output. <br /></td></tr>
<tr class="separator:a8dc3ad1803e0634640e55b90db0b916a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a265f79c4c13ae619c087bd5ab11769d5"><td class="memItemLeft" align="right" valign="top"><a id="a265f79c4c13ae619c087bd5ab11769d5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a265f79c4c13ae619c087bd5ab11769d5">SetIndentation</a> (xiiInt8 iIndentation)</td></tr>
<tr class="memdesc:a265f79c4c13ae619c087bd5ab11769d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows to set the indentation. Negative values are possible. This makes it possible to set the indentation e.g. to -2, thus the output will only have indentation after a level of 3 has been reached. <br /></td></tr>
<tr class="separator:a265f79c4c13ae619c087bd5ab11769d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbaff5139fea67af1af8c9430235117b"><td class="memItemLeft" align="right" valign="top"><a id="afbaff5139fea67af1af8c9430235117b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#afbaff5139fea67af1af8c9430235117b">BeginObject</a> (const char *szType, const char *szName=nullptr, bool bGlobalName=false, bool bSingleLine=false)</td></tr>
<tr class="memdesc:afbaff5139fea67af1af8c9430235117b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins outputting an object. <br /></td></tr>
<tr class="separator:afbaff5139fea67af1af8c9430235117b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6082222d2f67b9d9663f071e5e145d5"><td class="memItemLeft" align="right" valign="top"><a id="af6082222d2f67b9d9663f071e5e145d5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#af6082222d2f67b9d9663f071e5e145d5">EndObject</a> ()</td></tr>
<tr class="memdesc:af6082222d2f67b9d9663f071e5e145d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends outputting an object. <br /></td></tr>
<tr class="separator:af6082222d2f67b9d9663f071e5e145d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c9938b14e8f54a27b7df1a8a21ad63d"><td class="memItemLeft" align="right" valign="top"><a id="a0c9938b14e8f54a27b7df1a8a21ad63d"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d">BeginPrimitiveList</a> (xiiOpenDdlPrimitiveType type, const char *szName=nullptr, bool bGlobalName=false)</td></tr>
<tr class="memdesc:a0c9938b14e8f54a27b7df1a8a21ad63d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Begins outputting a list of primitives of the given type. <br /></td></tr>
<tr class="separator:a0c9938b14e8f54a27b7df1a8a21ad63d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeec298a5ac8d267a9bfb9688c81f8148"><td class="memItemLeft" align="right" valign="top"><a id="aeec298a5ac8d267a9bfb9688c81f8148"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148">EndPrimitiveList</a> ()</td></tr>
<tr class="memdesc:aeec298a5ac8d267a9bfb9688c81f8148"><td class="mdescLeft">&#160;</td><td class="mdescRight">Ends outputting the list of primitives. <br /></td></tr>
<tr class="separator:aeec298a5ac8d267a9bfb9688c81f8148"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76b6b6a1b9cefab99af0926b93b3f348"><td class="memItemLeft" align="right" valign="top"><a id="a76b6b6a1b9cefab99af0926b93b3f348"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a76b6b6a1b9cefab99af0926b93b3f348">WriteBool</a> (const bool *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:a76b6b6a1b9cefab99af0926b93b3f348"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:a76b6b6a1b9cefab99af0926b93b3f348"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a037d252f6083e9a0be4a5e86348ad1a5"><td class="memItemLeft" align="right" valign="top"><a id="a037d252f6083e9a0be4a5e86348ad1a5"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a037d252f6083e9a0be4a5e86348ad1a5">WriteInt8</a> (const xiiInt8 *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:a037d252f6083e9a0be4a5e86348ad1a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:a037d252f6083e9a0be4a5e86348ad1a5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12adf91d432835e4300e36895eed4789"><td class="memItemLeft" align="right" valign="top"><a id="a12adf91d432835e4300e36895eed4789"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a12adf91d432835e4300e36895eed4789">WriteInt16</a> (const xiiInt16 *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:a12adf91d432835e4300e36895eed4789"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:a12adf91d432835e4300e36895eed4789"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59e53ef174cb36839c432340a813b75c"><td class="memItemLeft" align="right" valign="top"><a id="a59e53ef174cb36839c432340a813b75c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a59e53ef174cb36839c432340a813b75c">WriteInt32</a> (const xiiInt32 *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:a59e53ef174cb36839c432340a813b75c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:a59e53ef174cb36839c432340a813b75c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae155abe0b454917344bea772bb23b7d7"><td class="memItemLeft" align="right" valign="top"><a id="ae155abe0b454917344bea772bb23b7d7"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ae155abe0b454917344bea772bb23b7d7">WriteInt64</a> (const xiiInt64 *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:ae155abe0b454917344bea772bb23b7d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:ae155abe0b454917344bea772bb23b7d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59843b41b9a1238d3c4c46e17fb9d411"><td class="memItemLeft" align="right" valign="top"><a id="a59843b41b9a1238d3c4c46e17fb9d411"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a59843b41b9a1238d3c4c46e17fb9d411">WriteUInt8</a> (const xiiUInt8 *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:a59843b41b9a1238d3c4c46e17fb9d411"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:a59843b41b9a1238d3c4c46e17fb9d411"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e42d03749b164bf80f30e35b19b3318"><td class="memItemLeft" align="right" valign="top"><a id="a3e42d03749b164bf80f30e35b19b3318"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a3e42d03749b164bf80f30e35b19b3318">WriteUInt16</a> (const xiiUInt16 *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:a3e42d03749b164bf80f30e35b19b3318"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:a3e42d03749b164bf80f30e35b19b3318"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d2bc243051d5fee575ddf0bb6d872fe"><td class="memItemLeft" align="right" valign="top"><a id="a9d2bc243051d5fee575ddf0bb6d872fe"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a9d2bc243051d5fee575ddf0bb6d872fe">WriteUInt32</a> (const xiiUInt32 *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:a9d2bc243051d5fee575ddf0bb6d872fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:a9d2bc243051d5fee575ddf0bb6d872fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac853994517031fdd537cfb97c69a7012"><td class="memItemLeft" align="right" valign="top"><a id="ac853994517031fdd537cfb97c69a7012"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ac853994517031fdd537cfb97c69a7012">WriteUInt64</a> (const xiiUInt64 *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:ac853994517031fdd537cfb97c69a7012"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:ac853994517031fdd537cfb97c69a7012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acebb5218a9fa66b0c365682a7a174aad"><td class="memItemLeft" align="right" valign="top"><a id="acebb5218a9fa66b0c365682a7a174aad"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#acebb5218a9fa66b0c365682a7a174aad">WriteFloat</a> (const float *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:acebb5218a9fa66b0c365682a7a174aad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:acebb5218a9fa66b0c365682a7a174aad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aafcf4a78984857bda4b69ae3d46a6410"><td class="memItemLeft" align="right" valign="top"><a id="aafcf4a78984857bda4b69ae3d46a6410"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aafcf4a78984857bda4b69ae3d46a6410">WriteDouble</a> (const double *pValues, xiiUInt32 count=1)</td></tr>
<tr class="memdesc:aafcf4a78984857bda4b69ae3d46a6410"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a number of values to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:aafcf4a78984857bda4b69ae3d46a6410"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bc187396d7caf425dfe7ad251e73d0a"><td class="memItemLeft" align="right" valign="top"><a id="a4bc187396d7caf425dfe7ad251e73d0a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a4bc187396d7caf425dfe7ad251e73d0a">WriteString</a> (const <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> &amp;string)</td></tr>
<tr class="memdesc:a4bc187396d7caf425dfe7ad251e73d0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a single string to the primitive list. Can be called multiple times between <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0c9938b14e8f54a27b7df1a8a21ad63d" title="Begins outputting a list of primitives of the given type.">BeginPrimitiveList()</a> / <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#aeec298a5ac8d267a9bfb9688c81f8148" title="Ends outputting the list of primitives.">EndPrimitiveList()</a>. <br /></td></tr>
<tr class="separator:a4bc187396d7caf425dfe7ad251e73d0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a197c8b3dcdf5b4a5e75629aadb5e854c"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a197c8b3dcdf5b4a5e75629aadb5e854c">WriteBinaryAsString</a> (const void *pData, xiiUInt32 uiBytes)</td></tr>
<tr class="memdesc:a197c8b3dcdf5b4a5e75629aadb5e854c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes a single string to the primitive list, but the value is a HEX representation of the given binary data.  <a href="../../d5/d15/classxii_open_ddl_writer.htm#a197c8b3dcdf5b4a5e75629aadb5e854c">More...</a><br /></td></tr>
<tr class="separator:a197c8b3dcdf5b4a5e75629aadb5e854c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-types"></a>
Protected Types</h2></td></tr>
<tr class="memitem:a2b15f2c81ba2ef64d083c21893fee872"><td class="memItemLeft" align="right" valign="top"><a id="a2b15f2c81ba2ef64d083c21893fee872"></a>enum &#160;</td><td class="memItemRight" valign="bottom"><b>State</b> { <br />
&#160;&#160;<b>Invalid</b> = -5, 
<b>Empty</b> = -4, 
<b>ObjectSingleLine</b> = -3, 
<b>ObjectMultiLine</b> = -2, 
<br />
&#160;&#160;<b>ObjectStart</b> = -1, 
<b>PrimitivesBool</b> = 0, 
<b>PrimitivesInt8</b>, 
<b>PrimitivesInt16</b>, 
<br />
&#160;&#160;<b>PrimitivesInt32</b>, 
<b>PrimitivesInt64</b>, 
<b>PrimitivesUInt8</b>, 
<b>PrimitivesUInt16</b>, 
<br />
&#160;&#160;<b>PrimitivesUInt32</b>, 
<b>PrimitivesUInt64</b>, 
<b>PrimitivesFloat</b>, 
<b>PrimitivesDouble</b>, 
<br />
&#160;&#160;<b>PrimitivesString</b>
<br />
 }</td></tr>
<tr class="separator:a2b15f2c81ba2ef64d083c21893fee872"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a63090a3d21e86e9a1ef1ec6162948e9e"><td class="memItemLeft" align="right" valign="top"><a id="a63090a3d21e86e9a1ef1ec6162948e9e"></a>
XII_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputString</b> (const char *sz)</td></tr>
<tr class="separator:a63090a3d21e86e9a1ef1ec6162948e9e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade74245e168db3b24108d53e2d785a64"><td class="memItemLeft" align="right" valign="top"><a id="ade74245e168db3b24108d53e2d785a64"></a>
XII_ALWAYS_INLINE void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputString</b> (const char *sz, xiiUInt32 uiElementCount)</td></tr>
<tr class="separator:ade74245e168db3b24108d53e2d785a64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3403ced4e409bd37e262c46c01e4596b"><td class="memItemLeft" align="right" valign="top"><a id="a3403ced4e409bd37e262c46c01e4596b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputEscapedString</b> (const <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> &amp;string)</td></tr>
<tr class="separator:a3403ced4e409bd37e262c46c01e4596b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab014f48d53595b9dd3f3d8d53a352d19"><td class="memItemLeft" align="right" valign="top"><a id="ab014f48d53595b9dd3f3d8d53a352d19"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputIndentation</b> ()</td></tr>
<tr class="separator:ab014f48d53595b9dd3f3d8d53a352d19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab78d28d274580faa61288786563c0be6"><td class="memItemLeft" align="right" valign="top"><a id="ab78d28d274580faa61288786563c0be6"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputPrimitiveTypeNameCompliant</b> (xiiOpenDdlPrimitiveType type)</td></tr>
<tr class="separator:ab78d28d274580faa61288786563c0be6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a252eddea0c21076a3b3d50dbf5259dac"><td class="memItemLeft" align="right" valign="top"><a id="a252eddea0c21076a3b3d50dbf5259dac"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputPrimitiveTypeNameShort</b> (xiiOpenDdlPrimitiveType type)</td></tr>
<tr class="separator:a252eddea0c21076a3b3d50dbf5259dac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4967dffb3400a9d5105bbf4b2337716e"><td class="memItemLeft" align="right" valign="top"><a id="a4967dffb3400a9d5105bbf4b2337716e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputPrimitiveTypeNameShortest</b> (xiiOpenDdlPrimitiveType type)</td></tr>
<tr class="separator:a4967dffb3400a9d5105bbf4b2337716e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5874be6ebfaa8f40867a6e38492e7abe"><td class="memItemLeft" align="right" valign="top"><a id="a5874be6ebfaa8f40867a6e38492e7abe"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>WritePrimitiveType</b> (xiiOpenDdlWriter::State exp)</td></tr>
<tr class="separator:a5874be6ebfaa8f40867a6e38492e7abe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c547ec1f2f1430db462f871d0f84a21"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a4c547ec1f2f1430db462f871d0f84a21">OutputObjectName</a> (const char *szName, bool bGlobalName)</td></tr>
<tr class="separator:a4c547ec1f2f1430db462f871d0f84a21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6d74fabe4cae1517246e2e0c9284f55c"><td class="memItemLeft" align="right" valign="top"><a id="a6d74fabe4cae1517246e2e0c9284f55c"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>WriteBinaryAsHex</b> (const void *pData, xiiUInt32 uiBytes)</td></tr>
<tr class="separator:a6d74fabe4cae1517246e2e0c9284f55c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7dc9c8f0fda23d6f3f270352451761d3"><td class="memItemLeft" align="right" valign="top"><a id="a7dc9c8f0fda23d6f3f270352451761d3"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>OutputObjectBeginning</b> ()</td></tr>
<tr class="separator:a7dc9c8f0fda23d6f3f270352451761d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a33edd7ab535c693eaa8156f2bb7ad6be"><td class="memItemLeft" align="right" valign="top"><a id="a33edd7ab535c693eaa8156f2bb7ad6be"></a>
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><b>m_iIndentation</b></td></tr>
<tr class="separator:a33edd7ab535c693eaa8156f2bb7ad6be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeda456cf8764f3b39e9427c6d6b29dca"><td class="memItemLeft" align="right" valign="top"><a id="aeda456cf8764f3b39e9427c6d6b29dca"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>m_bCompactMode</b></td></tr>
<tr class="separator:aeda456cf8764f3b39e9427c6d6b29dca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31194f81a74d8715fada56210e0439dc"><td class="memItemLeft" align="right" valign="top"><a id="a31194f81a74d8715fada56210e0439dc"></a>
<a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ac6621e26be4f2ce08e8e66a41c372ff5">TypeStringMode</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_TypeStringMode</b></td></tr>
<tr class="separator:a31194f81a74d8715fada56210e0439dc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1208a8e66a2a9ed8e9af1b05a7331a34"><td class="memItemLeft" align="right" valign="top"><a id="a1208a8e66a2a9ed8e9af1b05a7331a34"></a>
<a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0afc2aeb0d0cc77cd1f2dff0a9f38e79">FloatPrecisionMode</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_FloatPrecisionMode</b></td></tr>
<tr class="separator:a1208a8e66a2a9ed8e9af1b05a7331a34"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a607262c59f249ea2cf2e363dec72f7c7"><td class="memItemLeft" align="right" valign="top"><a id="a607262c59f249ea2cf2e363dec72f7c7"></a>
<a class="el" href="../../d0/d18/classxii_stream_writer.htm">xiiStreamWriter</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>m_pOutput</b></td></tr>
<tr class="separator:a607262c59f249ea2cf2e363dec72f7c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a861bfeecbf8e1277ef32e127d05df364"><td class="memItemLeft" align="right" valign="top"><a id="a861bfeecbf8e1277ef32e127d05df364"></a>
<a class="el" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a>&#160;</td><td class="memItemRight" valign="bottom"><b>m_sTemp</b></td></tr>
<tr class="separator:a861bfeecbf8e1277ef32e127d05df364"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a46b5270b49d48e0007d5a0ea5eec9bcd"><td class="memItemLeft" align="right" valign="top"><a id="a46b5270b49d48e0007d5a0ea5eec9bcd"></a>
<a class="el" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray</a>&lt; <a class="el" href="../../dc/d00/structxii_open_ddl_writer_1_1_ddl_state.htm">DdlState</a>, 16 &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>m_StateStack</b></td></tr>
<tr class="separator:a46b5270b49d48e0007d5a0ea5eec9bcd"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>The base class for OpenDDL writers. </p>
<p>Declares a common interface for writing OpenDDL files. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a0afc2aeb0d0cc77cd1f2dff0a9f38e79"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0afc2aeb0d0cc77cd1f2dff0a9f38e79">&#9670;&nbsp;</a></span>FloatPrecisionMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a0afc2aeb0d0cc77cd1f2dff0a9f38e79">xiiOpenDdlWriter::FloatPrecisionMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="a0afc2aeb0d0cc77cd1f2dff0a9f38e79a4b8123df4e2b3456270c11394adf7607"></a>Readable&#160;</td><td class="fielddoc"><p>Float values are printed as readable numbers. Precision might get lost though. </p>
</td></tr>
<tr><td class="fieldname"><a id="a0afc2aeb0d0cc77cd1f2dff0a9f38e79a1649aed298f99d587e2eb30c1db5946b"></a>Exact&#160;</td><td class="fielddoc"><p>Float values are printed as HEX, representing the exact binary data. </p>
</td></tr>
</table>

</div>
</div>
<a id="ac6621e26be4f2ce08e8e66a41c372ff5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac6621e26be4f2ce08e8e66a41c372ff5">&#9670;&nbsp;</a></span>TypeStringMode</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#ac6621e26be4f2ce08e8e66a41c372ff5">xiiOpenDdlWriter::TypeStringMode</a></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">strong</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><a id="ac6621e26be4f2ce08e8e66a41c372ff5a952358fc53c0167a1ea7354f338ed5af"></a>Compliant&#160;</td><td class="fielddoc"><p>All primitive types are written as the OpenDDL standard defines them (very verbose) </p>
</td></tr>
<tr><td class="fieldname"><a id="ac6621e26be4f2ce08e8e66a41c372ff5a5b3571429e97357bc5cd927384ed2d10"></a>ShortenedUnsignedInt&#160;</td><td class="fielddoc"><p>unsigned_intX is shortened to uintX </p>
</td></tr>
<tr><td class="fieldname"><a id="ac6621e26be4f2ce08e8e66a41c372ff5ace42b65744e60ed9b32e7d4f750a66a5"></a>Shortest&#160;</td><td class="fielddoc"><p>All primitive type names are shortened to one or two characters: i1, i2, i3, i4, u1, u2, u3, u4, b, s, f, d (int, uint, bool, string, float, double) </p>
</td></tr>
</table>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4c547ec1f2f1430db462f871d0f84a21"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4c547ec1f2f1430db462f871d0f84a21">&#9670;&nbsp;</a></span>OutputObjectName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiOpenDdlWriter::OutputObjectName </td>
          <td>(</td>
          <td class="paramtype">const char *&#160;</td>
          <td class="paramname"><em>szName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bGlobalName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000015">Test:</a></b></dt><dd>This code path is untested </dd></dl>

</div>
</div>
<a id="a197c8b3dcdf5b4a5e75629aadb5e854c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a197c8b3dcdf5b4a5e75629aadb5e854c">&#9670;&nbsp;</a></span>WriteBinaryAsString()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiOpenDdlWriter::WriteBinaryAsString </td>
          <td>(</td>
          <td class="paramtype">const void *&#160;</td>
          <td class="paramname"><em>pData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiBytes</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Writes a single string to the primitive list, but the value is a HEX representation of the given binary data. </p>
<dl class="test"><dt><b><a class="el" href="../../d4/df6/test.htm#_test000016">Test:</a></b></dt><dd><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm#a197c8b3dcdf5b4a5e75629aadb5e854c" title="Writes a single string to the primitive list, but the value is a HEX representation of the given bina...">xiiOpenDdlWriter::WriteBinaryAsString</a> </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/IO/<a class="el" href="../../d3/d29/_open_ddl_writer_8h_source.htm">OpenDdlWriter.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/IO/Implementation/OpenDdlWriter.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d5/d15/classxii_open_ddl_writer.htm">xiiOpenDdlWriter</a></li>
    <li class="footer">Generated on Sun Mar 12 2023 21:19:58 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

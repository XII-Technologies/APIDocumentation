<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiImageFormat Struct Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d5/dd3/structxii_image_format.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="../../db/dc9/structxii_image_format-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiImageFormat Struct Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Enum describing the encoding format of the pixels of an image.  
 <a href="../../d5/dd3/structxii_image_format.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/d5d/_image_format_8h_source.htm">ImageFormat.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a005ef22274255637febbc13f075b9e38"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> : xiiUInt16 { <br />
&#160;&#160;<b>UNKNOWN</b>, 
<b>R32G32B32A32_FLOAT</b>, 
<b>R32G32B32A32_UINT</b>, 
<b>R32G32B32A32_SINT</b>, 
<br />
&#160;&#160;<b>R32G32B32_FLOAT</b>, 
<b>R32G32B32_UINT</b>, 
<b>R32G32B32_SINT</b>, 
<b>R16G16B16A16_FLOAT</b>, 
<br />
&#160;&#160;<b>R16G16B16A16_UNORM</b>, 
<b>R16G16B16A16_UINT</b>, 
<b>R16G16B16A16_SNORM</b>, 
<b>R16G16B16A16_SINT</b>, 
<br />
&#160;&#160;<b>R16G16B16_UNORM</b>, 
<b>R32G32_FLOAT</b>, 
<b>R32G32_UINT</b>, 
<b>R32G32_SINT</b>, 
<br />
&#160;&#160;<b>D32_FLOAT_S8X24_UINT</b>, 
<b>R10G10B10A2_UNORM</b>, 
<b>R10G10B10A2_UINT</b>, 
<b>R11G11B10_FLOAT</b>, 
<br />
&#160;&#160;<b>R8G8B8A8_UNORM</b>, 
<b>R8G8B8A8_UNORM_SRGB</b>, 
<b>R8G8B8A8_UINT</b>, 
<b>R8G8B8A8_SNORM</b>, 
<br />
&#160;&#160;<b>R8G8B8A8_SINT</b>, 
<b>B8G8R8A8_UNORM</b>, 
<b>B8G8R8A8_UNORM_SRGB</b>, 
<b>B8G8R8X8_UNORM</b>, 
<br />
&#160;&#160;<b>B8G8R8X8_UNORM_SRGB</b>, 
<b>R16G16_FLOAT</b>, 
<b>R16G16_UNORM</b>, 
<b>R16G16_UINT</b>, 
<br />
&#160;&#160;<b>R16G16_SNORM</b>, 
<b>R16G16_SINT</b>, 
<b>D32_FLOAT</b>, 
<b>R32_FLOAT</b>, 
<br />
&#160;&#160;<b>R32_UINT</b>, 
<b>R32_SINT</b>, 
<b>D24_UNORM_S8_UINT</b>, 
<b>R8G8B8_UNORM</b>, 
<br />
&#160;&#160;<b>R8G8B8_UNORM_SRGB</b>, 
<b>B8G8R8_UNORM</b>, 
<b>B8G8R8_UNORM_SRGB</b>, 
<b>R8G8_UNORM</b>, 
<br />
&#160;&#160;<b>R8G8_UINT</b>, 
<b>R8G8_SNORM</b>, 
<b>R8G8_SINT</b>, 
<b>R16_FLOAT</b>, 
<br />
&#160;&#160;<b>D16_UNORM</b>, 
<b>R16_UNORM</b>, 
<b>R16_UINT</b>, 
<b>R16_SNORM</b>, 
<br />
&#160;&#160;<b>R16_SINT</b>, 
<b>R8_UNORM</b>, 
<b>R8_UINT</b>, 
<b>R8_SNORM</b>, 
<br />
&#160;&#160;<b>R8_SINT</b>, 
<b>BC1_UNORM</b>, 
<b>BC1_UNORM_SRGB</b>, 
<b>BC2_UNORM</b>, 
<br />
&#160;&#160;<b>BC2_UNORM_SRGB</b>, 
<b>BC3_UNORM</b>, 
<b>BC3_UNORM_SRGB</b>, 
<b>BC4_UNORM</b>, 
<br />
&#160;&#160;<b>BC4_SNORM</b>, 
<b>BC5_UNORM</b>, 
<b>BC5_SNORM</b>, 
<b>BC6H_UF16</b>, 
<br />
&#160;&#160;<b>BC6H_SF16</b>, 
<b>BC7_UNORM</b>, 
<b>BC7_UNORM_SRGB</b>, 
<b>ASTC_4x4_UNORM</b>, 
<br />
&#160;&#160;<b>ASTC_4x4_UNORM_SRGB</b>, 
<b>ASTC_5x4_UNORM</b>, 
<b>ASTC_5x4_UNORM_SRGB</b>, 
<b>ASTC_5x5_UNORM</b>, 
<br />
&#160;&#160;<b>ASTC_5x5_UNORM_SRGB</b>, 
<b>ASTC_6x5_UNORM</b>, 
<b>ASTC_6x5_UNORM_SRGB</b>, 
<b>ASTC_6x6_UNORM</b>, 
<br />
&#160;&#160;<b>ASTC_6x6_UNORM_SRGB</b>, 
<b>ASTC_8x5_UNORM</b>, 
<b>ASTC_8x5_UNORM_SRGB</b>, 
<b>ASTC_8x6_UNORM</b>, 
<br />
&#160;&#160;<b>ASTC_8x6_UNORM_SRGB</b>, 
<b>ASTC_10x5_UNORM</b>, 
<b>ASTC_10x5_UNORM_SRGB</b>, 
<b>ASTC_10x6_UNORM</b>, 
<br />
&#160;&#160;<b>ASTC_10x6_UNORM_SRGB</b>, 
<b>ASTC_8x8_UNORM</b>, 
<b>ASTC_8x8_UNORM_SRGB</b>, 
<b>ASTC_10x8_UNORM</b>, 
<br />
&#160;&#160;<b>ASTC_10x8_UNORM_SRGB</b>, 
<b>ASTC_10x10_UNORM</b>, 
<b>ASTC_10x10_UNORM_SRGB</b>, 
<b>ASTC_12x10_UNORM</b>, 
<br />
&#160;&#160;<b>ASTC_12x10_UNORM_SRGB</b>, 
<b>ASTC_12x12_UNORM</b>, 
<b>ASTC_12x12_UNORM_SRGB</b>, 
<b>B4G4R4A4_UNORM</b>, 
<br />
&#160;&#160;<b>B4G4R4A4_UNORM_SRGB</b>, 
<b>A4B4G4R4_UNORM</b>, 
<b>A4B4G4R4_UNORM_SRGB</b>, 
<b>B5G6R5_UNORM</b>, 
<br />
&#160;&#160;<b>B5G6R5_UNORM_SRGB</b>, 
<b>B5G5R5A1_UNORM</b>, 
<b>B5G5R5A1_UNORM_SRGB</b>, 
<b>B5G5R5X1_UNORM</b>, 
<br />
&#160;&#160;<b>B5G5R5X1_UNORM_SRGB</b>, 
<b>A1B5G5R5_UNORM</b>, 
<b>A1B5G5R5_UNORM_SRGB</b>, 
<b>X1B5G5R5_UNORM</b>, 
<br />
&#160;&#160;<b>X1B5G5R5_UNORM_SRGB</b>, 
<b>NV12</b>, 
<b>NUM_FORMATS</b>, 
<b>Default</b> = UNKNOWN
<br />
 }</td></tr>
<tr class="memdesc:a005ef22274255637febbc13f075b9e38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Enum describing the encoding format of the pixels of an image.  <a href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">More...</a><br /></td></tr>
<tr class="separator:a005ef22274255637febbc13f075b9e38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11c71ca6e5f13f321975bfce72e83e22"><td class="memItemLeft" align="right" valign="top"><a id="a11c71ca6e5f13f321975bfce72e83e22"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>StorageType</b> = xiiUInt16</td></tr>
<tr class="separator:a11c71ca6e5f13f321975bfce72e83e22"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a0b24ab7296f7ad5969bf1171382f722f"><td class="memItemLeft" align="right" valign="top">static const char *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a0b24ab7296f7ad5969bf1171382f722f">GetName</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a0b24ab7296f7ad5969bf1171382f722f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the name of the given format.  <a href="../../d5/dd3/structxii_image_format.htm#a0b24ab7296f7ad5969bf1171382f722f">More...</a><br /></td></tr>
<tr class="separator:a0b24ab7296f7ad5969bf1171382f722f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad8b5dd6a844aa3a0ceb758e571918a37"><td class="memItemLeft" align="right" valign="top"><a id="ad8b5dd6a844aa3a0ceb758e571918a37"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#ad8b5dd6a844aa3a0ceb758e571918a37">GetPlaneCount</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:ad8b5dd6a844aa3a0ceb758e571918a37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns number of planes in the format, or 1 for non-planar formats. <br /></td></tr>
<tr class="separator:ad8b5dd6a844aa3a0ceb758e571918a37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae32db3e7b2d31e9a772ad308a8ca5b46"><td class="memItemLeft" align="right" valign="top"><a id="ae32db3e7b2d31e9a772ad308a8ca5b46"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#ae32db3e7b2d31e9a772ad308a8ca5b46">GetBitsPerPixel</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:ae32db3e7b2d31e9a772ad308a8ca5b46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits per pixel of the given format. If the format's bpp is non-integral, the returned value rounded up to to the next integer. <br /></td></tr>
<tr class="separator:ae32db3e7b2d31e9a772ad308a8ca5b46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa371d37d40ebb1d57205bdba6f6fd3ec"><td class="memItemLeft" align="right" valign="top"><a id="aa371d37d40ebb1d57205bdba6f6fd3ec"></a>
static float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#aa371d37d40ebb1d57205bdba6f6fd3ec">GetExactBitsPerPixel</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:aa371d37d40ebb1d57205bdba6f6fd3ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Exact pixel size in bits. May be non-integral for some compressed formats. <br /></td></tr>
<tr class="separator:aa371d37d40ebb1d57205bdba6f6fd3ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2097b10e42837bce466f17e0ae6478d"><td class="memItemLeft" align="right" valign="top"><a id="af2097b10e42837bce466f17e0ae6478d"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#af2097b10e42837bce466f17e0ae6478d">GetBitsPerBlock</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:af2097b10e42837bce466f17e0ae6478d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the block size in bits. For uncompressed formats, a block is considered a single pixel. <br /></td></tr>
<tr class="separator:af2097b10e42837bce466f17e0ae6478d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad65fb07197b6c514c275c8fcd7730bc0"><td class="memItemLeft" align="right" valign="top"><a id="ad65fb07197b6c514c275c8fcd7730bc0"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#ad65fb07197b6c514c275c8fcd7730bc0">GetNumChannels</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:ad65fb07197b6c514c275c8fcd7730bc0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Number of channels (r, g, b, a, depth, stencil) supported by this format. <br /></td></tr>
<tr class="separator:ad65fb07197b6c514c275c8fcd7730bc0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af30b905b422f617ff524a59f72fc3683"><td class="memItemLeft" align="right" valign="top"><a id="af30b905b422f617ff524a59f72fc3683"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#af30b905b422f617ff524a59f72fc3683">GetChannelMask</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, <a class="el" href="../../d7/d59/structxii_image_format_channel.htm#a135e628aac907514ccb490ccf690155a">xiiImageFormatChannel::Enum</a> c)</td></tr>
<tr class="memdesc:af30b905b422f617ff524a59f72fc3683"><td class="mdescLeft">&#160;</td><td class="mdescRight">Bitmask of each channel of the format. This is not defined for some formats, and may return 0. <br /></td></tr>
<tr class="separator:af30b905b422f617ff524a59f72fc3683"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8cea15ed3b315d63d2264fde08452607"><td class="memItemLeft" align="right" valign="top"><a id="a8cea15ed3b315d63d2264fde08452607"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a8cea15ed3b315d63d2264fde08452607">GetBitsPerChannel</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, <a class="el" href="../../d7/d59/structxii_image_format_channel.htm#a135e628aac907514ccb490ccf690155a">xiiImageFormatChannel::Enum</a> c)</td></tr>
<tr class="memdesc:a8cea15ed3b315d63d2264fde08452607"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits for each channel of the format. <br /></td></tr>
<tr class="separator:a8cea15ed3b315d63d2264fde08452607"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62b2d6e18fa0ecffbdad436500bcd9d2"><td class="memItemLeft" align="right" valign="top"><a id="a62b2d6e18fa0ecffbdad436500bcd9d2"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a62b2d6e18fa0ecffbdad436500bcd9d2">GetRedMask</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a62b2d6e18fa0ecffbdad436500bcd9d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">If applicable, returns a bitmask for the red component of the format. <br /></td></tr>
<tr class="separator:a62b2d6e18fa0ecffbdad436500bcd9d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a37c6cc74ed68bbb57a5b34606180f82d"><td class="memItemLeft" align="right" valign="top"><a id="a37c6cc74ed68bbb57a5b34606180f82d"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a37c6cc74ed68bbb57a5b34606180f82d">GetGreenMask</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a37c6cc74ed68bbb57a5b34606180f82d"><td class="mdescLeft">&#160;</td><td class="mdescRight">If applicable, returns a bitmask for the green component of the format. <br /></td></tr>
<tr class="separator:a37c6cc74ed68bbb57a5b34606180f82d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c5f9de3a60dcde2df2b6c027685d921"><td class="memItemLeft" align="right" valign="top"><a id="a8c5f9de3a60dcde2df2b6c027685d921"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a8c5f9de3a60dcde2df2b6c027685d921">GetBlueMask</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a8c5f9de3a60dcde2df2b6c027685d921"><td class="mdescLeft">&#160;</td><td class="mdescRight">If applicable, returns a bitmask for the blue component of the format. <br /></td></tr>
<tr class="separator:a8c5f9de3a60dcde2df2b6c027685d921"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2c915fa3078f8ec2090eab5df5f5c02"><td class="memItemLeft" align="right" valign="top"><a id="aa2c915fa3078f8ec2090eab5df5f5c02"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#aa2c915fa3078f8ec2090eab5df5f5c02">GetAlphaMask</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:aa2c915fa3078f8ec2090eab5df5f5c02"><td class="mdescLeft">&#160;</td><td class="mdescRight">If applicable, returns a bitmask for the alpha component of the format. <br /></td></tr>
<tr class="separator:aa2c915fa3078f8ec2090eab5df5f5c02"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab084c14c97939ab228e68934b3d2840c"><td class="memItemLeft" align="right" valign="top"><a id="ab084c14c97939ab228e68934b3d2840c"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#ab084c14c97939ab228e68934b3d2840c">GetBlockWidth</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:ab084c14c97939ab228e68934b3d2840c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Block width of a compressed format. Defaults to 1 for uncompressed formats. <br /></td></tr>
<tr class="separator:ab084c14c97939ab228e68934b3d2840c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1edcf0d41f7233ba2cb02f92e8797472"><td class="memItemLeft" align="right" valign="top"><a id="a1edcf0d41f7233ba2cb02f92e8797472"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a1edcf0d41f7233ba2cb02f92e8797472">GetBlockHeight</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:a1edcf0d41f7233ba2cb02f92e8797472"><td class="mdescLeft">&#160;</td><td class="mdescRight">Block height of a compressed format. Defaults to 1 for uncompressed formats. <br /></td></tr>
<tr class="separator:a1edcf0d41f7233ba2cb02f92e8797472"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa75ce2ab1c7c83bd8483dbb8174b1cf0"><td class="memItemLeft" align="right" valign="top"><a id="aa75ce2ab1c7c83bd8483dbb8174b1cf0"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#aa75ce2ab1c7c83bd8483dbb8174b1cf0">GetBlockDepth</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:aa75ce2ab1c7c83bd8483dbb8174b1cf0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Block depth of a compressed format. Defaults to 1 for uncompressed formats. <br /></td></tr>
<tr class="separator:aa75ce2ab1c7c83bd8483dbb8174b1cf0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4be82ead5026c4a0579b4efffebc7999"><td class="memItemLeft" align="right" valign="top"><a id="a4be82ead5026c4a0579b4efffebc7999"></a>
static <a class="el" href="../../d0/db2/structxii_image_format_data_type.htm#ad8fde3b50a34d4bca4ea47d855cf9845">xiiImageFormatDataType::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a4be82ead5026c4a0579b4efffebc7999">GetDataType</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a4be82ead5026c4a0579b4efffebc7999"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data type represented by a format. <br /></td></tr>
<tr class="separator:a4be82ead5026c4a0579b4efffebc7999"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a79cd4a37c9f1b3e1a3ba1d53e79dffca"><td class="memItemLeft" align="right" valign="top"><a id="a79cd4a37c9f1b3e1a3ba1d53e79dffca"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a79cd4a37c9f1b3e1a3ba1d53e79dffca">IsCompressed</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a79cd4a37c9f1b3e1a3ba1d53e79dffca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the format is compressed. <br /></td></tr>
<tr class="separator:a79cd4a37c9f1b3e1a3ba1d53e79dffca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2029749b0c8ca89d7d8d964bf9fb37e1"><td class="memItemLeft" align="right" valign="top"><a id="a2029749b0c8ca89d7d8d964bf9fb37e1"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a2029749b0c8ca89d7d8d964bf9fb37e1">IsDepth</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a2029749b0c8ca89d7d8d964bf9fb37e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the format is a depth format. <br /></td></tr>
<tr class="separator:a2029749b0c8ca89d7d8d964bf9fb37e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a128a871988fec7efba42ee845e895e66"><td class="memItemLeft" align="right" valign="top"><a id="a128a871988fec7efba42ee845e895e66"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a128a871988fec7efba42ee845e895e66">IsSrgb</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a128a871988fec7efba42ee845e895e66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the given format is an sRGB format. <br /></td></tr>
<tr class="separator:a128a871988fec7efba42ee845e895e66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad6de710c91a99543f6bba3b0f59a7f5"><td class="memItemLeft" align="right" valign="top"><a id="aad6de710c91a99543f6bba3b0f59a7f5"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#aad6de710c91a99543f6bba3b0f59a7f5">IsStencil</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:aad6de710c91a99543f6bba3b0f59a7f5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the format is a stencil format. <br /></td></tr>
<tr class="separator:aad6de710c91a99543f6bba3b0f59a7f5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a032f01721466449460718a5b29dc3cd6"><td class="memItemLeft" align="right" valign="top"><a id="a032f01721466449460718a5b29dc3cd6"></a>
static <a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a032f01721466449460718a5b29dc3cd6">AsSrgb</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a032f01721466449460718a5b29dc3cd6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding sRGB format if one exists; otherwise returns the unmodified format. <br /></td></tr>
<tr class="separator:a032f01721466449460718a5b29dc3cd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8586999067737a242be7b6c16d71792"><td class="memItemLeft" align="right" valign="top"><a id="af8586999067737a242be7b6c16d71792"></a>
static <a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#af8586999067737a242be7b6c16d71792">AsLinear</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:af8586999067737a242be7b6c16d71792"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the corresponding linear format if one exists; otherwise returns the unmodified format. <br /></td></tr>
<tr class="separator:af8586999067737a242be7b6c16d71792"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeffb485738bcc82a615760551994084d"><td class="memItemLeft" align="right" valign="top"><a id="aeffb485738bcc82a615760551994084d"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#aeffb485738bcc82a615760551994084d">GetNumBlocksX</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiWidth, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:aeffb485738bcc82a615760551994084d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the number of blocks in X direction (compressed) or pixels (if uncompressed) for a given width (in pixels). <br /></td></tr>
<tr class="separator:aeffb485738bcc82a615760551994084d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af4067ac69a3d120d78eb2c286192e9fc"><td class="memItemLeft" align="right" valign="top"><a id="af4067ac69a3d120d78eb2c286192e9fc"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#af4067ac69a3d120d78eb2c286192e9fc">GetNumBlocksY</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiHeight, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:af4067ac69a3d120d78eb2c286192e9fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the number of blocks in Y direction (compressed) or pixels (if uncompressed) for a given height (in pixels). <br /></td></tr>
<tr class="separator:af4067ac69a3d120d78eb2c286192e9fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7b3f7a5cb656aff51578206a55958a12"><td class="memItemLeft" align="right" valign="top"><a id="a7b3f7a5cb656aff51578206a55958a12"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a7b3f7a5cb656aff51578206a55958a12">GetNumBlocksZ</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiDepth, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:a7b3f7a5cb656aff51578206a55958a12"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the number of blocks in Z direction (compressed) or pixels (if uncompressed) for a given height (in pixels). <br /></td></tr>
<tr class="separator:a7b3f7a5cb656aff51578206a55958a12"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb92d64c3d072cb8c734ba9499ffa860"><td class="memItemLeft" align="right" valign="top"><a id="afb92d64c3d072cb8c734ba9499ffa860"></a>
static xiiUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#afb92d64c3d072cb8c734ba9499ffa860">GetRowPitch</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiWidth, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:afb92d64c3d072cb8c734ba9499ffa860"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the size in bytes of a row of blocks (compressed) or pixels (if uncompressed) of the given width. <br /></td></tr>
<tr class="separator:afb92d64c3d072cb8c734ba9499ffa860"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a887683cf1df367499ea90d9616e95207"><td class="memItemLeft" align="right" valign="top"><a id="a887683cf1df367499ea90d9616e95207"></a>
static xiiUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a887683cf1df367499ea90d9616e95207">GetDepthPitch</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format, xiiUInt32 uiWidth, xiiUInt32 uiHeight, xiiUInt32 uiPlaneIndex=0)</td></tr>
<tr class="memdesc:a887683cf1df367499ea90d9616e95207"><td class="mdescLeft">&#160;</td><td class="mdescRight">Computes the size in bytes of a 2D slice of blocks (compressed) or pixels (if uncompressed) of the given width and height. <br /></td></tr>
<tr class="separator:a887683cf1df367499ea90d9616e95207"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f6438c8dfdc764342e47b063a89785b"><td class="memItemLeft" align="right" valign="top"><a id="a2f6438c8dfdc764342e47b063a89785b"></a>
static <a class="el" href="../../df/df2/structxii_image_format_type.htm#a173196b4cbe84dfac133c6ceeecfcea1">xiiImageFormatType::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a2f6438c8dfdc764342e47b063a89785b">GetType</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:a2f6438c8dfdc764342e47b063a89785b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the type of the image format. <br /></td></tr>
<tr class="separator:a2f6438c8dfdc764342e47b063a89785b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae710aadd41ae18e2cc44b034f5fbb754"><td class="memItemLeft" align="right" valign="top"><a id="ae710aadd41ae18e2cc44b034f5fbb754"></a>
static <a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">xiiImageFormat::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#ae710aadd41ae18e2cc44b034f5fbb754">FromPixelMask</a> (xiiUInt32 uiRedMask, xiiUInt32 uiGreenMask, xiiUInt32 uiBlueMask, xiiUInt32 uiAlphaMask, xiiUInt32 uiBitsPerPixel)</td></tr>
<tr class="memdesc:ae710aadd41ae18e2cc44b034f5fbb754"><td class="mdescLeft">&#160;</td><td class="mdescRight">Finds a format matching the given component masks. <br /></td></tr>
<tr class="separator:ae710aadd41ae18e2cc44b034f5fbb754"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5454d00d1c4c47c2b3915de923b89cf"><td class="memItemLeft" align="right" valign="top"><a id="ab5454d00d1c4c47c2b3915de923b89cf"></a>
static <a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">xiiImageFormat::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#ab5454d00d1c4c47c2b3915de923b89cf">GetPlaneSubFormat</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">xiiImageFormat::Enum</a> format, xiiUInt32 uiPlaneIndex)</td></tr>
<tr class="memdesc:ab5454d00d1c4c47c2b3915de923b89cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the format of a subplane of a given format. <br /></td></tr>
<tr class="separator:ab5454d00d1c4c47c2b3915de923b89cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6edf6f8b1c6417b6d2033d076e3ff168"><td class="memItemLeft" align="right" valign="top"><a id="a6edf6f8b1c6417b6d2033d076e3ff168"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a6edf6f8b1c6417b6d2033d076e3ff168">IsCompatible</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> left, <a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> right)</td></tr>
<tr class="memdesc:a6edf6f8b1c6417b6d2033d076e3ff168"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the data formats are compatible, i.e. can be copied into one another. <br /></td></tr>
<tr class="separator:a6edf6f8b1c6417b6d2033d076e3ff168"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae0d113206aca44a796a52d8011ae4008"><td class="memItemLeft" align="right" valign="top"><a id="ae0d113206aca44a796a52d8011ae4008"></a>
static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d5/dd3/structxii_image_format.htm#ae0d113206aca44a796a52d8011ae4008">RequiresFirstLevelBlockAlignment</a> (<a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a> format)</td></tr>
<tr class="memdesc:ae0d113206aca44a796a52d8011ae4008"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true if the most high-res miplevel requires block alignment. <br /></td></tr>
<tr class="separator:ae0d113206aca44a796a52d8011ae4008"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Enum describing the encoding format of the pixels of an image. </p>
</div><h2 class="groupheader">Member Enumeration Documentation</h2>
<a id="a005ef22274255637febbc13f075b9e38"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a005ef22274255637febbc13f075b9e38">&#9670;&nbsp;</a></span>Enum</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">xiiImageFormat::Enum</a> : xiiUInt16</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Enum describing the encoding format of the pixels of an image. </p>
<p>Image formats can be separated into three types: linear, block compressed, and planar. In linear formats, the various channels of each pixel (such as R, G, B) are stored interleaved in memory [RGBRGBRGB...]. This is in contrast to planar formats, where each channel is stored in a separate slice of memory [RRR...GGG...BBB...]. Planar formats are typically used for video formats with luma and chroma channels, and may also be partially planarized. For example, NV12 has a luma (Y) plane and a chroma (UV) plane, where the chroma plane again stores the two sub-channels linearly interleaved. For these formats, <a class="el" href="../../d5/dd3/structxii_image_format.htm#ab5454d00d1c4c47c2b3915de923b89cf" title="Returns the format of a subplane of a given format.">GetPlaneSubFormat()</a> returns a description of the encoding within each plane. Block compressed formats use a different approach, where pixels are arranged in blocks of a fixed format-dependent size (from 4x4 for BC1-7 and up to 12x12 for some ASTC formats), with colors encoded with a fixed ratio compression. </p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a0b24ab7296f7ad5969bf1171382f722f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0b24ab7296f7ad5969bf1171382f722f">&#9670;&nbsp;</a></span>GetName()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">const char * xiiImageFormat::GetName </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d5/dd3/structxii_image_format.htm#a005ef22274255637febbc13f075b9e38">Enum</a>&#160;</td>
          <td class="paramname"><em>format</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the name of the given format. </p>
<p>The returned string is guaranteed to be stable across engine versions and thus suitable for serialization. </p>

</div>
</div>
<hr/>The documentation for this struct was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Texture/Image/<a class="el" href="../../d3/d5d/_image_format_8h_source.htm">ImageFormat.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Texture/Image/Implementation/ImageFormat.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d5/dd3/structxii_image_format.htm">xiiImageFormat</a></li>
    <li class="footer">Generated on Wed Aug 23 2023 03:35:15 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

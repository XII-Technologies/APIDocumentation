<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: xiiMapBase&lt; KeyType, ValueType, Comparer &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XII Engine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/d86/classxii_map_base.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="../../d1/dd6/classxii_map_base-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiMapBase&lt; KeyType, ValueType, Comparer &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>An associative container. Similar to STL::map.  
 <a href="../../d6/d86/classxii_map_base.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d3/d63/_map_8h_source.htm">Map.h</a>&gt;</code></p>
<div class="dynheader">
Inheritance diagram for xiiMapBase&lt; KeyType, ValueType, Comparer &gt;:</div>
<div class="dyncontent">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="../../dc/d78/classxii_map_base__inherit__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<center><span class="legend">[<a target="top" href="../../graph_legend.htm">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad95286ba06ed6b8d69e53ae07c542d8f"><td class="memItemLeft" align="right" valign="top"><a id="ad95286ba06ed6b8d69e53ae07c542d8f"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ConstIterator</b> = <a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&lt; KeyType, ValueType, Comparer, false &gt;</td></tr>
<tr class="separator:ad95286ba06ed6b8d69e53ae07c542d8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fc50f3620f89c9655263fbb76703c37"><td class="memItemLeft" align="right" valign="top"><a id="a2fc50f3620f89c9655263fbb76703c37"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ConstReverseIterator</b> = <a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">xiiMapBaseConstIteratorBase</a>&lt; KeyType, ValueType, Comparer, true &gt;</td></tr>
<tr class="separator:a2fc50f3620f89c9655263fbb76703c37"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a18180fed4a300175855dbc0b94de5590"><td class="memItemLeft" align="right" valign="top"><a id="a18180fed4a300175855dbc0b94de5590"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>Iterator</b> = <a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase</a>&lt; KeyType, ValueType, Comparer, false &gt;</td></tr>
<tr class="separator:a18180fed4a300175855dbc0b94de5590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1d27f508fb5f2be51c6842a64cb3470"><td class="memItemLeft" align="right" valign="top"><a id="ac1d27f508fb5f2be51c6842a64cb3470"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ReverseIterator</b> = <a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">xiiMapBaseIteratorBase</a>&lt; KeyType, ValueType, Comparer, true &gt;</td></tr>
<tr class="separator:ac1d27f508fb5f2be51c6842a64cb3470"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a749be38b6f8d77ab0cf04f47b98483c4"><td class="memItemLeft" align="right" valign="top"><a id="a749be38b6f8d77ab0cf04f47b98483c4"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a749be38b6f8d77ab0cf04f47b98483c4">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a749be38b6f8d77ab0cf04f47b98483c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether there are no elements in the map. O(1) operation. <br /></td></tr>
<tr class="separator:a749be38b6f8d77ab0cf04f47b98483c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d45470ae96a09b661b5fb92fad8d694"><td class="memItemLeft" align="right" valign="top"><a id="a7d45470ae96a09b661b5fb92fad8d694"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a7d45470ae96a09b661b5fb92fad8d694">GetCount</a> () const</td></tr>
<tr class="memdesc:a7d45470ae96a09b661b5fb92fad8d694"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of elements currently stored in the map. O(1) operation. <br /></td></tr>
<tr class="separator:a7d45470ae96a09b661b5fb92fad8d694"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6df7dde5c973d1e39914cad08fa129e9"><td class="memItemLeft" align="right" valign="top"><a id="a6df7dde5c973d1e39914cad08fa129e9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a6df7dde5c973d1e39914cad08fa129e9">Clear</a> ()</td></tr>
<tr class="memdesc:a6df7dde5c973d1e39914cad08fa129e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all elements in the map and resets its size to zero. <br /></td></tr>
<tr class="separator:a6df7dde5c973d1e39914cad08fa129e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca107a29ba86aa6c7ec6314e28c5fd80"><td class="memItemLeft" align="right" valign="top"><a id="aca107a29ba86aa6c7ec6314e28c5fd80"></a>
<a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#aca107a29ba86aa6c7ec6314e28c5fd80">GetIterator</a> ()</td></tr>
<tr class="memdesc:aca107a29ba86aa6c7ec6314e28c5fd80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the very first element. <br /></td></tr>
<tr class="separator:aca107a29ba86aa6c7ec6314e28c5fd80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a872710642bf8dd512c8ecba1d6866a5f"><td class="memItemLeft" align="right" valign="top"><a id="a872710642bf8dd512c8ecba1d6866a5f"></a>
<a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">ReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a872710642bf8dd512c8ecba1d6866a5f">GetReverseIterator</a> ()</td></tr>
<tr class="memdesc:a872710642bf8dd512c8ecba1d6866a5f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a ReverseIterator to the very last element. <br /></td></tr>
<tr class="separator:a872710642bf8dd512c8ecba1d6866a5f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a596ad353027ff3a1eadee08cb6ba030e"><td class="memItemLeft" align="right" valign="top"><a id="a596ad353027ff3a1eadee08cb6ba030e"></a>
<a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a596ad353027ff3a1eadee08cb6ba030e">GetIterator</a> () const</td></tr>
<tr class="memdesc:a596ad353027ff3a1eadee08cb6ba030e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a constant Iterator to the very first element. <br /></td></tr>
<tr class="separator:a596ad353027ff3a1eadee08cb6ba030e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8463522a15ffee938fef99468999584c"><td class="memItemLeft" align="right" valign="top"><a id="a8463522a15ffee938fef99468999584c"></a>
<a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">ConstReverseIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a8463522a15ffee938fef99468999584c">GetReverseIterator</a> () const</td></tr>
<tr class="memdesc:a8463522a15ffee938fef99468999584c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a constant ReverseIterator to the very last element. <br /></td></tr>
<tr class="separator:a8463522a15ffee938fef99468999584c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e48397530157eae5193f83fdced2ed1"><td class="memTemplParams" colspan="2"><a id="a7e48397530157eae5193f83fdced2ed1"></a>
template&lt;typename CompatibleKeyType , typename CompatibleValueType &gt; </td></tr>
<tr class="memitem:a7e48397530157eae5193f83fdced2ed1"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a7e48397530157eae5193f83fdced2ed1">Insert</a> (CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value)</td></tr>
<tr class="memdesc:a7e48397530157eae5193f83fdced2ed1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Inserts the key/value pair into the tree and returns an Iterator to it. O(log n) operation. <br /></td></tr>
<tr class="separator:a7e48397530157eae5193f83fdced2ed1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b42808ba9fffccdce603c115d4d633b"><td class="memTemplParams" colspan="2"><a id="a0b42808ba9fffccdce603c115d4d633b"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a0b42808ba9fffccdce603c115d4d633b"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a0b42808ba9fffccdce603c115d4d633b">Remove</a> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a0b42808ba9fffccdce603c115d4d633b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the key/value pair with the given key, if it exists. O(log n) operation. <br /></td></tr>
<tr class="separator:a0b42808ba9fffccdce603c115d4d633b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a669b1b03a1c330f87f5a2c12ecb4fa66"><td class="memItemLeft" align="right" valign="top"><a id="a669b1b03a1c330f87f5a2c12ecb4fa66"></a>
<a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a669b1b03a1c330f87f5a2c12ecb4fa66">Remove</a> (const <a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a> &amp;pos)</td></tr>
<tr class="memdesc:a669b1b03a1c330f87f5a2c12ecb4fa66"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erases the key/value pair at the given Iterator. O(log n) operation. Returns an iterator to the element after the given iterator. <br /></td></tr>
<tr class="separator:a669b1b03a1c330f87f5a2c12ecb4fa66"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade741071c2e19ceac8bbb3c328a2d48e"><td class="memTemplParams" colspan="2"><a id="ade741071c2e19ceac8bbb3c328a2d48e"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ade741071c2e19ceac8bbb3c328a2d48e"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#ade741071c2e19ceac8bbb3c328a2d48e">FindOrAdd</a> (CompatibleKeyType &amp;&amp;key, bool *out_pExisted=nullptr)</td></tr>
<tr class="memdesc:ade741071c2e19ceac8bbb3c328a2d48e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for the given key and returns an iterator to it. If it did not exist yet, it is default-created. <em>bExisted</em> is set to true, if the key was found, false if it needed to be created. <br /></td></tr>
<tr class="separator:ade741071c2e19ceac8bbb3c328a2d48e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a385d4c074fa20d80552f6d10f5b18c4a"><td class="memTemplParams" colspan="2"><a id="a385d4c074fa20d80552f6d10f5b18c4a"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a385d4c074fa20d80552f6d10f5b18c4a"><td class="memTemplItemLeft" align="right" valign="top">ValueType &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a385d4c074fa20d80552f6d10f5b18c4a">operator[]</a> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a385d4c074fa20d80552f6d10f5b18c4a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows read/write access to the value stored under the given key. If there is no such key, a new element is default-constructed. <br /></td></tr>
<tr class="separator:a385d4c074fa20d80552f6d10f5b18c4a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8486122183f672ce30a3e44d3080fe07"><td class="memTemplParams" colspan="2"><a id="a8486122183f672ce30a3e44d3080fe07"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a8486122183f672ce30a3e44d3080fe07"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a8486122183f672ce30a3e44d3080fe07">TryGetValue</a> (const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</td></tr>
<tr class="memdesc:a8486122183f672ce30a3e44d3080fe07"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the corresponding value to out_value. <br /></td></tr>
<tr class="separator:a8486122183f672ce30a3e44d3080fe07"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9537c0ae9bdc555e89bf25b7debf05c"><td class="memTemplParams" colspan="2"><a id="ad9537c0ae9bdc555e89bf25b7debf05c"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ad9537c0ae9bdc555e89bf25b7debf05c"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#ad9537c0ae9bdc555e89bf25b7debf05c">TryGetValue</a> (const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:ad9537c0ae9bdc555e89bf25b7debf05c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:ad9537c0ae9bdc555e89bf25b7debf05c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a087262d1301047b580d8db9e232f6c00"><td class="memTemplParams" colspan="2"><a id="a087262d1301047b580d8db9e232f6c00"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a087262d1301047b580d8db9e232f6c00"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a087262d1301047b580d8db9e232f6c00">TryGetValue</a> (const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</td></tr>
<tr class="memdesc:a087262d1301047b580d8db9e232f6c00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether an entry with the given key was found and if found writes out the pointer to the corresponding value to out_pValue. <br /></td></tr>
<tr class="separator:a087262d1301047b580d8db9e232f6c00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ff02fce8f1acfd28cb41ef6351ddcee"><td class="memTemplParams" colspan="2"><a id="a9ff02fce8f1acfd28cb41ef6351ddcee"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a9ff02fce8f1acfd28cb41ef6351ddcee"><td class="memTemplItemLeft" align="right" valign="top">const ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a9ff02fce8f1acfd28cb41ef6351ddcee">GetValue</a> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a9ff02fce8f1acfd28cb41ef6351ddcee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:a9ff02fce8f1acfd28cb41ef6351ddcee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5e23d305f0bbe5a3382d3be8a766a77"><td class="memTemplParams" colspan="2"><a id="ab5e23d305f0bbe5a3382d3be8a766a77"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ab5e23d305f0bbe5a3382d3be8a766a77"><td class="memTemplItemLeft" align="right" valign="top">ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#ab5e23d305f0bbe5a3382d3be8a766a77">GetValue</a> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:ab5e23d305f0bbe5a3382d3be8a766a77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a pointer to the value of the entry with the given key if found, otherwise returns nullptr. <br /></td></tr>
<tr class="separator:ab5e23d305f0bbe5a3382d3be8a766a77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbbdfe2e828a405c62402fa7962cf857"><td class="memTemplParams" colspan="2"><a id="acbbdfe2e828a405c62402fa7962cf857"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:acbbdfe2e828a405c62402fa7962cf857"><td class="memTemplItemLeft" align="right" valign="top">const ValueType &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#acbbdfe2e828a405c62402fa7962cf857">GetValueOrDefault</a> (const CompatibleKeyType &amp;key, const ValueType &amp;defaultValue) const</td></tr>
<tr class="memdesc:acbbdfe2e828a405c62402fa7962cf857"><td class="mdescLeft">&#160;</td><td class="mdescRight">Either returns the value of the entry with the given key, if found, or the provided default value. <br /></td></tr>
<tr class="separator:acbbdfe2e828a405c62402fa7962cf857"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a99957cb652f5a4a0ba01cf150f19808b"><td class="memTemplParams" colspan="2"><a id="a99957cb652f5a4a0ba01cf150f19808b"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a99957cb652f5a4a0ba01cf150f19808b"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a99957cb652f5a4a0ba01cf150f19808b">Find</a> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a99957cb652f5a4a0ba01cf150f19808b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found. O(log n) operation. <br /></td></tr>
<tr class="separator:a99957cb652f5a4a0ba01cf150f19808b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ee3bc4968714ea9177324c0a3c47a89"><td class="memTemplParams" colspan="2"><a id="a0ee3bc4968714ea9177324c0a3c47a89"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a0ee3bc4968714ea9177324c0a3c47a89"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a0ee3bc4968714ea9177324c0a3c47a89">LowerBound</a> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:a0ee3bc4968714ea9177324c0a3c47a89"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the element with a key equal or larger than the given key. Returns an invalid iterator, if there is no such element. <br /></td></tr>
<tr class="separator:a0ee3bc4968714ea9177324c0a3c47a89"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc5ea0e967ac1fe4f15554a9bc2e5c45"><td class="memTemplParams" colspan="2"><a id="afc5ea0e967ac1fe4f15554a9bc2e5c45"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:afc5ea0e967ac1fe4f15554a9bc2e5c45"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#afc5ea0e967ac1fe4f15554a9bc2e5c45">UpperBound</a> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="memdesc:afc5ea0e967ac1fe4f15554a9bc2e5c45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the element with a key that is LARGER than the given key. Returns an invalid iterator, if there is no such element. <br /></td></tr>
<tr class="separator:afc5ea0e967ac1fe4f15554a9bc2e5c45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4fece4e55174d9f0e55c9324b145d27"><td class="memTemplParams" colspan="2"><a id="ae4fece4e55174d9f0e55c9324b145d27"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:ae4fece4e55174d9f0e55c9324b145d27"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#ae4fece4e55174d9f0e55c9324b145d27">Find</a> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:ae4fece4e55174d9f0e55c9324b145d27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Searches for key, returns an Iterator to it or an invalid iterator, if no such key is found. O(log n) operation. <br /></td></tr>
<tr class="separator:ae4fece4e55174d9f0e55c9324b145d27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6e27dc54ec8cc3f247e2e70e7ef0968"><td class="memTemplParams" colspan="2"><a id="aa6e27dc54ec8cc3f247e2e70e7ef0968"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aa6e27dc54ec8cc3f247e2e70e7ef0968"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#aa6e27dc54ec8cc3f247e2e70e7ef0968">Contains</a> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:aa6e27dc54ec8cc3f247e2e70e7ef0968"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given key is in the container. <br /></td></tr>
<tr class="separator:aa6e27dc54ec8cc3f247e2e70e7ef0968"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04d0d1c6cfd54b2bf30b6f0da1bd0657"><td class="memTemplParams" colspan="2"><a id="a04d0d1c6cfd54b2bf30b6f0da1bd0657"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a04d0d1c6cfd54b2bf30b6f0da1bd0657"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a04d0d1c6cfd54b2bf30b6f0da1bd0657">LowerBound</a> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:a04d0d1c6cfd54b2bf30b6f0da1bd0657"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the element with a key equal or larger than the given key. Returns an invalid iterator, if there is no such element. <br /></td></tr>
<tr class="separator:a04d0d1c6cfd54b2bf30b6f0da1bd0657"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaabcaeafc695d1d76a60e3885656ebb4"><td class="memTemplParams" colspan="2"><a id="aaabcaeafc695d1d76a60e3885656ebb4"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aaabcaeafc695d1d76a60e3885656ebb4"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#aaabcaeafc695d1d76a60e3885656ebb4">UpperBound</a> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="memdesc:aaabcaeafc695d1d76a60e3885656ebb4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns an Iterator to the element with a key that is LARGER than the given key. Returns an invalid iterator, if there is no such element. <br /></td></tr>
<tr class="separator:aaabcaeafc695d1d76a60e3885656ebb4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab2fd6d4223ca42409cf0a33299f58438"><td class="memItemLeft" align="right" valign="top"><a id="ab2fd6d4223ca42409cf0a33299f58438"></a>
<a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#ab2fd6d4223ca42409cf0a33299f58438">GetAllocator</a> () const</td></tr>
<tr class="memdesc:ab2fd6d4223ca42409cf0a33299f58438"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the allocator that is used by this instance. <br /></td></tr>
<tr class="separator:ab2fd6d4223ca42409cf0a33299f58438"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac42e4240eb233666e23caeef7d12153d"><td class="memItemLeft" align="right" valign="top"><a id="ac42e4240eb233666e23caeef7d12153d"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#ac42e4240eb233666e23caeef7d12153d">operator==</a> (const <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:ac42e4240eb233666e23caeef7d12153d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Comparison operator. <br /></td></tr>
<tr class="separator:ac42e4240eb233666e23caeef7d12153d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0127200a605bcedf21568f6d6b5c6ea3"><td class="memItemLeft" align="right" valign="top"><a id="a0127200a605bcedf21568f6d6b5c6ea3"></a>
xiiUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a0127200a605bcedf21568f6d6b5c6ea3">GetHeapMemoryUsage</a> () const</td></tr>
<tr class="memdesc:a0127200a605bcedf21568f6d6b5c6ea3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the amount of bytes that are currently allocated on the heap. <br /></td></tr>
<tr class="separator:a0127200a605bcedf21568f6d6b5c6ea3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33390b11390f80b3cce774156097c90a"><td class="memItemLeft" align="right" valign="top"><a id="a33390b11390f80b3cce774156097c90a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a33390b11390f80b3cce774156097c90a">Swap</a> (<a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;other)</td></tr>
<tr class="memdesc:a33390b11390f80b3cce774156097c90a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps this map with the other one. <br /></td></tr>
<tr class="separator:a33390b11390f80b3cce774156097c90a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3451cd127761f918fa48f886c3c96204"><td class="memTemplParams" colspan="2"><a id="a3451cd127761f918fa48f886c3c96204"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a3451cd127761f918fa48f886c3c96204"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType &amp;out_value) const</td></tr>
<tr class="separator:a3451cd127761f918fa48f886c3c96204"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04736a8f3bc58316091f59d373f0ef16"><td class="memTemplParams" colspan="2"><a id="a04736a8f3bc58316091f59d373f0ef16"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a04736a8f3bc58316091f59d373f0ef16"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, const ValueType *&amp;out_pValue) const</td></tr>
<tr class="separator:a04736a8f3bc58316091f59d373f0ef16"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09b8d5e69428e20837e53b1b87a07c0a"><td class="memTemplParams" colspan="2"><a id="a09b8d5e69428e20837e53b1b87a07c0a"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a09b8d5e69428e20837e53b1b87a07c0a"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>TryGetValue</b> (const CompatibleKeyType &amp;key, ValueType *&amp;out_pValue) const</td></tr>
<tr class="separator:a09b8d5e69428e20837e53b1b87a07c0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c0b53828323952fce6c3b15dc42c231"><td class="memTemplParams" colspan="2"><a id="a3c0b53828323952fce6c3b15dc42c231"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a3c0b53828323952fce6c3b15dc42c231"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE const ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a3c0b53828323952fce6c3b15dc42c231"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adda44dbdf6e2bbe552d75fdae6ef541a"><td class="memTemplParams" colspan="2"><a id="adda44dbdf6e2bbe552d75fdae6ef541a"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:adda44dbdf6e2bbe552d75fdae6ef541a"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE ValueType *&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValue</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:adda44dbdf6e2bbe552d75fdae6ef541a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed1d177ad3efaf33f706480b58da3b0a"><td class="memTemplParams" colspan="2"><a id="aed1d177ad3efaf33f706480b58da3b0a"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aed1d177ad3efaf33f706480b58da3b0a"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE const ValueType &amp;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>GetValueOrDefault</b> (const CompatibleKeyType &amp;key, const ValueType &amp;defaultValue) const</td></tr>
<tr class="separator:aed1d177ad3efaf33f706480b58da3b0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ff03d4d0ca8214bd7d859adf077431d"><td class="memTemplParams" colspan="2"><a id="a0ff03d4d0ca8214bd7d859adf077431d"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a0ff03d4d0ca8214bd7d859adf077431d"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::<a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:a0ff03d4d0ca8214bd7d859adf077431d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee572534f4d25597511f0f9b05dacb01"><td class="memTemplParams" colspan="2"><a id="aee572534f4d25597511f0f9b05dacb01"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aee572534f4d25597511f0f9b05dacb01"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::<a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Find</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:aee572534f4d25597511f0f9b05dacb01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07c67af372b58db2df3d6cdd989f9c56"><td class="memTemplParams" colspan="2"><a id="a07c67af372b58db2df3d6cdd989f9c56"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a07c67af372b58db2df3d6cdd989f9c56"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Contains</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:a07c67af372b58db2df3d6cdd989f9c56"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc1c1498a92b8ceef394995e6fa1aba1"><td class="memTemplParams" colspan="2"><a id="adc1c1498a92b8ceef394995e6fa1aba1"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:adc1c1498a92b8ceef394995e6fa1aba1"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::<a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LowerBound</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:adc1c1498a92b8ceef394995e6fa1aba1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acebb546a22241381bfb484bcd3fb73ef"><td class="memTemplParams" colspan="2"><a id="acebb546a22241381bfb484bcd3fb73ef"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:acebb546a22241381bfb484bcd3fb73ef"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::<a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LowerBound</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:acebb546a22241381bfb484bcd3fb73ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67fe06ca02a6c5ce3fe705fdb9a8220b"><td class="memTemplParams" colspan="2"><a id="a67fe06ca02a6c5ce3fe705fdb9a8220b"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:a67fe06ca02a6c5ce3fe705fdb9a8220b"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::<a class="el" href="../../d3/d1e/structxii_map_base_iterator_base.htm">Iterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>UpperBound</b> (const CompatibleKeyType &amp;key)</td></tr>
<tr class="separator:a67fe06ca02a6c5ce3fe705fdb9a8220b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aef510fe5d18603f0d1eff0ebbadaa181"><td class="memTemplParams" colspan="2"><a id="aef510fe5d18603f0d1eff0ebbadaa181"></a>
template&lt;typename CompatibleKeyType &gt; </td></tr>
<tr class="memitem:aef510fe5d18603f0d1eff0ebbadaa181"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt;::<a class="el" href="../../db/d2e/structxii_map_base_const_iterator_base.htm">ConstIterator</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><b>UpperBound</b> (const CompatibleKeyType &amp;key) const</td></tr>
<tr class="separator:aef510fe5d18603f0d1eff0ebbadaa181"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a410b0029baf0fc48b11d34b0bf2b358f"><td class="memItemLeft" align="right" valign="top"><a id="a410b0029baf0fc48b11d34b0bf2b358f"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a410b0029baf0fc48b11d34b0bf2b358f">xiiMapBase</a> (const Comparer &amp;comparer, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:a410b0029baf0fc48b11d34b0bf2b358f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the map to be empty. <br /></td></tr>
<tr class="separator:a410b0029baf0fc48b11d34b0bf2b358f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67f58153ba6b0b586a3c89942d1691d5"><td class="memItemLeft" align="right" valign="top"><a id="a67f58153ba6b0b586a3c89942d1691d5"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a67f58153ba6b0b586a3c89942d1691d5">xiiMapBase</a> (const <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;cc, <a class="el" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a> *pAllocator)</td></tr>
<tr class="memdesc:a67f58153ba6b0b586a3c89942d1691d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies all key/value pairs from the given map into this one. <br /></td></tr>
<tr class="separator:a67f58153ba6b0b586a3c89942d1691d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9e03d781b5af9c23f74142225c3e8501"><td class="memItemLeft" align="right" valign="top"><a id="a9e03d781b5af9c23f74142225c3e8501"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a9e03d781b5af9c23f74142225c3e8501">~xiiMapBase</a> ()</td></tr>
<tr class="memdesc:a9e03d781b5af9c23f74142225c3e8501"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all elements from the map. <br /></td></tr>
<tr class="separator:a9e03d781b5af9c23f74142225c3e8501"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a42de6e40e64b9d4b6f92685a2664c0c9"><td class="memItemLeft" align="right" valign="top"><a id="a42de6e40e64b9d4b6f92685a2664c0c9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d6/d86/classxii_map_base.htm#a42de6e40e64b9d4b6f92685a2664c0c9">operator=</a> (const <a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a>&lt; KeyType, ValueType, Comparer &gt; &amp;rhs)</td></tr>
<tr class="memdesc:a42de6e40e64b9d4b6f92685a2664c0c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Copies all key/value pairs from the given map into this one. <br /></td></tr>
<tr class="separator:a42de6e40e64b9d4b6f92685a2664c0c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename KeyType, typename ValueType, typename Comparer&gt;<br />
class xiiMapBase&lt; KeyType, ValueType, Comparer &gt;</h3>

<p>An associative container. Similar to STL::map. </p>
<p>A map allows to store key/value pairs. This in turn allows to search for values by looking them up with a certain key. Key/Value pairs can also be erased again. All insertion/erasure/lookup functions take O(log n) time. The map is implemented using a balanced tree (a red-black tree), which means the order of insertions/erasures is not important, since it can never create a degenerated tree, and performance will always stay the same.<br  />
<br  />
KeyType is the key type. For example a string.<br  />
ValueType is the value type. For example int.<br  />
Comparer is a helper class that implements a strictly weak-ordering comparison for Key types. </p>
</div><hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Containers/<a class="el" href="../../d3/d63/_map_8h_source.htm">Map.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Containers/Implementation/<a class="el" href="../../de/d1a/_map__inl_8h_source.htm">Map_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a></li>
    <li class="footer">Generated on Mon Jul 1 2024 12:12:54 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>

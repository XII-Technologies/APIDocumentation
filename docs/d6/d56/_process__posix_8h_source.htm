<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.9.1"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: /home/runner/work/XII/XII/Source/Engine/Foundation/System/Implementation/Posix/Process_posix.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XII Engine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.9.1 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search','.htm');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/d56/_process__posix_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Process_posix.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#include &lt;Foundation/FoundationInternal.h&gt;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;XII_FOUNDATION_INTERNAL_HEADER</div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &lt;Foundation/IO/OSFile.h&gt;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &lt;Foundation/Logging/Log.h&gt;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &lt;Foundation/System/Process.h&gt;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &lt;Foundation/Threading/Thread.h&gt;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &lt;Foundation/Threading/ThreadUtils.h&gt;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &lt;Foundation/System/SystemInformation.h&gt;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;poll.h&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &lt;sys/wait.h&gt;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &lt;unistd.h&gt;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160; </div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;XII_DEFINE_AS_POD_TYPE(<span class="keyword">struct</span> pollfd);</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="../../df/d40/classxii_fd.htm">   19</a></span>&#160;<span class="keyword">class </span><a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;{</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>()             = <span class="keywordflow">default</span>;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>(<span class="keyword">const</span> <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>(<a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>&amp;&amp; other)</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  {</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    m_fd       = other.m_fd;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    other.m_fd = -1;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  }</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  ~<a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>()</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  {</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    Close();</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  }</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keywordtype">void</span> Close()</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">if</span> (m_fd != -1)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    {</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      close(m_fd);</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      m_fd = -1;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  }</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keywordtype">bool</span> IsValid()<span class="keyword"> const</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">  </span>{</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> m_fd &gt;= 0;</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  }</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>&amp;) = <span class="keyword">delete</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordtype">void</span> operator                =(<a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>&amp;&amp; other)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Close();</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    m_fd       = other.m_fd;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    other.m_fd = -1;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordtype">void</span> TakeOwnership(xiiInt32 fd)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    Close();</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    m_fd = fd;</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;  }</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  xiiInt32 Borrow()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_fd; }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  xiiInt32 Detach()</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">auto</span> result = m_fd;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    m_fd        = -1;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> AddFlags(xiiInt32 addFlags)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  {</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordflow">if</span> (m_fd &lt; 0)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keywordflow">if</span> (addFlags &amp; O_CLOEXEC)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      xiiInt32 flags = fcntl(m_fd, F_GETFD);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      flags |= FD_CLOEXEC;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      <span class="keywordflow">if</span> (fcntl(m_fd, F_SETFD, flags) != 0)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <a class="code" href="../../d4/dc6/classxii_log.htm#a9312254ec6a5da7419b6e62163192464">xiiLog::Error</a>(<span class="stringliteral">&quot;Failed to set flags on {}: {}&quot;</span>, m_fd, errno);</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;      }</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;      addFlags &amp;= ~O_CLOEXEC;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    }</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> (addFlags)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      xiiInt32 flags = fcntl(m_fd, F_GETFL);</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      flags |= addFlags;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      <span class="keywordflow">if</span> (fcntl(m_fd, F_SETFD, flags) != 0)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;      {</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <a class="code" href="../../d4/dc6/classxii_log.htm#a9312254ec6a5da7419b6e62163192464">xiiLog::Error</a>(<span class="stringliteral">&quot;Failed to set flags on {}: {}&quot;</span>, m_fd, errno);</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160; </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> MakePipe(<a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> (&amp;fds)[2], xiiInt32 flags = 0)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    fds[0].Close();</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    fds[1].Close();</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_USE_LINUX_POSIX_EXTENSIONS)</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keywordflow">if</span> (pipe2((xiiInt32*)fds, flags) != 0)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    {</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    }</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">if</span> (pipe((xiiInt32*)fds) != 0)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    {</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> (flags != 0 &amp;&amp; (fds[0].AddFlags(flags).Failed() || fds[1].AddFlags(flags).Failed()))</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      fds[0].Close();</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      fds[1].Close();</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    }</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; </div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="keyword">private</span>:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  xiiInt32 m_fd = -1;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;};</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160; </div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="keyword">namespace</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  <span class="keyword">struct </span>ProcessStartupError</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">enum class</span> Type : xiiUInt32</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      FailedToChangeWorkingDirectory = 0,</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      FailedToExecv                  = 1</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    };</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    Type     type;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    xiiInt32 errorCode;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  };</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;} <span class="comment">// namespace</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; </div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="../../da/d24/structxii_process_impl.htm">  147</a></span>&#160;<span class="keyword">struct </span><a class="code" href="../../da/d24/structxii_process_impl.htm">xiiProcessImpl</a></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  ~<a class="code" href="../../da/d24/structxii_process_impl.htm">xiiProcessImpl</a>()</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;  {</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    StopStreamWatcher();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  pid_t m_childPid          = -1;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordtype">bool</span>  m_exitCodeAvailable = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keywordtype">bool</span>  m_processSuspended  = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160; </div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="../../d0/d7a/structxii_process_impl_1_1_std_stream_info.htm">  158</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../d0/d7a/structxii_process_impl_1_1_std_stream_info.htm">StdStreamInfo</a></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  {</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>                            fd;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <a class="code" href="../../dc/d84/structxii_delegate.htm">xiiDelegate</a>&lt;void(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>)&gt; callback;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  };</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;StdStreamInfo, 2&gt;</a>  m_streams;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <a class="code" href="../../dc/da4/classxii_dynamic_array.htm">xiiDynamicArray&lt;xiiStringBuilder&gt;</a> m_overflowBuffers;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <a class="code" href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr&lt;xiiOSThread&gt;</a>         m_streamWatcherThread;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>                             m_wakeupPipeReadEnd;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>                             m_wakeupPipeWriteEnd;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keyword">static</span> <span class="keywordtype">void</span>* StreamWatcherThread(<span class="keywordtype">void</span>* context)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="../../da/d24/structxii_process_impl.htm">xiiProcessImpl</a>* <span class="keyword">self</span> = <span class="keyword">reinterpret_cast&lt;</span><a class="code" href="../../da/d24/structxii_process_impl.htm">xiiProcessImpl</a>*<span class="keyword">&gt;</span>(context);</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordtype">char</span>            buffer[4096];</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;struct pollfd, 3&gt;</a> pollfds;</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    pollfds.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>({<span class="keyword">self</span>-&gt;m_wakeupPipeReadEnd.Borrow(), POLLIN, 0});</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">for</span> (StdStreamInfo&amp; stream : self-&gt;m_streams)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      pollfds.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>({stream.fd.Borrow(), POLLIN, 0});</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    }</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordtype">bool</span> run = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordflow">while</span> (run)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      xiiInt32 result = poll(pollfds.<a class="code" href="../../da/d4c/classxii_array_base.htm#a2ac4701f79554bcc89ba1a2b0ad5f9ad">GetData</a>(), pollfds.<a class="code" href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">GetCount</a>(), -1);</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      <span class="keywordflow">if</span> (result &gt; 0)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      {</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// Result at index 0 is special and means there was a WakeUp</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="keywordflow">if</span> (pollfds[0].revents != 0)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        {</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;          run = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160; </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">for</span> (xiiUInt32 i = 1; i &lt; pollfds.<a class="code" href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">GetCount</a>(); ++i)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;          <span class="keywordflow">if</span> (pollfds[i].revents &amp; POLLIN)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;          {</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <a class="code" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a>&amp; overflowBuffer = <span class="keyword">self</span>-&gt;m_overflowBuffers[i - 1];</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            StdStreamInfo&amp;    stream         = <span class="keyword">self</span>-&gt;m_streams[i - 1];</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            {</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;              ssize_t numBytes = read(stream.fd.Borrow(), buffer, XII_ARRAY_SIZE(buffer));</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;              <span class="keywordflow">if</span> (numBytes &lt; 0)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;              {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keywordflow">if</span> (errno == EWOULDBLOCK)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                {</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                  <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                <a class="code" href="../../d4/dc6/classxii_log.htm#a9312254ec6a5da7419b6e62163192464">xiiLog::Error</a>(<span class="stringliteral">&quot;Process Posix read error on {}: {}&quot;</span>, stream.fd.Borrow(), errno);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;              }</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160; </div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;              <span class="keyword">const</span> <span class="keywordtype">char</span>* szCurrentPos = buffer;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;              <span class="keyword">const</span> <span class="keywordtype">char</span>* szEndPos     = buffer + numBytes;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;              <span class="keywordflow">while</span> (szCurrentPos &lt; szEndPos)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;              {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                <span class="keyword">const</span> <span class="keywordtype">char</span>* szFound = <a class="code" href="../../df/d65/classxii_string_utils.htm#a0fa20e8fc3fdb98e0166ff5c1b6e83e8">xiiStringUtils::FindSubString</a>(szCurrentPos, <span class="stringliteral">&quot;\n&quot;</span>, szEndPos);</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                <span class="keywordflow">if</span> (szFound)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                {</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                  <span class="keywordflow">if</span> (overflowBuffer.<a class="code" href="../../d2/d29/structxii_string_base.htm#a52ad52604f0b98226a0342393b8db662">IsEmpty</a>())</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                  {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="comment">// If there is nothing in the overflow buffer, this is a complete line and can be fired as is.</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    stream.callback(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(szCurrentPos, szFound + 1));</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                  }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                  {</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="comment">// We have data in the overflow buffer so this is the final part of a partial line so we need to complete and fire the overflow buffer.</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    overflowBuffer.<a class="code" href="../../d4/dbb/classxii_string_builder.htm#ad9a3d492c8f9c576a611e3d5a852a16b">Append</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(szCurrentPos, szFound + 1));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    stream.callback(overflowBuffer);</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                    overflowBuffer.<a class="code" href="../../d4/dbb/classxii_string_builder.htm#a6c4ff4b9a231f6a5cd063b03613d87b4">Clear</a>();</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                  }</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                  szCurrentPos = szFound + 1;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                {</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                  <span class="comment">// This is either the start or a middle segment of a line, append to overflow buffer.</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                  overflowBuffer.<a class="code" href="../../d4/dbb/classxii_string_builder.htm#ad9a3d492c8f9c576a611e3d5a852a16b">Append</a>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>(szCurrentPos, szEndPos));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                  szCurrentPos = szEndPos;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;              }</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;              <span class="keywordflow">if</span> (numBytes &lt; XII_ARRAY_SIZE(buffer))</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;              {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;              }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;            }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;          }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;          pollfds[i].revents = 0;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        }</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      }</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (result &lt; 0)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      {</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <a class="code" href="../../d4/dc6/classxii_log.htm#a9312254ec6a5da7419b6e62163192464">xiiLog::Error</a>(<span class="stringliteral">&quot;poll error {}&quot;</span>, errno);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;    }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; <span class="keyword">self</span>-&gt;m_streams.GetCount(); ++i)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    {</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      <a class="code" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a>&amp; overflowBuffer = <span class="keyword">self</span>-&gt;m_overflowBuffers[i];</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      <span class="keywordflow">if</span> (!overflowBuffer.<a class="code" href="../../d2/d29/structxii_string_base.htm#a52ad52604f0b98226a0342393b8db662">IsEmpty</a>())</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keyword">self</span>-&gt;m_streams[i].callback(overflowBuffer);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        overflowBuffer.<a class="code" href="../../d4/dbb/classxii_string_builder.htm#a6c4ff4b9a231f6a5cd063b03613d87b4">Clear</a>();</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      }</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      <span class="keyword">self</span>-&gt;m_streams[i].fd.Close();</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160; </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> StartStreamWatcher()</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> wakeupPipe[2];</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;    <span class="keywordflow">if</span> (xiiFd::MakePipe(wakeupPipe, O_NONBLOCK | O_CLOEXEC).Failed())</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <a class="code" href="../../d4/dc6/classxii_log.htm#a9312254ec6a5da7419b6e62163192464">xiiLog::Error</a>(<span class="stringliteral">&quot;Failed to setup wakeup pipe {}&quot;</span>, errno);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    }</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      m_wakeupPipeReadEnd  = std::move(wakeupPipe[0]);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      m_wakeupPipeWriteEnd = std::move(wakeupPipe[1]);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;    m_streamWatcherThread = XII_DEFAULT_NEW(<a class="code" href="../../d6/db1/classxii_o_s_thread.htm">xiiOSThread</a>, &amp;StreamWatcherThread, <span class="keyword">this</span>, <span class="stringliteral">&quot;StdStrmWtch&quot;</span>);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    m_streamWatcherThread-&gt;<a class="code" href="../../d6/db1/classxii_o_s_thread.htm#a9fbb6bcdde566264da1d8e10bb62b887">Start</a>();</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  }</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keywordtype">void</span> StopStreamWatcher()</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="keywordflow">if</span> (m_streamWatcherThread)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      <span class="keywordtype">char</span> c = 0;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;      XII_IGNORE_UNUSED(write(m_wakeupPipeWriteEnd.Borrow(), &amp;c, 1));</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;      m_streamWatcherThread-&gt;<a class="code" href="../../d6/db1/classxii_o_s_thread.htm#a2ee60bbb38a34f6ed88b3842defe9b3f">Join</a>();</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;      m_streamWatcherThread = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    m_wakeupPipeReadEnd.Close();</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    m_wakeupPipeWriteEnd.Close();</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;  }</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160; </div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="keywordtype">void</span> AddStream(<a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> fd, <span class="keyword">const</span> <a class="code" href="../../dc/d84/structxii_delegate.htm">xiiDelegate</a>&lt;<span class="keywordtype">void</span>(<a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>)&gt;&amp; callback)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  {</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    m_streams.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>({std::move(fd), callback});</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    m_overflowBuffers.<a class="code" href="../../da/d4c/classxii_array_base.htm#aeb9f05e6229fcca31131a822a99bc1f9">SetCount</a>(m_streams.<a class="code" href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">GetCount</a>());</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160; </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;  xiiUInt32 GetNumStreams()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_streams.<a class="code" href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">GetCount</a>(); }</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  <span class="keyword">static</span> <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> StartChildProcess(<span class="keyword">const</span> xiiProcessOptions&amp; opt, pid_t&amp; outPid, <span class="keywordtype">bool</span> suspended, <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>&amp; outStdOutFd, <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a>&amp; outStdErrFd)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  {</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> stdoutPipe[2];</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> stderrPipe[2];</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> startupErrorPipe[2];</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <a class="code" href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a> executablePath = opt.m_sProcess;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <a class="code" href="../../d6/dd0/structxii_file_stats.htm">xiiFileStats</a>     stats;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    <span class="keywordflow">if</span> (!opt.m_sProcess.IsAbsolutePath())</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      executablePath = <a class="code" href="../../da/d95/classxii_o_s_file.htm#a119478d3ed9b06762cbcfc54be300ae3">xiiOSFile::GetCurrentWorkingDirectory</a>();</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;      executablePath.<a class="code" href="../../d4/dbb/classxii_string_builder.htm#aeb8dedf699785b95812b7b137a901324">AppendPath</a>(opt.m_sProcess);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="../../da/d95/classxii_o_s_file.htm#adc699c70c70c4ed0ad6e9375ebff36d4">xiiOSFile::GetFileStats</a>(executablePath, stats).Failed() || stats.<a class="code" href="../../d6/dd0/structxii_file_stats.htm#a1de1837a109bff62cb0fc73fbab0bb5d">m_bIsDirectory</a>)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;      <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;char, 512&gt;</a> confPath;</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;      <span class="keyword">auto</span>                      envPATH = getenv(<span class="stringliteral">&quot;PATH&quot;</span>);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;      <span class="keywordflow">if</span> (envPATH == <span class="keyword">nullptr</span>) <span class="comment">// if no PATH environment variable is available, we need to fetch the system default;</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="preprocessor">#if _POSIX_C_SOURCE &gt;= 2 || _XOPEN_SOURCE</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordtype">size_t</span> confPathSize = confstr(_CS_PATH, <span class="keyword">nullptr</span>, 0);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keywordflow">if</span> (confPathSize &gt; 0)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        {</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;          confPath.<a class="code" href="../../da/d4c/classxii_array_base.htm#a4114fd2fe9dc9b02ce50e8d723515c24">SetCountUninitialized</a>(confPathSize);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;          <span class="keywordflow">if</span> (confstr(_CS_PATH, confPath.<a class="code" href="../../da/d4c/classxii_array_base.htm#a2ac4701f79554bcc89ba1a2b0ad5f9ad">GetData</a>(), confPath.<a class="code" href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">GetCount</a>()) == 0)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;          {</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            confPath.<a class="code" href="../../da/d4c/classxii_array_base.htm#a4114fd2fe9dc9b02ce50e8d723515c24">SetCountUninitialized</a>(0);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;          }</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">if</span> (confPath.<a class="code" href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">GetCount</a>() == 0)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        {</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;          confPath.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(<span class="charliteral">&#39;\0&#39;</span>);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        }</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        envPATH = confPath.<a class="code" href="../../da/d4c/classxii_array_base.htm#a2ac4701f79554bcc89ba1a2b0ad5f9ad">GetData</a>();</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;      }</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;      <a class="code" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>                     path = envPATH;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;      <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;xiiStringView, 16&gt;</a> pathParts;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;      path.<a class="code" href="../../da/d9d/structxii_string_view.htm#a33cac6de00c81d6edaa589bbf71e56d3">Split</a>(<span class="keyword">false</span>, pathParts, <span class="stringliteral">&quot;:&quot;</span>);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">auto</span>&amp; pathPart : pathParts)</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;      {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        executablePath = pathPart;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        executablePath.<a class="code" href="../../d4/dbb/classxii_string_builder.htm#aeb8dedf699785b95812b7b137a901324">AppendPath</a>(opt.m_sProcess);</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="keywordflow">if</span> (<a class="code" href="../../da/d95/classxii_o_s_file.htm#adc699c70c70c4ed0ad6e9375ebff36d4">xiiOSFile::GetFileStats</a>(executablePath, stats).Succeeded() &amp;&amp; !stats.<a class="code" href="../../d6/dd0/structxii_file_stats.htm#a1de1837a109bff62cb0fc73fbab0bb5d">m_bIsDirectory</a>)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        {</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        }</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        executablePath.<a class="code" href="../../d4/dbb/classxii_string_builder.htm#a6c4ff4b9a231f6a5cd063b03613d87b4">Clear</a>();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">if</span> (executablePath.<a class="code" href="../../d2/d29/structxii_string_base.htm#a52ad52604f0b98226a0342393b8db662">IsEmpty</a>())</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">if</span> (opt.m_onStdOut.IsValid())</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;      <span class="keywordflow">if</span> (xiiFd::MakePipe(stdoutPipe).Failed())</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;      }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;      <span class="keywordflow">if</span> (stdoutPipe[0].AddFlags(O_NONBLOCK).Failed())</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;      {</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;      }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    <span class="keywordflow">if</span> (opt.m_onStdError.IsValid())</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    {</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;      <span class="keywordflow">if</span> (xiiFd::MakePipe(stderrPipe).Failed())</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;      {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;      }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;      <span class="keywordflow">if</span> (stderrPipe[0].AddFlags(O_NONBLOCK).Failed())</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;      }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    }</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">if</span> (xiiFd::MakePipe(startupErrorPipe, O_CLOEXEC).Failed())</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    {</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160; </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    pid_t childPid = fork();</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">if</span> (childPid &lt; 0)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">if</span> (childPid == 0) <span class="comment">// We are the child</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    {</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;      <span class="keywordflow">if</span> (suspended)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;      {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        <span class="keywordflow">if</span> (<span class="keyword">raise</span>(SIGSTOP) &lt; 0)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;          _exit(-1);</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        }</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;      }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      <span class="keywordflow">if</span> (opt.m_bHideConsoleWindow == <span class="keyword">true</span>)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;      {</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="comment">// Redirect STDIN to /dev/null</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        xiiInt32 stdinReplace = open(<span class="stringliteral">&quot;/dev/null&quot;</span>, O_RDONLY);</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        dup2(stdinReplace, STDIN_FILENO);</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        close(stdinReplace);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="keywordflow">if</span> (!opt.m_onStdOut.IsValid())</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        {</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;          xiiInt32 stdoutReplace = open(<span class="stringliteral">&quot;/dev/null&quot;</span>, O_WRONLY);</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;          dup2(stdoutReplace, STDOUT_FILENO);</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;          close(stdoutReplace);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        <span class="keywordflow">if</span> (!opt.m_onStdError.IsValid())</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        {</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;          xiiInt32 stderrReplace = open(<span class="stringliteral">&quot;/dev/null&quot;</span>, O_WRONLY);</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;          dup2(stderrReplace, STDERR_FILENO);</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;          close(stderrReplace);</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        }</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;      }</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;      {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="comment">// TODO: Launch a x-terminal-emulator with the command and somehow redirect STDOUT, etc?</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        XII_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;      }</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;      <span class="keywordflow">if</span> (opt.m_onStdOut.IsValid())</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;      {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        stdoutPipe[0].Close();                       <span class="comment">// We don&#39;t need the read end of the pipe in the child process</span></div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        dup2(stdoutPipe[1].Borrow(), STDOUT_FILENO); <span class="comment">// redirect the write end to STDOUT</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        stdoutPipe[1].Close();</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;      }</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;      <span class="keywordflow">if</span> (opt.m_onStdError.IsValid())</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;      {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        stderrPipe[0].Close();                       <span class="comment">// We don&#39;t need the read end of the pipe in the child process</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        dup2(stderrPipe[1].Borrow(), STDERR_FILENO); <span class="comment">// redirect the write end to STDERR</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        stderrPipe[1].Close();</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;      }</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160; </div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;      startupErrorPipe[0].Close(); <span class="comment">// we don&#39;t need the read end of the startup error pipe in the child process</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;      <a class="code" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray&lt;char*, 9&gt;</a> args;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160; </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;      args.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(executablePath.<a class="code" href="../../d4/dbb/classxii_string_builder.htm#a83ea1990a5c974e5d806e9f32146b2a1">GetData</a>()));</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;      <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="../../df/dfb/structxii_hybrid_string.htm">xiiString</a>&amp; arg : opt.m_Arguments)</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;      {</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        args.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(<span class="keyword">const_cast&lt;</span><span class="keywordtype">char</span>*<span class="keyword">&gt;</span>(arg.<a class="code" href="../../df/d4f/structxii_hybrid_string_base.htm#af918be3076cb4cb09be77b2783bc8029">GetData</a>()));</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;      }</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;      args.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(<span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160; </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;      <span class="keywordflow">if</span> (!opt.m_sWorkingDirectory.IsEmpty())</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;      {</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordflow">if</span> (chdir(opt.m_sWorkingDirectory.GetData()) &lt; 0)</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;          <span class="keyword">auto</span> err = ProcessStartupError{ProcessStartupError::Type::FailedToChangeWorkingDirectory, 0};</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;          XII_IGNORE_UNUSED(write(startupErrorPipe[1].Borrow(), &amp;err, <span class="keyword">sizeof</span>(err)));</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;          startupErrorPipe[1].Close();</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;          _exit(-1);</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        }</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;      }</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160; </div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;      <span class="keywordflow">if</span> (execv(executablePath, args.<a class="code" href="../../da/d4c/classxii_array_base.htm#a2ac4701f79554bcc89ba1a2b0ad5f9ad">GetData</a>()) &lt; 0)</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;      {</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <span class="keyword">auto</span> err = ProcessStartupError{ProcessStartupError::Type::FailedToExecv, errno};</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        XII_IGNORE_UNUSED(write(startupErrorPipe[1].Borrow(), &amp;err, <span class="keyword">sizeof</span>(err)));</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        startupErrorPipe[1].Close();</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        _exit(-1);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;      }</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    {</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;      startupErrorPipe[1].Close(); <span class="comment">// We don&#39;t need the write end of the startup error pipe in the parent process</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;      stdoutPipe[1].Close();       <span class="comment">// Don&#39;t need the write end in the parent process</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;      stderrPipe[1].Close();       <span class="comment">// Don&#39;t need the write end in the parent process</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160; </div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;      ProcessStartupError err     = {};</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;      <span class="keyword">auto</span>                errSize = read(startupErrorPipe[0].Borrow(), &amp;err, <span class="keyword">sizeof</span>(err));</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;      startupErrorPipe[0].Close(); <span class="comment">// we no longer need the read end of the startup error pipe</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;      <span class="comment">// There are two possible cases here</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;      <span class="comment">// Case 1: errSize is equal to 0, which means no error happened on the startupErrorPipe was closed during the execv call</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;      <span class="comment">// Case 2: errSize &gt; 0 in which case there was an error before the pipe was closed normally.</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;      <span class="keywordflow">if</span> (errSize &gt; 0)</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;      {</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        XII_ASSERT_DEV(errSize == <span class="keyword">sizeof</span>(err), <span class="stringliteral">&quot;Child process should have written a full ProcessStartupError struct&quot;</span>);</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        <span class="keywordflow">switch</span> (err.type)</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        {</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;          <span class="keywordflow">case</span> ProcessStartupError::Type::FailedToChangeWorkingDirectory:</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            <a class="code" href="../../d4/dc6/classxii_log.htm#a9312254ec6a5da7419b6e62163192464">xiiLog::Error</a>(<span class="stringliteral">&quot;Failed to start process &#39;{}&#39; because the given working directory &#39;{}&#39; is invalid&quot;</span>, opt.m_sProcess, opt.m_sWorkingDirectory);</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;          <span class="keywordflow">case</span> ProcessStartupError::Type::FailedToExecv:</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <a class="code" href="../../d4/dc6/classxii_log.htm#a9312254ec6a5da7419b6e62163192464">xiiLog::Error</a>(<span class="stringliteral">&quot;Failed to exec when starting process &#39;{}&#39; the error code is &#39;{}&#39;&quot;</span>, opt.m_sProcess, err.errorCode);</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        }</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;      }</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160; </div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;      outPid = childPid;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160; </div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;      <span class="keywordflow">if</span> (opt.m_onStdOut.IsValid())</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;      {</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        outStdOutFd = std::move(stdoutPipe[0]);</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;      }</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160; </div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;      <span class="keywordflow">if</span> (opt.m_onStdError.IsValid())</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;      {</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        outStdErrFd = std::move(stderrPipe[0]);</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;      }</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160; </div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;  }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;};</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;xiiProcess::xiiProcess()</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;{</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;  m_pImpl = XII_DEFAULT_NEW(<a class="code" href="../../da/d24/structxii_process_impl.htm">xiiProcessImpl</a>);</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;}</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160; </div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;xiiProcess::~xiiProcess()</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;{</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;  <span class="keywordflow">if</span> (GetState() == xiiProcessState::Running)</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;    <a class="code" href="../../d4/dc6/classxii_log.htm#a67477f0993da4b2f7b6fcdf86bf3d134">xiiLog::Dev</a>(<span class="stringliteral">&quot;Process still running - terminating &#39;{}&#39;&quot;</span>, m_sProcess);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    Terminate().IgnoreResult();</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  }</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160; </div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;  <span class="comment">// Explicitly clear the implementation here so that member</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  <span class="comment">// state (e.g. delegates) used by the impl survives the implementation.</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;  m_pImpl.Clear();</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;}</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160; </div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiProcess::Execute(<span class="keyword">const</span> xiiProcessOptions&amp; opt, xiiInt32* out_iExitCode <span class="comment">/*= nullptr*/</span>)</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;{</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;  pid_t childPid = 0;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> stdoutFd;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> stderrFd;</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  <span class="keywordflow">if</span> (xiiProcessImpl::StartChildProcess(opt, childPid, <span class="keyword">false</span>, stdoutFd, stderrFd).Failed())</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;  {</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;  }</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160; </div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;  <a class="code" href="../../da/d24/structxii_process_impl.htm">xiiProcessImpl</a> impl;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <span class="keywordflow">if</span> (stdoutFd.IsValid())</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  {</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    impl.AddStream(std::move(stdoutFd), opt.m_onStdOut);</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  }</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160; </div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  <span class="keywordflow">if</span> (stderrFd.IsValid())</div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;  {</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    impl.AddStream(std::move(stderrFd), opt.m_onStdError);</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;  }</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160; </div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  <span class="keywordflow">if</span> (impl.GetNumStreams() &gt; 0 &amp;&amp; impl.StartStreamWatcher().Failed())</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;  {</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;  }</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160; </div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;  xiiInt32 childStatus = -1;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  pid_t    waitedPid   = waitpid(childPid, &amp;childStatus, 0);</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;  <span class="keywordflow">if</span> (waitedPid &lt; 0)</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;  {</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  }</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;  <span class="keywordflow">if</span> (out_iExitCode != <span class="keyword">nullptr</span>)</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  {</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;    <span class="keywordflow">if</span> (WIFEXITED(childStatus))</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    {</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;      *out_iExitCode = WEXITSTATUS(childStatus);</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    }</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    {</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;      *out_iExitCode = -1;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;  }</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;}</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160; </div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiProcess::Launch(<span class="keyword">const</span> xiiProcessOptions&amp; opt, <a class="code" href="../../d7/d55/structxii_bitflags.htm">xiiBitflags&lt;xiiProcessLaunchFlags&gt;</a> launchFlags <span class="comment">/*= xiiProcessLaunchFlags::None*/</span>)</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;{</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;  XII_ASSERT_DEV(m_pImpl-&gt;m_childPid == -1, <span class="stringliteral">&quot;Can not reuse an instance of xiiProcess&quot;</span>);</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160; </div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> stdoutFd;</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;  <a class="code" href="../../df/d40/classxii_fd.htm">xiiFd</a> stderrFd;</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160; </div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;  <span class="keywordflow">if</span> (xiiProcessImpl::StartChildProcess(opt, m_pImpl-&gt;m_childPid, launchFlags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#af2c990725fd731e800eeb6a22945003f">IsSet</a>(xiiProcessLaunchFlags::Suspended), stdoutFd, stderrFd).Failed())</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;  {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;  }</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160; </div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;  m_pImpl-&gt;m_exitCodeAvailable = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;  m_pImpl-&gt;m_processSuspended  = launchFlags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#af2c990725fd731e800eeb6a22945003f">IsSet</a>(xiiProcessLaunchFlags::Suspended);</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160; </div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;  <span class="keywordflow">if</span> (stdoutFd.IsValid())</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;  {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;    m_pImpl-&gt;AddStream(std::move(stdoutFd), opt.m_onStdOut);</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;  }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160; </div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;  <span class="keywordflow">if</span> (stderrFd.IsValid())</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;  {</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    m_pImpl-&gt;AddStream(std::move(stderrFd), opt.m_onStdError);</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;  }</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160; </div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;  <span class="keywordflow">if</span> (m_pImpl-&gt;GetNumStreams() &gt; 0)</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;  {</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;    <span class="keywordflow">if</span> (m_pImpl-&gt;StartStreamWatcher().Failed())</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    {</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    }</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;  }</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160; </div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  <span class="keywordflow">if</span> (launchFlags.<a class="code" href="../../d7/d55/structxii_bitflags.htm#af2c990725fd731e800eeb6a22945003f">IsSet</a>(xiiProcessLaunchFlags::Detached))</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  {</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;    Detach();</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;  }</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160; </div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;}</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160; </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiProcess::ResumeSuspended()</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;{</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  <span class="keywordflow">if</span> (m_pImpl-&gt;m_childPid &lt; 0 || !m_pImpl-&gt;m_processSuspended)</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  {</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;  }</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160; </div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  <span class="keywordflow">if</span> (kill(m_pImpl-&gt;m_childPid, SIGCONT) &lt; 0)</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;  {</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;  }</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;  m_pImpl-&gt;m_processSuspended = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;}</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160; </div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiProcess::WaitToFinish(<a class="code" href="../../d7/dc1/structxii_time.htm">xiiTime</a> timeout <span class="comment">/*= xiiTime::MakeZero()*/</span>)</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;{</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;  xiiInt32 childStatus = 0;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;  XII_SCOPE_EXIT(m_pImpl-&gt;StopStreamWatcher());</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160; </div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;  <span class="keywordflow">if</span> (timeout.<a class="code" href="../../d7/dc1/structxii_time.htm#a0c6420bf3eee91dbe57bfd09ed62e62e">IsZero</a>())</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  {</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <span class="keywordflow">if</span> (waitpid(m_pImpl-&gt;m_childPid, &amp;childStatus, 0) &lt; 0)</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    {</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;    }</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  }</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;  {</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;    xiiInt32 waitResult = 0;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    <a class="code" href="../../d7/dc1/structxii_time.htm">xiiTime</a>  startWait  = <a class="code" href="../../d7/dc1/structxii_time.htm#a62c41574df46e952d657c3b678f3705b">xiiTime::Now</a>();</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;    <span class="keywordflow">while</span> (<span class="keyword">true</span>)</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    {</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;      waitResult = waitpid(m_pImpl-&gt;m_childPid, &amp;childStatus, WNOHANG);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;      <span class="keywordflow">if</span> (waitResult &lt; 0)</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;      {</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;      }</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;      <span class="keywordflow">if</span> (waitResult &gt; 0)</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;      {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;      }</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;      <a class="code" href="../../d7/dc1/structxii_time.htm">xiiTime</a> timeSpent = <a class="code" href="../../d7/dc1/structxii_time.htm#a62c41574df46e952d657c3b678f3705b">xiiTime::Now</a>() - startWait;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;      <span class="keywordflow">if</span> (timeSpent &gt; timeout)</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;      {</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;        <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;      }</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;      <a class="code" href="../../d4/d5c/classxii_thread_utils.htm#aab9b6ec6e0dd99a7b55f2bca67d17263">xiiThreadUtils::Sleep</a>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a>(<a class="code" href="../../d7/dc1/structxii_time.htm#afb71fcc50d8ca4bfd7f338609183fc37">xiiTime::MakeFromMilliseconds</a>(100.0), timeout - timeSpent));</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    }</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  }</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160; </div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;  <span class="keywordflow">if</span> (WIFEXITED(childStatus))</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  {</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    m_iExitCode = WEXITSTATUS(childStatus);</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  }</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;  {</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    m_iExitCode = -1;</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;  }</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;  m_pImpl-&gt;m_exitCodeAvailable = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160; </div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;}</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160; </div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiProcess::Terminate()</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;{</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;  <span class="keywordflow">if</span> (m_pImpl-&gt;m_childPid == -1)</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;  {</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;  }</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160; </div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;  XII_SCOPE_EXIT(m_pImpl-&gt;StopStreamWatcher());</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160; </div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;  <span class="keywordflow">if</span> (kill(m_pImpl-&gt;m_childPid, SIGKILL) &lt; 0)</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;  {</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;    <span class="keywordflow">if</span> (errno != ESRCH) <span class="comment">// ESRCH = Process does not exist</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    {</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;    }</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  }</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;  m_pImpl-&gt;m_exitCodeAvailable = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;  m_iExitCode                  = -1;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160; </div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;}</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160; </div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;xiiProcessState xiiProcess::GetState()<span class="keyword"> const</span></div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;  <span class="keywordflow">if</span> (m_pImpl-&gt;m_childPid == -1)</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;  {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    <span class="keywordflow">return</span> xiiProcessState::NotStarted;</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;  }</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160; </div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;  <span class="keywordflow">if</span> (m_pImpl-&gt;m_exitCodeAvailable)</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;  {</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    <span class="keywordflow">return</span> xiiProcessState::Finished;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;  }</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160; </div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;  xiiInt32 childStatus = -1;</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;  xiiInt32 waitResult  = waitpid(m_pImpl-&gt;m_childPid, &amp;childStatus, WNOHANG);</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;  <span class="keywordflow">if</span> (waitResult &gt; 0)</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;  {</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    m_iExitCode                  = WEXITSTATUS(childStatus);</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    m_pImpl-&gt;m_exitCodeAvailable = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160; </div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    m_pImpl-&gt;StopStreamWatcher();</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160; </div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;    <span class="keywordflow">return</span> xiiProcessState::Finished;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;  }</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160; </div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;  <span class="keywordflow">return</span> xiiProcessState::Running;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;}</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160; </div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;<span class="keywordtype">void</span> xiiProcess::Detach()</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;{</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;  m_pImpl-&gt;m_childPid = -1;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;}</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160; </div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;xiiOsProcessHandle xiiProcess::GetProcessHandle()<span class="keyword"> const</span></div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;  XII_ASSERT_DEV(<span class="keyword">false</span>, <span class="stringliteral">&quot;There is no process handle on posix&quot;</span>);</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;}</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160; </div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;xiiOsProcessID xiiProcess::GetProcessID()<span class="keyword"> const</span></div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;  XII_ASSERT_DEV(m_pImpl-&gt;m_childPid != -1, <span class="stringliteral">&quot;No ProcessID available&quot;</span>);</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;  <span class="keywordflow">return</span> m_pImpl-&gt;m_childPid;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;}</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160; </div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;xiiOsProcessID xiiProcess::GetCurrentProcessID()</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;{</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;  <span class="keywordflow">return</span> getpid();</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;}</div>
<div class="ttc" id="aclassxii_array_base_htm_a2ac4701f79554bcc89ba1a2b0ad5f9ad"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#a2ac4701f79554bcc89ba1a2b0ad5f9ad">xiiArrayBase::GetData</a></div><div class="ttdeci">T * GetData()</div><div class="ttdoc">Returns a pointer to the array data, or nullptr if the array is empty.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:417</div></div>
<div class="ttc" id="aclassxii_array_base_htm_a4114fd2fe9dc9b02ce50e8d723515c24"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#a4114fd2fe9dc9b02ce50e8d723515c24">xiiArrayBase::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(xiiUInt32 uiCount)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Extra elements might be uninitialized.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:147</div></div>
<div class="ttc" id="aclassxii_array_base_htm_a43100f93e19bb795ea0980dae2b28e0b"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">xiiArrayBase::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:164</div></div>
<div class="ttc" id="aclassxii_array_base_htm_a8b86f58a2097871da0e0b91eecc823e4"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">xiiArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:325</div></div>
<div class="ttc" id="aclassxii_array_base_htm_aeb9f05e6229fcca31131a822a99bc1f9"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#aeb9f05e6229fcca31131a822a99bc1f9">xiiArrayBase::SetCount</a></div><div class="ttdeci">void SetCount(xiiUInt32 uiCount)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Default constructs extra elements if the array is...</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:98</div></div>
<div class="ttc" id="aclassxii_dynamic_array_htm"><div class="ttname"><a href="../../dc/da4/classxii_dynamic_array.htm">xiiDynamicArray&lt; xiiStringBuilder &gt;</a></div></div>
<div class="ttc" id="aclassxii_fd_htm"><div class="ttname"><a href="../../df/d40/classxii_fd.htm">xiiFd</a></div><div class="ttdef"><b>Definition:</b> Process_posix.h:20</div></div>
<div class="ttc" id="aclassxii_hybrid_array_htm"><div class="ttname"><a href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray</a></div><div class="ttdoc">A hybrid array uses in-place storage to handle the first few elements without any allocation....</div><div class="ttdef"><b>Definition:</b> HybridArray.h:12</div></div>
<div class="ttc" id="aclassxii_log_htm_a67477f0993da4b2f7b6fcdf86bf3d134"><div class="ttname"><a href="../../d4/dc6/classxii_log.htm#a67477f0993da4b2f7b6fcdf86bf3d134">xiiLog::Dev</a></div><div class="ttdeci">static void Dev(xiiLogInterface *pInterface, const xiiFormatString &amp;string)</div><div class="ttdoc">Status information that is nice to have during development.</div></div>
<div class="ttc" id="aclassxii_log_htm_a9312254ec6a5da7419b6e62163192464"><div class="ttname"><a href="../../d4/dc6/classxii_log.htm#a9312254ec6a5da7419b6e62163192464">xiiLog::Error</a></div><div class="ttdeci">static void Error(xiiLogInterface *pInterface, const xiiFormatString &amp;string)</div><div class="ttdoc">An error that needs to be fixed as soon as possible.</div><div class="ttdef"><b>Definition:</b> Log.cpp:361</div></div>
<div class="ttc" id="aclassxii_o_s_file_htm_a119478d3ed9b06762cbcfc54be300ae3"><div class="ttname"><a href="../../da/d95/classxii_o_s_file.htm#a119478d3ed9b06762cbcfc54be300ae3">xiiOSFile::GetCurrentWorkingDirectory</a></div><div class="ttdeci">static const xiiString GetCurrentWorkingDirectory()</div><div class="ttdoc">Returns the processes current working directory (CWD).</div><div class="ttdef"><b>Definition:</b> OSFile_win.h:685</div></div>
<div class="ttc" id="aclassxii_o_s_file_htm_adc699c70c70c4ed0ad6e9375ebff36d4"><div class="ttname"><a href="../../da/d95/classxii_o_s_file.htm#adc699c70c70c4ed0ad6e9375ebff36d4">xiiOSFile::GetFileStats</a></div><div class="ttdeci">static xiiResult GetFileStats(xiiStringView sFileOrFolder, xiiFileStats &amp;out_stats)</div><div class="ttdoc">Gets the stats about the given file or folder. Returns false, if the stats could not be determined.</div></div>
<div class="ttc" id="aclassxii_o_s_thread_htm"><div class="ttname"><a href="../../d6/db1/classxii_o_s_thread.htm">xiiOSThread</a></div><div class="ttdoc">Implementation of a thread.</div><div class="ttdef"><b>Definition:</b> OSThread.h:12</div></div>
<div class="ttc" id="aclassxii_o_s_thread_htm_a2ee60bbb38a34f6ed88b3842defe9b3f"><div class="ttname"><a href="../../d6/db1/classxii_o_s_thread.htm#a2ee60bbb38a34f6ed88b3842defe9b3f">xiiOSThread::Join</a></div><div class="ttdeci">void Join()</div><div class="ttdoc">Waits in the calling thread until the thread has finished execution (e.g. returned from the thread fu...</div><div class="ttdef"><b>Definition:</b> OSThread_posix.h:62</div></div>
<div class="ttc" id="aclassxii_o_s_thread_htm_a9fbb6bcdde566264da1d8e10bb62b887"><div class="ttname"><a href="../../d6/db1/classxii_o_s_thread.htm#a9fbb6bcdde566264da1d8e10bb62b887">xiiOSThread::Start</a></div><div class="ttdeci">void Start()</div><div class="ttdoc">Starts the thread.</div><div class="ttdef"><b>Definition:</b> OSThread_posix.h:26</div></div>
<div class="ttc" id="aclassxii_string_builder_htm"><div class="ttname"><a href="../../d4/dbb/classxii_string_builder.htm">xiiStringBuilder</a></div><div class="ttdoc">xiiStringBuilder is a class that is meant for creating and modifying strings.</div><div class="ttdef"><b>Definition:</b> StringBuilder.h:35</div></div>
<div class="ttc" id="aclassxii_string_builder_htm_a6c4ff4b9a231f6a5cd063b03613d87b4"><div class="ttname"><a href="../../d4/dbb/classxii_string_builder.htm#a6c4ff4b9a231f6a5cd063b03613d87b4">xiiStringBuilder::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Resets this string to be empty. Does not deallocate any previously allocated data,...</div><div class="ttdef"><b>Definition:</b> StringBuilder_inl.h:88</div></div>
<div class="ttc" id="aclassxii_string_builder_htm_a83ea1990a5c974e5d806e9f32146b2a1"><div class="ttname"><a href="../../d4/dbb/classxii_string_builder.htm#a83ea1990a5c974e5d806e9f32146b2a1">xiiStringBuilder::GetData</a></div><div class="ttdeci">const char * GetData() const</div><div class="ttdoc">Returns a char pointer to the internal Utf8 data.</div><div class="ttdef"><b>Definition:</b> StringBuilder_inl.h:148</div></div>
<div class="ttc" id="aclassxii_string_builder_htm_ad9a3d492c8f9c576a611e3d5a852a16b"><div class="ttname"><a href="../../d4/dbb/classxii_string_builder.htm#ad9a3d492c8f9c576a611e3d5a852a16b">xiiStringBuilder::Append</a></div><div class="ttdeci">void Append(xiiUInt32 uiChar)</div><div class="ttdoc">Appends a single Utf32 character.</div><div class="ttdef"><b>Definition:</b> StringBuilder_inl.h:94</div></div>
<div class="ttc" id="aclassxii_string_builder_htm_aeb8dedf699785b95812b7b137a901324"><div class="ttname"><a href="../../d4/dbb/classxii_string_builder.htm#aeb8dedf699785b95812b7b137a901324">xiiStringBuilder::AppendPath</a></div><div class="ttdeci">void AppendPath(xiiStringView sPath1, xiiStringView sPath2={}, xiiStringView sPath3={}, xiiStringView sPath4={})</div><div class="ttdoc">Appends several path pieces. Makes sure they are always properly separated by a slash.</div><div class="ttdef"><b>Definition:</b> StringBuilder.cpp:864</div></div>
<div class="ttc" id="aclassxii_string_utils_htm_a0fa20e8fc3fdb98e0166ff5c1b6e83e8"><div class="ttname"><a href="../../df/d65/classxii_string_utils.htm#a0fa20e8fc3fdb98e0166ff5c1b6e83e8">xiiStringUtils::FindSubString</a></div><div class="ttdeci">static const char * FindSubString(const char *szSource, const char *szStringToFind, const char *pSourceEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;(), const char *szStringToFindEnd=xiiUnicodeUtils::GetMaxStringEnd&lt; char &gt;())</div><div class="ttdoc">Searches for the first occurrence of szStringToFind in szSource.</div><div class="ttdef"><b>Definition:</b> StringUtils.cpp:548</div></div>
<div class="ttc" id="aclassxii_thread_utils_htm_aab9b6ec6e0dd99a7b55f2bca67d17263"><div class="ttname"><a href="../../d4/d5c/classxii_thread_utils.htm#aab9b6ec6e0dd99a7b55f2bca67d17263">xiiThreadUtils::Sleep</a></div><div class="ttdeci">static void Sleep(const xiiTime &amp;duration)</div><div class="ttdoc">Suspends the execution of the current thread for the given amount of time. (Precision may vary accord...</div><div class="ttdef"><b>Definition:</b> ThreadUtils_posix.h:25</div></div>
<div class="ttc" id="aclassxii_unique_ptr_htm"><div class="ttname"><a href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr&lt; xiiOSThread &gt;</a></div></div>
<div class="ttc" id="anamespacexii_math_htm_a2c660f80f0df5bb91a751d12a93cb9cb"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:26</div></div>
<div class="ttc" id="astructxii_bitflags_htm"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm">xiiBitflags</a></div><div class="ttdoc">The xiiBitflags class allows you to work with type-safe bitflags.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:82</div></div>
<div class="ttc" id="astructxii_bitflags_htm_af2c990725fd731e800eeb6a22945003f"><div class="ttname"><a href="../../d7/d55/structxii_bitflags.htm#af2c990725fd731e800eeb6a22945003f">xiiBitflags::IsSet</a></div><div class="ttdeci">XII_ALWAYS_INLINE bool IsSet(Enum flag) const</div><div class="ttdoc">Checks if certain flags are set within the bitfield.</div><div class="ttdef"><b>Definition:</b> Bitflags.h:124</div></div>
<div class="ttc" id="astructxii_delegate_htm"><div class="ttname"><a href="../../dc/d84/structxii_delegate.htm">xiiDelegate</a></div><div class="ttdoc">A generic delegate class which supports static functions and member functions.</div><div class="ttdef"><b>Definition:</b> Delegate.h:76</div></div>
<div class="ttc" id="astructxii_file_stats_htm"><div class="ttname"><a href="../../d6/dd0/structxii_file_stats.htm">xiiFileStats</a></div><div class="ttdoc">Holds the stats for a file.</div><div class="ttdef"><b>Definition:</b> OSFile.h:34</div></div>
<div class="ttc" id="astructxii_file_stats_htm_a1de1837a109bff62cb0fc73fbab0bb5d"><div class="ttname"><a href="../../d6/dd0/structxii_file_stats.htm#a1de1837a109bff62cb0fc73fbab0bb5d">xiiFileStats::m_bIsDirectory</a></div><div class="ttdeci">bool m_bIsDirectory</div><div class="ttdoc">Whether the file object is a file or folder.</div><div class="ttdef"><b>Definition:</b> OSFile.h:56</div></div>
<div class="ttc" id="astructxii_hybrid_string_base_htm_af918be3076cb4cb09be77b2783bc8029"><div class="ttname"><a href="../../df/d4f/structxii_hybrid_string_base.htm#af918be3076cb4cb09be77b2783bc8029">xiiHybridStringBase::GetData</a></div><div class="ttdeci">const char * GetData() const</div><div class="ttdoc">Returns a pointer to the internal Utf8 string.</div><div class="ttdef"><b>Definition:</b> String_inl.h:56</div></div>
<div class="ttc" id="astructxii_hybrid_string_htm"><div class="ttname"><a href="../../df/dfb/structxii_hybrid_string.htm">xiiHybridString&lt; 32, xiiDefaultAllocatorWrapper &gt;</a></div></div>
<div class="ttc" id="astructxii_process_impl_1_1_std_stream_info_htm"><div class="ttname"><a href="../../d0/d7a/structxii_process_impl_1_1_std_stream_info.htm">xiiProcessImpl::StdStreamInfo</a></div><div class="ttdef"><b>Definition:</b> Process_posix.h:159</div></div>
<div class="ttc" id="astructxii_process_impl_htm"><div class="ttname"><a href="../../da/d24/structxii_process_impl.htm">xiiProcessImpl</a></div><div class="ttdef"><b>Definition:</b> Process_posix.h:148</div></div>
<div class="ttc" id="astructxii_result_htm"><div class="ttname"><a href="../../dd/dad/structxii_result.htm">xiiResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:56</div></div>
<div class="ttc" id="astructxii_string_base_htm_a52ad52604f0b98226a0342393b8db662"><div class="ttname"><a href="../../d2/d29/structxii_string_base.htm#a52ad52604f0b98226a0342393b8db662">xiiStringBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns whether the string is an empty string.</div><div class="ttdef"><b>Definition:</b> StringBase_inl.h:25</div></div>
<div class="ttc" id="astructxii_string_view_htm"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm">xiiStringView</a></div><div class="ttdoc">xiiStringView represent a read-only sub-string of a larger string, as it can store a dedicated string...</div><div class="ttdef"><b>Definition:</b> StringView.h:28</div></div>
<div class="ttc" id="astructxii_string_view_htm_a33cac6de00c81d6edaa589bbf71e56d3"><div class="ttname"><a href="../../da/d9d/structxii_string_view.htm#a33cac6de00c81d6edaa589bbf71e56d3">xiiStringView::Split</a></div><div class="ttdeci">void Split(bool bReturnEmptyStrings, Container &amp;ref_output, const char *szSeparator1, const char *szSeparator2=nullptr, const char *szSeparator3=nullptr, const char *szSeparator4=nullptr, const char *szSeparator5=nullptr, const char *szSeparator6=nullptr) const</div><div class="ttdoc">Fills the given container with xiiStringView's which represent each found substring....</div><div class="ttdef"><b>Definition:</b> StringView_inl.h:137</div></div>
<div class="ttc" id="astructxii_time_htm"><div class="ttname"><a href="../../d7/dc1/structxii_time.htm">xiiTime</a></div><div class="ttdoc">The time class encapsulates a double value storing the time in seconds.</div><div class="ttdef"><b>Definition:</b> Time.h:12</div></div>
<div class="ttc" id="astructxii_time_htm_a0c6420bf3eee91dbe57bfd09ed62e62e"><div class="ttname"><a href="../../d7/dc1/structxii_time.htm#a0c6420bf3eee91dbe57bfd09ed62e62e">xiiTime::IsZero</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE bool IsZero() const</div><div class="ttdoc">Returns true if the stored time is exactly zero. That typically means the value was not changed from ...</div><div class="ttdef"><b>Definition:</b> Time.h:44</div></div>
<div class="ttc" id="astructxii_time_htm_a62c41574df46e952d657c3b678f3705b"><div class="ttname"><a href="../../d7/dc1/structxii_time.htm#a62c41574df46e952d657c3b678f3705b">xiiTime::Now</a></div><div class="ttdeci">static xiiTime Now()</div><div class="ttdoc">Gets the current time.</div><div class="ttdef"><b>Definition:</b> Time_osx.h:17</div></div>
<div class="ttc" id="astructxii_time_htm_afb71fcc50d8ca4bfd7f338609183fc37"><div class="ttname"><a href="../../d7/dc1/structxii_time.htm#afb71fcc50d8ca4bfd7f338609183fc37">xiiTime::MakeFromMilliseconds</a></div><div class="ttdeci">constexpr static XII_ALWAYS_INLINE xiiTime MakeFromMilliseconds(double fMilliseconds)</div><div class="ttdoc">Creates an instance of xiiTime that was initialized from milliseconds.</div><div class="ttdef"><b>Definition:</b> Time.h:24</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_93ea1dc105d79df7757252ae41d4400e.htm">System</a></li><li class="navelem"><a class="el" href="../../dir_f794a5464cdd7c796ca802b0cf288ca7.htm">Implementation</a></li><li class="navelem"><a class="el" href="../../dir_b342b897904f051269c296e3c59158c5.htm">Posix</a></li><li class="navelem"><b>Process_posix.h</b></li>
    <li class="footer">Generated on Mon Jul 1 2024 12:44:16 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.9.1 </li>
  </ul>
</div>
</body>
</html>

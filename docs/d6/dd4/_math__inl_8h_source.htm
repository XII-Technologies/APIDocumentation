<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Math/Implementation/Math_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d6/dd4/_math__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Math_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="keyword">namespace </span><a class="code" href="../../d1/d37/namespacexii_math.htm">xiiMath</a></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;{</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00008"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a35180b061a4620fef9f6cb839a9c5736">    8</a></span>&#160;  XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d37/namespacexii_math.htm#afbbbae240e0cea673cd16646b5142e06">Sin</a>(<a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> a) { <span class="keywordflow">return</span> (Type)sin(a.<a class="code" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>()); }</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a548ba67358020f40361806e56efac0ad">   11</a></span>&#160;  XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d37/namespacexii_math.htm#a194fc513007059c6e129cdeb321c3797">Cos</a>(<a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> a) { <span class="keywordflow">return</span> (Type)cos(a.<a class="code" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>()); }</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00014"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a2abf15b2d469153995ed4f43ca579474">   14</a></span>&#160;  XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d37/namespacexii_math.htm#a26cfe338b5414e37ddd30018f056b044">Tan</a>(<a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> a) { <span class="keywordflow">return</span> (Type)tan(a.<a class="code" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>()); }</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00017"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a052c2138d2e16b5d4ef6e3eb8723e3e4">   17</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code" href="../../d1/d37/namespacexii_math.htm#a8171dc1ee6c3bd3dfc3a54a33f3a9568">ASin</a>(Type f) { <span class="keywordflow">return</span> <a class="code" href="../../d3/ddb/classxii_angle_template.htm#a6daf638ae092b7998e03c16ba97e7239">xiiAngleTemplate&lt;Type&gt;::Radian</a>((Type)asin(f)); }</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a15e1455ec1b7935582b841c982b3b432">   20</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code" href="../../d1/d37/namespacexii_math.htm#a788a4e90cf6d0f3285b15fac90017188">ACos</a>(Type f) { <span class="keywordflow">return</span> <a class="code" href="../../d3/ddb/classxii_angle_template.htm#a6daf638ae092b7998e03c16ba97e7239">xiiAngleTemplate&lt;Type&gt;::Radian</a>((Type)acos(f)); }</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a8d0809d423a070470416cf6d76c97f57">   23</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code" href="../../d1/d37/namespacexii_math.htm#a8672de025a3ff765a6cb09d081974374">ATan</a>(Type f) { <span class="keywordflow">return</span> <a class="code" href="../../d3/ddb/classxii_angle_template.htm#a6daf638ae092b7998e03c16ba97e7239">xiiAngleTemplate&lt;Type&gt;::Radian</a>((Type)atan(f)); }</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#ab3d168e00bd7b5ad221c7c9226dd7ed3">   26</a></span>&#160;  XII_ALWAYS_INLINE <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code" href="../../d1/d37/namespacexii_math.htm#a41e2a06b9f2d78c5773c856fb84dc467">ATan2</a>(Type y, Type x) { <span class="keywordflow">return</span> <a class="code" href="../../d3/ddb/classxii_angle_template.htm#a6daf638ae092b7998e03c16ba97e7239">xiiAngleTemplate&lt;Type&gt;::Radian</a>((Type)atan2(y, x)); }</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a5f83a88442d55f44fb36cd05997a7c0c">   29</a></span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">Square</a>(T f)</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  {</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keywordflow">return</span> (f * f);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  }</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00035"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a48a82e9e2ea5c2a49caf87967d4f2012">   35</a></span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a367e0a2f31f1691c165d0871f3b709ff">Sign</a>(T f)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keywordflow">return</span> (f &lt; 0 ? T(-1) : f &gt; 0 ? T(1) : 0);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  }</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a435f566484863fc1c1067acaf883c5f9">   41</a></span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a821b432e7a9c8ac292eb255ee11e9e10">Abs</a>(T f)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  {</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">return</span> (f &lt; 0 ? -f : f);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  }</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a8929563dccc303319b83389d048d8cec">   47</a></span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">Min</a>(T f1, T f2)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">return</span> (f2 &lt; f1 ? f2 : f1);</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ARGS&gt;</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#acd77b0350e82d89ff2ff386c4f080bac">   53</a></span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">Min</a>(T f1, T f2, ARGS... f)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  {</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">Min</a>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">Min</a>(f1, f2), f...);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  }</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a54e3c11894c902cf3953f26436d607c6">   59</a></span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">Max</a>(T f1, T f2)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">return</span> (f1 &lt; f2 ? f2 : f1);</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  }</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160; </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... ARGS&gt;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">Max</a>(T f1, T f2, ARGS... f)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  {</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">Max</a>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">Max</a>(f1, f2), f...);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00071"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a1c76fabcf8a1d7531a753cbf123d75a0">   71</a></span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">Clamp</a>(T value, T min_val, T max_val)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  {</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">return</span> value &lt; min_val ? min_val : (max_val &lt; value ? max_val : value);</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a628e3ee84f97e830030903fbb1d05075">   77</a></span>&#160;  constexpr XII_ALWAYS_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a59baeff4b10d075014df97471c879dec">Saturate</a>(T value)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  {</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">Clamp</a>(value, T(0), T(1));</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#ac1067d4c24d9b02662c60a528c870580">   83</a></span>&#160;  constexpr Type <a class="code" href="../../d1/d37/namespacexii_math.htm#ac1067d4c24d9b02662c60a528c870580">Invert</a>(Type f)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  {</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> ((Type)1) / f;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;  }</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">   88</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">FirstBitLow</a>(xiiUInt32 value)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  {</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    XII_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitLow is undefined for 0&quot;</span>);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_PLATFORM_WINDOWS)</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    _BitScanForward(&amp;uiIndex, value);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="preprocessor">#elif XII_ENABLED(XII_COMPILER_GCC) || XII_ENABLED(XII_COMPILER_CLANG)</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> __builtin_ctz(value);</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    XII_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a64edf87d7df0f91c265eddac6f79fe45">  104</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">FirstBitLow</a>(xiiUInt64 value)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    XII_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitLow is undefined for 0&quot;</span>);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="preprocessor">#if __castxml__</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="preprocessor">#elif XII_ENABLED(XII_PLATFORM_WINDOWS)</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor">#  if XII_ENABLED(XII_PLATFORM_64BIT)</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    _BitScanForward64(&amp;uiIndex, value);</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor">#  else</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    uint32_t      lower      = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> returnCode = _BitScanForward(&amp;uiIndex, lower);</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span> (returnCode == 0)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      uint32_t upper = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value &gt;&gt; 32);</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      returnCode     = _BitScanForward(&amp;uiIndex, upper);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      <span class="keywordflow">if</span> (returnCode &gt; 0) <span class="comment">// Only can happen in Release build when XII_ASSERT_DEBUG(value != 0) would fail.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      {</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        uiIndex += 32; <span class="comment">// Add length of lower to index.</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      }</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    }</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="preprocessor">#  endif</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor">#elif XII_ENABLED(XII_COMPILER_GCC) || XII_ENABLED(XII_COMPILER_CLANG)</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keywordflow">return</span> __builtin_ctzll(value);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    XII_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">  137</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">FirstBitHigh</a>(xiiUInt32 value)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;  {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    XII_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitHigh is undefined for 0&quot;</span>);</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_PLATFORM_WINDOWS)</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    _BitScanReverse(&amp;uiIndex, value);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="preprocessor">#elif XII_ENABLED(XII_COMPILER_GCC) || XII_ENABLED(XII_COMPILER_CLANG)</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">return</span> 31 - __builtin_clz(value);</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    XII_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160; </div>
<div class="line"><a name="l00153"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#aa6adf5776953bc6fc8745c1a47f084fa">  153</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">FirstBitHigh</a>(xiiUInt64 value)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  {</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    XII_ASSERT_DEBUG(value != 0, <span class="stringliteral">&quot;FirstBitHigh is undefined for 0&quot;</span>);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="preprocessor">#if __castxml__</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="preprocessor">#elif XII_ENABLED(XII_PLATFORM_WINDOWS)</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> uiIndex = 0;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="preprocessor">#  if XII_ENABLED(XII_PLATFORM_64BIT)</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    _BitScanReverse64(&amp;uiIndex, value);</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="preprocessor">#  else</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    uint32_t      upper      = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value &gt;&gt; 32);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> returnCode = _BitScanReverse(&amp;uiIndex, upper);</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordflow">if</span> (returnCode == 0)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    {</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      uint32_t lower = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      returnCode     = _BitScanReverse(&amp;uiIndex, lower);</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      uiIndex += 32; <span class="comment">// Add length of upper to index.</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="preprocessor">#  endif</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="keywordflow">return</span> uiIndex;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="preprocessor">#elif XII_ENABLED(XII_COMPILER_GCC) || XII_ENABLED(XII_COMPILER_CLANG)</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">return</span> 63 - __builtin_clzll(value);</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    XII_ASSERT_NOT_IMPLEMENTED;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  }</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#af0b1f1262ce64f475256f1fd30d7a509">  185</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#af0b1f1262ce64f475256f1fd30d7a509">CountTrailingZeros</a>(xiiUInt32 uiBitmask)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    <span class="keywordflow">return</span> (uiBitmask == 0) ? 32 : <a class="code" href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">FirstBitLow</a>(uiBitmask);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160; </div>
<div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a9888de6bcbc24405e2fc931e6647660c">  190</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#af0b1f1262ce64f475256f1fd30d7a509">CountTrailingZeros</a>(xiiUInt64 uiBitmask)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  {</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keyword">const</span> xiiUInt32 numLow  = <a class="code" href="../../d1/d37/namespacexii_math.htm#af0b1f1262ce64f475256f1fd30d7a509">CountTrailingZeros</a>(<span class="keyword">static_cast&lt;</span>xiiUInt32<span class="keyword">&gt;</span>(uiBitmask &amp; 0xFFFFFFFF));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keyword">const</span> xiiUInt32 numHigh = <a class="code" href="../../d1/d37/namespacexii_math.htm#af0b1f1262ce64f475256f1fd30d7a509">CountTrailingZeros</a>(<span class="keyword">static_cast&lt;</span>xiiUInt32<span class="keyword">&gt;</span>((uiBitmask &gt;&gt; 32u) &amp; 0xFFFFFFFF));</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    <span class="keywordflow">return</span> (numLow == 32) ? (32 + numHigh) : numLow;</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  }</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160; </div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a307af5bf30f7c96ec03c95f7db168acf">  198</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#a307af5bf30f7c96ec03c95f7db168acf">CountLeadingZeros</a>(xiiUInt32 uiBitmask)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keywordflow">return</span> (uiBitmask == 0) ? 32 : (31u - <a class="code" href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">FirstBitHigh</a>(uiBitmask));</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; </div>
<div class="line"><a name="l00203"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">  203</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">CountBits</a>(xiiUInt32 value)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  {</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_COMPILER_MSVC) &amp;&amp; (XII_ENABLED(XII_PLATFORM_ARCH_X86) || (XII_ENABLED(XII_PLATFORM_ARCH_ARM) &amp;&amp; XII_ENABLED(XII_PLATFORM_32BIT)))</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="preprocessor">#  if XII_ENABLED(XII_PLATFORM_ARCH_X86)</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> __popcnt(value);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor">#  else</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">return</span> _CountOneBits(value);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="preprocessor">#  endif</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="preprocessor">#elif XII_ENABLED(XII_COMPILER_GCC) || XII_ENABLED(XII_COMPILER_CLANG)</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">return</span> __builtin_popcount(value);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    value = value - ((value &gt;&gt; 1) &amp; 0x55555555u);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    value = (value &amp; 0x33333333u) + ((value &gt;&gt; 2) &amp; 0x33333333u);</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">return</span> ((value + (value &gt;&gt; 4) &amp; 0xF0F0F0Fu) * 0x1010101u) &gt;&gt; 24;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#afa200234e98a714b7fffbcb15d3cef96">  220</a></span>&#160;  XII_ALWAYS_INLINE xiiUInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">CountBits</a>(xiiUInt64 value)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    xiiUInt32 result = 0;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    result += <a class="code" href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">CountBits</a>(xiiUInt32(value));</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    result += <a class="code" href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">CountBits</a>(xiiUInt32(value &gt;&gt; 32));</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  }</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160; </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00229"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a7a04acdb41fa959fa96720bb82aa453b">  229</a></span>&#160;  XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d37/namespacexii_math.htm#ad15d801dd2652a993d5d49e111a240a6">Bitmask_LowN</a>(xiiUInt32 uiNumBitsToSet)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  {</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">return</span> (uiNumBitsToSet &gt;= <span class="keyword">sizeof</span>(Type) * 8) ? ~static_cast&lt;Type&gt;(0) : ((<span class="keyword">static_cast&lt;</span>Type<span class="keyword">&gt;</span>(1) &lt;&lt; uiNumBitsToSet) - <span class="keyword">static_cast&lt;</span>Type<span class="keyword">&gt;</span>(1));</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160; </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a27c6fee8c0ba0ebe6caa5c5306ec5e0d">  235</a></span>&#160;  XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d37/namespacexii_math.htm#a6d54815eb64f3d35d0457e5a00068371">Bitmask_HighN</a>(xiiUInt32 uiNumBitsToSet)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  {</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">return</span> (uiNumBitsToSet == 0) ? 0 : ~static_cast&lt;Type&gt;(0) &lt;&lt; ((<span class="keyword">sizeof</span>(Type) * 8) - xiiMath::Min&lt;xiiUInt32&gt;(uiNumBitsToSet, <span class="keyword">sizeof</span>(Type) * 8));</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00241"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a8a57351f79281b6428f6b68135a9045c">  241</a></span>&#160;  XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">Swap</a>(T&amp; ref_f1, T&amp; ref_f2)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  {</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    std::swap(ref_f1, ref_f2);</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160; </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00247"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#aea147de6b4795a54e22fb86c346aa033">  247</a></span>&#160;  XII_FORCE_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#af91f22a14862accf565f49eecc57cc3c">Lerp</a>(T f1, T f2, <span class="keywordtype">float</span> fFactor)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  {</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="comment">// value is not included in format string, to prevent requirement on FormatString.h, to break #include cycles</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    XII_ASSERT_DEBUG((fFactor &gt;= -0.00001f) &amp;&amp; (fFactor &lt;= 1.0f + 0.00001f), <span class="stringliteral">&quot;lerp: factor is not in the range [0, 1]&quot;</span>);</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keywordflow">return</span> (T)(f1 + (fFactor * (f2 - f1)));</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00256"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a678169c2e31b4c50802738533aa418ac">  256</a></span>&#160;  XII_FORCE_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#af91f22a14862accf565f49eecc57cc3c">Lerp</a>(T f1, T f2, <span class="keywordtype">double</span> fFactor)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  {</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="comment">// value is not included in format string, to prevent requirement on FormatString.h, to break #include cycles</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    XII_ASSERT_DEBUG((fFactor &gt;= -0.00001) &amp;&amp; (fFactor &lt;= 1.0 + 0.00001), <span class="stringliteral">&quot;lerp: factor is not in the range [0, 1]&quot;</span>);</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">return</span> (T)(f1 + (fFactor * (f2 - f1)));</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00266"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#ab9653076dfd2066f3f585d9514aa74f2">  266</a></span>&#160;  constexpr XII_FORCE_INLINE T <a class="code" href="../../d1/d37/namespacexii_math.htm#a36d95d7071a4d5d2cf2f71cd01fb9701">Step</a>(T value, T edge)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  {</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">return</span> (value &gt;= edge ? T(1) : T(0));</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160; </div>
<div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">  271</a></span>&#160;  constexpr XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">IsPowerOf2</a>(xiiInt32 value)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  }</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160; </div>
<div class="line"><a name="l00276"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#ace5369265d15d40a30539f64ec675fc4">  276</a></span>&#160;  constexpr XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">IsPowerOf2</a>(xiiUInt32 value)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  {</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  }</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a6dd78b0894c5e5d3cc5232557346927c">  281</a></span>&#160;  constexpr XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">IsPowerOf2</a>(xiiInt64 value)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  {</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;    <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160; </div>
<div class="line"><a name="l00286"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a4a21499761d169a611092a4276ddc35e">  286</a></span>&#160;  constexpr XII_FORCE_INLINE <span class="keywordtype">bool</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">IsPowerOf2</a>(xiiUInt64 value)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  {</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;    <span class="keywordflow">return</span> (value &lt; 1) ? false : ((value &amp; (value - 1)) == 0);</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160; </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00292"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">  292</a></span>&#160;  constexpr <span class="keywordtype">bool</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">IsEqual</a>(Type lhs, Type rhs, Type fEpsilon)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  {</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    <span class="keywordflow">return</span> ((rhs &gt;= lhs - fEpsilon) &amp;&amp; (rhs &lt;= lhs + fEpsilon));</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  }</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a9d8e4353645b9c233b3a359e1e45b7fa">  298</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a9d8e4353645b9c233b3a359e1e45b7fa">IsInRange</a>(T value, T minVal, T maxVal)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  {</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> minVal &lt; maxVal ? (value &gt;= minVal) &amp;&amp; (value &lt;= maxVal) : (value &lt;= minVal) &amp;&amp; (value &gt;= maxVal);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  }</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160; </div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00304"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">  304</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">IsZero</a>(Type f, Type fEpsilon)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    XII_ASSERT_DEBUG(fEpsilon &gt;= 0, <span class="stringliteral">&quot;Epsilon may not be negative.&quot;</span>);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160; </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">return</span> ((f &gt;= -fEpsilon) &amp;&amp; (f &lt;= fEpsilon));</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160; </div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00312"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a24d25cd66bd850d427a5771190704569">  312</a></span>&#160;  XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d37/namespacexii_math.htm#ac0e5bf7b2d32e5ea41f69e6f70b60aaf">Trunc</a>(Type f)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  {</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="keywordflow">if</span> (f &gt; 0)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#ad6842f0ad7ab4a71e50cc9b7944f45a1">Floor</a>(f);</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160; </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#aa43339fe6b184ea3acef846dc90f6147">Ceil</a>(f);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160; </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00321"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a7561d38d2b6c372843eb7b1dcc30e75f">  321</a></span>&#160;  XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d37/namespacexii_math.htm#aa61976adbc40a0c6c6c08a5471bfaa27">Fraction</a>(Type f)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keywordflow">return</span> (f - <a class="code" href="../../d1/d37/namespacexii_math.htm#ac0e5bf7b2d32e5ea41f69e6f70b60aaf">Trunc</a>(f));</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160; </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#adce079021459012fbdf663d1a2009ed1">  327</a></span>&#160;  <span class="keyword">inline</span> Type <a class="code" href="../../d1/d37/namespacexii_math.htm#adce079021459012fbdf663d1a2009ed1">SmoothStep</a>(Type x, Type edge1, Type edge2)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  {</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    <span class="keyword">const</span> Type divider = edge2 - edge1;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    <span class="keywordflow">if</span> (divider == (Type)0)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;      <span class="keywordflow">if</span> (x &gt;= edge2)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">return</span> (Type)1;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      <span class="keywordflow">return</span> (Type)0;</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;    }</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;    x = (x - edge1) / divider;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">if</span> (x &lt;= (Type)0)</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;      <span class="keywordflow">return</span> (Type)0;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;    <span class="keywordflow">if</span> (x &gt;= (Type)1)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;      <span class="keywordflow">return</span> (Type)1;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160; </div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keywordflow">return</span> (x * x * ((Type)3 - ((Type)2 * x)));</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  }</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#accfb14d3b4cfef8b668d35652167d670">  348</a></span>&#160;  <span class="keyword">inline</span> xiiUInt8 <a class="code" href="../../d1/d37/namespacexii_math.htm#accfb14d3b4cfef8b668d35652167d670">ColorFloatToByte</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    {</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    }</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>xiiUInt8<span class="keyword">&gt;</span>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a59baeff4b10d075014df97471c879dec">Saturate</a>(value) * 255.0f + 0.5f);</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160; </div>
<div class="line"><a name="l00362"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a347920d33052bd432a27837aaa57d31e">  362</a></span>&#160;  <span class="keyword">inline</span> xiiUInt16 <a class="code" href="../../d1/d37/namespacexii_math.htm#a347920d33052bd432a27837aaa57d31e">ColorFloatToShort</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    {</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    {</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>xiiUInt16<span class="keyword">&gt;</span>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a59baeff4b10d075014df97471c879dec">Saturate</a>(value) * 65535.0f + 0.5f);</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  }</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160; </div>
<div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#afbcde3de4c46690f6190ea205350f330">  376</a></span>&#160;  <span class="keyword">inline</span> xiiInt8 <a class="code" href="../../d1/d37/namespacexii_math.htm#afbcde3de4c46690f6190ea205350f330">ColorFloatToSignedByte</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    }</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;    {</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;      value = <a class="code" href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">Clamp</a>(value, -1.0f, 1.0f) * 127.0f;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;      <span class="keywordflow">if</span> (value &gt;= 0.0f)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;      {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        value += 0.5f;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;      }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      {</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        value -= 0.5f;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;      }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>xiiInt8<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    }</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a119567a6318a549fb6dbfc9d69728357">  399</a></span>&#160;  <span class="keyword">inline</span> xiiInt16 <a class="code" href="../../d1/d37/namespacexii_math.htm#a119567a6318a549fb6dbfc9d69728357">ColorFloatToSignedShort</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    <span class="keywordflow">if</span> (IsNaN(value))</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    {</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;      value = <a class="code" href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">Clamp</a>(value, -1.0f, 1.0f) * 32767.0f;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;      <span class="keywordflow">if</span> (value &gt;= 0.0f)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;      {</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        value += 0.5f;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;      }</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      {</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        value -= 0.5f;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;      }</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>xiiInt16<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    }</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;  }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#ac666dff9914329047f7230e7e6ae5799">  422</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#ac666dff9914329047f7230e7e6ae5799">ColorByteToFloat</a>(xiiUInt8 value)</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;  {</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    <span class="keywordflow">return</span> value * (1.0f / 255.0f);</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  }</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a334b3a68446876e27afe013ed282d8c7">  429</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a334b3a68446876e27afe013ed282d8c7">ColorShortToFloat</a>(xiiUInt16 value)</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;    <span class="keywordflow">return</span> value * (1.0f / 65535.0f);</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a8ee19ec7d73ea794022c681471cba4b9">  436</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a8ee19ec7d73ea794022c681471cba4b9">ColorSignedByteToFloat</a>(xiiInt8 value)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keywordflow">return</span> (value == -128) ? -1.0f : value * (1.0f / 127.0f);</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;  }</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a38ae268f3e8e7fd096be36470411d97b">  443</a></span>&#160;  constexpr <span class="keyword">inline</span> <span class="keywordtype">float</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a38ae268f3e8e7fd096be36470411d97b">ColorSignedShortToFloat</a>(xiiInt16 value)</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;  {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="comment">// Implemented according to</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    <span class="comment">// https://docs.microsoft.com/windows/desktop/direct3d10/d3d10-graphics-programming-guide-resources-data-conversion</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;    <span class="keywordflow">return</span> (value == -32768) ? -1.0f : value * (1.0f / 32767.0f);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;  }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160; </div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> T2&gt;</div>
<div class="line"><a name="l00451"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#adad8031fab3d7bf2f0dc6ea50ed823b2">  451</a></span>&#160;  T <a class="code" href="../../d1/d37/namespacexii_math.htm#adad8031fab3d7bf2f0dc6ea50ed823b2">EvaluateBezierCurve</a>(T2 t, <span class="keyword">const</span> T&amp; startPoint, <span class="keyword">const</span> T&amp; controlPoint1, <span class="keyword">const</span> T&amp; controlPoint2, <span class="keyword">const</span> T&amp; endPoint)</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;  {</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    <span class="keyword">const</span> T2 mt = 1 - t;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">const</span> T2 f1 = mt * mt * mt;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;    <span class="keyword">const</span> T2 f2 = 3 * mt * mt * t;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keyword">const</span> T2 f3 = 3 * mt * t * t;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    <span class="keyword">const</span> T2 f4 = t * t * t;</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">return</span> f1 * startPoint + f2 * controlPoint1 + f3 * controlPoint2 + f4 * endPoint;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  }</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;} <span class="comment">// namespace xiiMath</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160; </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00465"></a><span class="lineno"><a class="line" href="../../d3/ddb/classxii_angle_template.htm#a1b19be99c551b7a895730631b2e600e8">  465</a></span>&#160;constexpr XII_FORCE_INLINE <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a> <a class="code" href="../../d3/ddb/classxii_angle_template.htm#a1b19be99c551b7a895730631b2e600e8">xiiAngleTemplate&lt;Type&gt;::AngleBetween</a>(<a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a> a, <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a> b)</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;{</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  <span class="comment">// Derived from http://gamedev.stackexchange.com/questions/4467/comparing-angles-and-working-out-the-difference</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;</a>(<a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::Pi</a>() - <a class="code" href="../../d1/d37/namespacexii_math.htm#a821b432e7a9c8ac292eb255ee11e9e10">xiiMath::Abs</a>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a821b432e7a9c8ac292eb255ee11e9e10">xiiMath::Abs</a>(a.<a class="code" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>() - b.<a class="code" href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">GetRadian</a>()) - <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt;Type&gt;::Pi</a>()));</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;}</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160; </div>
<div class="line"><a name="l00471"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#abc31910bb6ad146a4bb3839ad4cba8d3">  471</a></span>&#160;constexpr XII_FORCE_INLINE xiiInt32 <a class="code" href="../../d1/d37/namespacexii_math.htm#abc31910bb6ad146a4bb3839ad4cba8d3">xiiMath::FloatToInt</a>(<span class="keywordtype">float</span> value)</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;{</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>xiiInt32<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160; </div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;<span class="preprocessor">#if XII_DISABLED(XII_PLATFORM_ARCH_X86) || (_MSC_VER &lt;= 1916)</span></div>
<div class="line"><a name="l00477"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a2fc23519cbc5095f43fc40275f35c418">  477</a></span>&#160;constexpr XII_FORCE_INLINE xiiInt64 <a class="code" href="../../d1/d37/namespacexii_math.htm#abc31910bb6ad146a4bb3839ad4cba8d3">xiiMath::FloatToInt</a>(<span class="keywordtype">double</span> value)</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;{</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>xiiInt64<span class="keyword">&gt;</span>(value);</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;}</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160; </div>
<div class="line"><a name="l00483"></a><span class="lineno"><a class="line" href="../../d1/d37/namespacexii_math.htm#a3fe2efeb461edc5b3d4f5a18e020137e">  483</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d1/d37/namespacexii_math.htm#a3fe2efeb461edc5b3d4f5a18e020137e">xiiMath::TryConvertToSizeT</a>(<span class="keywordtype">size_t</span>&amp; out_uiResult, xiiUInt64 uiValue)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;{</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_PLATFORM_32BIT)</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;  <span class="keywordflow">if</span> (uiValue &lt;= MaxValue&lt;size_t&gt;())</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  {</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;    out_Result = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(uiValue);</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;    <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  }</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160; </div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;  <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  out_uiResult = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(uiValue);</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;}</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160; </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_PLATFORM_64BIT)</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">size_t</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#aad676bd26cdf94104fd880c2bc6802e8">xiiMath::SafeConvertToSizeT</a>(xiiUInt64 uiValue)</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;{</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;  <span class="keywordflow">return</span> uiValue;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;}</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="anamespacexii_math_htm_ac1067d4c24d9b02662c60a528c870580"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#ac1067d4c24d9b02662c60a528c870580">xiiMath::Invert</a></div><div class="ttdeci">constexpr Type Invert(Type f)</div><div class="ttdoc">Returns 1 / f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:83</div></div>
<div class="ttc" id="anamespacexii_math_htm_af0b1f1262ce64f475256f1fd30d7a509"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#af0b1f1262ce64f475256f1fd30d7a509">xiiMath::CountTrailingZeros</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 CountTrailingZeros(xiiUInt32 uiBitmask)</div><div class="ttdef"><b>Definition:</b> Math_inl.h:185</div></div>
<div class="ttc" id="anamespacexii_math_htm_af91f22a14862accf565f49eecc57cc3c"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#af91f22a14862accf565f49eecc57cc3c">xiiMath::Lerp</a></div><div class="ttdeci">XII_FORCE_INLINE T Lerp(T f1, T f2, float fFactor)</div><div class="ttdoc">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:247</div></div>
<div class="ttc" id="anamespacexii_math_htm_a9d8e4353645b9c233b3a359e1e45b7fa"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a9d8e4353645b9c233b3a359e1e45b7fa">xiiMath::IsInRange</a></div><div class="ttdeci">constexpr bool IsInRange(T value, T minVal, T maxVal)</div><div class="ttdoc">Checks whether the value of the first parameter lies between the value of the second and third.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:298</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a6daf638ae092b7998e03c16ba97e7239"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a6daf638ae092b7998e03c16ba97e7239">xiiAngleTemplate::Radian</a></div><div class="ttdeci">constexpr static xiiAngleTemplate&lt; Type &gt; Radian(Type fRadian)</div><div class="ttdoc">Creates an instance of xiiAngleTemplate that was initialized from radian. (No need for any conversion...</div><div class="ttdef"><b>Definition:</b> Angle_inl.h:40</div></div>
<div class="ttc" id="anamespacexii_math_htm_a26cfe338b5414e37ddd30018f056b044"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a26cfe338b5414e37ddd30018f056b044">xiiMath::Tan</a></div><div class="ttdeci">XII_ALWAYS_INLINE Type Tan(xiiAngleTemplate&lt; Type &gt; a)</div><div class="ttdoc">Takes an angle, returns its tangent.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:14</div></div>
<div class="ttc" id="anamespacexii_math_htm_a0543392160b2254da61b3ec76579f0d2"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">xiiMath::Clamp</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Clamp(T value, T min_val, T max_val)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [min; max]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:71</div></div>
<div class="ttc" id="anamespacexii_math_htm"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm">xiiMath</a></div><div class="ttdoc">This namespace provides common math-functionality as functions.</div><div class="ttdef"><b>Definition:</b> Constants.h:5</div></div>
<div class="ttc" id="anamespacexii_math_htm_a4d6f8bf4858245e40a706a3aabd0a59e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:59</div></div>
<div class="ttc" id="anamespacexii_math_htm_aa61976adbc40a0c6c6c08a5471bfaa27"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#aa61976adbc40a0c6c6c08a5471bfaa27">xiiMath::Fraction</a></div><div class="ttdeci">XII_ALWAYS_INLINE Type Fraction(Type f)</div><div class="ttdoc">Returns the fraction-part of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:321</div></div>
<div class="ttc" id="anamespacexii_math_htm_a38ae268f3e8e7fd096be36470411d97b"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a38ae268f3e8e7fd096be36470411d97b">xiiMath::ColorSignedShortToFloat</a></div><div class="ttdeci">constexpr float ColorSignedShortToFloat(xiiInt16 value)</div><div class="ttdoc">Converts a color value from signed short [-32768;32767] range to float [0;1] range,...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:443</div></div>
<div class="ttc" id="anamespacexii_math_htm_a76f446939ad58af387fb79b8fd9deff7"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">xiiMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:304</div></div>
<div class="ttc" id="anamespacexii_math_htm_a334b3a68446876e27afe013ed282d8c7"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a334b3a68446876e27afe013ed282d8c7">xiiMath::ColorShortToFloat</a></div><div class="ttdeci">constexpr float ColorShortToFloat(xiiUInt16 value)</div><div class="ttdoc">Converts a color value from unsigned short [0;65535] range to float [0;1] range, with proper rounding...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:429</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_afaebb218561104c8b89d645dab3d8ded"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#afaebb218561104c8b89d645dab3d8ded">xiiAngleTemplate::GetRadian</a></div><div class="ttdeci">constexpr Type GetRadian() const</div><div class="ttdoc">Returns the radian value. (No need for any conversion)</div><div class="ttdef"><b>Definition:</b> Angle_inl.h:52</div></div>
<div class="ttc" id="anamespacexii_math_htm_a2e7c389d4195d010ba0c207a1e981a58"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">xiiMath::Swap</a></div><div class="ttdeci">XII_ALWAYS_INLINE void Swap(T &amp;ref_f1, T &amp;ref_f2)</div><div class="ttdoc">Swaps the values in the two variables f1 and f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:241</div></div>
<div class="ttc" id="anamespacexii_math_htm_adad8031fab3d7bf2f0dc6ea50ed823b2"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#adad8031fab3d7bf2f0dc6ea50ed823b2">xiiMath::EvaluateBezierCurve</a></div><div class="ttdeci">T EvaluateBezierCurve(T2 t, const T &amp;startPoint, const T &amp;controlPoint1, const T &amp;controlPoint2, const T &amp;endPoint)</div><div class="ttdoc">Evaluates the cubic spline defined by four control points at time t and returns the interpolated resu...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:451</div></div>
<div class="ttc" id="aclassxii_angle_template_htm_a1b19be99c551b7a895730631b2e600e8"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm#a1b19be99c551b7a895730631b2e600e8">xiiAngleTemplate::AngleBetween</a></div><div class="ttdeci">constexpr static xiiAngleTemplate&lt; Type &gt; AngleBetween(xiiAngleTemplate&lt; Type &gt; a, xiiAngleTemplate&lt; Type &gt; b)</div><div class="ttdoc">Computes the smallest angle between the two given angles. The angle will always be a positive value.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:465</div></div>
<div class="ttc" id="anamespacexii_math_htm_ac0e5bf7b2d32e5ea41f69e6f70b60aaf"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#ac0e5bf7b2d32e5ea41f69e6f70b60aaf">xiiMath::Trunc</a></div><div class="ttdeci">XII_ALWAYS_INLINE Type Trunc(Type f)</div><div class="ttdoc">Returns the integer-part of f (removes the fraction).</div><div class="ttdef"><b>Definition:</b> Math_inl.h:312</div></div>
<div class="ttc" id="anamespacexii_math_htm_a59baeff4b10d075014df97471c879dec"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a59baeff4b10d075014df97471c879dec">xiiMath::Saturate</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Saturate(T value)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [0; 1]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:77</div></div>
<div class="ttc" id="anamespacexii_math_htm_a12b773e8c11bb90d8edc742cdad5d2f1"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">xiiMath::IsPowerOf2</a></div><div class="ttdeci">constexpr XII_FORCE_INLINE bool IsPowerOf2(xiiInt32 value)</div><div class="ttdoc">Returns true, if there exists some x with 2^x == value.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:271</div></div>
<div class="ttc" id="anamespacexii_math_htm_aa43339fe6b184ea3acef846dc90f6147"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#aa43339fe6b184ea3acef846dc90f6147">xiiMath::Ceil</a></div><div class="ttdeci">XII_ALWAYS_INLINE double Ceil(double f)</div><div class="ttdoc">Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative.</div><div class="ttdef"><b>Definition:</b> MathDouble_inl.h:27</div></div>
<div class="ttc" id="anamespacexii_math_htm_a20047812a62c07b9ac2144a5520c18f0"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">xiiMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition:</b> Math_inl.h:292</div></div>
<div class="ttc" id="anamespacexii_math_htm_a307af5bf30f7c96ec03c95f7db168acf"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a307af5bf30f7c96ec03c95f7db168acf">xiiMath::CountLeadingZeros</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 CountLeadingZeros(xiiUInt32 uiBitmask)</div><div class="ttdef"><b>Definition:</b> Math_inl.h:198</div></div>
<div class="ttc" id="anamespacexii_math_htm_a8ee19ec7d73ea794022c681471cba4b9"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a8ee19ec7d73ea794022c681471cba4b9">xiiMath::ColorSignedByteToFloat</a></div><div class="ttdeci">constexpr float ColorSignedByteToFloat(xiiInt8 value)</div><div class="ttdoc">Converts a color value from signed byte [-128;127] range to float [-1;1] range, with proper rounding.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:436</div></div>
<div class="ttc" id="anamespacexii_math_htm_a09aa3acbc035c35a37a9a9cf192a9771"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">xiiMath::CountBits</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 CountBits(xiiUInt32 value)</div><div class="ttdoc">Returns the number of bits set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:203</div></div>
<div class="ttc" id="anamespacexii_math_htm_a821b432e7a9c8ac292eb255ee11e9e10"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a821b432e7a9c8ac292eb255ee11e9e10">xiiMath::Abs</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:41</div></div>
<div class="ttc" id="anamespacexii_math_htm_a3fe2efeb461edc5b3d4f5a18e020137e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a3fe2efeb461edc5b3d4f5a18e020137e">xiiMath::TryConvertToSizeT</a></div><div class="ttdeci">xiiResult TryConvertToSizeT(size_t &amp;out_uiResult, xiiUInt64 uiValue)</div><div class="ttdoc">Checks whether the given 64bit value actually fits into size_t, If it doesn't XII_FAILURE is returned...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:483</div></div>
<div class="ttc" id="anamespacexii_math_htm_a6d54815eb64f3d35d0457e5a00068371"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a6d54815eb64f3d35d0457e5a00068371">xiiMath::Bitmask_HighN</a></div><div class="ttdeci">XII_ALWAYS_INLINE Type Bitmask_HighN(xiiUInt32 uiNumBitsToSet)</div><div class="ttdoc">Creates a bitmask in which the high N bits are set. For example for N=5, this would be '1111 1000 ....</div><div class="ttdef"><b>Definition:</b> Math_inl.h:235</div></div>
<div class="ttc" id="anamespacexii_math_htm_abc31910bb6ad146a4bb3839ad4cba8d3"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#abc31910bb6ad146a4bb3839ad4cba8d3">xiiMath::FloatToInt</a></div><div class="ttdeci">constexpr xiiInt32 FloatToInt(float value)</div><div class="ttdoc">Casts the float to an integer, removes the fractional part.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:471</div></div>
<div class="ttc" id="anamespacexii_math_htm_afbcde3de4c46690f6190ea205350f330"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#afbcde3de4c46690f6190ea205350f330">xiiMath::ColorFloatToSignedByte</a></div><div class="ttdeci">xiiInt8 ColorFloatToSignedByte(float value)</div><div class="ttdoc">Converts a color value from float [-1;1] range to signed byte [-127;127] range, with proper rounding.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:376</div></div>
<div class="ttc" id="anamespacexii_math_htm_a36d95d7071a4d5d2cf2f71cd01fb9701"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a36d95d7071a4d5d2cf2f71cd01fb9701">xiiMath::Step</a></div><div class="ttdeci">constexpr XII_FORCE_INLINE T Step(T value, T edge)</div><div class="ttdoc">Returns 0, if value &lt; edge, and 1, if value &gt;= edge.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:266</div></div>
<div class="ttc" id="anamespacexii_math_htm_a8672de025a3ff765a6cb09d081974374"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a8672de025a3ff765a6cb09d081974374">xiiMath::ATan</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiAngleTemplate&lt; Type &gt; ATan(Type f)</div><div class="ttdoc">Returns the arcus tangent of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:23</div></div>
<div class="ttc" id="anamespacexii_math_htm_aad676bd26cdf94104fd880c2bc6802e8"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#aad676bd26cdf94104fd880c2bc6802e8">xiiMath::SafeConvertToSizeT</a></div><div class="ttdeci">XII_FOUNDATION_DLL size_t SafeConvertToSizeT(xiiUInt64 uiValue)</div><div class="ttdoc">Checks whether the given 64bit value actually fits into size_t, If it doesn't the program is terminat...</div></div>
<div class="ttc" id="anamespacexii_math_htm_ad6842f0ad7ab4a71e50cc9b7944f45a1"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#ad6842f0ad7ab4a71e50cc9b7944f45a1">xiiMath::Floor</a></div><div class="ttdeci">XII_ALWAYS_INLINE double Floor(double f)</div><div class="ttdoc">Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative.</div><div class="ttdef"><b>Definition:</b> MathDouble_inl.h:25</div></div>
<div class="ttc" id="anamespacexii_math_htm_a7e3584835296e437fd4c4c0354576c5a"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">xiiMath::FirstBitHigh</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 FirstBitHigh(xiiUInt32 value)</div><div class="ttdoc">Returns the index of the most significant bit set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:137</div></div>
<div class="ttc" id="anamespacexii_math_htm_adce079021459012fbdf663d1a2009ed1"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#adce079021459012fbdf663d1a2009ed1">xiiMath::SmoothStep</a></div><div class="ttdeci">Type SmoothStep(Type x, Type edge1, Type edge2)</div><div class="ttdoc">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the hermite interpolation in between.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:327</div></div>
<div class="ttc" id="anamespacexii_math_htm_a119567a6318a549fb6dbfc9d69728357"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a119567a6318a549fb6dbfc9d69728357">xiiMath::ColorFloatToSignedShort</a></div><div class="ttdeci">xiiInt16 ColorFloatToSignedShort(float value)</div><div class="ttdoc">Converts a color value from float [-1;1] range to signed short [-32767;32767] range,...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:399</div></div>
<div class="ttc" id="anamespacexii_math_htm_afb37092634e9c088d935bc573bd0081e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">xiiMath::FirstBitLow</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiUInt32 FirstBitLow(xiiUInt32 value)</div><div class="ttdoc">Returns the index of the least significant bit set.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:88</div></div>
<div class="ttc" id="anamespacexii_math_htm_a8171dc1ee6c3bd3dfc3a54a33f3a9568"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a8171dc1ee6c3bd3dfc3a54a33f3a9568">xiiMath::ASin</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiAngleTemplate&lt; Type &gt; ASin(Type f)</div><div class="ttdoc">Returns the arcus sinus of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:17</div></div>
<div class="ttc" id="astructxii_result_htm"><div class="ttname"><a href="../../dd/dad/structxii_result.htm">xiiResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:54</div></div>
<div class="ttc" id="anamespacexii_math_htm_a347920d33052bd432a27837aaa57d31e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a347920d33052bd432a27837aaa57d31e">xiiMath::ColorFloatToShort</a></div><div class="ttdeci">xiiUInt16 ColorFloatToShort(float value)</div><div class="ttdoc">Converts a color value from float [0;1] range to unsigned short [0;65535] range, with proper rounding...</div><div class="ttdef"><b>Definition:</b> Math_inl.h:362</div></div>
<div class="ttc" id="aclassxii_angle_template_htm"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a></div><div class="ttdoc">Wrapper class for a safe usage and conversions of angles.</div><div class="ttdef"><b>Definition:</b> Angle.h:10</div></div>
<div class="ttc" id="anamespacexii_math_htm_ac666dff9914329047f7230e7e6ae5799"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#ac666dff9914329047f7230e7e6ae5799">xiiMath::ColorByteToFloat</a></div><div class="ttdeci">constexpr float ColorByteToFloat(xiiUInt8 value)</div><div class="ttdoc">Converts a color value from unsigned byte [0;255] range to float [0;1] range, with proper rounding.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:422</div></div>
<div class="ttc" id="anamespacexii_math_htm_accfb14d3b4cfef8b668d35652167d670"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#accfb14d3b4cfef8b668d35652167d670">xiiMath::ColorFloatToByte</a></div><div class="ttdeci">xiiUInt8 ColorFloatToByte(float value)</div><div class="ttdoc">Converts a color value from float [0;1] range to unsigned byte [0;255] range, with proper rounding.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:348</div></div>
<div class="ttc" id="anamespacexii_math_htm_afbbbae240e0cea673cd16646b5142e06"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#afbbbae240e0cea673cd16646b5142e06">xiiMath::Sin</a></div><div class="ttdeci">XII_ALWAYS_INLINE Type Sin(xiiAngleTemplate&lt; Type &gt; a)</div><div class="ttdoc">***** Trigonometric Functions *****</div><div class="ttdef"><b>Definition:</b> Math_inl.h:8</div></div>
<div class="ttc" id="anamespacexii_math_htm_ad15d801dd2652a993d5d49e111a240a6"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#ad15d801dd2652a993d5d49e111a240a6">xiiMath::Bitmask_LowN</a></div><div class="ttdeci">XII_ALWAYS_INLINE Type Bitmask_LowN(xiiUInt32 uiNumBitsToSet)</div><div class="ttdoc">Creates a bitmask in which the low N bits are set. For example for N=5, this would be '0000 ....</div><div class="ttdef"><b>Definition:</b> Math_inl.h:229</div></div>
<div class="ttc" id="anamespacexii_math_htm_a2c660f80f0df5bb91a751d12a93cb9cb"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:47</div></div>
<div class="ttc" id="anamespacexii_math_htm_a41e2a06b9f2d78c5773c856fb84dc467"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a41e2a06b9f2d78c5773c856fb84dc467">xiiMath::ATan2</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiAngleTemplate&lt; Type &gt; ATan2(Type y, Type x)</div><div class="ttdoc">Returns the atan2 of x and y.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:26</div></div>
<div class="ttc" id="anamespacexii_math_htm_a367e0a2f31f1691c165d0871f3b709ff"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a367e0a2f31f1691c165d0871f3b709ff">xiiMath::Sign</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Sign(T f)</div><div class="ttdoc">Returns the sign of f (i.e: -1, 1 or 0)</div><div class="ttdef"><b>Definition:</b> Math_inl.h:35</div></div>
<div class="ttc" id="anamespacexii_math_htm_acadcf58b1a805ed9e8127057834a0b0a"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Square(T f)</div><div class="ttdoc">Returns f * f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:29</div></div>
<div class="ttc" id="anamespacexii_math_htm_a194fc513007059c6e129cdeb321c3797"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a194fc513007059c6e129cdeb321c3797">xiiMath::Cos</a></div><div class="ttdeci">XII_ALWAYS_INLINE Type Cos(xiiAngleTemplate&lt; Type &gt; a)</div><div class="ttdoc">Takes an angle, returns its cosine.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:11</div></div>
<div class="ttc" id="anamespacexii_math_htm_a788a4e90cf6d0f3285b15fac90017188"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a788a4e90cf6d0f3285b15fac90017188">xiiMath::ACos</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiAngleTemplate&lt; Type &gt; ACos(Type f)</div><div class="ttdoc">Returns the arcus cosinus of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:20</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_c1b0860bb61ff24e678d996d14e4bcdd.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_fb7e93d80251333452775ccd3b7c417a.htm">Implementation</a></li><li class="navelem"><b>Math_inl.h</b></li>
    <li class="footer">Generated on Thu Dec 21 2023 16:40:31 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

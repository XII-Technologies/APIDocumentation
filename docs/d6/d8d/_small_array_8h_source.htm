<!-- HTML header for doxygen 1.11.0-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: /home/runner/work/XII/XII/Source/Engine/Foundation/Containers/SmallArray.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="../../doxygen-awesome-darkmode-toggle.js"></script>
<script type="text/javascript">
  DoxygenAwesomeDarkModeToggle.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-fragment-copy-button.js"></script>
<script type="text/javascript">
  DoxygenAwesomeFragmentCopyButton.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-paragraph-link.js"></script>
<script type="text/javascript">
  DoxygenAwesomeParagraphLink.init()
</script>
<script type="text/javascript" src="../../doxygen-awesome-interactive-toc.js"></script>
<script type="text/javascript">
  DoxygenAwesomeInteractiveToc.init()
</script>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d6/d8d/_small_array_8h_source.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="headertitle"><div class="title">SmallArray.h</div></div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a id="l00001" name="l00001"></a><span class="lineno">    1</span><span class="preprocessor">#pragma once</span></div>
<div class="line"><a id="l00002" name="l00002"></a><span class="lineno">    2</span> </div>
<div class="line"><a id="l00003" name="l00003"></a><span class="lineno">    3</span><span class="preprocessor">#include &lt;Foundation/Algorithm/Sorting.h&gt;</span></div>
<div class="line"><a id="l00004" name="l00004"></a><span class="lineno">    4</span><span class="preprocessor">#include &lt;Foundation/Math/Math.h&gt;</span></div>
<div class="line"><a id="l00005" name="l00005"></a><span class="lineno">    5</span><span class="preprocessor">#include &lt;Foundation/Memory/AllocatorWrapper.h&gt;</span></div>
<div class="line"><a id="l00006" name="l00006"></a><span class="lineno">    6</span><span class="preprocessor">#include &lt;Foundation/Types/ArrayPtr.h&gt;</span></div>
<div class="line"><a id="l00007" name="l00007"></a><span class="lineno">    7</span> </div>
<div class="line"><a id="l00008" name="l00008"></a><span class="lineno">    8</span><span class="keyword">constexpr</span> xiiUInt32 xiiSmallInvalidIndex = 0xFFFF;</div>
<div class="line"><a id="l00009" name="l00009"></a><span class="lineno">    9</span> </div>
<div class="line"><a id="l00015" name="l00015"></a><span class="lineno">   15</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, xiiUInt16 Size&gt;</div>
<div class="foldopen" id="foldopen00016" data-start="{" data-end="};">
<div class="line"><a id="l00016" name="l00016"></a><span class="lineno"><a class="line" href="../../d0/d92/classxii_small_array_base.htm">   16</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase</a></div>
<div class="line"><a id="l00017" name="l00017"></a><span class="lineno">   17</span>{</div>
<div class="line"><a id="l00018" name="l00018"></a><span class="lineno">   18</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00019" name="l00019"></a><span class="lineno">   19</span>  <span class="comment">// Only if the stored type is either POD or relocatable the hybrid array itself is also relocatable.</span></div>
<div class="line"><a id="l00020" name="l00020"></a><span class="lineno">   20</span>  XII_DECLARE_MEM_RELOCATABLE_TYPE_CONDITIONAL(T);</div>
<div class="line"><a id="l00021" name="l00021"></a><span class="lineno">   21</span> </div>
<div class="line"><a id="l00022" name="l00022"></a><span class="lineno">   22</span>  <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase</a>();                                                                      <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00023" name="l00023"></a><span class="lineno">   23</span>  <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase&lt;T, Size&gt;</a>&amp; other, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00024" name="l00024"></a><span class="lineno">   24</span>  <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;const T&gt;</a>&amp; other, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator);       <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00025" name="l00025"></a><span class="lineno">   25</span>  <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase</a>(<a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; other, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator);      <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00026" name="l00026"></a><span class="lineno">   26</span> </div>
<div class="line"><a id="l00027" name="l00027"></a><span class="lineno">   27</span>  <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">~xiiSmallArrayBase</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00028" name="l00028"></a><span class="lineno">   28</span> </div>
<div class="line"><a id="l00029" name="l00029"></a><span class="lineno">   29</span>  <span class="comment">// Can&#39;t use regular assignment operators since we need to pass an allocator. Use CopyFrom or MoveFrom methods instead.</span></div>
<div class="line"><a id="l00030" name="l00030"></a><span class="lineno">   30</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase&lt;T, Size&gt;</a>&amp; rhs) = <span class="keyword">delete</span>;</div>
<div class="line"><a id="l00031" name="l00031"></a><span class="lineno">   31</span>  <span class="keywordtype">void</span> operator=(<a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; rhs) = <span class="keyword">delete</span>;</div>
<div class="line"><a id="l00032" name="l00032"></a><span class="lineno">   32</span> </div>
<div class="line"><a id="l00034" name="l00034"></a><span class="lineno">   34</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a8bc5875099d17be0928af6747512f050">CopyFrom</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;const T&gt;</a>&amp; other, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00035" name="l00035"></a><span class="lineno">   35</span> </div>
<div class="line"><a id="l00037" name="l00037"></a><span class="lineno">   37</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a5ed28789384e45e0d10a20e95df2f5c6">MoveFrom</a>(<a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase&lt;T, Size&gt;</a>&amp;&amp; other, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00038" name="l00038"></a><span class="lineno">   38</span> </div>
<div class="line"><a id="l00040" name="l00040"></a><span class="lineno">   40</span>  <span class="keyword">operator</span> <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;const T&gt;</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00041" name="l00041"></a><span class="lineno">   41</span> </div>
<div class="line"><a id="l00043" name="l00043"></a><span class="lineno">   43</span>  <span class="keyword">operator</span> <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;T&gt;</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00044" name="l00044"></a><span class="lineno">   44</span> </div>
<div class="line"><a id="l00046" name="l00046"></a><span class="lineno">   46</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a0a4a5857463752121a45c8d7593db7a0">operator==</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase&lt;T, Size&gt;</a>&amp; rhs) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00047" name="l00047"></a><span class="lineno">   47</span> </div>
<div class="line"><a id="l00049" name="l00049"></a><span class="lineno">   49</span>  <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a795c38bbee63c3289752f51bb2f90647">operator[]</a>(xiiUInt32 uiIndex) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00050" name="l00050"></a><span class="lineno">   50</span> </div>
<div class="line"><a id="l00052" name="l00052"></a><span class="lineno">   52</span>  T&amp; <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a795c38bbee63c3289752f51bb2f90647">operator[]</a>(xiiUInt32 uiIndex); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00053" name="l00053"></a><span class="lineno">   53</span> </div>
<div class="line"><a id="l00055" name="l00055"></a><span class="lineno">   55</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#aec2c31c5c5ffb46b0633dd7e280dfee2">SetCount</a>(xiiUInt16 uiCount, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00056" name="l00056"></a><span class="lineno">   56</span> </div>
<div class="line"><a id="l00058" name="l00058"></a><span class="lineno">   58</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#aec2c31c5c5ffb46b0633dd7e280dfee2">SetCount</a>(xiiUInt16 uiCount, <span class="keyword">const</span> T&amp; fillValue, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00059" name="l00059"></a><span class="lineno">   59</span> </div>
<div class="line"><a id="l00061" name="l00061"></a><span class="lineno">   61</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> = <span class="keywordtype">void</span>&gt;                                                   <span class="comment">// Template is used to only conditionally compile this function in when it is actually used.</span></div>
<div class="line"><a id="l00062" name="l00062"></a><span class="lineno">   62</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a96b254cbe8fc346df30bf263c780270f">SetCountUninitialized</a>(xiiUInt16 uiCount, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00063" name="l00063"></a><span class="lineno">   63</span> </div>
<div class="line"><a id="l00066" name="l00066"></a><span class="lineno">   66</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#aae724024d854bd5dd1b58dc0e6e87bfc">EnsureCount</a>(xiiUInt16 uiCount, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00067" name="l00067"></a><span class="lineno">   67</span> </div>
<div class="line"><a id="l00069" name="l00069"></a><span class="lineno">   69</span>  xiiUInt32 <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a04e886c6f3b509236c70581718f988ad">GetCount</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00070" name="l00070"></a><span class="lineno">   70</span> </div>
<div class="line"><a id="l00072" name="l00072"></a><span class="lineno">   72</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#aca1f86b4004618f872aeffdede5b86a6">IsEmpty</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00073" name="l00073"></a><span class="lineno">   73</span> </div>
<div class="line"><a id="l00075" name="l00075"></a><span class="lineno">   75</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a40711a7c4c3b53acdedbd14403c4025d">Clear</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00076" name="l00076"></a><span class="lineno">   76</span> </div>
<div class="line"><a id="l00078" name="l00078"></a><span class="lineno">   78</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a5ae99bc2f992e3d1f5bb29af7f2d1893">Contains</a>(<span class="keyword">const</span> T&amp; value) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00079" name="l00079"></a><span class="lineno">   79</span> </div>
<div class="line"><a id="l00081" name="l00081"></a><span class="lineno">   81</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a2c8704e41443c01718cdd95c603c1c50">Insert</a>(<span class="keyword">const</span> T&amp; value, xiiUInt32 uiIndex, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00082" name="l00082"></a><span class="lineno">   82</span> </div>
<div class="line"><a id="l00084" name="l00084"></a><span class="lineno">   84</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a2c8704e41443c01718cdd95c603c1c50">Insert</a>(T&amp;&amp; value, xiiUInt32 uiIndex, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00085" name="l00085"></a><span class="lineno">   85</span> </div>
<div class="line"><a id="l00087" name="l00087"></a><span class="lineno">   87</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a781068d5172a2f5251ffb408f3b390b8">RemoveAndCopy</a>(<span class="keyword">const</span> T&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00088" name="l00088"></a><span class="lineno">   88</span> </div>
<div class="line"><a id="l00090" name="l00090"></a><span class="lineno">   90</span>  <span class="keywordtype">bool</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#ae337c41ad0aaea57e046a2cd3f8cad56">RemoveAndSwap</a>(<span class="keyword">const</span> T&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00091" name="l00091"></a><span class="lineno">   91</span> </div>
<div class="line"><a id="l00093" name="l00093"></a><span class="lineno">   93</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a8407e866a067554683786544aec56bad">RemoveAtAndCopy</a>(xiiUInt32 uiIndex, xiiUInt16 uiNumElements = 1); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00094" name="l00094"></a><span class="lineno">   94</span> </div>
<div class="line"><a id="l00096" name="l00096"></a><span class="lineno">   96</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a29f44547b8c9552cd6fb54b6773cce26">RemoveAtAndSwap</a>(xiiUInt32 uiIndex, xiiUInt16 uiNumElements = 1); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00097" name="l00097"></a><span class="lineno">   97</span> </div>
<div class="line"><a id="l00099" name="l00099"></a><span class="lineno">   99</span>  xiiUInt32 <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a903aca5dbbf5f3670db554d1b4fcbc12">IndexOf</a>(<span class="keyword">const</span> T&amp; value, xiiUInt32 uiStartIndex = 0) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00100" name="l00100"></a><span class="lineno">  100</span> </div>
<div class="line"><a id="l00102" name="l00102"></a><span class="lineno">  102</span>  xiiUInt32 <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a74c2dbab85a800f90ba9ccbad315e639">LastIndexOf</a>(<span class="keyword">const</span> T&amp; value, xiiUInt32 uiStartIndex = xiiSmallInvalidIndex) <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00103" name="l00103"></a><span class="lineno">  103</span> </div>
<div class="line"><a id="l00105" name="l00105"></a><span class="lineno">  105</span>  T&amp; <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a38a483ac998879f6f795249b58870430">ExpandAndGetRef</a>(<a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00106" name="l00106"></a><span class="lineno">  106</span> </div>
<div class="line"><a id="l00108" name="l00108"></a><span class="lineno">  108</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a539f26a493906771f28fe81fa91d0941">PushBack</a>(<span class="keyword">const</span> T&amp; value, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00109" name="l00109"></a><span class="lineno">  109</span> </div>
<div class="line"><a id="l00111" name="l00111"></a><span class="lineno">  111</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a539f26a493906771f28fe81fa91d0941">PushBack</a>(T&amp;&amp; value, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00112" name="l00112"></a><span class="lineno">  112</span> </div>
<div class="line"><a id="l00114" name="l00114"></a><span class="lineno">  114</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#ae9c20ac9f90231d3e2999e6d9e9cda6f">PushBackUnchecked</a>(<span class="keyword">const</span> T&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00115" name="l00115"></a><span class="lineno">  115</span> </div>
<div class="line"><a id="l00117" name="l00117"></a><span class="lineno">  117</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#ae9c20ac9f90231d3e2999e6d9e9cda6f">PushBackUnchecked</a>(T&amp;&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00118" name="l00118"></a><span class="lineno">  118</span> </div>
<div class="line"><a id="l00120" name="l00120"></a><span class="lineno">  120</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a3dc102bffe7301cb2866fb111cb7ee42">PushBackRange</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;const T&gt;</a>&amp; range, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00121" name="l00121"></a><span class="lineno">  121</span> </div>
<div class="line"><a id="l00123" name="l00123"></a><span class="lineno">  123</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#ae6e9392c96e90cb12ca5952408d78225">PopBack</a>(xiiUInt32 uiCountToRemove = 1); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00124" name="l00124"></a><span class="lineno">  124</span> </div>
<div class="line"><a id="l00126" name="l00126"></a><span class="lineno">  126</span>  T&amp; <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a2ec8d1f6519b6d01224868e1d5b93d16">PeekBack</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00127" name="l00127"></a><span class="lineno">  127</span> </div>
<div class="line"><a id="l00129" name="l00129"></a><span class="lineno">  129</span>  <span class="keyword">const</span> T&amp; <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a2ec8d1f6519b6d01224868e1d5b93d16">PeekBack</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00130" name="l00130"></a><span class="lineno">  130</span> </div>
<div class="line"><a id="l00132" name="l00132"></a><span class="lineno">  132</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a id="l00133" name="l00133"></a><span class="lineno">  133</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a2aa60d2364c32767f44ed6d05dd7642e">Sort</a>(<span class="keyword">const</span> Comparer&amp; comparer); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00134" name="l00134"></a><span class="lineno">  134</span> </div>
<div class="line"><a id="l00136" name="l00136"></a><span class="lineno">  136</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a2aa60d2364c32767f44ed6d05dd7642e">Sort</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00137" name="l00137"></a><span class="lineno">  137</span> </div>
<div class="line"><a id="l00139" name="l00139"></a><span class="lineno">  139</span>  T* <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a45cf4b82eeb4112c5f9cad6156a8fc18">GetData</a>();</div>
<div class="line"><a id="l00140" name="l00140"></a><span class="lineno">  140</span> </div>
<div class="line"><a id="l00142" name="l00142"></a><span class="lineno">  142</span>  <span class="keyword">const</span> T* <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a45cf4b82eeb4112c5f9cad6156a8fc18">GetData</a>() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00143" name="l00143"></a><span class="lineno">  143</span> </div>
<div class="line"><a id="l00145" name="l00145"></a><span class="lineno">  145</span>  <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;T&gt;</a> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a87a2be4d175cd71b54757029980f4bbc">GetArrayPtr</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00146" name="l00146"></a><span class="lineno">  146</span> </div>
<div class="line"><a id="l00148" name="l00148"></a><span class="lineno">  148</span>  <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;const T&gt;</a> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a87a2be4d175cd71b54757029980f4bbc">GetArrayPtr</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00149" name="l00149"></a><span class="lineno">  149</span> </div>
<div class="line"><a id="l00151" name="l00151"></a><span class="lineno">  151</span>  <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;typename xiiArrayPtr&lt;T&gt;::ByteType</a>&gt; <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#aa7b0793640bf988c2658f377837899ce">GetByteArrayPtr</a>(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00152" name="l00152"></a><span class="lineno">  152</span> </div>
<div class="line"><a id="l00154" name="l00154"></a><span class="lineno">  154</span>  <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;typename xiiArrayPtr&lt;const T&gt;::ByteType</a>&gt; <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#aa7b0793640bf988c2658f377837899ce">GetByteArrayPtr</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00155" name="l00155"></a><span class="lineno">  155</span> </div>
<div class="line"><a id="l00157" name="l00157"></a><span class="lineno">  157</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#a43d17a7db94868fe8a57ab6e6cea617e">Reserve</a>(xiiUInt16 uiCapacity, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00158" name="l00158"></a><span class="lineno">  158</span> </div>
<div class="line"><a id="l00161" name="l00161"></a><span class="lineno">  161</span>  <span class="keywordtype">void</span> <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#accbe8a8ba2f3431b6c5bc0c58f284136">Compact</a>(<a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00162" name="l00162"></a><span class="lineno">  162</span> </div>
<div class="line"><a id="l00164" name="l00164"></a><span class="lineno"><a class="line" href="../../d0/d92/classxii_small_array_base.htm#abbca721a1bcdf3b69d9a760842cab654">  164</a></span>  xiiUInt32 <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#abbca721a1bcdf3b69d9a760842cab654">GetCapacity</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_uiCapacity; }</div>
<div class="line"><a id="l00165" name="l00165"></a><span class="lineno">  165</span> </div>
<div class="line"><a id="l00167" name="l00167"></a><span class="lineno">  167</span>  xiiUInt64 <a class="code hl_function" href="../../d0/d92/classxii_small_array_base.htm#af6ae848d26e3aa3fbc04fa7dfb29cf1f">GetHeapMemoryUsage</a>() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00168" name="l00168"></a><span class="lineno">  168</span> </div>
<div class="line"><a id="l00169" name="l00169"></a><span class="lineno">  169</span>  <span class="keyword">using </span>const_iterator         = <span class="keyword">const</span> T*;</div>
<div class="line"><a id="l00170" name="l00170"></a><span class="lineno">  170</span>  <span class="keyword">using </span>const_reverse_iterator = <a class="code hl_struct" href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator&lt;T&gt;</a>;</div>
<div class="line"><a id="l00171" name="l00171"></a><span class="lineno">  171</span>  <span class="keyword">using </span>iterator               = T*;</div>
<div class="line"><a id="l00172" name="l00172"></a><span class="lineno">  172</span>  <span class="keyword">using </span>reverse_iterator       = <a class="code hl_struct" href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator&lt;T&gt;</a>;</div>
<div class="line"><a id="l00173" name="l00173"></a><span class="lineno">  173</span> </div>
<div class="line"><a id="l00174" name="l00174"></a><span class="lineno">  174</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00175" name="l00175"></a><span class="lineno">  175</span>  <span class="keyword">const</span> U&amp; GetUserData() <span class="keyword">const</span>; <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00176" name="l00176"></a><span class="lineno">  176</span> </div>
<div class="line"><a id="l00177" name="l00177"></a><span class="lineno">  177</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> U&gt;</div>
<div class="line"><a id="l00178" name="l00178"></a><span class="lineno">  178</span>  U&amp; GetUserData(); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00179" name="l00179"></a><span class="lineno">  179</span> </div>
<div class="line"><a id="l00180" name="l00180"></a><span class="lineno">  180</span><span class="keyword">protected</span>:</div>
<div class="line"><a id="l00181" name="l00181"></a><span class="lineno">  181</span>  <span class="keyword">enum</span></div>
<div class="line"><a id="l00182" name="l00182"></a><span class="lineno">  182</span>  {</div>
<div class="line"><a id="l00183" name="l00183"></a><span class="lineno">  183</span>    CAPACITY_ALIGNMENT = 4</div>
<div class="line"><a id="l00184" name="l00184"></a><span class="lineno">  184</span>  };</div>
<div class="line"><a id="l00185" name="l00185"></a><span class="lineno">  185</span> </div>
<div class="line"><a id="l00186" name="l00186"></a><span class="lineno">  186</span>  <span class="keywordtype">void</span> SetCapacity(xiiUInt16 uiCapacity, <a class="code hl_class" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator);</div>
<div class="line"><a id="l00187" name="l00187"></a><span class="lineno">  187</span> </div>
<div class="line"><a id="l00188" name="l00188"></a><span class="lineno">  188</span>  T*       GetElementsPtr();</div>
<div class="line"><a id="l00189" name="l00189"></a><span class="lineno">  189</span>  <span class="keyword">const</span> T* GetElementsPtr() <span class="keyword">const</span>;</div>
<div class="line"><a id="l00190" name="l00190"></a><span class="lineno">  190</span> </div>
<div class="line"><a id="l00191" name="l00191"></a><span class="lineno">  191</span>  xiiUInt16 m_uiCount    = 0;</div>
<div class="line"><a id="l00192" name="l00192"></a><span class="lineno">  192</span>  xiiUInt16 m_uiCapacity = Size;</div>
<div class="line"><a id="l00193" name="l00193"></a><span class="lineno">  193</span> </div>
<div class="line"><a id="l00194" name="l00194"></a><span class="lineno">  194</span>  xiiUInt32 m_uiUserData = 0;</div>
<div class="line"><a id="l00195" name="l00195"></a><span class="lineno">  195</span> </div>
<div class="line"><a id="l00196" name="l00196"></a><span class="lineno">  196</span>  <span class="keyword">union</span></div>
<div class="line"><a id="l00197" name="l00197"></a><span class="lineno">  197</span>  {</div>
<div class="line"><a id="l00198" name="l00198"></a><span class="lineno">  198</span>    <span class="keyword">struct </span><span class="keyword">alignas</span>(XII_ALIGNMENT_OF(T))</div>
<div class="line"><a id="l00199" name="l00199"></a><span class="lineno">  199</span>    {</div>
<div class="line"><a id="l00200" name="l00200"></a><span class="lineno">  200</span>      xiiUInt8 m_StaticData[Size * <span class="keyword">sizeof</span>(T)];</div>
<div class="line"><a id="l00201" name="l00201"></a><span class="lineno">  201</span>    };</div>
<div class="line"><a id="l00202" name="l00202"></a><span class="lineno">  202</span> </div>
<div class="line"><a id="l00203" name="l00203"></a><span class="lineno">  203</span>    T* m_pElements = <span class="keyword">nullptr</span>;</div>
<div class="line"><a id="l00204" name="l00204"></a><span class="lineno">  204</span>  };</div>
<div class="line"><a id="l00205" name="l00205"></a><span class="lineno">  205</span>};</div>
</div>
<div class="line"><a id="l00206" name="l00206"></a><span class="lineno">  206</span> </div>
<div class="line"><a id="l00208" name="l00208"></a><span class="lineno">  208</span> </div>
<div class="line"><a id="l00210" name="l00210"></a><span class="lineno">  210</span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, xiiUInt16 Size, <span class="keyword">typename</span> AllocatorWrapper = xiiDefaultAllocatorWrapper&gt;</div>
<div class="foldopen" id="foldopen00211" data-start="{" data-end="};">
<div class="line"><a id="l00211" name="l00211"></a><span class="lineno"><a class="line" href="../../d6/d1f/classxii_small_array.htm">  211</a></span><span class="keyword">class </span><a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray</a> : <span class="keyword">public</span> <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase</a>&lt;T, Size&gt;</div>
<div class="line"><a id="l00212" name="l00212"></a><span class="lineno">  212</span>{</div>
<div class="line"><a id="l00213" name="l00213"></a><span class="lineno">  213</span>  <span class="keyword">using </span><a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">SUPER</a> = <a class="code hl_class" href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase&lt;T, Size&gt;</a>;</div>
<div class="line"><a id="l00214" name="l00214"></a><span class="lineno">  214</span> </div>
<div class="line"><a id="l00215" name="l00215"></a><span class="lineno">  215</span><span class="keyword">public</span>:</div>
<div class="line"><a id="l00216" name="l00216"></a><span class="lineno">  216</span>  <span class="comment">// Only if the stored type is either POD or relocatable the hybrid array itself is also relocatable.</span></div>
<div class="line"><a id="l00217" name="l00217"></a><span class="lineno">  217</span>  XII_DECLARE_MEM_RELOCATABLE_TYPE_CONDITIONAL(T);</div>
<div class="line"><a id="l00218" name="l00218"></a><span class="lineno">  218</span> </div>
<div class="line"><a id="l00219" name="l00219"></a><span class="lineno">  219</span>  <a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray</a>();</div>
<div class="line"><a id="l00220" name="l00220"></a><span class="lineno">  220</span> </div>
<div class="line"><a id="l00221" name="l00221"></a><span class="lineno">  221</span>  <a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp; other);</div>
<div class="line"><a id="l00222" name="l00222"></a><span class="lineno">  222</span>  <a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray</a>(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;const T&gt;</a>&amp; other);</div>
<div class="line"><a id="l00223" name="l00223"></a><span class="lineno">  223</span>  <a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray</a>(<a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp;&amp; other);</div>
<div class="line"><a id="l00224" name="l00224"></a><span class="lineno">  224</span> </div>
<div class="line"><a id="l00225" name="l00225"></a><span class="lineno">  225</span>  <a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">~xiiSmallArray</a>();</div>
<div class="line"><a id="l00226" name="l00226"></a><span class="lineno">  226</span> </div>
<div class="line"><a id="l00227" name="l00227"></a><span class="lineno">  227</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00228" name="l00228"></a><span class="lineno">  228</span>  <span class="keywordtype">void</span> operator=(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;const T&gt;</a>&amp; rhs);</div>
<div class="line"><a id="l00229" name="l00229"></a><span class="lineno">  229</span>  <span class="keywordtype">void</span> operator=(<a class="code hl_class" href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray&lt;T, Size, AllocatorWrapper&gt;</a>&amp;&amp; rhs) <span class="keyword">noexcept</span>;</div>
<div class="line"><a id="l00230" name="l00230"></a><span class="lineno">  230</span> </div>
<div class="line"><a id="l00231" name="l00231"></a><span class="lineno">  231</span>  <span class="keywordtype">void</span> SetCount(xiiUInt16 uiCount);                     <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00232" name="l00232"></a><span class="lineno">  232</span>  <span class="keywordtype">void</span> SetCount(xiiUInt16 uiCount, <span class="keyword">const</span> T&amp; fillValue); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00233" name="l00233"></a><span class="lineno">  233</span>  <span class="keywordtype">void</span> EnsureCount(xiiUInt16 uiCount);                  <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00234" name="l00234"></a><span class="lineno">  234</span> </div>
<div class="line"><a id="l00235" name="l00235"></a><span class="lineno">  235</span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> = <span class="keywordtype">void</span>&gt;</div>
<div class="line"><a id="l00236" name="l00236"></a><span class="lineno">  236</span>  <span class="keywordtype">void</span> SetCountUninitialized(xiiUInt16 uiCount); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00237" name="l00237"></a><span class="lineno">  237</span> </div>
<div class="line"><a id="l00238" name="l00238"></a><span class="lineno">  238</span>  <span class="keywordtype">void</span> InsertAt(xiiUInt32 uiIndex, <span class="keyword">const</span> T&amp; value); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00239" name="l00239"></a><span class="lineno">  239</span>  <span class="keywordtype">void</span> InsertAt(xiiUInt32 uiIndex, T&amp;&amp; value);      <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00240" name="l00240"></a><span class="lineno">  240</span> </div>
<div class="line"><a id="l00241" name="l00241"></a><span class="lineno">  241</span>  T&amp;   ExpandAndGetRef();                                <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00242" name="l00242"></a><span class="lineno">  242</span>  <span class="keywordtype">void</span> PushBack(<span class="keyword">const</span> T&amp; value);                         <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00243" name="l00243"></a><span class="lineno">  243</span>  <span class="keywordtype">void</span> PushBack(T&amp;&amp; value);                              <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00244" name="l00244"></a><span class="lineno">  244</span>  <span class="keywordtype">void</span> PushBackRange(<span class="keyword">const</span> <a class="code hl_class" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;const T&gt;</a>&amp; range); <span class="comment">// [tested]</span></div>
<div class="line"><a id="l00245" name="l00245"></a><span class="lineno">  245</span> </div>
<div class="line"><a id="l00246" name="l00246"></a><span class="lineno">  246</span>  <span class="keywordtype">void</span> Reserve(xiiUInt16 uiCapacity);</div>
<div class="line"><a id="l00247" name="l00247"></a><span class="lineno">  247</span>  <span class="keywordtype">void</span> Compact();</div>
<div class="line"><a id="l00248" name="l00248"></a><span class="lineno">  248</span>};</div>
</div>
<div class="line"><a id="l00249" name="l00249"></a><span class="lineno">  249</span> </div>
<div class="line"><a id="l00250" name="l00250"></a><span class="lineno">  250</span><span class="preprocessor">#include &lt;Foundation/Containers/Implementation/SmallArray_inl.h&gt;</span></div>
<div class="ttc" id="aclassxii_allocator_base_htm"><div class="ttname"><a href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition</b> AllocatorBase.h:22</div></div>
<div class="ttc" id="aclassxii_array_ptr_htm"><div class="ttname"><a href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a></div><div class="ttdoc">This class encapsulates an array and it's size. It is recommended to use this class instead of plain ...</div><div class="ttdef"><b>Definition</b> ArrayPtr.h:37</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm">xiiSmallArrayBase</a></div><div class="ttdoc">Implementation of a dynamically growing array with in-place storage and small memory overhead.</div><div class="ttdef"><b>Definition</b> SmallArray.h:17</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a04e886c6f3b509236c70581718f988ad"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a04e886c6f3b509236c70581718f988ad">xiiSmallArrayBase::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:201</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a0a4a5857463752121a45c8d7593db7a0"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a0a4a5857463752121a45c8d7593db7a0">xiiSmallArrayBase::operator==</a></div><div class="ttdeci">bool operator==(const xiiSmallArrayBase&lt; T, Size &gt; &amp;rhs) const</div><div class="ttdoc">Compares this array to another contiguous array type.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:113</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a29f44547b8c9552cd6fb54b6773cce26"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a29f44547b8c9552cd6fb54b6773cce26">xiiSmallArrayBase::RemoveAtAndSwap</a></div><div class="ttdeci">void RemoveAtAndSwap(xiiUInt32 uiIndex, xiiUInt16 uiNumElements=1)</div><div class="ttdoc">Removes the element at index and fills the gap by swapping in the last element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:283</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a2aa60d2364c32767f44ed6d05dd7642e"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a2aa60d2364c32767f44ed6d05dd7642e">xiiSmallArrayBase::Sort</a></div><div class="ttdeci">void Sort()</div><div class="ttdoc">Sort with default comparer.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:425</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a2c8704e41443c01718cdd95c603c1c50"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a2c8704e41443c01718cdd95c603c1c50">xiiSmallArrayBase::Insert</a></div><div class="ttdeci">void Insert(const T &amp;value, xiiUInt32 uiIndex, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Inserts value at index by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:226</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a2ec8d1f6519b6d01224868e1d5b93d16"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a2ec8d1f6519b6d01224868e1d5b93d16">xiiSmallArrayBase::PeekBack</a></div><div class="ttdeci">T &amp; PeekBack()</div><div class="ttdoc">Returns the last element of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:400</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a38a483ac998879f6f795249b58870430"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a38a483ac998879f6f795249b58870430">xiiSmallArrayBase::ExpandAndGetRef</a></div><div class="ttdeci">T &amp; ExpandAndGetRef(xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Grows the array by one element and returns a reference to the newly created element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:329</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a3dc102bffe7301cb2866fb111cb7ee42"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a3dc102bffe7301cb2866fb111cb7ee42">xiiSmallArrayBase::PushBackRange</a></div><div class="ttdeci">void PushBackRange(const xiiArrayPtr&lt; const T &gt; &amp;range, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Pushes all elements in range at the end of the array. Increases the capacity if necessary.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:381</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a40711a7c4c3b53acdedbd14403c4025d"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a40711a7c4c3b53acdedbd14403c4025d">xiiSmallArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:213</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a43d17a7db94868fe8a57ab6e6cea617e"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a43d17a7db94868fe8a57ab6e6cea617e">xiiSmallArrayBase::Reserve</a></div><div class="ttdeci">void Reserve(xiiUInt16 uiCapacity, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Expands the array so it can at least store the given capacity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:477</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a45cf4b82eeb4112c5f9cad6156a8fc18"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a45cf4b82eeb4112c5f9cad6156a8fc18">xiiSmallArrayBase::GetData</a></div><div class="ttdeci">T * GetData()</div><div class="ttdoc">Returns a pointer to the array data, or nullptr if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:435</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a539f26a493906771f28fe81fa91d0941"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a539f26a493906771f28fe81fa91d0941">xiiSmallArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:345</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a5ae99bc2f992e3d1f5bb29af7f2d1893"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a5ae99bc2f992e3d1f5bb29af7f2d1893">xiiSmallArrayBase::Contains</a></div><div class="ttdeci">bool Contains(const T &amp;value) const</div><div class="ttdoc">Checks whether the given value can be found in the array. O(n) complexity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:220</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a5ed28789384e45e0d10a20e95df2f5c6"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a5ed28789384e45e0d10a20e95df2f5c6">xiiSmallArrayBase::MoveFrom</a></div><div class="ttdeci">void MoveFrom(xiiSmallArrayBase&lt; T, Size &gt; &amp;&amp;other, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Moves the data from some other array into this one.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:71</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a74c2dbab85a800f90ba9ccbad315e639"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a74c2dbab85a800f90ba9ccbad315e639">xiiSmallArrayBase::LastIndexOf</a></div><div class="ttdeci">xiiUInt32 LastIndexOf(const T &amp;value, xiiUInt32 uiStartIndex=xiiSmallInvalidIndex) const</div><div class="ttdoc">Searches for the last occurrence of the given value and returns its index or xiiInvalidIndex if not f...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:316</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a781068d5172a2f5251ffb408f3b390b8"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a781068d5172a2f5251ffb408f3b390b8">xiiSmallArrayBase::RemoveAndCopy</a></div><div class="ttdeci">bool RemoveAndCopy(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:248</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a795c38bbee63c3289752f51bb2f90647"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a795c38bbee63c3289752f51bb2f90647">xiiSmallArrayBase::operator[]</a></div><div class="ttdeci">const T &amp; operator[](xiiUInt32 uiIndex) const</div><div class="ttdoc">Returns the element at the given index. Does bounds checks in debug builds.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:119</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a8407e866a067554683786544aec56bad"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a8407e866a067554683786544aec56bad">xiiSmallArrayBase::RemoveAtAndCopy</a></div><div class="ttdeci">void RemoveAtAndCopy(xiiUInt32 uiIndex, xiiUInt16 uiNumElements=1)</div><div class="ttdoc">Removes the element at index and fills the gap by shifting all following elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:272</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a87a2be4d175cd71b54757029980f4bbc"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a87a2be4d175cd71b54757029980f4bbc">xiiSmallArrayBase::GetArrayPtr</a></div><div class="ttdeci">xiiArrayPtr&lt; T &gt; GetArrayPtr()</div><div class="ttdoc">Returns an array pointer to the array data, or an empty array pointer if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:453</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a8bc5875099d17be0928af6747512f050"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a8bc5875099d17be0928af6747512f050">xiiSmallArrayBase::CopyFrom</a></div><div class="ttdeci">void CopyFrom(const xiiArrayPtr&lt; const T &gt; &amp;other, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Copies the data from some other array into this one.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:32</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a903aca5dbbf5f3670db554d1b4fcbc12"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a903aca5dbbf5f3670db554d1b4fcbc12">xiiSmallArrayBase::IndexOf</a></div><div class="ttdeci">xiiUInt32 IndexOf(const T &amp;value, xiiUInt32 uiStartIndex=0) const</div><div class="ttdoc">Searches for the first occurrence of the given value and returns its index or xiiInvalidIndex if not ...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:303</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_a96b254cbe8fc346df30bf263c780270f"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#a96b254cbe8fc346df30bf263c780270f">xiiSmallArrayBase::SetCountUninitialized</a></div><div class="ttdeci">void SetCountUninitialized(xiiUInt16 uiCount, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Extra elements might be uninitialized.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:181</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_aa7b0793640bf988c2658f377837899ce"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#aa7b0793640bf988c2658f377837899ce">xiiSmallArrayBase::GetByteArrayPtr</a></div><div class="ttdeci">xiiArrayPtr&lt; typename xiiArrayPtr&lt; T &gt;::ByteType &gt; GetByteArrayPtr()</div><div class="ttdoc">Returns a byte array pointer to the array data, or an empty array pointer if the array is empty.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:465</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_aae724024d854bd5dd1b58dc0e6e87bfc"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#aae724024d854bd5dd1b58dc0e6e87bfc">xiiSmallArrayBase::EnsureCount</a></div><div class="ttdeci">void EnsureCount(xiiUInt16 uiCount, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Ensures the container has at least uiCount elements. Ie. calls SetCount() if the container has fewer ...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:171</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_abbca721a1bcdf3b69d9a760842cab654"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#abbca721a1bcdf3b69d9a760842cab654">xiiSmallArrayBase::GetCapacity</a></div><div class="ttdeci">xiiUInt32 GetCapacity() const</div><div class="ttdoc">Returns the reserved number of elements that the array can hold without reallocating.</div><div class="ttdef"><b>Definition</b> SmallArray.h:164</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_aca1f86b4004618f872aeffdede5b86a6"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#aca1f86b4004618f872aeffdede5b86a6">xiiSmallArrayBase::IsEmpty</a></div><div class="ttdeci">bool IsEmpty() const</div><div class="ttdoc">Returns true, if the array does not contain any elements.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:207</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_accbe8a8ba2f3431b6c5bc0c58f284136"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#accbe8a8ba2f3431b6c5bc0c58f284136">xiiSmallArrayBase::Compact</a></div><div class="ttdeci">void Compact(xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Tries to compact the array to avoid wasting memory. The resulting capacity is at least 'GetCount' (no...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:493</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_ae337c41ad0aaea57e046a2cd3f8cad56"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#ae337c41ad0aaea57e046a2cd3f8cad56">xiiSmallArrayBase::RemoveAndSwap</a></div><div class="ttdeci">bool RemoveAndSwap(const T &amp;value)</div><div class="ttdoc">Removes the first occurrence of value and fills the gap by swapping in the last element.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:260</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_ae6e9392c96e90cb12ca5952408d78225"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#ae6e9392c96e90cb12ca5952408d78225">xiiSmallArrayBase::PopBack</a></div><div class="ttdeci">void PopBack(xiiUInt32 uiCountToRemove=1)</div><div class="ttdoc">Removes count elements from the end of the array.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:391</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_ae9c20ac9f90231d3e2999e6d9e9cda6f"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#ae9c20ac9f90231d3e2999e6d9e9cda6f">xiiSmallArrayBase::PushBackUnchecked</a></div><div class="ttdeci">void PushBackUnchecked(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array. Does NOT ensure capacity.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:363</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_aec2c31c5c5ffb46b0633dd7e280dfee2"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#aec2c31c5c5ffb46b0633dd7e280dfee2">xiiSmallArrayBase::SetCount</a></div><div class="ttdeci">void SetCount(xiiUInt16 uiCount, xiiAllocatorBase *pAllocator)</div><div class="ttdoc">Resizes the array to have exactly uiCount elements. Default constructs extra elements if the array is...</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:133</div></div>
<div class="ttc" id="aclassxii_small_array_base_htm_af6ae848d26e3aa3fbc04fa7dfb29cf1f"><div class="ttname"><a href="../../d0/d92/classxii_small_array_base.htm#af6ae848d26e3aa3fbc04fa7dfb29cf1f">xiiSmallArrayBase::GetHeapMemoryUsage</a></div><div class="ttdeci">xiiUInt64 GetHeapMemoryUsage() const</div><div class="ttdoc">Returns the amount of bytes that are currently allocated on the heap.</div><div class="ttdef"><b>Definition</b> SmallArray_inl.h:517</div></div>
<div class="ttc" id="aclassxii_small_array_htm"><div class="ttname"><a href="../../d6/d1f/classxii_small_array.htm">xiiSmallArray</a></div><div class="ttdef"><b>Definition</b> SmallArray.h:212</div></div>
<div class="ttc" id="astructconst__reverse__pointer__iterator_htm"><div class="ttname"><a href="../../d5/dc9/structconst__reverse__pointer__iterator.htm">const_reverse_pointer_iterator</a></div><div class="ttdoc">Base class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition</b> ArrayIterator.h:148</div></div>
<div class="ttc" id="astructreverse__pointer__iterator_htm"><div class="ttname"><a href="../../d3/df2/structreverse__pointer__iterator.htm">reverse_pointer_iterator</a></div><div class="ttdoc">Non-Const class for Pointer like reverse iterators.</div><div class="ttdef"><b>Definition</b> ArrayIterator.h:211</div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_7f59ab18dbc50035dfc0ee7070867286.htm">Containers</a></li><li class="navelem"><b>SmallArray.h</b></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:47:30 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>

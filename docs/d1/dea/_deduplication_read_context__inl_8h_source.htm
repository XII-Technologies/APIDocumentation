<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/IO/Implementation/DeduplicationReadContext_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d1/dea/_deduplication_read_context__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">DeduplicationReadContext_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160; </div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor">#include &lt;Foundation/IO/Stream.h&gt;</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#aab22fd1cea8c66e442ac6d8626fc545d">xiiDeduplicationReadContext::ReadObjectInplace</a>(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, T&amp; ref_obj)</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;{</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, ref_obj, <span class="keyword">nullptr</span>);</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;}</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160; </div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">xiiDeduplicationReadContext::ReadObject</a>(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; stream, T&amp; obj, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;{</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;  <span class="keywordtype">bool</span> bIsRealObject;</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  stream &gt;&gt; bIsRealObject;</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160; </div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  XII_ASSERT_DEV(bIsRealObject, <span class="stringliteral">&quot;Reading an object inplace only works for the first occurrence&quot;</span>);</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160; </div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  XII_SUCCEED_OR_RETURN(xiiStreamReaderUtil::Deserialize&lt;T&gt;(stream, obj));</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  m_Objects.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(&amp;obj);</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;}</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00026"></a><span class="lineno"><a class="line" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">   26</a></span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">xiiDeduplicationReadContext::ReadObject</a>(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, T*&amp; ref_pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;{</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  <span class="keywordtype">bool</span> bIsRealObject;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  ref_stream &gt;&gt; bIsRealObject;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  <span class="keywordflow">if</span> (bIsRealObject)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  {</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    ref_pObject = XII_NEW(pAllocator, T);</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    XII_SUCCEED_OR_RETURN(xiiStreamReaderUtil::Deserialize&lt;T&gt;(ref_stream, *ref_pObject));</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160; </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    m_Objects.<a class="code" href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">PushBack</a>(ref_pObject);</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    xiiUInt32 uiIndex;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    ref_stream &gt;&gt; uiIndex;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keywordflow">if</span> (uiIndex &lt; m_Objects.<a class="code" href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">GetCount</a>())</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    {</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      ref_pObject = <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(m_Objects[uiIndex]);</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span> (uiIndex == xiiInvalidIndex)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      ref_pObject = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    }</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    {</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    }</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  }</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="../../d0/d39/classxii_deduplication_read_context.htm#a576705f638bdeda29ed519bd0f27d7dc">   61</a></span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">xiiDeduplicationReadContext::ReadObject</a>(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, <a class="code" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr&lt;T&gt;</a>&amp; ref_pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;{</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  T* ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, ptr, pAllocator).Succeeded())</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  {</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    ref_pObject = <a class="code" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr&lt;T&gt;</a>(ptr, pAllocator);</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  }</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;}</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="../../d0/d39/classxii_deduplication_read_context.htm#a405dd04dd056085d6e69f37e53b21350">   73</a></span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">xiiDeduplicationReadContext::ReadObject</a>(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, <a class="code" href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr&lt;T&gt;</a>&amp; ref_pObject, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  T* ptr = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, ptr, pAllocator).Succeeded())</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  {</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    ref_pObject = std::move(<a class="code" href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr&lt;T&gt;</a>(ptr, pAllocator));</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  }</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;}</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> ArrayType, <span class="keyword">typename</span> ValueType&gt;</div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="line" href="../../d0/d39/classxii_deduplication_read_context.htm#abeab586a8736d03b7ff5859a20f48137">   85</a></span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#abeab586a8736d03b7ff5859a20f48137">xiiDeduplicationReadContext::ReadArray</a>(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, <a class="code" href="../../da/d4c/classxii_array_base.htm">xiiArrayBase&lt;ValueType, ArrayType&gt;</a>&amp; ref_array, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  xiiUInt64 uiCount = 0;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  XII_SUCCEED_OR_RETURN(ref_stream.<a class="code" href="../../d4/d5e/classxii_stream_reader.htm#a5abd6cd75383337cd0cc2e31c3cb1688">ReadQWordValue</a>(&amp;uiCount));</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160; </div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  XII_ASSERT_DEV(uiCount &lt; std::numeric_limits&lt;xiiUInt32&gt;::max(), <span class="stringliteral">&quot;Containers currently use 32 bit for counts internally. Value from file is too large.&quot;</span>);</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160; </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;  ref_array.<a class="code" href="../../da/d4c/classxii_array_base.htm#ab517ef07fbed3ecc766ac24394ae1fc8">Clear</a>();</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keywordflow">if</span> (uiCount &gt; 0)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">static_cast&lt;</span>ArrayType&amp;<span class="keyword">&gt;</span>(ref_array).Reserve(<span class="keyword">static_cast&lt;</span>xiiUInt32<span class="keyword">&gt;</span>(uiCount));</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; static_cast&lt;xiiUInt32&gt;(uiCount); ++i)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;      XII_SUCCEED_OR_RETURN(<a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, ref_array.<a class="code" href="../../da/d4c/classxii_array_base.htm#af8b150ecd75941f71981db12f78c70b2">ExpandAndGetRef</a>(), pAllocator));</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    }</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;}</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00108"></a><span class="lineno"><a class="line" href="../../d0/d39/classxii_deduplication_read_context.htm#a7c5370e44ee02e311492175a7a2dcd45">  108</a></span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a7c5370e44ee02e311492175a7a2dcd45">xiiDeduplicationReadContext::ReadSet</a>(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, <a class="code" href="../../d6/daa/classxii_set_base.htm">xiiSetBase&lt;KeyType, Comparer&gt;</a>&amp; ref_set, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pAllocator)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;{</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  xiiUInt64 uiCount = 0;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  XII_SUCCEED_OR_RETURN(ref_stream.<a class="code" href="../../d4/d5e/classxii_stream_reader.htm#a5abd6cd75383337cd0cc2e31c3cb1688">ReadQWordValue</a>(&amp;uiCount));</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;  XII_ASSERT_DEV(uiCount &lt; std::numeric_limits&lt;xiiUInt32&gt;::max(), <span class="stringliteral">&quot;Containers currently use 32 bit for counts internally. Value from file is too large.&quot;</span>);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  ref_set.<a class="code" href="../../d6/daa/classxii_set_base.htm#a0d39b63f88f77dfff248b0586c9f9c24">Clear</a>();</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160; </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; static_cast&lt;xiiUInt32&gt;(uiCount); ++i)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;  {</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    KeyType key;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    XII_SUCCEED_OR_RETURN(<a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, key, pAllocator));</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    ref_set.<a class="code" href="../../d6/daa/classxii_set_base.htm#a0c684120db5132a2037d0defbe2d70c1">Insert</a>(std::move(key));</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;}</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="keyword">namespace </span>xiiInternal</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;{</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="comment">// Internal helper to prevent the compiler from trying to find a de-serialization method for pointer types or other types which don&#39;t have</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  <span class="comment">// one.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="../../dc/dcf/structxii_internal_1_1_deserialize_helper.htm">  132</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="../../dc/dcf/structxii_internal_1_1_deserialize_helper.htm">DeserializeHelper</a></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  {</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keyword">static</span> <span class="keyword">auto</span> Deserialize(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, T&amp; ref_obj, xiiInt32) -&gt; decltype(xiiStreamReaderUtil::Deserialize(ref_stream, ref_obj))</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      <span class="keywordflow">return</span> xiiStreamReaderUtil::Deserialize(ref_stream, ref_obj);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    <span class="keyword">static</span> <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> Deserialize(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, T&amp; ref_obj, <span class="keywordtype">float</span>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    {</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      XII_REPORT_FAILURE(<span class="stringliteral">&quot;No deserialize method available&quot;</span>);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  };</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;} <span class="comment">// namespace xiiInternal</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> KeyType, <span class="keyword">typename</span> ValueType, <span class="keyword">typename</span> Comparer&gt;</div>
<div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="../../d0/d39/classxii_deduplication_read_context.htm#a99a416404629a452d6c8830abe51bcb2">  150</a></span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a99a416404629a452d6c8830abe51bcb2">xiiDeduplicationReadContext::ReadMap</a>(<a class="code" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a>&amp; ref_stream, <a class="code" href="../../d6/d86/classxii_map_base.htm">xiiMapBase&lt;KeyType, ValueType, Comparer&gt;</a>&amp; ref_map, ReadMapMode mode, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pKeyAllocator, <a class="code" href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a>* pValueAllocator)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;{</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  xiiUInt64 uiCount = 0;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  XII_SUCCEED_OR_RETURN(ref_stream.<a class="code" href="../../d4/d5e/classxii_stream_reader.htm#a5abd6cd75383337cd0cc2e31c3cb1688">ReadQWordValue</a>(&amp;uiCount));</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  XII_ASSERT_DEV(uiCount &lt; std::numeric_limits&lt;xiiUInt32&gt;::max(), <span class="stringliteral">&quot;Containers currently use 32 bit for counts internally. Value from file is too large.&quot;</span>);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160; </div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  ref_map.<a class="code" href="../../d6/d86/classxii_map_base.htm#a6df7dde5c973d1e39914cad08fa129e9">Clear</a>();</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="keywordflow">if</span> (mode == ReadMapMode::DedupKey)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  {</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; static_cast&lt;xiiUInt32&gt;(uiCount); ++i)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      KeyType   key;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;      ValueType value;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;      XII_SUCCEED_OR_RETURN(<a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, key, pKeyAllocator));</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      XII_SUCCEED_OR_RETURN(xiiInternal::DeserializeHelper::Deserialize&lt;ValueType&gt;(ref_stream, value, 0));</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;      ref_map.<a class="code" href="../../d6/d86/classxii_map_base.htm#a7e48397530157eae5193f83fdced2ed1">Insert</a>(std::move(key), std::move(value));</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  }</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (mode == ReadMapMode::DedupValue)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  {</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; static_cast&lt;xiiUInt32&gt;(uiCount); ++i)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;      KeyType   key;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      ValueType value;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      XII_SUCCEED_OR_RETURN(xiiInternal::DeserializeHelper::Deserialize&lt;KeyType&gt;(ref_stream, key, 0));</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;      XII_SUCCEED_OR_RETURN(<a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, value, pValueAllocator));</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      ref_map.<a class="code" href="../../d6/d86/classxii_map_base.htm#a7e48397530157eae5193f83fdced2ed1">Insert</a>(std::move(key), std::move(value));</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  }</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">for</span> (xiiUInt32 i = 0; i &lt; static_cast&lt;xiiUInt32&gt;(uiCount); ++i)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      KeyType   key;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;      ValueType value;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      XII_SUCCEED_OR_RETURN(<a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, key, pKeyAllocator));</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      XII_SUCCEED_OR_RETURN(<a class="code" href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">ReadObject</a>(ref_stream, value, pValueAllocator));</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      ref_map.<a class="code" href="../../d6/d86/classxii_map_base.htm#a7e48397530157eae5193f83fdced2ed1">Insert</a>(std::move(key), std::move(value));</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  }</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_array_base_htm_a8b86f58a2097871da0e0b91eecc823e4"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#a8b86f58a2097871da0e0b91eecc823e4">xiiArrayBase::PushBack</a></div><div class="ttdeci">void PushBack(const T &amp;value)</div><div class="ttdoc">Pushes value at the end of the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:325</div></div>
<div class="ttc" id="aclassxii_shared_ptr_htm"><div class="ttname"><a href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a></div><div class="ttdoc">A Shared ptr manages a shared object and destroys that object when no one references it anymore....</div><div class="ttdef"><b>Definition:</b> SharedPtr.h:9</div></div>
<div class="ttc" id="aclassxii_map_base_htm_a6df7dde5c973d1e39914cad08fa129e9"><div class="ttname"><a href="../../d6/d86/classxii_map_base.htm#a6df7dde5c973d1e39914cad08fa129e9">xiiMapBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destroys all elements in the map and resets its size to zero.</div><div class="ttdef"><b>Definition:</b> Map_inl.h:159</div></div>
<div class="ttc" id="aclassxii_deduplication_read_context_htm_aab22fd1cea8c66e442ac6d8626fc545d"><div class="ttname"><a href="../../d0/d39/classxii_deduplication_read_context.htm#aab22fd1cea8c66e442ac6d8626fc545d">xiiDeduplicationReadContext::ReadObjectInplace</a></div><div class="ttdeci">xiiResult ReadObjectInplace(xiiStreamReader &amp;ref_stream, T &amp;ref_obj)</div><div class="ttdoc">Reads a single object inplace.</div></div>
<div class="ttc" id="aclassxii_map_base_htm_a7e48397530157eae5193f83fdced2ed1"><div class="ttname"><a href="../../d6/d86/classxii_map_base.htm#a7e48397530157eae5193f83fdced2ed1">xiiMapBase::Insert</a></div><div class="ttdeci">Iterator Insert(CompatibleKeyType &amp;&amp;key, CompatibleValueType &amp;&amp;value)</div><div class="ttdoc">Inserts the key/value pair into the tree and returns an Iterator to it. O(log n) operation.</div><div class="ttdef"><b>Definition:</b> Map_inl.h:519</div></div>
<div class="ttc" id="aclassxii_map_base_htm"><div class="ttname"><a href="../../d6/d86/classxii_map_base.htm">xiiMapBase</a></div><div class="ttdoc">An associative container. Similar to STL::map.</div><div class="ttdef"><b>Definition:</b> Map.h:17</div></div>
<div class="ttc" id="aclassxii_set_base_htm"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm">xiiSetBase</a></div><div class="ttdoc">A set container that only stores whether an element resides in it or not. Similar to STL::set.</div><div class="ttdef"><b>Definition:</b> Set.h:12</div></div>
<div class="ttc" id="aclassxii_deduplication_read_context_htm_a99a416404629a452d6c8830abe51bcb2"><div class="ttname"><a href="../../d0/d39/classxii_deduplication_read_context.htm#a99a416404629a452d6c8830abe51bcb2">xiiDeduplicationReadContext::ReadMap</a></div><div class="ttdeci">xiiResult ReadMap(xiiStreamReader &amp;ref_stream, xiiMapBase&lt; KeyType, ValueType, Comparer &gt; &amp;ref_map, ReadMapMode mode, xiiAllocatorBase *pKeyAllocator=xiiFoundation::GetDefaultAllocator(), xiiAllocatorBase *pValueAllocator=xiiFoundation::GetDefaultAllocator())</div><div class="ttdoc">Reads a map. Mode controls whether key or value or both should de-duplicated.</div><div class="ttdef"><b>Definition:</b> DeduplicationReadContext_inl.h:150</div></div>
<div class="ttc" id="astructxii_internal_1_1_deserialize_helper_htm"><div class="ttname"><a href="../../dc/dcf/structxii_internal_1_1_deserialize_helper.htm">xiiInternal::DeserializeHelper</a></div><div class="ttdef"><b>Definition:</b> DeduplicationReadContext_inl.h:132</div></div>
<div class="ttc" id="aclassxii_array_base_htm_ab517ef07fbed3ecc766ac24394ae1fc8"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#ab517ef07fbed3ecc766ac24394ae1fc8">xiiArrayBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Clears the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:176</div></div>
<div class="ttc" id="aclassxii_array_base_htm"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm">xiiArrayBase</a></div><div class="ttdoc">Base class for all array containers. Implements all the basic functionality that only requires a poin...</div><div class="ttdef"><b>Definition:</b> ArrayBase.h:14</div></div>
<div class="ttc" id="aclassxii_deduplication_read_context_htm_a7c5370e44ee02e311492175a7a2dcd45"><div class="ttname"><a href="../../d0/d39/classxii_deduplication_read_context.htm#a7c5370e44ee02e311492175a7a2dcd45">xiiDeduplicationReadContext::ReadSet</a></div><div class="ttdeci">xiiResult ReadSet(xiiStreamReader &amp;ref_stream, xiiSetBase&lt; KeyType, Comparer &gt; &amp;ref_set, xiiAllocatorBase *pAllocator=xiiFoundation::GetDefaultAllocator())</div><div class="ttdoc">Reads a set of de-duplicated objects.</div><div class="ttdef"><b>Definition:</b> DeduplicationReadContext_inl.h:108</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a0c684120db5132a2037d0defbe2d70c1"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a0c684120db5132a2037d0defbe2d70c1">xiiSetBase::Insert</a></div><div class="ttdeci">Iterator Insert(CompatibleKeyType &amp;&amp;key)</div><div class="ttdoc">Inserts the key into the tree and returns an Iterator to it. O(log n) operation.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:377</div></div>
<div class="ttc" id="aclassxii_deduplication_read_context_htm_abeab586a8736d03b7ff5859a20f48137"><div class="ttname"><a href="../../d0/d39/classxii_deduplication_read_context.htm#abeab586a8736d03b7ff5859a20f48137">xiiDeduplicationReadContext::ReadArray</a></div><div class="ttdeci">xiiResult ReadArray(xiiStreamReader &amp;ref_stream, xiiArrayBase&lt; ValueType, ArrayType &gt; &amp;ref_array, xiiAllocatorBase *pAllocator=xiiFoundation::GetDefaultAllocator())</div><div class="ttdoc">Reads an array of de-duplicated objects.</div><div class="ttdef"><b>Definition:</b> DeduplicationReadContext_inl.h:85</div></div>
<div class="ttc" id="aclassxii_array_base_htm_af8b150ecd75941f71981db12f78c70b2"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#af8b150ecd75941f71981db12f78c70b2">xiiArrayBase::ExpandAndGetRef</a></div><div class="ttdeci">T &amp; ExpandAndGetRef()</div><div class="ttdoc">Grows the array by one element and returns a reference to the newly created element.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:302</div></div>
<div class="ttc" id="aclassxii_array_base_htm_a43100f93e19bb795ea0980dae2b28e0b"><div class="ttname"><a href="../../da/d4c/classxii_array_base.htm#a43100f93e19bb795ea0980dae2b28e0b">xiiArrayBase::GetCount</a></div><div class="ttdeci">xiiUInt32 GetCount() const</div><div class="ttdoc">Returns the number of active elements in the array.</div><div class="ttdef"><b>Definition:</b> ArrayBase_inl.h:164</div></div>
<div class="ttc" id="aclassxii_deduplication_read_context_htm_a94693f36a022062e3516c74bc4b27091"><div class="ttname"><a href="../../d0/d39/classxii_deduplication_read_context.htm#a94693f36a022062e3516c74bc4b27091">xiiDeduplicationReadContext::ReadObject</a></div><div class="ttdeci">xiiResult ReadObject(xiiStreamReader &amp;ref_stream, T *&amp;ref_pObject, xiiAllocatorBase *pAllocator=xiiFoundation::GetDefaultAllocator())</div><div class="ttdoc">Reads a single object and sets the pointer to it. The given allocator is used to create the object if...</div><div class="ttdef"><b>Definition:</b> DeduplicationReadContext_inl.h:26</div></div>
<div class="ttc" id="aclassxii_stream_reader_htm"><div class="ttname"><a href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a></div><div class="ttdoc">Interface for binary in (read) streams.</div><div class="ttdef"><b>Definition:</b> Stream.h:21</div></div>
<div class="ttc" id="aclassxii_allocator_base_htm"><div class="ttname"><a href="../../d5/d66/classxii_allocator_base.htm">xiiAllocatorBase</a></div><div class="ttdoc">Base class for all memory allocators.</div><div class="ttdef"><b>Definition:</b> AllocatorBase.h:21</div></div>
<div class="ttc" id="aclassxii_set_base_htm_a0d39b63f88f77dfff248b0586c9f9c24"><div class="ttname"><a href="../../d6/daa/classxii_set_base.htm#a0d39b63f88f77dfff248b0586c9f9c24">xiiSetBase::Clear</a></div><div class="ttdeci">void Clear()</div><div class="ttdoc">Destroys all elements in the set and resets its size to zero.</div><div class="ttdef"><b>Definition:</b> Set_inl.h:159</div></div>
<div class="ttc" id="aclassxii_unique_ptr_htm"><div class="ttname"><a href="../../d9/d4a/classxii_unique_ptr.htm">xiiUniquePtr</a></div><div class="ttdoc">A Unique ptr manages an object and destroys that object when it goes out of scope....</div><div class="ttdef"><b>Definition:</b> UniquePtr.h:8</div></div>
<div class="ttc" id="astructxii_result_htm"><div class="ttname"><a href="../../dd/dad/structxii_result.htm">xiiResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:54</div></div>
<div class="ttc" id="aclassxii_stream_reader_htm_a5abd6cd75383337cd0cc2e31c3cb1688"><div class="ttname"><a href="../../d4/d5e/classxii_stream_reader.htm#a5abd6cd75383337cd0cc2e31c3cb1688">xiiStreamReader::ReadQWordValue</a></div><div class="ttdeci">xiiResult ReadQWordValue(T *pQWordValue)</div><div class="ttdoc">Helper method to read a qword value correctly (copes with potentially different endianess).</div><div class="ttdef"><b>Definition:</b> Stream_inl.h:107</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_6d6e889d564fa4f359ed5818c6957751.htm">IO</a></li><li class="navelem"><a class="el" href="../../dir_8853712b91b4fc71fafc2d6a1532e9b6.htm">Implementation</a></li><li class="navelem"><b>DeduplicationReadContext_inl.h</b></li>
    <li class="footer">Generated on Thu Aug 17 2023 02:03:10 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

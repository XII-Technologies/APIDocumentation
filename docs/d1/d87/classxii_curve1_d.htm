<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiCurve1D Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d1/d87/classxii_curve1_d.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="../../d0/d9a/classxii_curve1_d-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiCurve1D Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A 1D curve for animating a single value over time.  
 <a href="../../d1/d87/classxii_curve1_d.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../db/dd2/_curve1_d_8h_source.htm">Curve1D.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../dd/dda/structxii_curve1_d_1_1_control_point.htm">ControlPoint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores position and tangents to control spline interpolation.  <a href="../../dd/dda/structxii_curve1_d_1_1_control_point.htm#details">More...</a><br /></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a6a5e6d3c609495fc635109fa04f3a81a"><td class="memItemLeft" align="right" valign="top"><a id="a6a5e6d3c609495fc635109fa04f3a81a"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a6a5e6d3c609495fc635109fa04f3a81a">Clear</a> ()</td></tr>
<tr class="memdesc:a6a5e6d3c609495fc635109fa04f3a81a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all control points. <br /></td></tr>
<tr class="separator:a6a5e6d3c609495fc635109fa04f3a81a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a07b564825f6391c8e58b2a31a1487c80"><td class="memItemLeft" align="right" valign="top"><a id="a07b564825f6391c8e58b2a31a1487c80"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a07b564825f6391c8e58b2a31a1487c80">IsEmpty</a> () const</td></tr>
<tr class="memdesc:a07b564825f6391c8e58b2a31a1487c80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the curve has any control point. <br /></td></tr>
<tr class="separator:a07b564825f6391c8e58b2a31a1487c80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3bcf71536a07556c79a514cb15b5c889"><td class="memItemLeft" align="right" valign="top"><a id="a3bcf71536a07556c79a514cb15b5c889"></a>
<a class="el" href="../../dd/dda/structxii_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a3bcf71536a07556c79a514cb15b5c889">AddControlPoint</a> (double fPos)</td></tr>
<tr class="memdesc:a3bcf71536a07556c79a514cb15b5c889"><td class="mdescLeft">&#160;</td><td class="mdescRight">Appends a control point. <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9224292f6598b0866308c54d9045e258" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> must be called to before evaluating the curve. <br /></td></tr>
<tr class="separator:a3bcf71536a07556c79a514cb15b5c889"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dad005e65f7c6bc431a0d4fe3cc7deb"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a2dad005e65f7c6bc431a0d4fe3cc7deb">RecomputeExtents</a> ()</td></tr>
<tr class="memdesc:a2dad005e65f7c6bc431a0d4fe3cc7deb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the min/max X value that can be retrieved through GetExtents().  <a href="../../d1/d87/classxii_curve1_d.htm#a2dad005e65f7c6bc431a0d4fe3cc7deb">More...</a><br /></td></tr>
<tr class="separator:a2dad005e65f7c6bc431a0d4fe3cc7deb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab6fff97ac225939a66afab9fc4502057"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#ab6fff97ac225939a66afab9fc4502057">QueryExtents</a> (double &amp;ref_fMinx, double &amp;ref_fMaxx) const</td></tr>
<tr class="memdesc:ab6fff97ac225939a66afab9fc4502057"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns the min and max position value across all control points.  <a href="../../d1/d87/classxii_curve1_d.htm#ab6fff97ac225939a66afab9fc4502057">More...</a><br /></td></tr>
<tr class="separator:ab6fff97ac225939a66afab9fc4502057"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43e6497ba30ba703e722c8bf1f713ca9"><td class="memItemLeft" align="right" valign="top"><a id="a43e6497ba30ba703e722c8bf1f713ca9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a43e6497ba30ba703e722c8bf1f713ca9">QueryExtremeValues</a> (double &amp;ref_fMinVal, double &amp;ref_fMaxVal) const</td></tr>
<tr class="memdesc:a43e6497ba30ba703e722c8bf1f713ca9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the min and max Y value across the curve. For this information to be available, the linear approximation of the curve must have been computed, otherwise stale values will be returned. <br /></td></tr>
<tr class="separator:a43e6497ba30ba703e722c8bf1f713ca9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ea70cbb09837319ea59a079af60462a"><td class="memItemLeft" align="right" valign="top"><a id="a7ea70cbb09837319ea59a079af60462a"></a>
xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a7ea70cbb09837319ea59a079af60462a">GetNumControlPoints</a> () const</td></tr>
<tr class="memdesc:a7ea70cbb09837319ea59a079af60462a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of control points. <br /></td></tr>
<tr class="separator:a7ea70cbb09837319ea59a079af60462a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab75e1a146b26da67f4e8497e1c98b4aa"><td class="memItemLeft" align="right" valign="top"><a id="ab75e1a146b26da67f4e8497e1c98b4aa"></a>
const <a class="el" href="../../dd/dda/structxii_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#ab75e1a146b26da67f4e8497e1c98b4aa">GetControlPoint</a> (xiiUInt32 uiIdx) const</td></tr>
<tr class="memdesc:ab75e1a146b26da67f4e8497e1c98b4aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Const access to a control point. <br /></td></tr>
<tr class="separator:ab75e1a146b26da67f4e8497e1c98b4aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9882caad71f8148588b36dff323fe991"><td class="memItemLeft" align="right" valign="top"><a id="a9882caad71f8148588b36dff323fe991"></a>
<a class="el" href="../../dd/dda/structxii_curve1_d_1_1_control_point.htm">ControlPoint</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9882caad71f8148588b36dff323fe991">ModifyControlPoint</a> (xiiUInt32 uiIdx)</td></tr>
<tr class="memdesc:a9882caad71f8148588b36dff323fe991"><td class="mdescLeft">&#160;</td><td class="mdescRight">Non-const access to a control point. If you modify the position, <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9224292f6598b0866308c54d9045e258" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> has to be called before evaluating the curve. <br /></td></tr>
<tr class="separator:a9882caad71f8148588b36dff323fe991"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9224292f6598b0866308c54d9045e258"><td class="memItemLeft" align="right" valign="top"><a id="a9224292f6598b0866308c54d9045e258"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9224292f6598b0866308c54d9045e258">SortControlPoints</a> ()</td></tr>
<tr class="memdesc:a9224292f6598b0866308c54d9045e258"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sorts the control point arrays by their position. The CPs have to be sorted before calling <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a673414b4921642eaf3c8884f8c43704d" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>, otherwise the result will be wrong. <br /></td></tr>
<tr class="separator:a9224292f6598b0866308c54d9045e258"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a673414b4921642eaf3c8884f8c43704d"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a673414b4921642eaf3c8884f8c43704d">Evaluate</a> (double fPosition) const</td></tr>
<tr class="memdesc:a673414b4921642eaf3c8884f8c43704d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.  <a href="../../d1/d87/classxii_curve1_d.htm#a673414b4921642eaf3c8884f8c43704d">More...</a><br /></td></tr>
<tr class="separator:a673414b4921642eaf3c8884f8c43704d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab8d7d97aa9ea62e7054ba4bf0181d1cd"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#ab8d7d97aa9ea62e7054ba4bf0181d1cd">ConvertNormalizedPos</a> (double fPos) const</td></tr>
<tr class="memdesc:ab8d7d97aa9ea62e7054ba4bf0181d1cd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes the normalized x coordinate [0;1] and converts it into a valid position on the curve.  <a href="../../d1/d87/classxii_curve1_d.htm#ab8d7d97aa9ea62e7054ba4bf0181d1cd">More...</a><br /></td></tr>
<tr class="separator:ab8d7d97aa9ea62e7054ba4bf0181d1cd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa99d458c0861dc2c278e3417953330fd"><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#aa99d458c0861dc2c278e3417953330fd">NormalizeValue</a> (double value) const</td></tr>
<tr class="memdesc:aa99d458c0861dc2c278e3417953330fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes a value (typically returned by <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a673414b4921642eaf3c8884f8c43704d" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>) and normalizes it into [0;1] range.  <a href="../../d1/d87/classxii_curve1_d.htm#aa99d458c0861dc2c278e3417953330fd">More...</a><br /></td></tr>
<tr class="separator:aa99d458c0861dc2c278e3417953330fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae662377c2d2675f6376bdd376a105a26"><td class="memItemLeft" align="right" valign="top"><a id="ae662377c2d2675f6376bdd376a105a26"></a>
xiiUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#ae662377c2d2675f6376bdd376a105a26">GetHeapMemoryUsage</a> () const</td></tr>
<tr class="memdesc:ae662377c2d2675f6376bdd376a105a26"><td class="mdescLeft">&#160;</td><td class="mdescRight">How much heap memory the curve uses. <br /></td></tr>
<tr class="separator:ae662377c2d2675f6376bdd376a105a26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a632b943cd06bf72862b0853e66efa1d9"><td class="memItemLeft" align="right" valign="top"><a id="a632b943cd06bf72862b0853e66efa1d9"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a632b943cd06bf72862b0853e66efa1d9">Save</a> (<a class="el" href="../../d0/d18/classxii_stream_writer.htm">xiiStreamWriter</a> &amp;ref_stream) const</td></tr>
<tr class="memdesc:a632b943cd06bf72862b0853e66efa1d9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the current state in a stream. <br /></td></tr>
<tr class="separator:a632b943cd06bf72862b0853e66efa1d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e24ed84710a979c48c93d63cccb88ff"><td class="memItemLeft" align="right" valign="top"><a id="a6e24ed84710a979c48c93d63cccb88ff"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a6e24ed84710a979c48c93d63cccb88ff">Load</a> (<a class="el" href="../../d4/d5e/classxii_stream_reader.htm">xiiStreamReader</a> &amp;ref_stream)</td></tr>
<tr class="memdesc:a6e24ed84710a979c48c93d63cccb88ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restores the state from a stream. <br /></td></tr>
<tr class="separator:a6e24ed84710a979c48c93d63cccb88ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a541acbcab64b35a3b1a430cbd47c591f"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a541acbcab64b35a3b1a430cbd47c591f">CreateLinearApproximation</a> (double fMaxError=0.01, xiiUInt8 uiMaxSubDivs=8)</td></tr>
<tr class="memdesc:a541acbcab64b35a3b1a430cbd47c591f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pre-computes sample points for linear interpolation that approximate the curve within the allowed error threshold.  <a href="../../d1/d87/classxii_curve1_d.htm#a541acbcab64b35a3b1a430cbd47c591f">More...</a><br /></td></tr>
<tr class="separator:a541acbcab64b35a3b1a430cbd47c591f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9115bb54f0ebbf276f4d6f19a60235e9"><td class="memItemLeft" align="right" valign="top"><a id="a9115bb54f0ebbf276f4d6f19a60235e9"></a>
const <a class="el" href="../../dc/da9/classxii_hybrid_array.htm">xiiHybridArray</a>&lt; <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2d</a>, 24 &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><b>GetLinearApproximation</b> () const</td></tr>
<tr class="separator:a9115bb54f0ebbf276f4d6f19a60235e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a892406e89e31ed017a52566361270694"><td class="memItemLeft" align="right" valign="top"><a id="a892406e89e31ed017a52566361270694"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a892406e89e31ed017a52566361270694">ClampTangents</a> ()</td></tr>
<tr class="memdesc:a892406e89e31ed017a52566361270694"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjusts the tangents such that the curve cannot make loopings. <br /></td></tr>
<tr class="separator:a892406e89e31ed017a52566361270694"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9347b2f011a34c48d345b23da36794c9"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9347b2f011a34c48d345b23da36794c9">ApplyTangentModes</a> ()</td></tr>
<tr class="memdesc:a9347b2f011a34c48d345b23da36794c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adjusts the tangents in accordance to the specified tangent modes at each control point.  <a href="../../d1/d87/classxii_curve1_d.htm#a9347b2f011a34c48d345b23da36794c9">More...</a><br /></td></tr>
<tr class="separator:a9347b2f011a34c48d345b23da36794c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a50dfb7d954452db6fe3413a69637ec46"><td class="memItemLeft" align="right" valign="top"><a id="a50dfb7d954452db6fe3413a69637ec46"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a50dfb7d954452db6fe3413a69637ec46">MakeFixedLengthTangentLeft</a> (xiiUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:a50dfb7d954452db6fe3413a69637ec46"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9347b2f011a34c48d345b23da36794c9" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:a50dfb7d954452db6fe3413a69637ec46"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a39f52cc5ab262fb6d85c64e03cbdc764"><td class="memItemLeft" align="right" valign="top"><a id="a39f52cc5ab262fb6d85c64e03cbdc764"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a39f52cc5ab262fb6d85c64e03cbdc764">MakeFixedLengthTangentRight</a> (xiiUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:a39f52cc5ab262fb6d85c64e03cbdc764"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9347b2f011a34c48d345b23da36794c9" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:a39f52cc5ab262fb6d85c64e03cbdc764"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae6945f12e2d9b3009f06bdd1d751ed4e"><td class="memItemLeft" align="right" valign="top"><a id="ae6945f12e2d9b3009f06bdd1d751ed4e"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#ae6945f12e2d9b3009f06bdd1d751ed4e">MakeLinearTangentLeft</a> (xiiUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:ae6945f12e2d9b3009f06bdd1d751ed4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9347b2f011a34c48d345b23da36794c9" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:ae6945f12e2d9b3009f06bdd1d751ed4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa1200c01d783a9e689210f086d572ff"><td class="memItemLeft" align="right" valign="top"><a id="afa1200c01d783a9e689210f086d572ff"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d87/classxii_curve1_d.htm#afa1200c01d783a9e689210f086d572ff">MakeLinearTangentRight</a> (xiiUInt32 uiCpIdx)</td></tr>
<tr class="memdesc:afa1200c01d783a9e689210f086d572ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Typically called by <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9347b2f011a34c48d345b23da36794c9" title="Adjusts the tangents in accordance to the specified tangent modes at each control point.">ApplyTangentModes()</a> for specific control points. Control points must be in sorted order. <br /></td></tr>
<tr class="separator:afa1200c01d783a9e689210f086d572ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a048a0b06ddce72c4bc0d57d835c16fe4"><td class="memItemLeft" align="right" valign="top"><a id="a048a0b06ddce72c4bc0d57d835c16fe4"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeAutoTangentLeft</b> (xiiUInt32 uiCpIdx)</td></tr>
<tr class="separator:a048a0b06ddce72c4bc0d57d835c16fe4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9ead45b1eae08e9f7a5ddedaa5188666"><td class="memItemLeft" align="right" valign="top"><a id="a9ead45b1eae08e9f7a5ddedaa5188666"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>MakeAutoTangentRight</b> (xiiUInt32 uiCpIdx)</td></tr>
<tr class="separator:a9ead45b1eae08e9f7a5ddedaa5188666"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A 1D curve for animating a single value over time. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a9347b2f011a34c48d345b23da36794c9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9347b2f011a34c48d345b23da36794c9">&#9670;&nbsp;</a></span>ApplyTangentModes()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiCurve1D::ApplyTangentModes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Adjusts the tangents in accordance to the specified tangent modes at each control point. </p>
<dl class="section note"><dt>Note</dt><dd>All control points must already be in sorted order, so call <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9224292f6598b0866308c54d9045e258" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> first if necessary. </dd></dl>

</div>
</div>
<a id="ab8d7d97aa9ea62e7054ba4bf0181d1cd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab8d7d97aa9ea62e7054ba4bf0181d1cd">&#9670;&nbsp;</a></span>ConvertNormalizedPos()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double xiiCurve1D::ConvertNormalizedPos </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fPos</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Takes the normalized x coordinate [0;1] and converts it into a valid position on the curve. </p>
<dl class="section note"><dt>Note</dt><dd>This only works when the curve extents are available. See <a class="el" href="../../d1/d87/classxii_curve1_d.htm#ab6fff97ac225939a66afab9fc4502057" title="returns the min and max position value across all control points.">QueryExtents()</a> and <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a2dad005e65f7c6bc431a0d4fe3cc7deb" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents()</a>.</dd></dl>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a2dad005e65f7c6bc431a0d4fe3cc7deb" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents</a> </dd>
<dd>
<a class="el" href="../../d1/d87/classxii_curve1_d.htm#ab6fff97ac225939a66afab9fc4502057" title="returns the min and max position value across all control points.">QueryExtents</a> </dd></dl>

</div>
</div>
<a id="a541acbcab64b35a3b1a430cbd47c591f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a541acbcab64b35a3b1a430cbd47c591f">&#9670;&nbsp;</a></span>CreateLinearApproximation()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiCurve1D::CreateLinearApproximation </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fMaxError</em> = <code>0.01</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt8&#160;</td>
          <td class="paramname"><em>uiMaxSubDivs</em> = <code>8</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pre-computes sample points for linear interpolation that approximate the curve within the allowed error threshold. </p>
<dl class="section note"><dt>Note</dt><dd>All control points must already be in sorted order, so call <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9224292f6598b0866308c54d9045e258" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> first if necessary. </dd></dl>
<dl class="todo"><dt><b><a class="el" href="../../dd/da0/todo.htm#_todo000048">Todo:</a></b></dt><dd>Since we do this, we actually don't need the linear approximation anymore and could just evaluate the full curve </dd></dl>

</div>
</div>
<a id="a673414b4921642eaf3c8884f8c43704d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a673414b4921642eaf3c8884f8c43704d">&#9670;&nbsp;</a></span>Evaluate()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double xiiCurve1D::Evaluate </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>fPosition</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point. </p>
<p>This uses the linear approximation of the curve, so <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a541acbcab64b35a3b1a430cbd47c591f" title="Pre-computes sample points for linear interpolation that approximate the curve within the allowed err...">CreateLinearApproximation()</a> must have been called first.</p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d1/d87/classxii_curve1_d.htm#a541acbcab64b35a3b1a430cbd47c591f" title="Pre-computes sample points for linear interpolation that approximate the curve within the allowed err...">CreateLinearApproximation</a> </dd></dl>

</div>
</div>
<a id="aa99d458c0861dc2c278e3417953330fd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa99d458c0861dc2c278e3417953330fd">&#9670;&nbsp;</a></span>NormalizeValue()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double xiiCurve1D::NormalizeValue </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Takes a value (typically returned by <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a673414b4921642eaf3c8884f8c43704d" title="Evaluates the curve at the given position (x coordinate) and returns the value Y value at that point.">Evaluate()</a>) and normalizes it into [0;1] range. </p>
<dl class="section note"><dt>Note</dt><dd>This only works when the linear approximation of the curve has been computed first. </dd></dl>

</div>
</div>
<a id="ab6fff97ac225939a66afab9fc4502057"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab6fff97ac225939a66afab9fc4502057">&#9670;&nbsp;</a></span>QueryExtents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiCurve1D::QueryExtents </td>
          <td>(</td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>ref_fMinx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double &amp;&#160;</td>
          <td class="paramname"><em>ref_fMaxx</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>returns the min and max position value across all control points. </p>
<p>The returned values are only up to date if either <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9224292f6598b0866308c54d9045e258" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> or <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a2dad005e65f7c6bc431a0d4fe3cc7deb" title="Updates the min/max X value that can be retrieved through GetExtents().">RecomputeExtents()</a> was called before. Otherwise they will contain stale values. </p>

</div>
</div>
<a id="a2dad005e65f7c6bc431a0d4fe3cc7deb"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2dad005e65f7c6bc431a0d4fe3cc7deb">&#9670;&nbsp;</a></span>RecomputeExtents()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void xiiCurve1D::RecomputeExtents </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Updates the min/max X value that can be retrieved through GetExtents(). </p>
<p>This is automatically done when <a class="el" href="../../d1/d87/classxii_curve1_d.htm#a9224292f6598b0866308c54d9045e258" title="Sorts the control point arrays by their position. The CPs have to be sorted before calling Evaluate()...">SortControlPoints()</a> is called. It can be called manually, if the information is required without sorting. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Tracks/<a class="el" href="../../db/dd2/_curve1_d_8h_source.htm">Curve1D.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Tracks/Implementation/Curve1D.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/d87/classxii_curve1_d.htm">xiiCurve1D</a></li>
    <li class="footer">Generated on Sat Sep 2 2023 17:37:20 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

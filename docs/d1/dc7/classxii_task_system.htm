<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiTaskSystem Class Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d1/dc7/classxii_task_system.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="../../d4/d40/classxii_task_system-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">xiiTaskSystem Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This system allows to automatically distribute tasks onto a number of worker threads.  
 <a href="../../d1/dc7/classxii_task_system.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../d0/d50/_task_system_8h_source.htm">TaskSystem.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d6f/structxii_task_system_1_1_task_data.htm">TaskData</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Utilities</div></td></tr>
<tr class="memitem:a8aaca50fe859fd5278d61fe6372280c3"><td class="memItemLeft" align="right" valign="top"><a id="a8aaca50fe859fd5278d61fe6372280c3"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a8aaca50fe859fd5278d61fe6372280c3">WriteStateSnapshotToDGML</a> (<a class="el" href="../../d1/d8e/classxii_d_g_m_l_graph.htm">xiiDGMLGraph</a> &amp;ref_graph)</td></tr>
<tr class="memdesc:a8aaca50fe859fd5278d61fe6372280c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Writes the internal state of the <a class="el" href="../../d1/dc7/classxii_task_system.htm" title="This system allows to automatically distribute tasks onto a number of worker threads.">xiiTaskSystem</a> as a DGML graph. <br /></td></tr>
<tr class="separator:a8aaca50fe859fd5278d61fe6372280c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a896e88c61001fef965d8d35e97eaa142"><td class="memItemLeft" align="right" valign="top"><a id="a896e88c61001fef965d8d35e97eaa142"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a896e88c61001fef965d8d35e97eaa142">WriteStateSnapshotToFile</a> (<a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sPath={})</td></tr>
<tr class="memdesc:a896e88c61001fef965d8d35e97eaa142"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convenience function to write the task graph snapshot to a file. If no path is given, the file is written to ":appdata/TaskGraphs/__date__.dgml". <br /></td></tr>
<tr class="separator:a896e88c61001fef965d8d35e97eaa142"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Managing Tasks</h2></td></tr>
<tr class="memitem:a5e7cbcf1bd4c677d4f942a7053027772"><td class="memItemLeft" align="right" valign="top"><a id="a5e7cbcf1bd4c677d4f942a7053027772"></a>
static <a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a5e7cbcf1bd4c677d4f942a7053027772">StartSingleTask</a> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; <a class="el" href="../../d3/d9b/classxii_task.htm">xiiTask</a> &gt; &amp;pTask, <a class="el" href="../../d9/d69/structxii_task_priority.htm#a2aa9f9ee2f9b337039c13a946945d93d">xiiTaskPriority::Enum</a> priority, <a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskGroupFinishedCallback</a> callback=<a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskGroupFinishedCallback</a>())</td></tr>
<tr class="memdesc:a5e7cbcf1bd4c677d4f942a7053027772"><td class="mdescLeft">&#160;</td><td class="mdescRight">A helper function to insert a single task into the system and start it right away. Returns ID of the Group into which the task has been put. <br /></td></tr>
<tr class="separator:a5e7cbcf1bd4c677d4f942a7053027772"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6eb012d764912627ae90aaa19134de2b"><td class="memItemLeft" align="right" valign="top"><a id="a6eb012d764912627ae90aaa19134de2b"></a>
static <a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a6eb012d764912627ae90aaa19134de2b">StartSingleTask</a> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; <a class="el" href="../../d3/d9b/classxii_task.htm">xiiTask</a> &gt; &amp;pTask, <a class="el" href="../../d9/d69/structxii_task_priority.htm#a2aa9f9ee2f9b337039c13a946945d93d">xiiTaskPriority::Enum</a> priority, <a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> dependency, <a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskGroupFinishedCallback</a> callback=<a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskGroupFinishedCallback</a>())</td></tr>
<tr class="memdesc:a6eb012d764912627ae90aaa19134de2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">A helper function to insert a single task into the system and start it right away. Returns ID of the Group into which the task has been put. This overload allows to additionally specify a single dependency. <br /></td></tr>
<tr class="separator:a6eb012d764912627ae90aaa19134de2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac49e5bd28045f1c154d825e6c9e60050"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#ac49e5bd28045f1c154d825e6c9e60050">FinishFrameTasks</a> ()</td></tr>
<tr class="memdesc:ac49e5bd28045f1c154d825e6c9e60050"><td class="mdescLeft">&#160;</td><td class="mdescRight">Call this function once at the end of a frame. It will ensure that all tasks for 'this frame' get finished properly.  <a href="../../d1/dc7/classxii_task_system.htm#ac49e5bd28045f1c154d825e6c9e60050">More...</a><br /></td></tr>
<tr class="separator:ac49e5bd28045f1c154d825e6c9e60050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dc277923213b25eb064adf698c7155b"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a6dc277923213b25eb064adf698c7155b">CancelTask</a> (const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; <a class="el" href="../../d3/d9b/classxii_task.htm">xiiTask</a> &gt; &amp;pTask, xiiOnTaskRunning::Enum onTaskRunning=xiiOnTaskRunning::WaitTillFinished)</td></tr>
<tr class="memdesc:a6dc277923213b25eb064adf698c7155b"><td class="mdescLeft">&#160;</td><td class="mdescRight">This function will try to remove the given task from the work queue, to prevent it from being executed.  <a href="../../d1/dc7/classxii_task_system.htm#a6dc277923213b25eb064adf698c7155b">More...</a><br /></td></tr>
<tr class="separator:a6dc277923213b25eb064adf698c7155b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Managing Task Groups</h2></td></tr>
<tr class="memitem:a676a2f265b9f7b41a975bf2e0fdddc1c"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a676a2f265b9f7b41a975bf2e0fdddc1c">CreateTaskGroup</a> (<a class="el" href="../../d9/d69/structxii_task_priority.htm#a2aa9f9ee2f9b337039c13a946945d93d">xiiTaskPriority::Enum</a> priority, <a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskGroupFinishedCallback</a> callback=<a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskGroupFinishedCallback</a>())</td></tr>
<tr class="memdesc:a676a2f265b9f7b41a975bf2e0fdddc1c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a new task group for one-time use. Groups need to be recreated every time a task is supposed to be inserted into the system.  <a href="../../d1/dc7/classxii_task_system.htm#a676a2f265b9f7b41a975bf2e0fdddc1c">More...</a><br /></td></tr>
<tr class="separator:a676a2f265b9f7b41a975bf2e0fdddc1c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c280a2f7c90840cf5fa4fbb1521adce"><td class="memItemLeft" align="right" valign="top"><a id="a8c280a2f7c90840cf5fa4fbb1521adce"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a8c280a2f7c90840cf5fa4fbb1521adce">AddTaskToGroup</a> (<a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> group, const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; <a class="el" href="../../d3/d9b/classxii_task.htm">xiiTask</a> &gt; &amp;pTask)</td></tr>
<tr class="memdesc:a8c280a2f7c90840cf5fa4fbb1521adce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a task to the given task group. The group must not yet have been started. <br /></td></tr>
<tr class="separator:a8c280a2f7c90840cf5fa4fbb1521adce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae616c195c09092ee1f8e6cec6a9ba2f9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#ae616c195c09092ee1f8e6cec6a9ba2f9">AddTaskGroupDependency</a> (<a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> group, <a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> dependsOn)</td></tr>
<tr class="memdesc:ae616c195c09092ee1f8e6cec6a9ba2f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a dependency on another group to <em>Group</em>. This means <em>Group</em> will not be execute before <em>DependsOn</em> has finished.  <a href="../../d1/dc7/classxii_task_system.htm#ae616c195c09092ee1f8e6cec6a9ba2f9">More...</a><br /></td></tr>
<tr class="separator:ae616c195c09092ee1f8e6cec6a9ba2f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7aa84a66c43fbf3117cdc6a43702b4d0"><td class="memItemLeft" align="right" valign="top"><a id="a7aa84a66c43fbf3117cdc6a43702b4d0"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a7aa84a66c43fbf3117cdc6a43702b4d0">AddTaskGroupDependencyBatch</a> (<a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a>&lt; const <a class="el" href="../../d4/dc3/structxii_task_group_dependency.htm">xiiTaskGroupDependency</a> &gt; batch)</td></tr>
<tr class="memdesc:a7aa84a66c43fbf3117cdc6a43702b4d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../d1/dc7/classxii_task_system.htm#ae616c195c09092ee1f8e6cec6a9ba2f9" title="Adds a dependency on another group to Group. This means Group will not be execute before DependsOn ha...">AddTaskGroupDependency()</a> but batches multiple dependency additions. <br /></td></tr>
<tr class="separator:a7aa84a66c43fbf3117cdc6a43702b4d0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5050596836a417304cd395e18ab67c93"><td class="memItemLeft" align="right" valign="top"><a id="a5050596836a417304cd395e18ab67c93"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a5050596836a417304cd395e18ab67c93">StartTaskGroup</a> (<a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> group)</td></tr>
<tr class="memdesc:a5050596836a417304cd395e18ab67c93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Starts the task group. After this no further modifications on the group (new tasks or dependencies) are allowed. <br /></td></tr>
<tr class="separator:a5050596836a417304cd395e18ab67c93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5477702afba32b1f7b0695dee3af17e"><td class="memItemLeft" align="right" valign="top"><a id="ab5477702afba32b1f7b0695dee3af17e"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#ab5477702afba32b1f7b0695dee3af17e">StartTaskGroupBatch</a> (<a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a>&lt; const <a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> &gt; batch)</td></tr>
<tr class="memdesc:ab5477702afba32b1f7b0695dee3af17e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Same as <a class="el" href="../../d1/dc7/classxii_task_system.htm#a5050596836a417304cd395e18ab67c93" title="Starts the task group. After this no further modifications on the group (new tasks or dependencies) a...">StartTaskGroup()</a> but batches multiple actions. <br /></td></tr>
<tr class="separator:ab5477702afba32b1f7b0695dee3af17e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf6d343fa09fac748f08bddd249be0b5"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#aaf6d343fa09fac748f08bddd249be0b5">IsTaskGroupFinished</a> (<a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> group)</td></tr>
<tr class="memdesc:aaf6d343fa09fac748f08bddd249be0b5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the given <em>Group</em> id refers to a task group that has been finished already.  <a href="../../d1/dc7/classxii_task_system.htm#aaf6d343fa09fac748f08bddd249be0b5">More...</a><br /></td></tr>
<tr class="separator:aaf6d343fa09fac748f08bddd249be0b5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8e9b5a99a14971daa1ed77d53eb4087"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#ae8e9b5a99a14971daa1ed77d53eb4087">CancelGroup</a> (<a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> group, xiiOnTaskRunning::Enum onTaskRunning=xiiOnTaskRunning::WaitTillFinished)</td></tr>
<tr class="memdesc:ae8e9b5a99a14971daa1ed77d53eb4087"><td class="mdescLeft">&#160;</td><td class="mdescRight">Cancels all the tasks in the given group.  <a href="../../d1/dc7/classxii_task_system.htm#ae8e9b5a99a14971daa1ed77d53eb4087">More...</a><br /></td></tr>
<tr class="separator:ae8e9b5a99a14971daa1ed77d53eb4087"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a963a8991058db60db283652275958c94"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a963a8991058db60db283652275958c94">WaitForGroup</a> (<a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> group)</td></tr>
<tr class="memdesc:a963a8991058db60db283652275958c94"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks until all tasks in the given group have finished.  <a href="../../d1/dc7/classxii_task_system.htm#a963a8991058db60db283652275958c94">More...</a><br /></td></tr>
<tr class="separator:a963a8991058db60db283652275958c94"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a938348c90a96d83bf4c00164a38a44c5"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a938348c90a96d83bf4c00164a38a44c5">WaitForCondition</a> (<a class="el" href="../../dc/d84/structxii_delegate.htm">xiiDelegate</a>&lt; bool()&gt; condition)</td></tr>
<tr class="memdesc:a938348c90a96d83bf4c00164a38a44c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Blocks the current thread until the given delegate returns true.  <a href="../../d1/dc7/classxii_task_system.htm#a938348c90a96d83bf4c00164a38a44c5">More...</a><br /></td></tr>
<tr class="separator:a938348c90a96d83bf4c00164a38a44c5"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Thread Management</h2></td></tr>
<tr class="memitem:a84e1b6215e61391891902a049874a406"><td class="memItemLeft" align="right" valign="top"><a id="a84e1b6215e61391891902a049874a406"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>xiiTaskWorkerThread</b></td></tr>
<tr class="separator:a84e1b6215e61391891902a049874a406"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdf28b6ab1ac4cd6fef6d5771575b670"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#abdf28b6ab1ac4cd6fef6d5771575b670">SetWorkerThreadCount</a> (xiiInt32 iShortTasks=-1, xiiInt32 iLongTasks=-1)</td></tr>
<tr class="memdesc:abdf28b6ab1ac4cd6fef6d5771575b670"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the number of threads to use for the different task categories.  <a href="../../d1/dc7/classxii_task_system.htm#abdf28b6ab1ac4cd6fef6d5771575b670">More...</a><br /></td></tr>
<tr class="separator:abdf28b6ab1ac4cd6fef6d5771575b670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4bad60a02aca5b1538e9082569028ea"><td class="memItemLeft" align="right" valign="top"><a id="ae4bad60a02aca5b1538e9082569028ea"></a>
static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#ae4bad60a02aca5b1538e9082569028ea">GetWorkerThreadCount</a> (<a class="el" href="../../d1/deb/structxii_worker_thread_type.htm#a52f749d37c9d705694596e3e4f4553bf">xiiWorkerThreadType::Enum</a> type)</td></tr>
<tr class="memdesc:ae4bad60a02aca5b1538e9082569028ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the maximum number of threads that should work on the given type of task at the same time. <br /></td></tr>
<tr class="separator:ae4bad60a02aca5b1538e9082569028ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e53ed92fdeb5d9991c274b3845b80e0"><td class="memItemLeft" align="right" valign="top">static xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a7e53ed92fdeb5d9991c274b3845b80e0">GetNumAllocatedWorkerThreads</a> (<a class="el" href="../../d1/deb/structxii_worker_thread_type.htm#a52f749d37c9d705694596e3e4f4553bf">xiiWorkerThreadType::Enum</a> type)</td></tr>
<tr class="memdesc:a7e53ed92fdeb5d9991c274b3845b80e0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of threads that have been allocated to potentially work on the given type of task.  <a href="../../d1/dc7/classxii_task_system.htm#a7e53ed92fdeb5d9991c274b3845b80e0">More...</a><br /></td></tr>
<tr class="separator:a7e53ed92fdeb5d9991c274b3845b80e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9e52c262c20ea81a625a4e11e2145c6"><td class="memItemLeft" align="right" valign="top"><a id="ab9e52c262c20ea81a625a4e11e2145c6"></a>
static <a class="el" href="../../d1/deb/structxii_worker_thread_type.htm#a52f749d37c9d705694596e3e4f4553bf">xiiWorkerThreadType::Enum</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#ab9e52c262c20ea81a625a4e11e2145c6">GetCurrentThreadWorkerType</a> ()</td></tr>
<tr class="memdesc:ab9e52c262c20ea81a625a4e11e2145c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the (thread local) type of tasks that would be executed on this thread. <br /></td></tr>
<tr class="separator:ab9e52c262c20ea81a625a4e11e2145c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a573e57254fcda599342841c7093c8ed8"><td class="memItemLeft" align="right" valign="top">static double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a573e57254fcda599342841c7093c8ed8">GetThreadUtilization</a> (<a class="el" href="../../d1/deb/structxii_worker_thread_type.htm#a52f749d37c9d705694596e3e4f4553bf">xiiWorkerThreadType::Enum</a> type, xiiUInt32 uiThreadIndex, xiiUInt32 *pNumTasksExecuted=nullptr)</td></tr>
<tr class="memdesc:a573e57254fcda599342841c7093c8ed8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the utilization (0.0 to 1.0) of the given thread. Note: This will only be valid, if <a class="el" href="../../d1/dc7/classxii_task_system.htm#ac49e5bd28045f1c154d825e6c9e60050" title="Call this function once at the end of a frame. It will ensure that all tasks for &#39;this frame&#39; get fin...">FinishFrameTasks()</a> is called once per frame.  <a href="../../d1/dc7/classxii_task_system.htm#a573e57254fcda599342841c7093c8ed8">More...</a><br /></td></tr>
<tr class="separator:a573e57254fcda599342841c7093c8ed8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae267c58a4e7e53eaae84c46281730add"><td class="memItemLeft" align="right" valign="top"><a id="ae267c58a4e7e53eaae84c46281730add"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#ae267c58a4e7e53eaae84c46281730add">WakeUpThreads</a> (<a class="el" href="../../d1/deb/structxii_worker_thread_type.htm#a52f749d37c9d705694596e3e4f4553bf">xiiWorkerThreadType::Enum</a> type, xiiUInt32 uiNumThreads)</td></tr>
<tr class="memdesc:ae267c58a4e7e53eaae84c46281730add"><td class="mdescLeft">&#160;</td><td class="mdescRight">[internal] Wakes up or allocates up to <em>uiNumThreads</em>, unless enough threads are currently active and not blocked <br /></td></tr>
<tr class="separator:ae267c58a4e7e53eaae84c46281730add"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Parallel For</h2></td></tr>
<tr class="memitem:aa1212bdebb2f1df5fcf29dd118993508"><td class="memItemLeft" align="right" valign="top"><a id="aa1212bdebb2f1df5fcf29dd118993508"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#aa1212bdebb2f1df5fcf29dd118993508">ParallelForIndexed</a> (xiiUInt32 uiStartIndex, xiiUInt32 uiNumItems, <a class="el" href="../../dc/d84/structxii_delegate.htm">xiiParallelForIndexedFunction32</a> taskCallback, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sTaskName={}, const <a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a> &amp;params=<a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a>())</td></tr>
<tr class="memdesc:aa1212bdebb2f1df5fcf29dd118993508"><td class="mdescLeft">&#160;</td><td class="mdescRight">A helper function to process task items in a parallel fashion by having per-worker index ranges generated. <br /></td></tr>
<tr class="separator:aa1212bdebb2f1df5fcf29dd118993508"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adae5f455ad6a46d048db4d1c3b5e4123"><td class="memItemLeft" align="right" valign="top"><a id="adae5f455ad6a46d048db4d1c3b5e4123"></a>
static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#adae5f455ad6a46d048db4d1c3b5e4123">ParallelForIndexed</a> (xiiUInt64 uiStartIndex, xiiUInt64 uiNumItems, <a class="el" href="../../dc/d84/structxii_delegate.htm">xiiParallelForIndexedFunction64</a> taskCallback, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sTaskName={}, const <a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a> &amp;params=<a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a>())</td></tr>
<tr class="memdesc:adae5f455ad6a46d048db4d1c3b5e4123"><td class="mdescLeft">&#160;</td><td class="mdescRight">A helper function to process task items in a parallel fashion by having per-worker index ranges generated. <br /></td></tr>
<tr class="separator:adae5f455ad6a46d048db4d1c3b5e4123"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7f83ee6b374ff547c65b326831426938"><td class="memTemplParams" colspan="2">template&lt;typename ElemType , typename Callback &gt; </td></tr>
<tr class="memitem:a7f83ee6b374ff547c65b326831426938"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a7f83ee6b374ff547c65b326831426938">ParallelFor</a> (<a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a>&lt; ElemType &gt; taskItems, Callback taskCallback, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sTaskName={}, const <a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a> &amp;params=<a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a>())</td></tr>
<tr class="separator:a7f83ee6b374ff547c65b326831426938"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a285a746b42c6711da8729f73a7334670"><td class="memTemplParams" colspan="2">template&lt;typename ElemType , typename Callback &gt; </td></tr>
<tr class="memitem:a285a746b42c6711da8729f73a7334670"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a285a746b42c6711da8729f73a7334670">ParallelForSingle</a> (<a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a>&lt; ElemType &gt; taskItems, Callback taskCallback, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sTaskName={}, const <a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a> &amp;params=<a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a>())</td></tr>
<tr class="separator:a285a746b42c6711da8729f73a7334670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c75ed6cc46d2aa0cb66b8ae65f5f6f0"><td class="memTemplParams" colspan="2">template&lt;typename ElemType , typename Callback &gt; </td></tr>
<tr class="memitem:a0c75ed6cc46d2aa0cb66b8ae65f5f6f0"><td class="memTemplItemLeft" align="right" valign="top">static void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a0c75ed6cc46d2aa0cb66b8ae65f5f6f0">ParallelForSingleIndex</a> (<a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a>&lt; ElemType &gt; taskItems, Callback taskCallback, <a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a> sTaskName={}, const <a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a> &amp;params=<a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a>())</td></tr>
<tr class="separator:a0c75ed6cc46d2aa0cb66b8ae65f5f6f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="member-group"></a>
Misc</h2></td></tr>
<tr class="memitem:a27792fb480691be910ee87fa25aa5147"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/dc7/classxii_task_system.htm#a27792fb480691be910ee87fa25aa5147">SetTargetFrameTime</a> (<a class="el" href="../../d7/dc1/structxii_time.htm">xiiTime</a> targetFrameTime=<a class="el" href="../../d7/dc1/structxii_time.htm#a0d30e51875577941d5f0e312d7041c76">xiiTime::Seconds</a>(1.0/40.0))</td></tr>
<tr class="memdesc:a27792fb480691be910ee87fa25aa5147"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the target frame time that is supposed to not be exceeded.  <a href="../../d1/dc7/classxii_task_system.htm#a27792fb480691be910ee87fa25aa5147">More...</a><br /></td></tr>
<tr class="separator:a27792fb480691be910ee87fa25aa5147"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This system allows to automatically distribute tasks onto a number of worker threads. </p>
<p>By deriving from <a class="el" href="../../d3/d9b/classxii_task.htm" title="Base class for custom tasks.">xiiTask</a> you can create your own task types. These can be executed through this task system. You can run a single task using the 'StartSingleTask' function. For more complex setups, it is possible to create groups of tasks, which can have interdependencies. This should be used to group all tasks that belong to one system and need to be done before another system runs. For example you could group all tasks to update particle systems, and then have another group for all tasks to update sound, which depends on the first group, such that sound is only updated after all particle systems are done with.</p>
<p>Although it is possible to wait for tasks or to cancel them, it is generally advised to try to minimize their use. Tasks that might need to be canceled regularly (e.g. path searches) should be implemented in a way that they are aware of being canceled and will stop their work prematurely, instead of running through to the end.</p>
<p>Note that it is crucial to call 'FinishFrameTasks' once per frame, otherwise tasks that need to be executed on the main thread are never executed. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="ae616c195c09092ee1f8e6cec6a9ba2f9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae616c195c09092ee1f8e6cec6a9ba2f9">&#9670;&nbsp;</a></span>AddTaskGroupDependency()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::AddTaskGroupDependency </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a>&#160;</td>
          <td class="paramname"><em>group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a>&#160;</td>
          <td class="paramname"><em>dependsOn</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a dependency on another group to <em>Group</em>. This means <em>Group</em> will not be execute before <em>DependsOn</em> has finished. </p>
<dl class="section note"><dt>Note</dt><dd>Be careful with dependencies and task priorities. A task that has to execute 'this frame' should never depend on a task that needs only finish 'next frame', this might introduce very long and unnecessary waits. A task that has priority 'this frame' or 'next frame' will actually not be executed in 'this frame' or 'next frame' until all its dependencies are fulfilled. So you might add a long running task and a short task which depends on it, but the system will not block at the end of the frame, to wait for the long running task (to finish the short task thereafter), as that short task won't get scheduled for execution, at all, until all its dependencies are actually finished. </dd></dl>

</div>
</div>
<a id="ae8e9b5a99a14971daa1ed77d53eb4087"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae8e9b5a99a14971daa1ed77d53eb4087">&#9670;&nbsp;</a></span>CancelGroup()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiTaskSystem::CancelGroup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a>&#160;</td>
          <td class="paramname"><em>group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiOnTaskRunning::Enum&#160;</td>
          <td class="paramname"><em>onTaskRunning</em> = <code>xiiOnTaskRunning::WaitTillFinished</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Cancels all the tasks in the given group. </p>
<p>XII_SUCCESS is returned, if all tasks were already finished or could be removed without waiting for any of them. XII_FAILURE is returned, if at least one task was being processed by another thread and could not be removed without waiting. If bWaitForIt is false, the function cancels all tasks, but returns without blocking, even if not all tasks have been finished. If bWaitForIt is true, the function returns only after it is guaranteed that all tasks are properly terminated. </p>

</div>
</div>
<a id="a6dc277923213b25eb064adf698c7155b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dc277923213b25eb064adf698c7155b">&#9670;&nbsp;</a></span>CancelTask()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a> xiiTaskSystem::CancelTask </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="../../d8/d9b/classxii_shared_ptr.htm">xiiSharedPtr</a>&lt; <a class="el" href="../../d3/d9b/classxii_task.htm">xiiTask</a> &gt; &amp;&#160;</td>
          <td class="paramname"><em>pTask</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiOnTaskRunning::Enum&#160;</td>
          <td class="paramname"><em>onTaskRunning</em> = <code>xiiOnTaskRunning::WaitTillFinished</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This function will try to remove the given task from the work queue, to prevent it from being executed. </p>
<p>The function will return XII_SUCCESS, if the task could be removed and thus its execution could be prevented. It will also return XII_SUCCESS, if the task was already finished and nothing needed to be done. Tasks that are removed without execution will still be marked as 'finished' and dependent tasks will be scheduled.</p>
<p>XII_FAILURE is returned, if the task had already been started and thus could not be prevented from running.</p>
<p>In case of failure, <em>bWaitForIt</em> determines whether 'WaitForTask' is called (with all its consequences), or whether the function will return immediately.</p>
<p>The cancel flag is set on the task, such that tasks that support canceling might terminate earlier. However, there is no guarantee how long it takes for already running tasks to actually finish. Therefore when bWaitForIt is true, this function might block for a very long time. It is advised to implement tasks that need to be canceled regularly (e.g. path searches for units that might die) in a way that allows for quick canceling. </p>

</div>
</div>
<a id="a676a2f265b9f7b41a975bf2e0fdddc1c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a676a2f265b9f7b41a975bf2e0fdddc1c">&#9670;&nbsp;</a></span>CreateTaskGroup()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a> xiiTaskSystem::CreateTaskGroup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d9/d69/structxii_task_priority.htm#a2aa9f9ee2f9b337039c13a946945d93d">xiiTaskPriority::Enum</a>&#160;</td>
          <td class="paramname"><em>priority</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskGroupFinishedCallback</a>&#160;</td>
          <td class="paramname"><em>callback</em> = <code><a class="el" href="../../dc/d84/structxii_delegate.htm">xiiOnTaskGroupFinishedCallback</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a new task group for one-time use. Groups need to be recreated every time a task is supposed to be inserted into the system. </p>
<p>All tasks that are added to this group will be run with the same given <em>Priority</em>. Once all tasks in the group are finished and thus the group is finished, an optional <em>Callback</em> can be executed. </p>

</div>
</div>
<a id="ac49e5bd28045f1c154d825e6c9e60050"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac49e5bd28045f1c154d825e6c9e60050">&#9670;&nbsp;</a></span>FinishFrameTasks()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::FinishFrameTasks </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Call this function once at the end of a frame. It will ensure that all tasks for 'this frame' get finished properly. </p>
<p>Calling this function is crucial for several reasons. It is the central function to execute 'main thread' tasks. Otherwise these tasks might never get executed. It also changes the priority of all 'next frame' tasks to 'this frame', so that those tasks are guaranteed to get finished when 'FinishFrameTasks' is called the next time.</p>
<p>Finally this function executes tasks with the priority 'SomeFrameMainThread' as long as the target frame time is not exceeded. You can configure this with <a class="el" href="../../d1/dc7/classxii_task_system.htm#a27792fb480691be910ee87fa25aa5147" title="Sets the target frame time that is supposed to not be exceeded.">SetTargetFrameTime()</a>, which defines how long (in milliseconds) the frame is allowed to be. As long as that time is not exceeded, additional 'SomeFrameMainThread' tasks will be executed. If the frame time spikes for a few frames, no such tasks will be executed, to prevent making it worse. However, if the frame time stays high over a longer period, 'FinishFrameTasks' will execute 'SomeFrameMainThread' tasks every once in a while, to guarantee some progress.</p>
<dl class="section note"><dt>Note</dt><dd>After this function returns all tasks of priority 'ThisFrameMainThread' are finished. All tasks of priority 'EarlyThisFrame' up to 'LateThisFrame' are either finished or currently running on some thread, so they will be finished soon. There is however no guarantee that they are indeed all finished, as that would introduce unnecessary stalls. </dd></dl>

</div>
</div>
<a id="a7e53ed92fdeb5d9991c274b3845b80e0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e53ed92fdeb5d9991c274b3845b80e0">&#9670;&nbsp;</a></span>GetNumAllocatedWorkerThreads()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiTaskSystem::GetNumAllocatedWorkerThreads </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/deb/structxii_worker_thread_type.htm#a52f749d37c9d705694596e3e4f4553bf">xiiWorkerThreadType::Enum</a>&#160;</td>
          <td class="paramname"><em>type</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the number of threads that have been allocated to potentially work on the given type of task. </p>
<p>CAREFUL! This is not the number of threads that will be active at the same time. Use <a class="el" href="../../d1/dc7/classxii_task_system.htm#ae4bad60a02aca5b1538e9082569028ea" title="Returns the maximum number of threads that should work on the given type of task at the same time.">GetWorkerThreadCount()</a> for that. This is the maximum number of threads that may jump in, if too many threads are blocked. This number will change dynamically at runtime to prevent deadlocks and it can grow very, very large. </p>

</div>
</div>
<a id="a573e57254fcda599342841c7093c8ed8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a573e57254fcda599342841c7093c8ed8">&#9670;&nbsp;</a></span>GetThreadUtilization()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">double xiiTaskSystem::GetThreadUtilization </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/deb/structxii_worker_thread_type.htm#a52f749d37c9d705694596e3e4f4553bf">xiiWorkerThreadType::Enum</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiThreadIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiUInt32 *&#160;</td>
          <td class="paramname"><em>pNumTasksExecuted</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the utilization (0.0 to 1.0) of the given thread. Note: This will only be valid, if <a class="el" href="../../d1/dc7/classxii_task_system.htm#ac49e5bd28045f1c154d825e6c9e60050" title="Call this function once at the end of a frame. It will ensure that all tasks for &#39;this frame&#39; get fin...">FinishFrameTasks()</a> is called once per frame. </p>
<p>Also optionally returns the number of tasks that were finished during the last frame. </p>

</div>
</div>
<a id="aaf6d343fa09fac748f08bddd249be0b5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaf6d343fa09fac748f08bddd249be0b5">&#9670;&nbsp;</a></span>IsTaskGroupFinished()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool xiiTaskSystem::IsTaskGroupFinished </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a>&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns whether the given <em>Group</em> id refers to a task group that has been finished already. </p>
<p>There is no time frame in which group IDs are valid. You may call this function at any time, even 10 minutes later, and it will correctly determine the results. </p>

</div>
</div>
<a id="a7f83ee6b374ff547c65b326831426938"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7f83ee6b374ff547c65b326831426938">&#9670;&nbsp;</a></span>ParallelFor()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ElemType , typename Callback &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::ParallelFor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a>&lt; ElemType &gt;&#160;</td>
          <td class="paramname"><em>taskItems</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Callback&#160;</td>
          <td class="paramname"><em>taskCallback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sTaskName</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em> = <code><a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>A helper function to process task items in a parallel fashion by generating per-worker sub-ranges from an initial item array pointer. Given an array pointer 'taskItems' with elements of type ElemType, the following invocations are possible:</p><ul>
<li>ParallelFor(taskItems, [](<a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr&lt;ElemType&gt;</a> taskItemSlice) { }); </li>
</ul>

</div>
</div>
<a id="a285a746b42c6711da8729f73a7334670"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a285a746b42c6711da8729f73a7334670">&#9670;&nbsp;</a></span>ParallelForSingle()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ElemType , typename Callback &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::ParallelForSingle </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a>&lt; ElemType &gt;&#160;</td>
          <td class="paramname"><em>taskItems</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Callback&#160;</td>
          <td class="paramname"><em>taskCallback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sTaskName</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em> = <code><a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>A helper function to process task items in a parallel fashion and one-by-one (without global index). Given an array pointer 'taskItems' with elements of type ElemType, the following invocations are possible:</p><ul>
<li>ParallelFor(taskItems, [](ElemType taskItem) { });</li>
<li>ParallelFor(taskItems, [](ElemType&amp; taskItem) { });</li>
<li>ParallelFor(taskItems, [](const ElemType&amp; taskItem) { }); </li>
</ul>

</div>
</div>
<a id="a0c75ed6cc46d2aa0cb66b8ae65f5f6f0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0c75ed6cc46d2aa0cb66b8ae65f5f6f0">&#9670;&nbsp;</a></span>ParallelForSingleIndex()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename ElemType , typename Callback &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::ParallelForSingleIndex </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d0/d60/classxii_array_ptr.htm">xiiArrayPtr</a>&lt; ElemType &gt;&#160;</td>
          <td class="paramname"><em>taskItems</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Callback&#160;</td>
          <td class="paramname"><em>taskCallback</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="../../da/d9d/structxii_string_view.htm">xiiStringView</a>&#160;</td>
          <td class="paramname"><em>sTaskName</em> = <code>{}</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a> &amp;&#160;</td>
          <td class="paramname"><em>params</em> = <code><a class="el" href="../../d5/d62/structxii_parallel_for_params.htm">xiiParallelForParams</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>A helper function to process task items in a parallel fashion and one-by-one (with global index). Given an array pointer 'taskItems' with elements of type ElemType, the following invocations are possible:</p><ul>
<li>ParallelFor(taskItems, [](xiiUInt32 globalTaskItemIndex, ElemType taskItem) { });</li>
<li>ParallelFor(taskItems, [](xiiUInt32 globalTaskItemIndex, ElemType&amp; taskItem) { });</li>
<li>ParallelFor(taskItems, [](xiiUInt32 globalTaskItemIndex, const ElemType&amp; taskItem) { }); </li>
</ul>

</div>
</div>
<a id="a27792fb480691be910ee87fa25aa5147"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a27792fb480691be910ee87fa25aa5147">&#9670;&nbsp;</a></span>SetTargetFrameTime()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::SetTargetFrameTime </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d7/dc1/structxii_time.htm">xiiTime</a>&#160;</td>
          <td class="paramname"><em>targetFrameTime</em> = <code><a class="el" href="../../d7/dc1/structxii_time.htm#a0d30e51875577941d5f0e312d7041c76">xiiTime::Seconds</a>(1.0&#160;/&#160;40.0)</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the target frame time that is supposed to not be exceeded. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d1/dc7/classxii_task_system.htm#ac49e5bd28045f1c154d825e6c9e60050" title="Call this function once at the end of a frame. It will ensure that all tasks for &#39;this frame&#39; get fin...">FinishFrameTasks()</a> for more details. </dd></dl>

</div>
</div>
<a id="abdf28b6ab1ac4cd6fef6d5771575b670"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abdf28b6ab1ac4cd6fef6d5771575b670">&#9670;&nbsp;</a></span>SetWorkerThreadCount()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::SetWorkerThreadCount </td>
          <td>(</td>
          <td class="paramtype">xiiInt32&#160;</td>
          <td class="paramname"><em>iShortTasks</em> = <code>-1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">xiiInt32&#160;</td>
          <td class="paramname"><em>iLongTasks</em> = <code>-1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the number of threads to use for the different task categories. </p>
<p><em>uiShortTasks</em> and <em>uiLongTasks</em> must be at least 1 and should not exceed the number of available CPU cores. There will always be exactly one additional thread for file access tasks (<a class="el" href="../../d9/d69/structxii_task_priority.htm#a2aa9f9ee2f9b337039c13a946945d93da8b2b67e194d630ae25f901d0134a707c">xiiTaskPriority::FileAccess</a>).</p>
<p>If <em>uiShortTasks</em> or <em>uiLongTasks</em> is smaller than 1, a default number of threads will be used for that type of work. This number of threads depends on the number of available CPU cores. If SetWorkThreadCount is never called, at all, the first time any task is started the number of worker threads is set to this default configuration. Unless you have a good idea how to set up the number of worker threads to make good use of the available cores, it is a good idea to just use the default settings. </p>

</div>
</div>
<a id="a938348c90a96d83bf4c00164a38a44c5"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a938348c90a96d83bf4c00164a38a44c5">&#9670;&nbsp;</a></span>WaitForCondition()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::WaitForCondition </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../dc/d84/structxii_delegate.htm">xiiDelegate</a>&lt; bool()&gt;&#160;</td>
          <td class="paramname"><em>condition</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Blocks the current thread until the given delegate returns true. </p>
<p>If possible, prefer to use <a class="el" href="../../d1/dc7/classxii_task_system.htm#a963a8991058db60db283652275958c94" title="Blocks until all tasks in the given group have finished.">WaitForGroup()</a> to wait for some task to finish, as that is the most efficient way. If not possible, prefer to use <a class="el" href="../../d1/dc7/classxii_task_system.htm#a938348c90a96d83bf4c00164a38a44c5" title="Blocks the current thread until the given delegate returns true.">WaitForCondition()</a> instead of rolling your own busy-loop for polling some state. <a class="el" href="../../d1/dc7/classxii_task_system.htm#a938348c90a96d83bf4c00164a38a44c5" title="Blocks the current thread until the given delegate returns true.">WaitForCondition()</a> will NOT put the current thread to sleep, but instead keep polling the delegate. However, in between, it will try to execute other tasks and if there are no tasks that it could take on, it will wake up another worker thread thus guaranteeing, that there are enough unblocked threads in the system to do all the work. </p>

</div>
</div>
<a id="a963a8991058db60db283652275958c94"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a963a8991058db60db283652275958c94">&#9670;&nbsp;</a></span>WaitForGroup()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void xiiTaskSystem::WaitForGroup </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d5/d4f/classxii_task_group_i_d.htm">xiiTaskGroupID</a>&#160;</td>
          <td class="paramname"><em>group</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Blocks until all tasks in the given group have finished. </p>
<p>If you need to wait for some other task to finish, this should always be the preferred method to do so. WaitForGroup will put the current thread to sleep and use thread signals to only wake it up again once the group is indeed finished. This is the most efficient way to wait for a task. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/<a class="el" href="../../d0/d50/_task_system_8h_source.htm">TaskSystem.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/ParallelFor.cpp</li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/<a class="el" href="../../df/d21/_parallel_for__inl_8h_source.htm">ParallelFor_inl.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/TaskSystem.cpp</li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/TaskSystemGroups.cpp</li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/TaskSystemTasks.cpp</li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/TaskSystemThreads.cpp</li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Threading/Implementation/TaskSystemUtils.cpp</li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/dc7/classxii_task_system.htm">xiiTaskSystem</a></li>
    <li class="footer">Generated on Mon Oct 9 2023 06:45:57 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: /home/runner/work/XII/XII/Source/Engine/Foundation/Math/Implementation/Vec2_inl.h Source File</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d1/d09/_vec2__inl_8h_source.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">Vec2_inl.h</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#pragma once</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160; </div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00004"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#ab563984d6d779f64ab67d82ceb384aa0">    4</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ab563984d6d779f64ab67d82ceb384aa0">xiiVec2Template&lt;Type&gt;::xiiVec2Template</a>()</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;{</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#if XII_ENABLED(XII_COMPILE_FOR_DEBUG)</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;  <span class="comment">// Initialize all data to NaN in debug mode to find problems with uninitialized data easier.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  <span class="keyword">const</span> Type TypeNaN = xiiMath::NaN&lt;Type&gt;();</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;  x                  = TypeNaN;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;  y                  = TypeNaN;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;}</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; </div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#aef00bc0f6d6f6d4b64893ddc32f9251d">   15</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ab563984d6d779f64ab67d82ceb384aa0">xiiVec2Template&lt;Type&gt;::xiiVec2Template</a>(Type inX, Type inY) :</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;  x(inX), y(inY)</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;}</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00021"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a2226f77e417886b69da0392deae728b0">   21</a></span>&#160;XII_ALWAYS_INLINE <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ab563984d6d779f64ab67d82ceb384aa0">xiiVec2Template&lt;Type&gt;::xiiVec2Template</a>(Type inV) :</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;  x(inV), y(inV)</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;{</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;}</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a4fe70680e4be1f88a1e878816ba77dc4">   27</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a4fe70680e4be1f88a1e878816ba77dc4">xiiVec2Template&lt;Type&gt;::Set</a>(Type xy)</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  x = xy;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  y = xy;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;}</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a490699b2b12285616a87c4e34923fa13">   34</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a4fe70680e4be1f88a1e878816ba77dc4">xiiVec2Template&lt;Type&gt;::Set</a>(Type inX, Type inY)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  x = inX;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  y = inY;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;}</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a23729487b42eb699808346ea1e0902c7">   41</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a23729487b42eb699808346ea1e0902c7">xiiVec2Template&lt;Type&gt;::SetZero</a>()</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  x = y = 0;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;}</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#aa19864db8fe995a468446ea2353fdf11">   47</a></span>&#160;XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#aa19864db8fe995a468446ea2353fdf11">xiiVec2Template&lt;Type&gt;::GetLength</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a>(GetLengthSquared()));</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;}</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00053"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#ada9215d9d548093a8c18e98b80d2366f">   53</a></span>&#160;<a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ada9215d9d548093a8c18e98b80d2366f">xiiVec2Template&lt;Type&gt;::SetLength</a>(Type fNewLength, Type fEpsilon <span class="comment">/* = xiiMath::DefaultEpsilon&lt;Type&gt;() */</span>)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;{</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keywordflow">if</span> (NormalizeIfNotZero(<a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;::ZeroVector</a>(), fEpsilon) == XII_FAILURE)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  *<span class="keyword">this</span> *= fNewLength;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;}</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160; </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#adc3894b5226e1833035b09c036ca9d84">   63</a></span>&#160;XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#adc3894b5226e1833035b09c036ca9d84">xiiVec2Template&lt;Type&gt;::GetLengthSquared</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <span class="keywordflow">return</span> (x * x + y * y);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;}</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00069"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#afcac8a1ac6d82ce355668183c5c8b653">   69</a></span>&#160;XII_FORCE_INLINE Type <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#afcac8a1ac6d82ce355668183c5c8b653">xiiVec2Template&lt;Type&gt;::GetLengthAndNormalize</a>()</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;{</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keyword">const</span> Type fLength = GetLength();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  *<span class="keyword">this</span> /= fLength;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keywordflow">return</span> fLength;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00077"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#af018435b03c5a2b6312ddbca408e5aef">   77</a></span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#af018435b03c5a2b6312ddbca408e5aef">xiiVec2Template&lt;Type&gt;::GetNormalized</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  <span class="keyword">const</span> Type fLen = GetLength();</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keyword">const</span> Type fLengthInv = <a class="code" href="../../d1/d37/namespacexii_math.htm#ac1067d4c24d9b02662c60a528c870580">xiiMath::Invert</a>(fLen);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(x * fLengthInv, y * fLengthInv);</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;}</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a34c60ca3d627dfe8349ae4339f0a2bd7">   86</a></span>&#160;XII_ALWAYS_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a34c60ca3d627dfe8349ae4339f0a2bd7">xiiVec2Template&lt;Type&gt;::Normalize</a>()</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;{</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  *<span class="keyword">this</span> /= GetLength();</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;}</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#adb21b54b3a333b548444f2562c44689e">   92</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="../../dd/dad/structxii_result.htm">xiiResult</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#adb21b54b3a333b548444f2562c44689e">xiiVec2Template&lt;Type&gt;::NormalizeIfNotZero</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; vFallback, Type fEpsilon)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;{</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  XII_NAN_ASSERT(&amp;vFallback);</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <span class="keyword">const</span> Type fLength = GetLength();</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keywordflow">if</span> (!xiiMath::IsFinite(fLength) || <a class="code" href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">xiiMath::IsZero</a>(fLength, fEpsilon))</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  {</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    *<span class="keyword">this</span> = vFallback;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">return</span> XII_FAILURE;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;  *<span class="keyword">this</span> /= fLength;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;  <span class="keywordflow">return</span> XII_SUCCESS;</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;}</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#aa18ffe164b680ddf83e342a8a0ed019e">  112</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#aa18ffe164b680ddf83e342a8a0ed019e">xiiVec2Template&lt;Type&gt;::IsNormalized</a>(Type fEpsilon <span class="comment">/* = xiiMath::HugeEpsilon&lt;Type&gt;() */</span>)<span class="keyword"> const</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <span class="keyword">const</span> Type t = GetLengthSquared();</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">xiiMath::IsEqual</a>(t, (Type)(1), fEpsilon);</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a2bb93a40f09265cb2368682241cc4011">  119</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a2bb93a40f09265cb2368682241cc4011">xiiVec2Template&lt;Type&gt;::IsZero</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keywordflow">return</span> (x == 0 &amp;&amp; y == 0);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;}</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a170c131b8c52a6930d549ffdb25dd554">  125</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a2bb93a40f09265cb2368682241cc4011">xiiVec2Template&lt;Type&gt;::IsZero</a>(Type fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">xiiMath::IsZero</a>(x, fEpsilon) &amp;&amp; <a class="code" href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">xiiMath::IsZero</a>(y, fEpsilon));</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;}</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a78e9bae3485f5b02ac864c5341fa2273">  133</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a78e9bae3485f5b02ac864c5341fa2273">xiiVec2Template&lt;Type&gt;::IsNaN</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordflow">if</span> (xiiMath::IsNaN(x))</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  <span class="keywordflow">if</span> (xiiMath::IsNaN(y))</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;}</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a84fde443875292bbaf1da11562a3a2db">  144</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a84fde443875292bbaf1da11562a3a2db">xiiVec2Template&lt;Type&gt;::IsValid</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  <span class="keywordflow">if</span> (!xiiMath::IsFinite(x))</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  <span class="keywordflow">if</span> (!xiiMath::IsFinite(y))</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;}</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a4db5febb0a7a20a80fa46e79a482488f">  155</a></span>&#160;XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a4db5febb0a7a20a80fa46e79a482488f">xiiVec2Template&lt;Type&gt;::Distance</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a>(DistanceSquared(vPoint)));</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;}</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a5fca7e509d217416d767dc038afa95ab">  161</a></span>&#160;XII_ALWAYS_INLINE Type <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a5fca7e509d217416d767dc038afa95ab">xiiVec2Template&lt;Type&gt;::DistanceSquared</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; vPoint)<span class="keyword"> const</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  XII_NAN_ASSERT(&amp;vPoint);</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(vPoint.x - x) + <a class="code" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a>(vPoint.y - y));</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#af2714f676201b570e0b931dd3e58c05d">  170</a></span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#af2714f676201b570e0b931dd3e58c05d">xiiVec2Template&lt;Type&gt;::operator-</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(-x, -y);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;}</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#ab14953e0d722466f7ae9a934da7a6e45">  178</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ab14953e0d722466f7ae9a934da7a6e45">xiiVec2Template&lt;Type&gt;::operator+=</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;{</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  x += rhs.x;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  y += rhs.y;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;}</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a277c26a02d10b67275d4cd3b575c37a0">  187</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a277c26a02d10b67275d4cd3b575c37a0">xiiVec2Template&lt;Type&gt;::operator-=</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;{</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  x -= rhs.x;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  y -= rhs.y;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#abd7d20f569aea08fb26c3401ec763791">  196</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#abd7d20f569aea08fb26c3401ec763791">xiiVec2Template&lt;Type&gt;::operator*=</a>(Type f)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  x *= f;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  y *= f;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160; </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00205"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#adeff5daa4b13dc6c6d5252a90f245af9">  205</a></span>&#160;XII_FORCE_INLINE <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#adeff5daa4b13dc6c6d5252a90f245af9">xiiVec2Template&lt;Type&gt;::operator/=</a>(Type f)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;{</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  <span class="keyword">const</span> Type f_inv = <a class="code" href="../../d1/d37/namespacexii_math.htm#ac1067d4c24d9b02662c60a528c870580">xiiMath::Invert</a>(f);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  x *= f_inv;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  y *= f_inv;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;}</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160; </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a8ea459a6f371af48c91125fb750db215">  216</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a8ea459a6f371af48c91125fb750db215">xiiVec2Template&lt;Type&gt;::MakeOrthogonalTo</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; vNormal)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;{</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  XII_ASSERT_DEBUG(vNormal.<a class="code" href="../../d1/d0d/classxii_vec2_template.htm#aa18ffe164b680ddf83e342a8a0ed019e">IsNormalized</a>(), <span class="stringliteral">&quot;The normal must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keyword">const</span> Type fDot = this-&gt;Dot(vNormal);</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  *<span class="keyword">this</span> -= fDot * vNormal;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;}</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160; </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a2291ef6f9ff7a35b42f850b001d8c8ba">  225</a></span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a2291ef6f9ff7a35b42f850b001d8c8ba">xiiVec2Template&lt;Type&gt;::GetOrthogonalVector</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  XII_ASSERT_DEBUG(!IsZero(xiiMath::SmallEpsilon&lt;Type&gt;()), <span class="stringliteral">&quot;The vector must not be zero to be able to compute an orthogonal vector.&quot;</span>);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(-y, x);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;}</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a871fe8666b6a23fe3cc84048d143f6e6">  234</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a871fe8666b6a23fe3cc84048d143f6e6">xiiVec2Template&lt;Type&gt;::GetReflectedVector</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; vNormal)<span class="keyword"> const</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  XII_ASSERT_DEBUG(vNormal.<a class="code" href="../../d1/d0d/classxii_vec2_template.htm#aa18ffe164b680ddf83e342a8a0ed019e">IsNormalized</a>(), <span class="stringliteral">&quot;vNormal must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  <span class="keywordflow">return</span> ((*<span class="keyword">this</span>) - (2 * this-&gt;Dot(vNormal) * vNormal));</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;}</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160; </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00242"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a45f41d82d03628e0f69a6ff95d97a5c3">  242</a></span>&#160;XII_FORCE_INLINE Type <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a45f41d82d03628e0f69a6ff95d97a5c3">xiiVec2Template&lt;Type&gt;::Dot</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  XII_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160; </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <span class="keywordflow">return</span> ((x * rhs.x) + (y * rhs.y));</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;}</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160; </div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00251"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#adf1017dcf1e1063b65b02f3d584e5f19">  251</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="../../d3/ddb/classxii_angle_template.htm">xiiAngle</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#adf1017dcf1e1063b65b02f3d584e5f19">xiiVec2Template&lt;Type&gt;::GetAngleBetween</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  XII_ASSERT_DEBUG(this-&gt;IsNormalized(), <span class="stringliteral">&quot;This vector must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  XII_ASSERT_DEBUG(rhs.<a class="code" href="../../d1/d0d/classxii_vec2_template.htm#aa18ffe164b680ddf83e342a8a0ed019e">IsNormalized</a>(), <span class="stringliteral">&quot;The other vector must be normalized.&quot;</span>);</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d37/namespacexii_math.htm#a788a4e90cf6d0f3285b15fac90017188">xiiMath::ACos</a>(<span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(xiiMath::Clamp&lt;Type&gt;(this-&gt;Dot(rhs), (Type)-1, (Type)1)));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;}</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160; </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a30bb7d2ee971d1e5e94769179dfe5deb">  260</a></span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a30bb7d2ee971d1e5e94769179dfe5deb">xiiVec2Template&lt;Type&gt;::CompMin</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  XII_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a>(x, rhs.x), <a class="code" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a>(y, rhs.y));</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;}</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00269"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#aaf84986496367330b8efef590c8766d5">  269</a></span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#aaf84986496367330b8efef590c8766d5">xiiVec2Template&lt;Type&gt;::CompMax</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  XII_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(x, rhs.x), <a class="code" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a>(y, rhs.y));</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a56fe0bf4f262bceb2d87504d74b81040">  278</a></span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a56fe0bf4f262bceb2d87504d74b81040">xiiVec2Template&lt;Type&gt;::CompClamp</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; vLow, <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; vHigh)<span class="keyword"> const</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  XII_NAN_ASSERT(&amp;vLow);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  XII_NAN_ASSERT(&amp;vHigh);</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">xiiMath::Clamp</a>(x, vLow.x, vHigh.x), <a class="code" href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">xiiMath::Clamp</a>(y, vLow.y, vHigh.y));</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160; </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00288"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a450c26561f54515cdb0b8ca80435e247">  288</a></span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a450c26561f54515cdb0b8ca80435e247">xiiVec2Template&lt;Type&gt;::CompMul</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  XII_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(x * rhs.x, y * rhs.y);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00297"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#ab68b22a7d00246979168db4e06e273f6">  297</a></span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ab68b22a7d00246979168db4e06e273f6">xiiVec2Template&lt;Type&gt;::CompDiv</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  XII_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(x / rhs.x, y / rhs.y);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;}</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#a80268c93bfea5c0102c47a63b604ad83">  306</a></span>&#160;<span class="keyword">inline</span> <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#a80268c93bfea5c0102c47a63b604ad83">xiiVec2Template&lt;Type&gt;::Abs</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160; </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(<a class="code" href="../../d1/d37/namespacexii_math.htm#a821b432e7a9c8ac292eb255ee11e9e10">xiiMath::Abs</a>(x), <a class="code" href="../../d1/d37/namespacexii_math.htm#a821b432e7a9c8ac292eb255ee11e9e10">xiiMath::Abs</a>(y));</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160; </div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> operator+(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;{</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  XII_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  XII_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(v1.x + v2.x, v1.y + v2.y);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;}</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160; </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> operator-(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;{</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  XII_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  XII_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160; </div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(v1.x - v2.x, v1.y - v2.y);</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;}</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> operator*(Type f, <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;{</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  XII_NAN_ASSERT(&amp;v);</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160; </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(v.x * f, v.y * f);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> operator*(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v, Type f)</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;{</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  XII_NAN_ASSERT(&amp;v);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(v.x * f, v.y * f);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;}</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;XII_FORCE_INLINE <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a> operator/(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v, Type f)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  XII_NAN_ASSERT(&amp;v);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160; </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <span class="comment">// Multiplication is much faster than division.</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  <span class="keyword">const</span> Type f_inv = <a class="code" href="../../d1/d37/namespacexii_math.htm#ac1067d4c24d9b02662c60a528c870580">xiiMath::Invert</a>(f);</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>(v.x * f_inv, v.y * f_inv);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#ad722164290abb9d10cade94c75117116">  358</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ad722164290abb9d10cade94c75117116">xiiVec2Template&lt;Type&gt;::IsIdentical</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs)<span class="keyword"> const</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  XII_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  <span class="keywordflow">return</span> ((x == rhs.x) &amp;&amp; (y == rhs.y));</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;}</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00367"></a><span class="lineno"><a class="line" href="../../d1/d0d/classxii_vec2_template.htm#af28c1db86c646aa5292dc02a504ff996">  367</a></span>&#160;<span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm#af28c1db86c646aa5292dc02a504ff996">xiiVec2Template&lt;Type&gt;::IsEqual</a>(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; rhs, Type fEpsilon)<span class="keyword"> const</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="keyword"></span>{</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  XII_NAN_ASSERT(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  XII_NAN_ASSERT(&amp;rhs);</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160; </div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  <span class="keywordflow">return</span> (<a class="code" href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">xiiMath::IsEqual</a>(x, rhs.x, fEpsilon) &amp;&amp; <a class="code" href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">xiiMath::IsEqual</a>(y, rhs.y, fEpsilon));</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;}</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;{</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keywordflow">return</span> v1.<a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ad722164290abb9d10cade94c75117116">IsIdentical</a>(v2);</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;}</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160; </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> operator!=(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;{</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  <span class="keywordflow">return</span> !v1.<a class="code" href="../../d1/d0d/classxii_vec2_template.htm#ad722164290abb9d10cade94c75117116">IsIdentical</a>(v2);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;}</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> Type&gt;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;XII_FORCE_INLINE <span class="keywordtype">bool</span> operator&lt;(<span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v1, <span class="keyword">const</span> <a class="code" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template&lt;Type&gt;</a>&amp; v2)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  XII_NAN_ASSERT(&amp;v1);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  XII_NAN_ASSERT(&amp;v2);</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keywordflow">if</span> (v1.x &lt; v2.x)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="keywordflow">if</span> (v1.x &gt; v2.x)</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  <span class="keywordflow">return</span> (v1.y &lt; v2.y);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;}</div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aclassxii_vec2_template_htm_a84fde443875292bbaf1da11562a3a2db"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a84fde443875292bbaf1da11562a3a2db">xiiVec2Template::IsValid</a></div><div class="ttdeci">bool IsValid() const</div><div class="ttdoc">Checks that all components are finite numbers.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:144</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_abd7d20f569aea08fb26c3401ec763791"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#abd7d20f569aea08fb26c3401ec763791">xiiVec2Template::operator*=</a></div><div class="ttdeci">void operator*=(Type f)</div><div class="ttdoc">Multiplies all components of this vector with f.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:196</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a30bb7d2ee971d1e5e94769179dfe5deb"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a30bb7d2ee971d1e5e94769179dfe5deb">xiiVec2Template::CompMin</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; CompMin(const xiiVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise minimum of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:260</div></div>
<div class="ttc" id="anamespacexii_math_htm_ac1067d4c24d9b02662c60a528c870580"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#ac1067d4c24d9b02662c60a528c870580">xiiMath::Invert</a></div><div class="ttdeci">constexpr Type Invert(Type f)</div><div class="ttdoc">Returns 1 / f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:83</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a2bb93a40f09265cb2368682241cc4011"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a2bb93a40f09265cb2368682241cc4011">xiiVec2Template::IsZero</a></div><div class="ttdeci">bool IsZero() const</div><div class="ttdoc">Returns, whether this vector is (0, 0).</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:119</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_aa18ffe164b680ddf83e342a8a0ed019e"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#aa18ffe164b680ddf83e342a8a0ed019e">xiiVec2Template::IsNormalized</a></div><div class="ttdeci">bool IsNormalized(Type fEpsilon=xiiMath::HugeEpsilon&lt; Type &gt;()) const</div><div class="ttdoc">Returns, whether the squared length of this vector is between 0.999f and 1.001f.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:112</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a23729487b42eb699808346ea1e0902c7"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a23729487b42eb699808346ea1e0902c7">xiiVec2Template::SetZero</a></div><div class="ttdeci">void SetZero()</div><div class="ttdoc">Sets the vector to all zero.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:41</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a5fca7e509d217416d767dc038afa95ab"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a5fca7e509d217416d767dc038afa95ab">xiiVec2Template::DistanceSquared</a></div><div class="ttdeci">Type DistanceSquared(const xiiVec2Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns the squared distance between two 2D Vectors. Faster, since no square-root is taken....</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:161</div></div>
<div class="ttc" id="anamespacexii_math_htm_a0543392160b2254da61b3ec76579f0d2"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">xiiMath::Clamp</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Clamp(T value, T min_val, T max_val)</div><div class="ttdoc">Clamps &quot;value&quot; to the range [min; max]. Returns &quot;value&quot;, if it is inside the range already.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:71</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a45f41d82d03628e0f69a6ff95d97a5c3"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a45f41d82d03628e0f69a6ff95d97a5c3">xiiVec2Template::Dot</a></div><div class="ttdeci">Type Dot(const xiiVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the Dot-product of the two vectors (commutative, order does not matter)</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:242</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a56fe0bf4f262bceb2d87504d74b81040"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a56fe0bf4f262bceb2d87504d74b81040">xiiVec2Template::CompClamp</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; CompClamp(const xiiVec2Template&lt; Type &gt; &amp;vLow, const xiiVec2Template&lt; Type &gt; &amp;vHigh) const</div><div class="ttdoc">Returns the component-wise clamped value of *this between low and high.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:278</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_ab563984d6d779f64ab67d82ceb384aa0"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#ab563984d6d779f64ab67d82ceb384aa0">xiiVec2Template::xiiVec2Template</a></div><div class="ttdeci">xiiVec2Template()</div><div class="ttdoc">default-constructed vector is uninitialized (for speed)</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:4</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_afcac8a1ac6d82ce355668183c5c8b653"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#afcac8a1ac6d82ce355668183c5c8b653">xiiVec2Template::GetLengthAndNormalize</a></div><div class="ttdeci">Type GetLengthAndNormalize()</div><div class="ttdoc">Normalizes this vector and returns its previous length in one operation. More efficient than calling ...</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:69</div></div>
<div class="ttc" id="anamespacexii_math_htm_a4d6f8bf4858245e40a706a3aabd0a59e"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">xiiMath::Max</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Max(T f1, T f2)</div><div class="ttdoc">Returns the greater value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:59</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_ab14953e0d722466f7ae9a934da7a6e45"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#ab14953e0d722466f7ae9a934da7a6e45">xiiVec2Template::operator+=</a></div><div class="ttdeci">void operator+=(const xiiVec2Template&lt; Type &gt; &amp;vCc)</div><div class="ttdoc">Adds cc component-wise to this vector.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:178</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_adc3894b5226e1833035b09c036ca9d84"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#adc3894b5226e1833035b09c036ca9d84">xiiVec2Template::GetLengthSquared</a></div><div class="ttdeci">Type GetLengthSquared() const</div><div class="ttdoc">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compa...</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:63</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_ada9215d9d548093a8c18e98b80d2366f"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#ada9215d9d548093a8c18e98b80d2366f">xiiVec2Template::SetLength</a></div><div class="ttdeci">xiiResult SetLength(Type fNewLength, Type fEpsilon=xiiMath::DefaultEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to rescale the vector to the given length. If the vector is too close to zero,...</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:53</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_af2714f676201b570e0b931dd3e58c05d"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#af2714f676201b570e0b931dd3e58c05d">xiiVec2Template::operator-</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; operator-() const</div><div class="ttdoc">Returns the negation of this vector.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:170</div></div>
<div class="ttc" id="anamespacexii_math_htm_a76f446939ad58af387fb79b8fd9deff7"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">xiiMath::IsZero</a></div><div class="ttdeci">bool IsZero(Type f, Type fEpsilon)</div><div class="ttdoc">Checks whether the given number is close to zero.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:294</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_aaf84986496367330b8efef590c8766d5"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#aaf84986496367330b8efef590c8766d5">xiiVec2Template::CompMax</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; CompMax(const xiiVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise maximum of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:269</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_adf1017dcf1e1063b65b02f3d584e5f19"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#adf1017dcf1e1063b65b02f3d584e5f19">xiiVec2Template::GetAngleBetween</a></div><div class="ttdeci">xiiAngle GetAngleBetween(const xiiVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the positive angle between *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:251</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_ab68b22a7d00246979168db4e06e273f6"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#ab68b22a7d00246979168db4e06e273f6">xiiVec2Template::CompDiv</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; CompDiv(const xiiVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise division of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:297</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a450c26561f54515cdb0b8ca80435e247"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a450c26561f54515cdb0b8ca80435e247">xiiVec2Template::CompMul</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; CompMul(const xiiVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Returns the component-wise multiplication of *this and rhs.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:288</div></div>
<div class="ttc" id="anamespacexii_math_htm_a20047812a62c07b9ac2144a5520c18f0"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">xiiMath::IsEqual</a></div><div class="ttdeci">constexpr bool IsEqual(Type lhs, Type rhs, Type fEpsilon)</div><div class="ttdoc">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision].</div><div class="ttdef"><b>Definition:</b> Math_inl.h:282</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_adb21b54b3a333b548444f2562c44689e"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#adb21b54b3a333b548444f2562c44689e">xiiVec2Template::NormalizeIfNotZero</a></div><div class="ttdeci">xiiResult NormalizeIfNotZero(const xiiVec2Template&lt; Type &gt; &amp;vFallback=xiiVec2Template&lt; Type &gt;(1, 0), Type fEpsilon=xiiMath::DefaultEpsilon&lt; Type &gt;())</div><div class="ttdoc">Tries to normalize this vector. If the vector is too close to zero, XII_FAILURE is returned and the v...</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:92</div></div>
<div class="ttc" id="anamespacexii_math_htm_a821b432e7a9c8ac292eb255ee11e9e10"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a821b432e7a9c8ac292eb255ee11e9e10">xiiMath::Abs</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Abs(T f)</div><div class="ttdoc">Returns the absolute value of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:41</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a4db5febb0a7a20a80fa46e79a482488f"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a4db5febb0a7a20a80fa46e79a482488f">xiiVec2Template::Distance</a></div><div class="ttdeci">Type Distance(const xiiVec2Template&lt; Type &gt; &amp;vPoint) const</div><div class="ttdoc">Returns the distance between two 2D Vectors.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:155</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a34c60ca3d627dfe8349ae4339f0a2bd7"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a34c60ca3d627dfe8349ae4339f0a2bd7">xiiVec2Template::Normalize</a></div><div class="ttdeci">void Normalize()</div><div class="ttdoc">Normalizes this vector.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:86</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a78e9bae3485f5b02ac864c5341fa2273"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a78e9bae3485f5b02ac864c5341fa2273">xiiVec2Template::IsNaN</a></div><div class="ttdeci">bool IsNaN() const</div><div class="ttdoc">Returns true, if any of x or y is NaN.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:133</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_adeff5daa4b13dc6c6d5252a90f245af9"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#adeff5daa4b13dc6c6d5252a90f245af9">xiiVec2Template::operator/=</a></div><div class="ttdeci">void operator/=(Type f)</div><div class="ttdoc">Divides all components of this vector by f.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:205</div></div>
<div class="ttc" id="anamespacexii_math_htm_ae7fbda648b6f9bcc4dc23962d06c93f4"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">xiiMath::Sqrt</a></div><div class="ttdeci">XII_ALWAYS_INLINE double Sqrt(double f)</div><div class="ttdoc">Returns the square root of f.</div><div class="ttdef"><b>Definition:</b> MathDouble_inl.h:84</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a277c26a02d10b67275d4cd3b575c37a0"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a277c26a02d10b67275d4cd3b575c37a0">xiiVec2Template::operator-=</a></div><div class="ttdeci">void operator-=(const xiiVec2Template&lt; Type &gt; &amp;vCc)</div><div class="ttdoc">Subtracts cc component-wise from this vector.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:187</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a80268c93bfea5c0102c47a63b604ad83"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a80268c93bfea5c0102c47a63b604ad83">xiiVec2Template::Abs</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; Abs() const</div><div class="ttdoc">brief Returns the component-wise absolute of *this.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:306</div></div>
<div class="ttc" id="astructxii_result_htm"><div class="ttname"><a href="../../dd/dad/structxii_result.htm">xiiResult</a></div><div class="ttdoc">Default enum for returning failure or success, instead of using a bool.</div><div class="ttdef"><b>Definition:</b> Types.h:54</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a2291ef6f9ff7a35b42f850b001d8c8ba"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a2291ef6f9ff7a35b42f850b001d8c8ba">xiiVec2Template::GetOrthogonalVector</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; GetOrthogonalVector() const</div><div class="ttdoc">Returns some arbitrary vector orthogonal to this one. The vector is NOT normalized.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:225</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_af018435b03c5a2b6312ddbca408e5aef"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#af018435b03c5a2b6312ddbca408e5aef">xiiVec2Template::GetNormalized</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; GetNormalized() const</div><div class="ttdoc">Returns a normalized version of this vector, leaves the vector itself unchanged.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:77</div></div>
<div class="ttc" id="aclassxii_angle_template_htm"><div class="ttname"><a href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate&lt; float &gt;</a></div></div>
<div class="ttc" id="anamespacexii_math_htm_a2c660f80f0df5bb91a751d12a93cb9cb"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">xiiMath::Min</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Min(T f1, T f2)</div><div class="ttdoc">Returns the smaller value, f1 or f2.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:47</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_af28c1db86c646aa5292dc02a504ff996"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#af28c1db86c646aa5292dc02a504ff996">xiiVec2Template::IsEqual</a></div><div class="ttdeci">bool IsEqual(const xiiVec2Template&lt; Type &gt; &amp;rhs, Type fEpsilon) const</div><div class="ttdoc">Equality Check with epsilon.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:367</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_ad722164290abb9d10cade94c75117116"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#ad722164290abb9d10cade94c75117116">xiiVec2Template::IsIdentical</a></div><div class="ttdeci">bool IsIdentical(const xiiVec2Template&lt; Type &gt; &amp;rhs) const</div><div class="ttdoc">Equality Check (bitwise)</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:358</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_aa19864db8fe995a468446ea2353fdf11"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#aa19864db8fe995a468446ea2353fdf11">xiiVec2Template::GetLength</a></div><div class="ttdeci">Type GetLength() const</div><div class="ttdoc">Returns the length of the vector.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:47</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a8ea459a6f371af48c91125fb750db215"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a8ea459a6f371af48c91125fb750db215">xiiVec2Template::MakeOrthogonalTo</a></div><div class="ttdeci">void MakeOrthogonalTo(const xiiVec2Template&lt; Type &gt; &amp;vNormal)</div><div class="ttdoc">Modifies this direction vector to be orthogonal to the given (normalized) direction vector....</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:216</div></div>
<div class="ttc" id="anamespacexii_math_htm_acadcf58b1a805ed9e8127057834a0b0a"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">xiiMath::Square</a></div><div class="ttdeci">constexpr XII_ALWAYS_INLINE T Square(T f)</div><div class="ttdoc">Returns f * f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:29</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template</a></div><div class="ttdoc">A 2-component vector class.</div><div class="ttdef"><b>Definition:</b> Declarations.h:127</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a871fe8666b6a23fe3cc84048d143f6e6"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a871fe8666b6a23fe3cc84048d143f6e6">xiiVec2Template::GetReflectedVector</a></div><div class="ttdeci">const xiiVec2Template&lt; Type &gt; GetReflectedVector(const xiiVec2Template&lt; Type &gt; &amp;vNormal) const</div><div class="ttdoc">Returns this vector reflected at vNormal.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:234</div></div>
<div class="ttc" id="anamespacexii_math_htm_a788a4e90cf6d0f3285b15fac90017188"><div class="ttname"><a href="../../d1/d37/namespacexii_math.htm#a788a4e90cf6d0f3285b15fac90017188">xiiMath::ACos</a></div><div class="ttdeci">XII_ALWAYS_INLINE xiiAngleTemplate&lt; Type &gt; ACos(Type f)</div><div class="ttdoc">Returns the arcus cosinus of f.</div><div class="ttdef"><b>Definition:</b> Math_inl.h:20</div></div>
<div class="ttc" id="aclassxii_vec2_template_htm_a4fe70680e4be1f88a1e878816ba77dc4"><div class="ttname"><a href="../../d1/d0d/classxii_vec2_template.htm#a4fe70680e4be1f88a1e878816ba77dc4">xiiVec2Template::Set</a></div><div class="ttdeci">void Set(Type xy)</div><div class="ttdoc">Sets all components to this value.</div><div class="ttdef"><b>Definition:</b> Vec2_inl.h:27</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../dir_43e0a1f539e00dcfa1a6bc4d4fee4fc2.htm">home</a></li><li class="navelem"><a class="el" href="../../dir_1036706e55c22cab35bc1c58ee689f1d.htm">runner</a></li><li class="navelem"><a class="el" href="../../dir_629f8151d55d307162ff2d619fb1783d.htm">work</a></li><li class="navelem"><a class="el" href="../../dir_1ddc44fe1263a8c7935fa6130b7d9499.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_2c1b6808f12952f4c36e05ba7068379a.htm">XII</a></li><li class="navelem"><a class="el" href="../../dir_b5a1c4ecfca018ad24b729e213296d41.htm">Source</a></li><li class="navelem"><a class="el" href="../../dir_e321052006a51284e67389ab20037e7c.htm">Engine</a></li><li class="navelem"><a class="el" href="../../dir_be0c42c58b36f42c54ec54024ed4f6af.htm">Foundation</a></li><li class="navelem"><a class="el" href="../../dir_c1b0860bb61ff24e678d996d14e4bcdd.htm">Math</a></li><li class="navelem"><a class="el" href="../../dir_fb7e93d80251333452775ccd3b7c417a.htm">Implementation</a></li><li class="navelem"><b>Vec2_inl.h</b></li>
    <li class="footer">Generated on Sat Oct 14 2023 18:05:03 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

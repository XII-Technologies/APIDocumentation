<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XIIEngine: xiiMath Namespace Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">XIIEngine
   &#160;<span id="projectnumber">1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "../../search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('../../',true,false,'search.htm','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('d1/d37/namespacexii_math.htm','../../'); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">xiiMath Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This namespace provides common math-functionality as functions.  
<a href="../../d1/d37/namespacexii_math.htm#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a646b0ff6e3974612edf83c6401adb22d"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a646b0ff6e3974612edf83c6401adb22d">xiiEasingFunctions</a> { <br />
&#160;&#160;<b>ConstantZero</b>, 
<b>ConstantQuarter</b>, 
<b>ConstantHalf</b>, 
<b>ConstantThreeFourths</b>, 
<br />
&#160;&#160;<b>ConstantOne</b>, 
<b>InLinear</b>, 
<b>OutLinear</b>, 
<b>InOutLinear</b>, 
<br />
&#160;&#160;<b>InSine</b>, 
<b>OutSine</b>, 
<b>InOutSine</b>, 
<b>InQuad</b>, 
<br />
&#160;&#160;<b>OutQuad</b>, 
<b>InOutQuad</b>, 
<b>InCubic</b>, 
<b>OutCubic</b>, 
<br />
&#160;&#160;<b>InOutCubic</b>, 
<b>InQuartic</b>, 
<b>OutQuartic</b>, 
<b>InOutQuartic</b>, 
<br />
&#160;&#160;<b>InQuintic</b>, 
<b>OutQuintic</b>, 
<b>InOutQuintic</b>, 
<b>InExpo</b>, 
<br />
&#160;&#160;<b>OutExpo</b>, 
<b>InOutExpo</b>, 
<b>InCirc</b>, 
<b>OutCirc</b>, 
<br />
&#160;&#160;<b>InOutCirc</b>, 
<b>InBack</b>, 
<b>OutBack</b>, 
<b>InOutBack</b>, 
<br />
&#160;&#160;<b>InElastic</b>, 
<b>OutElastic</b>, 
<b>InOutElastic</b>, 
<b>InBounce</b>, 
<br />
&#160;&#160;<b>OutBounce</b>, 
<b>InOutBounce</b>, 
<b>Conical</b>, 
<b>FadeInHoldFadeOut</b>, 
<br />
&#160;&#160;<b>FadeInFadeOut</b>, 
<b>Bell</b>, 
<b>ENUM_COUNT</b>
<br />
 }</td></tr>
<tr class="memdesc:a646b0ff6e3974612edf83c6401adb22d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Available Procedural Curve Generators.  <a href="../../d1/d37/namespacexii_math.htm#a646b0ff6e3974612edf83c6401adb22d">More...</a><br /></td></tr>
<tr class="separator:a646b0ff6e3974612edf83c6401adb22d"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:ab2c8efd61efaef9d965db8ff5625c8eb"><td class="memTemplParams" colspan="2"><a id="ab2c8efd61efaef9d965db8ff5625c8eb"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:ab2c8efd61efaef9d965db8ff5625c8eb"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ab2c8efd61efaef9d965db8ff5625c8eb">Pi</a> ()</td></tr>
<tr class="memdesc:ab2c8efd61efaef9d965db8ff5625c8eb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant Pi. <br /></td></tr>
<tr class="separator:ab2c8efd61efaef9d965db8ff5625c8eb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aecb2efabd89887be2341e03ed2701069"><td class="memTemplParams" colspan="2"><a id="aecb2efabd89887be2341e03ed2701069"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aecb2efabd89887be2341e03ed2701069"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aecb2efabd89887be2341e03ed2701069">e</a> ()</td></tr>
<tr class="memdesc:aecb2efabd89887be2341e03ed2701069"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant e. <br /></td></tr>
<tr class="separator:aecb2efabd89887be2341e03ed2701069"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa94dd755ed0e8f901b1b50def44b845d"><td class="memTemplParams" colspan="2"><a id="aa94dd755ed0e8f901b1b50def44b845d"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aa94dd755ed0e8f901b1b50def44b845d"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa94dd755ed0e8f901b1b50def44b845d">Phi</a> ()</td></tr>
<tr class="memdesc:aa94dd755ed0e8f901b1b50def44b845d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the constant Phi (a+b/a). <br /></td></tr>
<tr class="separator:aa94dd755ed0e8f901b1b50def44b845d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a79d686909da7b73a5d51685d575887"><td class="memTemplParams" colspan="2"><a id="a9a79d686909da7b73a5d51685d575887"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a9a79d686909da7b73a5d51685d575887"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a9a79d686909da7b73a5d51685d575887">SupportsNaN</a> ()</td></tr>
<tr class="memdesc:a9a79d686909da7b73a5d51685d575887"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the template type supports specialized values to represent NaN. <br /></td></tr>
<tr class="separator:a9a79d686909da7b73a5d51685d575887"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a794f0339ad168c57748133cd2687fe4d"><td class="memTemplParams" colspan="2">template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a794f0339ad168c57748133cd2687fe4d"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a794f0339ad168c57748133cd2687fe4d">NaN</a> ()</td></tr>
<tr class="memdesc:a794f0339ad168c57748133cd2687fe4d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for NaN as the template type. Returns zero, if the type does not support NaN.  <a href="../../d1/d37/namespacexii_math.htm#a794f0339ad168c57748133cd2687fe4d">More...</a><br /></td></tr>
<tr class="separator:a794f0339ad168c57748133cd2687fe4d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a685aa310f655d835c5f9b7772497492b"><td class="memTemplParams" colspan="2"><a id="a685aa310f655d835c5f9b7772497492b"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a685aa310f655d835c5f9b7772497492b"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a685aa310f655d835c5f9b7772497492b">SupportsInfinity</a> ()</td></tr>
<tr class="memdesc:a685aa310f655d835c5f9b7772497492b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns whether the template type supports specialized values to represent Infinity. <br /></td></tr>
<tr class="separator:a685aa310f655d835c5f9b7772497492b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92390d63ce0db65cfd3b33cdd290e0b6"><td class="memTemplParams" colspan="2"><a id="a92390d63ce0db65cfd3b33cdd290e0b6"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a92390d63ce0db65cfd3b33cdd290e0b6"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a92390d63ce0db65cfd3b33cdd290e0b6">Infinity</a> ()</td></tr>
<tr class="memdesc:a92390d63ce0db65cfd3b33cdd290e0b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the value for Infinity as the template type. Returns zero, if the type does not support Infinity. <br /></td></tr>
<tr class="separator:a92390d63ce0db65cfd3b33cdd290e0b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6bbce1588f70c91d6cad87e82a0238c1"><td class="memTemplParams" colspan="2"><a id="a6bbce1588f70c91d6cad87e82a0238c1"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a6bbce1588f70c91d6cad87e82a0238c1"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a6bbce1588f70c91d6cad87e82a0238c1">MaxValue</a> ()</td></tr>
<tr class="memdesc:a6bbce1588f70c91d6cad87e82a0238c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the largest possible positive value (that is not infinity). <br /></td></tr>
<tr class="separator:a6bbce1588f70c91d6cad87e82a0238c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc376719aecc7a3d905c196f50ae6b7c"><td class="memTemplParams" colspan="2"><a id="afc376719aecc7a3d905c196f50ae6b7c"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:afc376719aecc7a3d905c196f50ae6b7c"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#afc376719aecc7a3d905c196f50ae6b7c">MinValue</a> ()</td></tr>
<tr class="memdesc:afc376719aecc7a3d905c196f50ae6b7c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smallest possible value (that is not -infinity). Usually zero or -<a class="el" href="../../d1/d37/namespacexii_math.htm#a6bbce1588f70c91d6cad87e82a0238c1" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a>. For signed integers this will be -<a class="el" href="../../d1/d37/namespacexii_math.htm#a6bbce1588f70c91d6cad87e82a0238c1" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a> - 1. <br /></td></tr>
<tr class="separator:afc376719aecc7a3d905c196f50ae6b7c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaef30261db876ade1c53d907aaa68828"><td class="memTemplParams" colspan="2">template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:aaef30261db876ade1c53d907aaa68828"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aaef30261db876ade1c53d907aaa68828">HighValue</a> ()</td></tr>
<tr class="memdesc:aaef30261db876ade1c53d907aaa68828"><td class="mdescLeft">&#160;</td><td class="mdescRight">A very large value, that is slightly smaller than sqrt(MaxValue()).  <a href="../../d1/d37/namespacexii_math.htm#aaef30261db876ade1c53d907aaa68828">More...</a><br /></td></tr>
<tr class="separator:aaef30261db876ade1c53d907aaa68828"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7b5a123b24f43f648a24898407502ff"><td class="memTemplParams" colspan="2"><a id="ab7b5a123b24f43f648a24898407502ff"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:ab7b5a123b24f43f648a24898407502ff"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ab7b5a123b24f43f648a24898407502ff">FloatEpsilon</a> ()</td></tr>
<tr class="memdesc:ab7b5a123b24f43f648a24898407502ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">The difference between 1.0 and the next representable value for the given type. <br /></td></tr>
<tr class="separator:ab7b5a123b24f43f648a24898407502ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35f5e550fdc295ad396521818f6ff16d"><td class="memTemplParams" colspan="2"><a id="a35f5e550fdc295ad396521818f6ff16d"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a35f5e550fdc295ad396521818f6ff16d"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SmallEpsilon</b> ()</td></tr>
<tr class="separator:a35f5e550fdc295ad396521818f6ff16d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a830b415056da3fe59d0e96c4c4acd5e1"><td class="memTemplParams" colspan="2"><a id="a830b415056da3fe59d0e96c4c4acd5e1"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a830b415056da3fe59d0e96c4c4acd5e1"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>DefaultEpsilon</b> ()</td></tr>
<tr class="separator:a830b415056da3fe59d0e96c4c4acd5e1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac43a826a2408797bbd36a14464d8a153"><td class="memTemplParams" colspan="2"><a id="ac43a826a2408797bbd36a14464d8a153"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:ac43a826a2408797bbd36a14464d8a153"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>LargeEpsilon</b> ()</td></tr>
<tr class="separator:ac43a826a2408797bbd36a14464d8a153"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb735d949756ccf9a0e2934158786a8f"><td class="memTemplParams" colspan="2"><a id="abb735d949756ccf9a0e2934158786a8f"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:abb735d949756ccf9a0e2934158786a8f"><td class="memTemplItemLeft" align="right" valign="top">constexpr TYPE&#160;</td><td class="memTemplItemRight" valign="bottom"><b>HugeEpsilon</b> ()</td></tr>
<tr class="separator:abb735d949756ccf9a0e2934158786a8f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a796a1efcabdf18bcbf94f43c344b7337"><td class="memTemplParams" colspan="2"><a id="a796a1efcabdf18bcbf94f43c344b7337"></a>
template&lt;typename TYPE &gt; </td></tr>
<tr class="memitem:a796a1efcabdf18bcbf94f43c344b7337"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a796a1efcabdf18bcbf94f43c344b7337">NumBits</a> ()</td></tr>
<tr class="memdesc:a796a1efcabdf18bcbf94f43c344b7337"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits in the given type. Mostly useful for unsigned integer types. <br /></td></tr>
<tr class="separator:a796a1efcabdf18bcbf94f43c344b7337"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac30ae05e4f9e6def31bdaa85c36c9c3a"><td class="memTemplParams" colspan="2"><a id="ac30ae05e4f9e6def31bdaa85c36c9c3a"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ac30ae05e4f9e6def31bdaa85c36c9c3a"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ac30ae05e4f9e6def31bdaa85c36c9c3a">GetEasingValue</a> (<a class="el" href="../../d1/d37/namespacexii_math.htm#a646b0ff6e3974612edf83c6401adb22d">xiiEasingFunctions</a> easingFunction, Type input)</td></tr>
<tr class="memdesc:ac30ae05e4f9e6def31bdaa85c36c9c3a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function that returns the easing value from an easing function. <br /></td></tr>
<tr class="separator:ac30ae05e4f9e6def31bdaa85c36c9c3a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6649388742960c27aedf478c33548cfd"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a6649388742960c27aedf478c33548cfd"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a6649388742960c27aedf478c33548cfd">GetEasingValue</a> (<a class="el" href="../../d1/d37/namespacexii_math.htm#a646b0ff6e3974612edf83c6401adb22d">xiiEasingFunctions</a> easingFunction, Type input, bool bInverse)</td></tr>
<tr class="memdesc:a6649388742960c27aedf478c33548cfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Helper function that returns the function value at the given x coordinate.  <a href="../../d1/d37/namespacexii_math.htm#a6649388742960c27aedf478c33548cfd">More...</a><br /></td></tr>
<tr class="separator:a6649388742960c27aedf478c33548cfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54eb4753626512cc97c5977a0697afc5"><td class="memTemplParams" colspan="2"><a id="a54eb4753626512cc97c5977a0697afc5"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a54eb4753626512cc97c5977a0697afc5"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantZero</b> (Type t)</td></tr>
<tr class="separator:a54eb4753626512cc97c5977a0697afc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a284b9b1acf4e0592c7387496e3d50965"><td class="memTemplParams" colspan="2"><a id="a284b9b1acf4e0592c7387496e3d50965"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a284b9b1acf4e0592c7387496e3d50965"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantQuarter</b> (Type t)</td></tr>
<tr class="separator:a284b9b1acf4e0592c7387496e3d50965"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae57208c7e8dcbfbdf7cfc69e2a0e51e8"><td class="memTemplParams" colspan="2"><a id="ae57208c7e8dcbfbdf7cfc69e2a0e51e8"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae57208c7e8dcbfbdf7cfc69e2a0e51e8"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantHalf</b> (Type t)</td></tr>
<tr class="separator:ae57208c7e8dcbfbdf7cfc69e2a0e51e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6b81c6df5e071cdb340dc30181d7e33"><td class="memTemplParams" colspan="2"><a id="af6b81c6df5e071cdb340dc30181d7e33"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:af6b81c6df5e071cdb340dc30181d7e33"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantThreeFourths</b> (Type t)</td></tr>
<tr class="separator:af6b81c6df5e071cdb340dc30181d7e33"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8dfcf3d31f15cae0a5898a52f95e0f7a"><td class="memTemplParams" colspan="2"><a id="a8dfcf3d31f15cae0a5898a52f95e0f7a"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a8dfcf3d31f15cae0a5898a52f95e0f7a"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantOne</b> (Type t)</td></tr>
<tr class="separator:a8dfcf3d31f15cae0a5898a52f95e0f7a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad23fd4adb12c2282fca76ce71c4287c8"><td class="memTemplParams" colspan="2"><a id="ad23fd4adb12c2282fca76ce71c4287c8"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ad23fd4adb12c2282fca76ce71c4287c8"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInLinear</b> (Type t)</td></tr>
<tr class="separator:ad23fd4adb12c2282fca76ce71c4287c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab02de963b04ed642da0d48625b24f745"><td class="memTemplParams" colspan="2"><a id="ab02de963b04ed642da0d48625b24f745"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab02de963b04ed642da0d48625b24f745"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutLinear</b> (Type t)</td></tr>
<tr class="separator:ab02de963b04ed642da0d48625b24f745"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abdfed5971d3317b120722c99f728ce50"><td class="memTemplParams" colspan="2"><a id="abdfed5971d3317b120722c99f728ce50"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:abdfed5971d3317b120722c99f728ce50"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutLinear</b> (Type t)</td></tr>
<tr class="separator:abdfed5971d3317b120722c99f728ce50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3302d981ff049e80ed781f65baf1c53b"><td class="memTemplParams" colspan="2"><a id="a3302d981ff049e80ed781f65baf1c53b"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a3302d981ff049e80ed781f65baf1c53b"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInSine</b> (Type t)</td></tr>
<tr class="separator:a3302d981ff049e80ed781f65baf1c53b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae323beafe90844e5a17ba08bce9d52a6"><td class="memTemplParams" colspan="2"><a id="ae323beafe90844e5a17ba08bce9d52a6"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae323beafe90844e5a17ba08bce9d52a6"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutSine</b> (Type t)</td></tr>
<tr class="separator:ae323beafe90844e5a17ba08bce9d52a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a67cf683719b94d9de003584421256aa2"><td class="memTemplParams" colspan="2"><a id="a67cf683719b94d9de003584421256aa2"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a67cf683719b94d9de003584421256aa2"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutSine</b> (Type t)</td></tr>
<tr class="separator:a67cf683719b94d9de003584421256aa2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3308747c394a2d472c16e1bb7a3cfd6"><td class="memTemplParams" colspan="2"><a id="af3308747c394a2d472c16e1bb7a3cfd6"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:af3308747c394a2d472c16e1bb7a3cfd6"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInQuad</b> (Type t)</td></tr>
<tr class="separator:af3308747c394a2d472c16e1bb7a3cfd6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a387659dbad7aaf8c8dbfc85611cff78f"><td class="memTemplParams" colspan="2"><a id="a387659dbad7aaf8c8dbfc85611cff78f"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a387659dbad7aaf8c8dbfc85611cff78f"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutQuad</b> (Type t)</td></tr>
<tr class="separator:a387659dbad7aaf8c8dbfc85611cff78f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a386c11d3dc3dd78d3254e0b9cf3c7e71"><td class="memTemplParams" colspan="2"><a id="a386c11d3dc3dd78d3254e0b9cf3c7e71"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a386c11d3dc3dd78d3254e0b9cf3c7e71"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutQuad</b> (Type t)</td></tr>
<tr class="separator:a386c11d3dc3dd78d3254e0b9cf3c7e71"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89c09beee816323f387b9e08b14e74ef"><td class="memTemplParams" colspan="2"><a id="a89c09beee816323f387b9e08b14e74ef"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a89c09beee816323f387b9e08b14e74ef"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInCubic</b> (Type t)</td></tr>
<tr class="separator:a89c09beee816323f387b9e08b14e74ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0dec2e048fa31cea6b93553bb77ce21"><td class="memTemplParams" colspan="2"><a id="aa0dec2e048fa31cea6b93553bb77ce21"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aa0dec2e048fa31cea6b93553bb77ce21"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutCubic</b> (Type t)</td></tr>
<tr class="separator:aa0dec2e048fa31cea6b93553bb77ce21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab690690678acdbf04ae78b37044ae4d3"><td class="memTemplParams" colspan="2"><a id="ab690690678acdbf04ae78b37044ae4d3"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab690690678acdbf04ae78b37044ae4d3"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutCubic</b> (Type t)</td></tr>
<tr class="separator:ab690690678acdbf04ae78b37044ae4d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a56760913ec54e48f672a2f8a2ae28bc2"><td class="memTemplParams" colspan="2"><a id="a56760913ec54e48f672a2f8a2ae28bc2"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a56760913ec54e48f672a2f8a2ae28bc2"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInQuartic</b> (Type t)</td></tr>
<tr class="separator:a56760913ec54e48f672a2f8a2ae28bc2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a89caa75c590b75c76cafd24a1b9b212b"><td class="memTemplParams" colspan="2"><a id="a89caa75c590b75c76cafd24a1b9b212b"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a89caa75c590b75c76cafd24a1b9b212b"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutQuartic</b> (Type t)</td></tr>
<tr class="separator:a89caa75c590b75c76cafd24a1b9b212b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4553c879071ddcf84c28c88b8cfe8ea1"><td class="memTemplParams" colspan="2"><a id="a4553c879071ddcf84c28c88b8cfe8ea1"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a4553c879071ddcf84c28c88b8cfe8ea1"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutQuartic</b> (Type t)</td></tr>
<tr class="separator:a4553c879071ddcf84c28c88b8cfe8ea1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a08b015e10927911d21eda520fa90e4ba"><td class="memTemplParams" colspan="2"><a id="a08b015e10927911d21eda520fa90e4ba"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a08b015e10927911d21eda520fa90e4ba"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInQuintic</b> (Type t)</td></tr>
<tr class="separator:a08b015e10927911d21eda520fa90e4ba"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b6988f4823174543decd11ad6e54689"><td class="memTemplParams" colspan="2"><a id="a9b6988f4823174543decd11ad6e54689"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a9b6988f4823174543decd11ad6e54689"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutQuintic</b> (Type t)</td></tr>
<tr class="separator:a9b6988f4823174543decd11ad6e54689"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61014ce5afec90305813be214dbd5034"><td class="memTemplParams" colspan="2"><a id="a61014ce5afec90305813be214dbd5034"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a61014ce5afec90305813be214dbd5034"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutQuintic</b> (Type t)</td></tr>
<tr class="separator:a61014ce5afec90305813be214dbd5034"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a74e2ea2b2cf35ba0bb9e9648dda3ff13"><td class="memTemplParams" colspan="2"><a id="a74e2ea2b2cf35ba0bb9e9648dda3ff13"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a74e2ea2b2cf35ba0bb9e9648dda3ff13"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInExpo</b> (Type t)</td></tr>
<tr class="separator:a74e2ea2b2cf35ba0bb9e9648dda3ff13"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2f90f6e8e7294ca576d4883f52ff5f93"><td class="memTemplParams" colspan="2"><a id="a2f90f6e8e7294ca576d4883f52ff5f93"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a2f90f6e8e7294ca576d4883f52ff5f93"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutExpo</b> (Type t)</td></tr>
<tr class="separator:a2f90f6e8e7294ca576d4883f52ff5f93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2eb212054bfea16d30d38dc44c96efd3"><td class="memTemplParams" colspan="2"><a id="a2eb212054bfea16d30d38dc44c96efd3"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a2eb212054bfea16d30d38dc44c96efd3"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutExpo</b> (Type t)</td></tr>
<tr class="separator:a2eb212054bfea16d30d38dc44c96efd3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae339fb222abef0fbf11260c30194df3c"><td class="memTemplParams" colspan="2"><a id="ae339fb222abef0fbf11260c30194df3c"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae339fb222abef0fbf11260c30194df3c"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInCirc</b> (Type t)</td></tr>
<tr class="separator:ae339fb222abef0fbf11260c30194df3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17c324827e85a451fdd9f64ac6fce299"><td class="memTemplParams" colspan="2"><a id="a17c324827e85a451fdd9f64ac6fce299"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a17c324827e85a451fdd9f64ac6fce299"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutCirc</b> (Type t)</td></tr>
<tr class="separator:a17c324827e85a451fdd9f64ac6fce299"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a972de7317ceb6c072728b03f4c5ba744"><td class="memTemplParams" colspan="2"><a id="a972de7317ceb6c072728b03f4c5ba744"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a972de7317ceb6c072728b03f4c5ba744"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutCirc</b> (Type t)</td></tr>
<tr class="separator:a972de7317ceb6c072728b03f4c5ba744"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0b83e4f14268e3db3d63c71bc54dc390"><td class="memTemplParams" colspan="2"><a id="a0b83e4f14268e3db3d63c71bc54dc390"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a0b83e4f14268e3db3d63c71bc54dc390"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInBack</b> (Type t)</td></tr>
<tr class="separator:a0b83e4f14268e3db3d63c71bc54dc390"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a754469362b3ae75eb95c21bc37ac8d75"><td class="memTemplParams" colspan="2"><a id="a754469362b3ae75eb95c21bc37ac8d75"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a754469362b3ae75eb95c21bc37ac8d75"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutBack</b> (Type t)</td></tr>
<tr class="separator:a754469362b3ae75eb95c21bc37ac8d75"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8e61bfc3f19a5940e033ebe638ade36"><td class="memTemplParams" colspan="2"><a id="aa8e61bfc3f19a5940e033ebe638ade36"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aa8e61bfc3f19a5940e033ebe638ade36"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutBack</b> (Type t)</td></tr>
<tr class="separator:aa8e61bfc3f19a5940e033ebe638ade36"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01515ffb9d00bbb2bdaf095db43359f2"><td class="memTemplParams" colspan="2"><a id="a01515ffb9d00bbb2bdaf095db43359f2"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a01515ffb9d00bbb2bdaf095db43359f2"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInElastic</b> (Type t)</td></tr>
<tr class="separator:a01515ffb9d00bbb2bdaf095db43359f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af953ee0d4a261c963ecdeaaf9de20da9"><td class="memTemplParams" colspan="2"><a id="af953ee0d4a261c963ecdeaaf9de20da9"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:af953ee0d4a261c963ecdeaaf9de20da9"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutElastic</b> (Type t)</td></tr>
<tr class="separator:af953ee0d4a261c963ecdeaaf9de20da9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25fa02d34d4bfebada1fe520c65d1e1e"><td class="memTemplParams" colspan="2"><a id="a25fa02d34d4bfebada1fe520c65d1e1e"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a25fa02d34d4bfebada1fe520c65d1e1e"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutElastic</b> (Type t)</td></tr>
<tr class="separator:a25fa02d34d4bfebada1fe520c65d1e1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a914799f993d7a213823d57b3b1231aa0"><td class="memTemplParams" colspan="2"><a id="a914799f993d7a213823d57b3b1231aa0"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a914799f993d7a213823d57b3b1231aa0"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInBounce</b> (Type t)</td></tr>
<tr class="separator:a914799f993d7a213823d57b3b1231aa0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21bad889fc5321e43ed3b34108a8ef20"><td class="memTemplParams" colspan="2"><a id="a21bad889fc5321e43ed3b34108a8ef20"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a21bad889fc5321e43ed3b34108a8ef20"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutBounce</b> (Type t)</td></tr>
<tr class="separator:a21bad889fc5321e43ed3b34108a8ef20"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ee5b2ef1c5d7d2242c47636c6250100"><td class="memTemplParams" colspan="2"><a id="a8ee5b2ef1c5d7d2242c47636c6250100"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a8ee5b2ef1c5d7d2242c47636c6250100"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutBounce</b> (Type t)</td></tr>
<tr class="separator:a8ee5b2ef1c5d7d2242c47636c6250100"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a092eb2411ee2a4a321912b2b6c434c77"><td class="memTemplParams" colspan="2"><a id="a092eb2411ee2a4a321912b2b6c434c77"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a092eb2411ee2a4a321912b2b6c434c77"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConical</b> (Type t)</td></tr>
<tr class="separator:a092eb2411ee2a4a321912b2b6c434c77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4593599dbc919be9a9e288a7444a542f"><td class="memTemplParams" colspan="2"><a id="a4593599dbc919be9a9e288a7444a542f"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a4593599dbc919be9a9e288a7444a542f"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseFadeInHoldFadeOut</b> (Type t)</td></tr>
<tr class="separator:a4593599dbc919be9a9e288a7444a542f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a261f0d40f2852a8edd310ec17de19222"><td class="memTemplParams" colspan="2"><a id="a261f0d40f2852a8edd310ec17de19222"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a261f0d40f2852a8edd310ec17de19222"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseFadeInFadeOut</b> (Type t)</td></tr>
<tr class="separator:a261f0d40f2852a8edd310ec17de19222"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d4c5a761f1e0c62cdecda711d37c37a"><td class="memTemplParams" colspan="2"><a id="a8d4c5a761f1e0c62cdecda711d37c37a"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a8d4c5a761f1e0c62cdecda711d37c37a"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseBell</b> (Type t)</td></tr>
<tr class="separator:a8d4c5a761f1e0c62cdecda711d37c37a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5dd1fd277b4ecf11ca738ffd0d5a886c"><td class="memItemLeft" align="right" valign="top"><a id="a5dd1fd277b4ecf11ca738ffd0d5a886c"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a5dd1fd277b4ecf11ca738ffd0d5a886c"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5dd1fd277b4ecf11ca738ffd0d5a886c">Pi</a> ()</td></tr>
<tr class="memdesc:a5dd1fd277b4ecf11ca738ffd0d5a886c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant Pi. <br /></td></tr>
<tr class="separator:a5dd1fd277b4ecf11ca738ffd0d5a886c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac5bf298f7e0ea15de60b5b49ae003536"><td class="memItemLeft" align="right" valign="top"><a id="ac5bf298f7e0ea15de60b5b49ae003536"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac5bf298f7e0ea15de60b5b49ae003536"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ac5bf298f7e0ea15de60b5b49ae003536">Phi</a> ()</td></tr>
<tr class="memdesc:ac5bf298f7e0ea15de60b5b49ae003536"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the constant Phi (a+b/a). <br /></td></tr>
<tr class="separator:ac5bf298f7e0ea15de60b5b49ae003536"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5429845293472c94188b0bfcfa6cdcf6"><td class="memItemLeft" align="right" valign="top"><a id="a5429845293472c94188b0bfcfa6cdcf6"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a5429845293472c94188b0bfcfa6cdcf6"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5429845293472c94188b0bfcfa6cdcf6">e</a> ()</td></tr>
<tr class="memdesc:a5429845293472c94188b0bfcfa6cdcf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the natural constant e. <br /></td></tr>
<tr class="separator:a5429845293472c94188b0bfcfa6cdcf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae284a647905f9d83f625433649829e0c"><td class="memItemLeft" align="right" valign="top"><a id="ae284a647905f9d83f625433649829e0c"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ae284a647905f9d83f625433649829e0c"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN&lt; float &gt;</b> ()</td></tr>
<tr class="separator:ae284a647905f9d83f625433649829e0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeafab934b42b6e2a083cd7f91bb4773"><td class="memItemLeft" align="right" valign="top"><a id="abeafab934b42b6e2a083cd7f91bb4773"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:abeafab934b42b6e2a083cd7f91bb4773"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsNaN&lt; double &gt;</b> ()</td></tr>
<tr class="separator:abeafab934b42b6e2a083cd7f91bb4773"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a72fb3281a9c00d8dc93d3d61433490a0"><td class="memItemLeft" align="right" valign="top"><a id="a72fb3281a9c00d8dc93d3d61433490a0"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a72fb3281a9c00d8dc93d3d61433490a0"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NaN</b> ()</td></tr>
<tr class="separator:a72fb3281a9c00d8dc93d3d61433490a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59bba03aec8683c097353024cc894d64"><td class="memItemLeft" align="right" valign="top"><a id="a59bba03aec8683c097353024cc894d64"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a59bba03aec8683c097353024cc894d64"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity&lt; float &gt;</b> ()</td></tr>
<tr class="separator:a59bba03aec8683c097353024cc894d64"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0f75031d98e33cd1dcdd51ec6943796"><td class="memItemLeft" align="right" valign="top"><a id="af0f75031d98e33cd1dcdd51ec6943796"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:af0f75031d98e33cd1dcdd51ec6943796"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><b>SupportsInfinity&lt; double &gt;</b> ()</td></tr>
<tr class="separator:af0f75031d98e33cd1dcdd51ec6943796"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cd95c939a5b26c4f90677bf02825f32"><td class="memItemLeft" align="right" valign="top"><a id="a1cd95c939a5b26c4f90677bf02825f32"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a1cd95c939a5b26c4f90677bf02825f32"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Infinity</b> ()</td></tr>
<tr class="separator:a1cd95c939a5b26c4f90677bf02825f32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adea66acea6ee072a7989873fca0d680b"><td class="memItemLeft" align="right" valign="top"><a id="adea66acea6ee072a7989873fca0d680b"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:adea66acea6ee072a7989873fca0d680b"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#adea66acea6ee072a7989873fca0d680b">MaxValue</a> ()</td></tr>
<tr class="memdesc:adea66acea6ee072a7989873fca0d680b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the largest possible positive value (that is not infinity). <br /></td></tr>
<tr class="separator:adea66acea6ee072a7989873fca0d680b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abefd3e9cbf56f6d6e91e08284561de21"><td class="memItemLeft" align="right" valign="top"><a id="abefd3e9cbf56f6d6e91e08284561de21"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:abefd3e9cbf56f6d6e91e08284561de21"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt8&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#abefd3e9cbf56f6d6e91e08284561de21">MinValue</a> ()</td></tr>
<tr class="memdesc:abefd3e9cbf56f6d6e91e08284561de21"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smallest possible value (that is not -infinity). Usually zero or -<a class="el" href="../../d1/d37/namespacexii_math.htm#a6bbce1588f70c91d6cad87e82a0238c1" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a>. For signed integers this will be -<a class="el" href="../../d1/d37/namespacexii_math.htm#a6bbce1588f70c91d6cad87e82a0238c1" title="Returns the largest possible positive value (that is not infinity).">MaxValue()</a> - 1. <br /></td></tr>
<tr class="separator:abefd3e9cbf56f6d6e91e08284561de21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a77f43ac858d07a85b8a4042c2a0fdb3e"><td class="memItemLeft" align="right" valign="top">template&lt;&gt; </td></tr>
<tr class="memitem:a77f43ac858d07a85b8a4042c2a0fdb3e"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a77f43ac858d07a85b8a4042c2a0fdb3e">HighValue</a> ()</td></tr>
<tr class="memdesc:a77f43ac858d07a85b8a4042c2a0fdb3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">A very large value, that is slightly smaller than sqrt(MaxValue()).  <a href="../../d1/d37/namespacexii_math.htm#a77f43ac858d07a85b8a4042c2a0fdb3e">More...</a><br /></td></tr>
<tr class="separator:a77f43ac858d07a85b8a4042c2a0fdb3e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae409f80e3754420ebf9fe0dfdaba7cb1"><td class="memItemLeft" align="right" valign="top"><a id="ae409f80e3754420ebf9fe0dfdaba7cb1"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ae409f80e3754420ebf9fe0dfdaba7cb1"><td class="memTemplItemLeft" align="right" valign="top">constexpr float&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ae409f80e3754420ebf9fe0dfdaba7cb1">FloatEpsilon</a> ()</td></tr>
<tr class="memdesc:ae409f80e3754420ebf9fe0dfdaba7cb1"><td class="mdescLeft">&#160;</td><td class="mdescRight">The difference between 1.0 and the next representable value for the given type. <br /></td></tr>
<tr class="separator:ae409f80e3754420ebf9fe0dfdaba7cb1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a359cee8d55a9294a33f099342989c85c"><td class="memItemLeft" align="right" valign="top"><a id="a359cee8d55a9294a33f099342989c85c"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a359cee8d55a9294a33f099342989c85c"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; xiiUInt8 &gt;</b> ()</td></tr>
<tr class="separator:a359cee8d55a9294a33f099342989c85c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3389f6cccce96cad935fd9aab9a87033"><td class="memItemLeft" align="right" valign="top"><a id="a3389f6cccce96cad935fd9aab9a87033"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a3389f6cccce96cad935fd9aab9a87033"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; xiiUInt16 &gt;</b> ()</td></tr>
<tr class="separator:a3389f6cccce96cad935fd9aab9a87033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a977ed0b07cd5c3b99ff4627dcffea940"><td class="memItemLeft" align="right" valign="top"><a id="a977ed0b07cd5c3b99ff4627dcffea940"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a977ed0b07cd5c3b99ff4627dcffea940"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; xiiUInt32 &gt;</b> ()</td></tr>
<tr class="separator:a977ed0b07cd5c3b99ff4627dcffea940"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6c4ed5ee256ccebb8bc37b503e9bdca"><td class="memItemLeft" align="right" valign="top"><a id="aa6c4ed5ee256ccebb8bc37b503e9bdca"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:aa6c4ed5ee256ccebb8bc37b503e9bdca"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; xiiUInt64 &gt;</b> ()</td></tr>
<tr class="separator:aa6c4ed5ee256ccebb8bc37b503e9bdca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fd80245c2e45eaf353800af6c5cd5cf"><td class="memItemLeft" align="right" valign="top"><a id="a3fd80245c2e45eaf353800af6c5cd5cf"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a3fd80245c2e45eaf353800af6c5cd5cf"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; xiiInt8 &gt;</b> ()</td></tr>
<tr class="separator:a3fd80245c2e45eaf353800af6c5cd5cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a38285480bf494d2499425e6a90e032"><td class="memItemLeft" align="right" valign="top"><a id="a8a38285480bf494d2499425e6a90e032"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a8a38285480bf494d2499425e6a90e032"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; xiiInt16 &gt;</b> ()</td></tr>
<tr class="separator:a8a38285480bf494d2499425e6a90e032"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a666d3ead7e8a7c367b0bef3f06f72723"><td class="memItemLeft" align="right" valign="top"><a id="a666d3ead7e8a7c367b0bef3f06f72723"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a666d3ead7e8a7c367b0bef3f06f72723"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; xiiInt32 &gt;</b> ()</td></tr>
<tr class="separator:a666d3ead7e8a7c367b0bef3f06f72723"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbd852a38c91ca1bb8c9089124de7cb3"><td class="memItemLeft" align="right" valign="top"><a id="afbd852a38c91ca1bb8c9089124de7cb3"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:afbd852a38c91ca1bb8c9089124de7cb3"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; xiiInt64 &gt;</b> ()</td></tr>
<tr class="separator:afbd852a38c91ca1bb8c9089124de7cb3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afe7e630a98dc91132d8ce75b005b552a"><td class="memItemLeft" align="right" valign="top"><a id="afe7e630a98dc91132d8ce75b005b552a"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:afe7e630a98dc91132d8ce75b005b552a"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; float &gt;</b> ()</td></tr>
<tr class="separator:afe7e630a98dc91132d8ce75b005b552a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31faa35f0f94e59e0e3ad73186290b4e"><td class="memItemLeft" align="right" valign="top"><a id="a31faa35f0f94e59e0e3ad73186290b4e"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a31faa35f0f94e59e0e3ad73186290b4e"><td class="memTemplItemLeft" align="right" valign="top">constexpr xiiUInt32&#160;</td><td class="memTemplItemRight" valign="bottom"><b>NumBits&lt; double &gt;</b> ()</td></tr>
<tr class="separator:a31faa35f0f94e59e0e3ad73186290b4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad7bf137e981c0cdd7cbdaee0f66216c8"><td class="memTemplParams" colspan="2"><a id="ad7bf137e981c0cdd7cbdaee0f66216c8"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ad7bf137e981c0cdd7cbdaee0f66216c8"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantZero</b> (Type t)</td></tr>
<tr class="separator:ad7bf137e981c0cdd7cbdaee0f66216c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6e1c44979deaa47066ed710b0f7d503"><td class="memTemplParams" colspan="2"><a id="aa6e1c44979deaa47066ed710b0f7d503"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aa6e1c44979deaa47066ed710b0f7d503"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantQuarter</b> (Type t)</td></tr>
<tr class="separator:aa6e1c44979deaa47066ed710b0f7d503"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf1a028bc54f6c0eef93a3f14965a926"><td class="memTemplParams" colspan="2"><a id="aaf1a028bc54f6c0eef93a3f14965a926"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aaf1a028bc54f6c0eef93a3f14965a926"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantHalf</b> (Type t)</td></tr>
<tr class="separator:aaf1a028bc54f6c0eef93a3f14965a926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac10b5f9512f50667a347e4490058ff42"><td class="memTemplParams" colspan="2"><a id="ac10b5f9512f50667a347e4490058ff42"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ac10b5f9512f50667a347e4490058ff42"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantThreeFourths</b> (Type t)</td></tr>
<tr class="separator:ac10b5f9512f50667a347e4490058ff42"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a30aac132837bdaf1dbabb05a233b18f7"><td class="memTemplParams" colspan="2"><a id="a30aac132837bdaf1dbabb05a233b18f7"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a30aac132837bdaf1dbabb05a233b18f7"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConstantOne</b> (Type t)</td></tr>
<tr class="separator:a30aac132837bdaf1dbabb05a233b18f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d9a2d6fd347dd9f16ccabca7c6c3985"><td class="memTemplParams" colspan="2"><a id="a9d9a2d6fd347dd9f16ccabca7c6c3985"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a9d9a2d6fd347dd9f16ccabca7c6c3985"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInLinear</b> (Type t)</td></tr>
<tr class="separator:a9d9a2d6fd347dd9f16ccabca7c6c3985"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a43ce9f60b5cb19320304faa0d79cd504"><td class="memTemplParams" colspan="2"><a id="a43ce9f60b5cb19320304faa0d79cd504"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a43ce9f60b5cb19320304faa0d79cd504"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutLinear</b> (Type t)</td></tr>
<tr class="separator:a43ce9f60b5cb19320304faa0d79cd504"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae5b0e09f935cf3bb16687a95376dacaa"><td class="memTemplParams" colspan="2"><a id="ae5b0e09f935cf3bb16687a95376dacaa"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae5b0e09f935cf3bb16687a95376dacaa"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutLinear</b> (Type t)</td></tr>
<tr class="separator:ae5b0e09f935cf3bb16687a95376dacaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9dcfb2734f8df12d6700ed3590f7bce1"><td class="memTemplParams" colspan="2"><a id="a9dcfb2734f8df12d6700ed3590f7bce1"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a9dcfb2734f8df12d6700ed3590f7bce1"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInSine</b> (Type t)</td></tr>
<tr class="separator:a9dcfb2734f8df12d6700ed3590f7bce1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e1337163cdd72aed53a8439fb793572"><td class="memTemplParams" colspan="2"><a id="a7e1337163cdd72aed53a8439fb793572"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a7e1337163cdd72aed53a8439fb793572"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutSine</b> (Type t)</td></tr>
<tr class="separator:a7e1337163cdd72aed53a8439fb793572"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4edecdd16da398462005ca885440849e"><td class="memTemplParams" colspan="2"><a id="a4edecdd16da398462005ca885440849e"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a4edecdd16da398462005ca885440849e"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutSine</b> (Type t)</td></tr>
<tr class="separator:a4edecdd16da398462005ca885440849e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41fbf6185789b397fe534da10962f0a0"><td class="memTemplParams" colspan="2"><a id="a41fbf6185789b397fe534da10962f0a0"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a41fbf6185789b397fe534da10962f0a0"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInQuad</b> (Type t)</td></tr>
<tr class="separator:a41fbf6185789b397fe534da10962f0a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d6912f8d6cb329dd76f1757345d24aa"><td class="memTemplParams" colspan="2"><a id="a0d6912f8d6cb329dd76f1757345d24aa"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a0d6912f8d6cb329dd76f1757345d24aa"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutQuad</b> (Type t)</td></tr>
<tr class="separator:a0d6912f8d6cb329dd76f1757345d24aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e5b0e13ee5c9309619ae6d2796676ab"><td class="memTemplParams" colspan="2"><a id="a2e5b0e13ee5c9309619ae6d2796676ab"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a2e5b0e13ee5c9309619ae6d2796676ab"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutQuad</b> (Type t)</td></tr>
<tr class="separator:a2e5b0e13ee5c9309619ae6d2796676ab"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accfaee2aebb50c8b4a22d73388547f19"><td class="memTemplParams" colspan="2"><a id="accfaee2aebb50c8b4a22d73388547f19"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:accfaee2aebb50c8b4a22d73388547f19"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInCubic</b> (Type t)</td></tr>
<tr class="separator:accfaee2aebb50c8b4a22d73388547f19"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8fd05a4ef0376b77ba12fff9140555b9"><td class="memTemplParams" colspan="2"><a id="a8fd05a4ef0376b77ba12fff9140555b9"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a8fd05a4ef0376b77ba12fff9140555b9"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutCubic</b> (Type t)</td></tr>
<tr class="separator:a8fd05a4ef0376b77ba12fff9140555b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a14e5615f752b7078da943333683ab09a"><td class="memTemplParams" colspan="2"><a id="a14e5615f752b7078da943333683ab09a"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a14e5615f752b7078da943333683ab09a"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutCubic</b> (Type t)</td></tr>
<tr class="separator:a14e5615f752b7078da943333683ab09a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435f3ed1fc584ba41365a843f206b83c"><td class="memTemplParams" colspan="2"><a id="a435f3ed1fc584ba41365a843f206b83c"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a435f3ed1fc584ba41365a843f206b83c"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInQuartic</b> (Type t)</td></tr>
<tr class="separator:a435f3ed1fc584ba41365a843f206b83c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab4907fc0c43c7f44cdfbd43a06945d32"><td class="memTemplParams" colspan="2"><a id="ab4907fc0c43c7f44cdfbd43a06945d32"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab4907fc0c43c7f44cdfbd43a06945d32"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutQuartic</b> (Type t)</td></tr>
<tr class="separator:ab4907fc0c43c7f44cdfbd43a06945d32"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a182479c186d3ac9e4dc01812c8177c24"><td class="memTemplParams" colspan="2"><a id="a182479c186d3ac9e4dc01812c8177c24"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a182479c186d3ac9e4dc01812c8177c24"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutQuartic</b> (Type t)</td></tr>
<tr class="separator:a182479c186d3ac9e4dc01812c8177c24"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af5a76a8385c42fa252760a1866128e48"><td class="memTemplParams" colspan="2"><a id="af5a76a8385c42fa252760a1866128e48"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:af5a76a8385c42fa252760a1866128e48"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInQuintic</b> (Type t)</td></tr>
<tr class="separator:af5a76a8385c42fa252760a1866128e48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3743821721eef757f59ba7ebaac965f7"><td class="memTemplParams" colspan="2"><a id="a3743821721eef757f59ba7ebaac965f7"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a3743821721eef757f59ba7ebaac965f7"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutQuintic</b> (Type t)</td></tr>
<tr class="separator:a3743821721eef757f59ba7ebaac965f7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e04531dffabf686e9bdb3e866725746"><td class="memTemplParams" colspan="2"><a id="a1e04531dffabf686e9bdb3e866725746"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a1e04531dffabf686e9bdb3e866725746"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutQuintic</b> (Type t)</td></tr>
<tr class="separator:a1e04531dffabf686e9bdb3e866725746"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59e170e9cf40cc9d41516f3e62def970"><td class="memTemplParams" colspan="2"><a id="a59e170e9cf40cc9d41516f3e62def970"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a59e170e9cf40cc9d41516f3e62def970"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInExpo</b> (Type t)</td></tr>
<tr class="separator:a59e170e9cf40cc9d41516f3e62def970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0c9076c96e231fe5e85d4972f614e0fb"><td class="memTemplParams" colspan="2"><a id="a0c9076c96e231fe5e85d4972f614e0fb"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a0c9076c96e231fe5e85d4972f614e0fb"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutExpo</b> (Type t)</td></tr>
<tr class="separator:a0c9076c96e231fe5e85d4972f614e0fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a92f93a3bbb0434e7aa52e9ba2a8411ef"><td class="memTemplParams" colspan="2"><a id="a92f93a3bbb0434e7aa52e9ba2a8411ef"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a92f93a3bbb0434e7aa52e9ba2a8411ef"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutExpo</b> (Type t)</td></tr>
<tr class="separator:a92f93a3bbb0434e7aa52e9ba2a8411ef"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5b20ec0a5d02318b47d3c8f2e9da4684"><td class="memTemplParams" colspan="2"><a id="a5b20ec0a5d02318b47d3c8f2e9da4684"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a5b20ec0a5d02318b47d3c8f2e9da4684"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInCirc</b> (Type t)</td></tr>
<tr class="separator:a5b20ec0a5d02318b47d3c8f2e9da4684"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26652df2d79c426f8d71847c8d75f187"><td class="memTemplParams" colspan="2"><a id="a26652df2d79c426f8d71847c8d75f187"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a26652df2d79c426f8d71847c8d75f187"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutCirc</b> (Type t)</td></tr>
<tr class="separator:a26652df2d79c426f8d71847c8d75f187"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e5f05de9d4b0bbd6203f9fadb205d7b"><td class="memTemplParams" colspan="2"><a id="a5e5f05de9d4b0bbd6203f9fadb205d7b"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a5e5f05de9d4b0bbd6203f9fadb205d7b"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutCirc</b> (Type t)</td></tr>
<tr class="separator:a5e5f05de9d4b0bbd6203f9fadb205d7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a229381253ccd8c61fef9d35127e030c1"><td class="memTemplParams" colspan="2"><a id="a229381253ccd8c61fef9d35127e030c1"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a229381253ccd8c61fef9d35127e030c1"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInBack</b> (Type t)</td></tr>
<tr class="separator:a229381253ccd8c61fef9d35127e030c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ea19c68eca841b818383a3efec030ec"><td class="memTemplParams" colspan="2"><a id="a5ea19c68eca841b818383a3efec030ec"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a5ea19c68eca841b818383a3efec030ec"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutBack</b> (Type t)</td></tr>
<tr class="separator:a5ea19c68eca841b818383a3efec030ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33fb9ae9499804e52d4966230c6c69dd"><td class="memTemplParams" colspan="2"><a id="a33fb9ae9499804e52d4966230c6c69dd"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a33fb9ae9499804e52d4966230c6c69dd"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutBack</b> (Type t)</td></tr>
<tr class="separator:a33fb9ae9499804e52d4966230c6c69dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d10cbfbf6bda381893baf65ec01a4cb"><td class="memTemplParams" colspan="2"><a id="a2d10cbfbf6bda381893baf65ec01a4cb"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a2d10cbfbf6bda381893baf65ec01a4cb"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInElastic</b> (Type t)</td></tr>
<tr class="separator:a2d10cbfbf6bda381893baf65ec01a4cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32705c6c270b2e869572f4ffd7113e54"><td class="memTemplParams" colspan="2"><a id="a32705c6c270b2e869572f4ffd7113e54"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a32705c6c270b2e869572f4ffd7113e54"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutElastic</b> (Type t)</td></tr>
<tr class="separator:a32705c6c270b2e869572f4ffd7113e54"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e55a5c50ad15038f71c4792570cb981"><td class="memTemplParams" colspan="2"><a id="a6e55a5c50ad15038f71c4792570cb981"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a6e55a5c50ad15038f71c4792570cb981"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutElastic</b> (Type t)</td></tr>
<tr class="separator:a6e55a5c50ad15038f71c4792570cb981"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae55e65eb632e985abf83dc8463a17130"><td class="memTemplParams" colspan="2"><a id="ae55e65eb632e985abf83dc8463a17130"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ae55e65eb632e985abf83dc8463a17130"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInBounce</b> (Type t)</td></tr>
<tr class="separator:ae55e65eb632e985abf83dc8463a17130"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a25b11064040f17e10c0c3b6b10367a74"><td class="memTemplParams" colspan="2"><a id="a25b11064040f17e10c0c3b6b10367a74"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a25b11064040f17e10c0c3b6b10367a74"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseOutBounce</b> (Type t)</td></tr>
<tr class="separator:a25b11064040f17e10c0c3b6b10367a74"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab94f556a31250e0b8a2b95056bc49f95"><td class="memTemplParams" colspan="2"><a id="ab94f556a31250e0b8a2b95056bc49f95"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab94f556a31250e0b8a2b95056bc49f95"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseInOutBounce</b> (Type t)</td></tr>
<tr class="separator:ab94f556a31250e0b8a2b95056bc49f95"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a16b6f371e6ae666ea43fd86edb52f374"><td class="memTemplParams" colspan="2"><a id="a16b6f371e6ae666ea43fd86edb52f374"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a16b6f371e6ae666ea43fd86edb52f374"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseConical</b> (Type t)</td></tr>
<tr class="separator:a16b6f371e6ae666ea43fd86edb52f374"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75919b297c5d74aab1e331065e7480de"><td class="memTemplParams" colspan="2"><a id="a75919b297c5d74aab1e331065e7480de"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a75919b297c5d74aab1e331065e7480de"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseFadeInHoldFadeOut</b> (Type t)</td></tr>
<tr class="separator:a75919b297c5d74aab1e331065e7480de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcdbfa26106d89ce0dc5998869188c5d"><td class="memTemplParams" colspan="2"><a id="abcdbfa26106d89ce0dc5998869188c5d"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:abcdbfa26106d89ce0dc5998869188c5d"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseFadeInFadeOut</b> (Type t)</td></tr>
<tr class="separator:abcdbfa26106d89ce0dc5998869188c5d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a786c4cf05c2a42643523fcd4a34e5e05"><td class="memTemplParams" colspan="2"><a id="a786c4cf05c2a42643523fcd4a34e5e05"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a786c4cf05c2a42643523fcd4a34e5e05"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><b>EaseBell</b> (Type t)</td></tr>
<tr class="separator:a786c4cf05c2a42643523fcd4a34e5e05"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbbbae240e0cea673cd16646b5142e06"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:afbbbae240e0cea673cd16646b5142e06"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#afbbbae240e0cea673cd16646b5142e06">Sin</a> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; a)</td></tr>
<tr class="memdesc:afbbbae240e0cea673cd16646b5142e06"><td class="mdescLeft">&#160;</td><td class="mdescRight">***** Trigonometric Functions *****  <a href="../../d1/d37/namespacexii_math.htm#afbbbae240e0cea673cd16646b5142e06">More...</a><br /></td></tr>
<tr class="separator:afbbbae240e0cea673cd16646b5142e06"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a194fc513007059c6e129cdeb321c3797"><td class="memTemplParams" colspan="2"><a id="a194fc513007059c6e129cdeb321c3797"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a194fc513007059c6e129cdeb321c3797"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a194fc513007059c6e129cdeb321c3797">Cos</a> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; a)</td></tr>
<tr class="memdesc:a194fc513007059c6e129cdeb321c3797"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its cosine. <br /></td></tr>
<tr class="separator:a194fc513007059c6e129cdeb321c3797"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26cfe338b5414e37ddd30018f056b044"><td class="memTemplParams" colspan="2"><a id="a26cfe338b5414e37ddd30018f056b044"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a26cfe338b5414e37ddd30018f056b044"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a26cfe338b5414e37ddd30018f056b044">Tan</a> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; a)</td></tr>
<tr class="memdesc:a26cfe338b5414e37ddd30018f056b044"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its tangent. <br /></td></tr>
<tr class="separator:a26cfe338b5414e37ddd30018f056b044"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8171dc1ee6c3bd3dfc3a54a33f3a9568"><td class="memTemplParams" colspan="2"><a id="a8171dc1ee6c3bd3dfc3a54a33f3a9568"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a8171dc1ee6c3bd3dfc3a54a33f3a9568"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a8171dc1ee6c3bd3dfc3a54a33f3a9568">ASin</a> (Type f)</td></tr>
<tr class="memdesc:a8171dc1ee6c3bd3dfc3a54a33f3a9568"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus sinus of f. <br /></td></tr>
<tr class="separator:a8171dc1ee6c3bd3dfc3a54a33f3a9568"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a788a4e90cf6d0f3285b15fac90017188"><td class="memTemplParams" colspan="2"><a id="a788a4e90cf6d0f3285b15fac90017188"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a788a4e90cf6d0f3285b15fac90017188"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a788a4e90cf6d0f3285b15fac90017188">ACos</a> (Type f)</td></tr>
<tr class="memdesc:a788a4e90cf6d0f3285b15fac90017188"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus cosinus of f. <br /></td></tr>
<tr class="separator:a788a4e90cf6d0f3285b15fac90017188"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8672de025a3ff765a6cb09d081974374"><td class="memTemplParams" colspan="2"><a id="a8672de025a3ff765a6cb09d081974374"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a8672de025a3ff765a6cb09d081974374"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a8672de025a3ff765a6cb09d081974374">ATan</a> (Type f)</td></tr>
<tr class="memdesc:a8672de025a3ff765a6cb09d081974374"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus tangent of f. <br /></td></tr>
<tr class="separator:a8672de025a3ff765a6cb09d081974374"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a41e2a06b9f2d78c5773c856fb84dc467"><td class="memTemplParams" colspan="2"><a id="a41e2a06b9f2d78c5773c856fb84dc467"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a41e2a06b9f2d78c5773c856fb84dc467"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a41e2a06b9f2d78c5773c856fb84dc467">ATan2</a> (Type y, Type x)</td></tr>
<tr class="memdesc:a41e2a06b9f2d78c5773c856fb84dc467"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the atan2 of x and y. <br /></td></tr>
<tr class="separator:a41e2a06b9f2d78c5773c856fb84dc467"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acadcf58b1a805ed9e8127057834a0b0a"><td class="memTemplParams" colspan="2"><a id="acadcf58b1a805ed9e8127057834a0b0a"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:acadcf58b1a805ed9e8127057834a0b0a"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#acadcf58b1a805ed9e8127057834a0b0a">Square</a> (T f)</td></tr>
<tr class="memdesc:acadcf58b1a805ed9e8127057834a0b0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns f * f. <br /></td></tr>
<tr class="separator:acadcf58b1a805ed9e8127057834a0b0a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a367e0a2f31f1691c165d0871f3b709ff"><td class="memTemplParams" colspan="2"><a id="a367e0a2f31f1691c165d0871f3b709ff"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a367e0a2f31f1691c165d0871f3b709ff"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a367e0a2f31f1691c165d0871f3b709ff">Sign</a> (T f)</td></tr>
<tr class="memdesc:a367e0a2f31f1691c165d0871f3b709ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of f (i.e: -1, 1 or 0) <br /></td></tr>
<tr class="separator:a367e0a2f31f1691c165d0871f3b709ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a821b432e7a9c8ac292eb255ee11e9e10"><td class="memTemplParams" colspan="2"><a id="a821b432e7a9c8ac292eb255ee11e9e10"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a821b432e7a9c8ac292eb255ee11e9e10"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a821b432e7a9c8ac292eb255ee11e9e10">Abs</a> (T f)</td></tr>
<tr class="memdesc:a821b432e7a9c8ac292eb255ee11e9e10"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute value of f. <br /></td></tr>
<tr class="separator:a821b432e7a9c8ac292eb255ee11e9e10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c660f80f0df5bb91a751d12a93cb9cb"><td class="memTemplParams" colspan="2"><a id="a2c660f80f0df5bb91a751d12a93cb9cb"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2c660f80f0df5bb91a751d12a93cb9cb"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a2c660f80f0df5bb91a751d12a93cb9cb">Min</a> (T f1, T f2)</td></tr>
<tr class="memdesc:a2c660f80f0df5bb91a751d12a93cb9cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2. <br /></td></tr>
<tr class="separator:a2c660f80f0df5bb91a751d12a93cb9cb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af02a8ee0671795189acf13daefdbe792"><td class="memTemplParams" colspan="2"><a id="af02a8ee0671795189acf13daefdbe792"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:af02a8ee0671795189acf13daefdbe792"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#af02a8ee0671795189acf13daefdbe792">Min</a> (T f1, T f2, ARGS... f)</td></tr>
<tr class="memdesc:af02a8ee0671795189acf13daefdbe792"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2 or ... <br /></td></tr>
<tr class="separator:af02a8ee0671795189acf13daefdbe792"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4d6f8bf4858245e40a706a3aabd0a59e"><td class="memTemplParams" colspan="2"><a id="a4d6f8bf4858245e40a706a3aabd0a59e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a4d6f8bf4858245e40a706a3aabd0a59e"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a4d6f8bf4858245e40a706a3aabd0a59e">Max</a> (T f1, T f2)</td></tr>
<tr class="memdesc:a4d6f8bf4858245e40a706a3aabd0a59e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greater value, f1 or f2. <br /></td></tr>
<tr class="separator:a4d6f8bf4858245e40a706a3aabd0a59e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab705f1f612b4cbe6db1a566a5b66cc23"><td class="memTemplParams" colspan="2"><a id="ab705f1f612b4cbe6db1a566a5b66cc23"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:ab705f1f612b4cbe6db1a566a5b66cc23"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Max</b> (T f1, T f2, ARGS... f)</td></tr>
<tr class="separator:ab705f1f612b4cbe6db1a566a5b66cc23"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0543392160b2254da61b3ec76579f0d2"><td class="memTemplParams" colspan="2"><a id="a0543392160b2254da61b3ec76579f0d2"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a0543392160b2254da61b3ec76579f0d2"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a0543392160b2254da61b3ec76579f0d2">Clamp</a> (T value, T min_val, T max_val)</td></tr>
<tr class="memdesc:a0543392160b2254da61b3ec76579f0d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [min; max]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a0543392160b2254da61b3ec76579f0d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a59baeff4b10d075014df97471c879dec"><td class="memTemplParams" colspan="2"><a id="a59baeff4b10d075014df97471c879dec"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a59baeff4b10d075014df97471c879dec"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_ALWAYS_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a59baeff4b10d075014df97471c879dec">Saturate</a> (T value)</td></tr>
<tr class="memdesc:a59baeff4b10d075014df97471c879dec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [0; 1]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a59baeff4b10d075014df97471c879dec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1067d4c24d9b02662c60a528c870580"><td class="memTemplParams" colspan="2"><a id="ac1067d4c24d9b02662c60a528c870580"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ac1067d4c24d9b02662c60a528c870580"><td class="memTemplItemLeft" align="right" valign="top">constexpr Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ac1067d4c24d9b02662c60a528c870580">Invert</a> (Type f)</td></tr>
<tr class="memdesc:ac1067d4c24d9b02662c60a528c870580"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 1 / f. <br /></td></tr>
<tr class="separator:ac1067d4c24d9b02662c60a528c870580"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb37092634e9c088d935bc573bd0081e"><td class="memItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">FirstBitLow</a> (xiiUInt32 uiBitmask)</td></tr>
<tr class="memdesc:afb37092634e9c088d935bc573bd0081e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the least significant bit set.  <a href="../../d1/d37/namespacexii_math.htm#afb37092634e9c088d935bc573bd0081e">More...</a><br /></td></tr>
<tr class="separator:afb37092634e9c088d935bc573bd0081e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64edf87d7df0f91c265eddac6f79fe45"><td class="memItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a64edf87d7df0f91c265eddac6f79fe45">FirstBitLow</a> (xiiUInt64 uiBitmask)</td></tr>
<tr class="memdesc:a64edf87d7df0f91c265eddac6f79fe45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the least significant bit set.  <a href="../../d1/d37/namespacexii_math.htm#a64edf87d7df0f91c265eddac6f79fe45">More...</a><br /></td></tr>
<tr class="separator:a64edf87d7df0f91c265eddac6f79fe45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7e3584835296e437fd4c4c0354576c5a"><td class="memItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">FirstBitHigh</a> (xiiUInt32 uiBitmask)</td></tr>
<tr class="memdesc:a7e3584835296e437fd4c4c0354576c5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the most significant bit set.  <a href="../../d1/d37/namespacexii_math.htm#a7e3584835296e437fd4c4c0354576c5a">More...</a><br /></td></tr>
<tr class="separator:a7e3584835296e437fd4c4c0354576c5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa6adf5776953bc6fc8745c1a47f084fa"><td class="memItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa6adf5776953bc6fc8745c1a47f084fa">FirstBitHigh</a> (xiiUInt64 uiBitmask)</td></tr>
<tr class="memdesc:aa6adf5776953bc6fc8745c1a47f084fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the index of the most significant bit set.  <a href="../../d1/d37/namespacexii_math.htm#aa6adf5776953bc6fc8745c1a47f084fa">More...</a><br /></td></tr>
<tr class="separator:aa6adf5776953bc6fc8745c1a47f084fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af0b1f1262ce64f475256f1fd30d7a509"><td class="memItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#af0b1f1262ce64f475256f1fd30d7a509">CountTrailingZeros</a> (xiiUInt32 uiBitmask)</td></tr>
<tr class="separator:af0b1f1262ce64f475256f1fd30d7a509"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9888de6bcbc24405e2fc931e6647660c"><td class="memItemLeft" align="right" valign="top"><a id="a9888de6bcbc24405e2fc931e6647660c"></a>
XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a9888de6bcbc24405e2fc931e6647660c">CountTrailingZeros</a> (xiiUInt64 uiBitmask)</td></tr>
<tr class="memdesc:a9888de6bcbc24405e2fc931e6647660c"><td class="mdescLeft">&#160;</td><td class="mdescRight">64 bit overload for <a class="el" href="../../d1/d37/namespacexii_math.htm#af0b1f1262ce64f475256f1fd30d7a509">CountTrailingZeros()</a> <br /></td></tr>
<tr class="separator:a9888de6bcbc24405e2fc931e6647660c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a307af5bf30f7c96ec03c95f7db168acf"><td class="memItemLeft" align="right" valign="top">XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a307af5bf30f7c96ec03c95f7db168acf">CountLeadingZeros</a> (xiiUInt32 uiBitmask)</td></tr>
<tr class="separator:a307af5bf30f7c96ec03c95f7db168acf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09aa3acbc035c35a37a9a9cf192a9771"><td class="memItemLeft" align="right" valign="top"><a id="a09aa3acbc035c35a37a9a9cf192a9771"></a>
XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a09aa3acbc035c35a37a9a9cf192a9771">CountBits</a> (xiiUInt32 value)</td></tr>
<tr class="memdesc:a09aa3acbc035c35a37a9a9cf192a9771"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits set. <br /></td></tr>
<tr class="separator:a09aa3acbc035c35a37a9a9cf192a9771"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afa200234e98a714b7fffbcb15d3cef96"><td class="memItemLeft" align="right" valign="top"><a id="afa200234e98a714b7fffbcb15d3cef96"></a>
XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#afa200234e98a714b7fffbcb15d3cef96">CountBits</a> (xiiUInt64 value)</td></tr>
<tr class="memdesc:afa200234e98a714b7fffbcb15d3cef96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the number of bits set. <br /></td></tr>
<tr class="separator:afa200234e98a714b7fffbcb15d3cef96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e7c389d4195d010ba0c207a1e981a58"><td class="memTemplParams" colspan="2"><a id="a2e7c389d4195d010ba0c207a1e981a58"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a2e7c389d4195d010ba0c207a1e981a58"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a2e7c389d4195d010ba0c207a1e981a58">Swap</a> (T &amp;ref_f1, T &amp;ref_f2)</td></tr>
<tr class="memdesc:a2e7c389d4195d010ba0c207a1e981a58"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the values in the two variables f1 and f2. <br /></td></tr>
<tr class="separator:a2e7c389d4195d010ba0c207a1e981a58"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af91f22a14862accf565f49eecc57cc3c"><td class="memTemplParams" colspan="2"><a id="af91f22a14862accf565f49eecc57cc3c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:af91f22a14862accf565f49eecc57cc3c"><td class="memTemplItemLeft" align="right" valign="top">XII_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#af91f22a14862accf565f49eecc57cc3c">Lerp</a> (T f1, T f2, float fFactor)</td></tr>
<tr class="memdesc:af91f22a14862accf565f49eecc57cc3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:af91f22a14862accf565f49eecc57cc3c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01cb6659a25c52956d9b07fa8c702c1e"><td class="memTemplParams" colspan="2"><a id="a01cb6659a25c52956d9b07fa8c702c1e"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a01cb6659a25c52956d9b07fa8c702c1e"><td class="memTemplItemLeft" align="right" valign="top">XII_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a01cb6659a25c52956d9b07fa8c702c1e">Lerp</a> (T f1, T f2, double fFactor)</td></tr>
<tr class="memdesc:a01cb6659a25c52956d9b07fa8c702c1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a01cb6659a25c52956d9b07fa8c702c1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a36d95d7071a4d5d2cf2f71cd01fb9701"><td class="memTemplParams" colspan="2"><a id="a36d95d7071a4d5d2cf2f71cd01fb9701"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a36d95d7071a4d5d2cf2f71cd01fb9701"><td class="memTemplItemLeft" align="right" valign="top">constexpr XII_FORCE_INLINE T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a36d95d7071a4d5d2cf2f71cd01fb9701">Step</a> (T value, T edge)</td></tr>
<tr class="memdesc:a36d95d7071a4d5d2cf2f71cd01fb9701"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value &lt; edge, and 1, if value &gt;= edge. <br /></td></tr>
<tr class="separator:a36d95d7071a4d5d2cf2f71cd01fb9701"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a12b773e8c11bb90d8edc742cdad5d2f1"><td class="memItemLeft" align="right" valign="top"><a id="a12b773e8c11bb90d8edc742cdad5d2f1"></a>
constexpr XII_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a12b773e8c11bb90d8edc742cdad5d2f1">IsPowerOf2</a> (xiiInt32 value)</td></tr>
<tr class="memdesc:a12b773e8c11bb90d8edc742cdad5d2f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:a12b773e8c11bb90d8edc742cdad5d2f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ace5369265d15d40a30539f64ec675fc4"><td class="memItemLeft" align="right" valign="top"><a id="ace5369265d15d40a30539f64ec675fc4"></a>
constexpr XII_FORCE_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ace5369265d15d40a30539f64ec675fc4">IsPowerOf2</a> (xiiUInt32 value)</td></tr>
<tr class="memdesc:ace5369265d15d40a30539f64ec675fc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with 2^x == value. <br /></td></tr>
<tr class="separator:ace5369265d15d40a30539f64ec675fc4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20047812a62c07b9ac2144a5520c18f0"><td class="memTemplParams" colspan="2"><a id="a20047812a62c07b9ac2144a5520c18f0"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a20047812a62c07b9ac2144a5520c18f0"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a20047812a62c07b9ac2144a5520c18f0">IsEqual</a> (Type lhs, Type rhs, Type fEpsilon)</td></tr>
<tr class="memdesc:a20047812a62c07b9ac2144a5520c18f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks, whether fValue is in the range [fDesired - fMaxImprecision; fDesired + fMaxImprecision]. <br /></td></tr>
<tr class="separator:a20047812a62c07b9ac2144a5520c18f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d8e4353645b9c233b3a359e1e45b7fa"><td class="memTemplParams" colspan="2"><a id="a9d8e4353645b9c233b3a359e1e45b7fa"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a9d8e4353645b9c233b3a359e1e45b7fa"><td class="memTemplItemLeft" align="right" valign="top">constexpr bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a9d8e4353645b9c233b3a359e1e45b7fa">IsInRange</a> (T value, T minVal, T maxVal)</td></tr>
<tr class="memdesc:a9d8e4353645b9c233b3a359e1e45b7fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the value of the first parameter lies between the value of the second and third. <br /></td></tr>
<tr class="separator:a9d8e4353645b9c233b3a359e1e45b7fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a76f446939ad58af387fb79b8fd9deff7"><td class="memTemplParams" colspan="2"><a id="a76f446939ad58af387fb79b8fd9deff7"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a76f446939ad58af387fb79b8fd9deff7"><td class="memTemplItemLeft" align="right" valign="top">bool&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a76f446939ad58af387fb79b8fd9deff7">IsZero</a> (Type f, Type fEpsilon)</td></tr>
<tr class="memdesc:a76f446939ad58af387fb79b8fd9deff7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given number is close to zero. <br /></td></tr>
<tr class="separator:a76f446939ad58af387fb79b8fd9deff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0e5bf7b2d32e5ea41f69e6f70b60aaf"><td class="memTemplParams" colspan="2"><a id="ac0e5bf7b2d32e5ea41f69e6f70b60aaf"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ac0e5bf7b2d32e5ea41f69e6f70b60aaf"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ac0e5bf7b2d32e5ea41f69e6f70b60aaf">Trunc</a> (Type f)</td></tr>
<tr class="memdesc:ac0e5bf7b2d32e5ea41f69e6f70b60aaf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integer-part of f (removes the fraction). <br /></td></tr>
<tr class="separator:ac0e5bf7b2d32e5ea41f69e6f70b60aaf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa61976adbc40a0c6c6c08a5471bfaa27"><td class="memTemplParams" colspan="2"><a id="aa61976adbc40a0c6c6c08a5471bfaa27"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:aa61976adbc40a0c6c6c08a5471bfaa27"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa61976adbc40a0c6c6c08a5471bfaa27">Fraction</a> (Type f)</td></tr>
<tr class="memdesc:aa61976adbc40a0c6c6c08a5471bfaa27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the fraction-part of f. <br /></td></tr>
<tr class="separator:aa61976adbc40a0c6c6c08a5471bfaa27"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adce079021459012fbdf663d1a2009ed1"><td class="memTemplParams" colspan="2"><a id="adce079021459012fbdf663d1a2009ed1"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:adce079021459012fbdf663d1a2009ed1"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#adce079021459012fbdf663d1a2009ed1">SmoothStep</a> (Type value, Type edge1, Type edge2)</td></tr>
<tr class="memdesc:adce079021459012fbdf663d1a2009ed1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value is &lt;= edge1, 1 if value &gt;= edge2 and the hermite interpolation in between. <br /></td></tr>
<tr class="separator:adce079021459012fbdf663d1a2009ed1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:accfb14d3b4cfef8b668d35652167d670"><td class="memItemLeft" align="right" valign="top"><a id="accfb14d3b4cfef8b668d35652167d670"></a>
xiiUInt8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#accfb14d3b4cfef8b668d35652167d670">ColorFloatToByte</a> (float value)</td></tr>
<tr class="memdesc:accfb14d3b4cfef8b668d35652167d670"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned byte [0;255] range, with proper rounding. <br /></td></tr>
<tr class="separator:accfb14d3b4cfef8b668d35652167d670"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a347920d33052bd432a27837aaa57d31e"><td class="memItemLeft" align="right" valign="top"><a id="a347920d33052bd432a27837aaa57d31e"></a>
xiiUInt16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a347920d33052bd432a27837aaa57d31e">ColorFloatToShort</a> (float value)</td></tr>
<tr class="memdesc:a347920d33052bd432a27837aaa57d31e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [0;1] range to unsigned short [0;65535] range, with proper rounding. <br /></td></tr>
<tr class="separator:a347920d33052bd432a27837aaa57d31e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbcde3de4c46690f6190ea205350f330"><td class="memItemLeft" align="right" valign="top"><a id="afbcde3de4c46690f6190ea205350f330"></a>
xiiInt8&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#afbcde3de4c46690f6190ea205350f330">ColorFloatToSignedByte</a> (float value)</td></tr>
<tr class="memdesc:afbcde3de4c46690f6190ea205350f330"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [-1;1] range to signed byte [-127;127] range, with proper rounding. <br /></td></tr>
<tr class="separator:afbcde3de4c46690f6190ea205350f330"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a119567a6318a549fb6dbfc9d69728357"><td class="memItemLeft" align="right" valign="top"><a id="a119567a6318a549fb6dbfc9d69728357"></a>
xiiInt16&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a119567a6318a549fb6dbfc9d69728357">ColorFloatToSignedShort</a> (float value)</td></tr>
<tr class="memdesc:a119567a6318a549fb6dbfc9d69728357"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from float [-1;1] range to signed short [-32767;32767] range, with proper rounding. <br /></td></tr>
<tr class="separator:a119567a6318a549fb6dbfc9d69728357"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac666dff9914329047f7230e7e6ae5799"><td class="memItemLeft" align="right" valign="top"><a id="ac666dff9914329047f7230e7e6ae5799"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ac666dff9914329047f7230e7e6ae5799">ColorByteToFloat</a> (xiiUInt8 value)</td></tr>
<tr class="memdesc:ac666dff9914329047f7230e7e6ae5799"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from unsigned byte [0;255] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:ac666dff9914329047f7230e7e6ae5799"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a334b3a68446876e27afe013ed282d8c7"><td class="memItemLeft" align="right" valign="top"><a id="a334b3a68446876e27afe013ed282d8c7"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a334b3a68446876e27afe013ed282d8c7">ColorShortToFloat</a> (xiiUInt16 value)</td></tr>
<tr class="memdesc:a334b3a68446876e27afe013ed282d8c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from unsigned short [0;65535] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a334b3a68446876e27afe013ed282d8c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ee19ec7d73ea794022c681471cba4b9"><td class="memItemLeft" align="right" valign="top"><a id="a8ee19ec7d73ea794022c681471cba4b9"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a8ee19ec7d73ea794022c681471cba4b9">ColorSignedByteToFloat</a> (xiiInt8 value)</td></tr>
<tr class="memdesc:a8ee19ec7d73ea794022c681471cba4b9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from signed byte [-128;127] range to float [-1;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a8ee19ec7d73ea794022c681471cba4b9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38ae268f3e8e7fd096be36470411d97b"><td class="memItemLeft" align="right" valign="top"><a id="a38ae268f3e8e7fd096be36470411d97b"></a>
constexpr float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a38ae268f3e8e7fd096be36470411d97b">ColorSignedShortToFloat</a> (xiiInt16 value)</td></tr>
<tr class="memdesc:a38ae268f3e8e7fd096be36470411d97b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Converts a color value from signed short [-32768;32767] range to float [0;1] range, with proper rounding. <br /></td></tr>
<tr class="separator:a38ae268f3e8e7fd096be36470411d97b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adad8031fab3d7bf2f0dc6ea50ed823b2"><td class="memTemplParams" colspan="2"><a id="adad8031fab3d7bf2f0dc6ea50ed823b2"></a>
template&lt;typename T , typename T2 &gt; </td></tr>
<tr class="memitem:adad8031fab3d7bf2f0dc6ea50ed823b2"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#adad8031fab3d7bf2f0dc6ea50ed823b2">EvaluateBezierCurve</a> (T2 t, const T &amp;startPoint, const T &amp;controlPoint1, const T &amp;controlPoint2, const T &amp;endPoint)</td></tr>
<tr class="memdesc:adad8031fab3d7bf2f0dc6ea50ed823b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Evaluates the cubic spline defined by four control points at time <em>t</em> and returns the interpolated result. Can be used with T as float, vec2, vec3 or vec4. <br /></td></tr>
<tr class="separator:adad8031fab3d7bf2f0dc6ea50ed823b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1efc921d5712c92bc4b62f30bfb36605"><td class="memItemLeft" align="right" valign="top"><a id="a1efc921d5712c92bc4b62f30bfb36605"></a>
XII_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFinite</b> (double value)</td></tr>
<tr class="separator:a1efc921d5712c92bc4b62f30bfb36605"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acabab3a8d167e9a316503dac1f4613ff"><td class="memItemLeft" align="right" valign="top"><a id="acabab3a8d167e9a316503dac1f4613ff"></a>
XII_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> (double value)</td></tr>
<tr class="separator:acabab3a8d167e9a316503dac1f4613ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6842f0ad7ab4a71e50cc9b7944f45a1"><td class="memItemLeft" align="right" valign="top"><a id="ad6842f0ad7ab4a71e50cc9b7944f45a1"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ad6842f0ad7ab4a71e50cc9b7944f45a1">Floor</a> (double f)</td></tr>
<tr class="memdesc:ad6842f0ad7ab4a71e50cc9b7944f45a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative. <br /></td></tr>
<tr class="separator:ad6842f0ad7ab4a71e50cc9b7944f45a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa43339fe6b184ea3acef846dc90f6147"><td class="memItemLeft" align="right" valign="top"><a id="aa43339fe6b184ea3acef846dc90f6147"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa43339fe6b184ea3acef846dc90f6147">Ceil</a> (double f)</td></tr>
<tr class="memdesc:aa43339fe6b184ea3acef846dc90f6147"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative. <br /></td></tr>
<tr class="separator:aa43339fe6b184ea3acef846dc90f6147"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a575d6ad80be9c4332a8c3fbf01ff8963"><td class="memItemLeft" align="right" valign="top">XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a575d6ad80be9c4332a8c3fbf01ff8963">Round</a> (double f)</td></tr>
<tr class="memdesc:a575d6ad80be9c4332a8c3fbf01ff8963"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <a href="../../d1/d37/namespacexii_math.htm#a575d6ad80be9c4332a8c3fbf01ff8963">More...</a><br /></td></tr>
<tr class="separator:a575d6ad80be9c4332a8c3fbf01ff8963"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9887884d637a3a00c63f02585a5e8f2"><td class="memItemLeft" align="right" valign="top"><a id="aa9887884d637a3a00c63f02585a5e8f2"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa9887884d637a3a00c63f02585a5e8f2">RoundDown</a> (double f, double fMultiple)</td></tr>
<tr class="memdesc:aa9887884d637a3a00c63f02585a5e8f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is smaller than f. <br /></td></tr>
<tr class="separator:aa9887884d637a3a00c63f02585a5e8f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac1f5594619b1d549e6994c8c2a75e339"><td class="memItemLeft" align="right" valign="top"><a id="ac1f5594619b1d549e6994c8c2a75e339"></a>
double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ac1f5594619b1d549e6994c8c2a75e339">RoundUp</a> (double f, double fMultiple)</td></tr>
<tr class="memdesc:ac1f5594619b1d549e6994c8c2a75e339"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is larger than f. <br /></td></tr>
<tr class="separator:ac1f5594619b1d549e6994c8c2a75e339"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96a60a560ee21d2e07b955f6fa928b86"><td class="memItemLeft" align="right" valign="top"><a id="a96a60a560ee21d2e07b955f6fa928b86"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a96a60a560ee21d2e07b955f6fa928b86"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Sin</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; double &gt; a)</td></tr>
<tr class="separator:a96a60a560ee21d2e07b955f6fa928b86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09693bcee091d4d6c80d8ff82d487f59"><td class="memItemLeft" align="right" valign="top"><a id="a09693bcee091d4d6c80d8ff82d487f59"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a09693bcee091d4d6c80d8ff82d487f59"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Cos</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; double &gt; a)</td></tr>
<tr class="separator:a09693bcee091d4d6c80d8ff82d487f59"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5ef688d77560b244c4fad4ee71a1267d"><td class="memItemLeft" align="right" valign="top"><a id="a5ef688d77560b244c4fad4ee71a1267d"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a5ef688d77560b244c4fad4ee71a1267d"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE double&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Tan</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; double &gt; a)</td></tr>
<tr class="separator:a5ef688d77560b244c4fad4ee71a1267d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9500c53fbbe067c63187fa79829cb493"><td class="memItemLeft" align="right" valign="top"><a id="a9500c53fbbe067c63187fa79829cb493"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a9500c53fbbe067c63187fa79829cb493"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; double &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ASin</b> (double f)</td></tr>
<tr class="separator:a9500c53fbbe067c63187fa79829cb493"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1314d8087a63c0c90c723d2e7afb9962"><td class="memItemLeft" align="right" valign="top"><a id="a1314d8087a63c0c90c723d2e7afb9962"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a1314d8087a63c0c90c723d2e7afb9962"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; double &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ACos</b> (double f)</td></tr>
<tr class="separator:a1314d8087a63c0c90c723d2e7afb9962"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6ca68e1348f20b38ee180331aaf4ba41"><td class="memItemLeft" align="right" valign="top"><a id="a6ca68e1348f20b38ee180331aaf4ba41"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a6ca68e1348f20b38ee180331aaf4ba41"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; double &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ATan</b> (double f)</td></tr>
<tr class="separator:a6ca68e1348f20b38ee180331aaf4ba41"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac73cf028d582b21992cdaae992f0f688"><td class="memItemLeft" align="right" valign="top"><a id="ac73cf028d582b21992cdaae992f0f688"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ac73cf028d582b21992cdaae992f0f688"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; double &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ATan2</b> (double y, double x)</td></tr>
<tr class="separator:ac73cf028d582b21992cdaae992f0f688"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae278f1b8110a2681d98f893a3ffb9ba3"><td class="memItemLeft" align="right" valign="top"><a id="ae278f1b8110a2681d98f893a3ffb9ba3"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ae278f1b8110a2681d98f893a3ffb9ba3">RoundToMultiple</a> (double f, double fMultiple)</td></tr>
<tr class="memdesc:ae278f1b8110a2681d98f893a3ffb9ba3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the closest value of multiple. <br /></td></tr>
<tr class="separator:ae278f1b8110a2681d98f893a3ffb9ba3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab684aa20e24430d2aef52d6841b55bc5"><td class="memItemLeft" align="right" valign="top"><a id="ab684aa20e24430d2aef52d6841b55bc5"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ab684aa20e24430d2aef52d6841b55bc5">Exp</a> (double f)</td></tr>
<tr class="memdesc:ab684aa20e24430d2aef52d6841b55bc5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns e^f. <br /></td></tr>
<tr class="separator:ab684aa20e24430d2aef52d6841b55bc5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acb375ac58ec69f434821af84df757ca8"><td class="memItemLeft" align="right" valign="top"><a id="acb375ac58ec69f434821af84df757ca8"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#acb375ac58ec69f434821af84df757ca8">Ln</a> (double f)</td></tr>
<tr class="memdesc:acb375ac58ec69f434821af84df757ca8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the logarithmus naturalis of f. <br /></td></tr>
<tr class="separator:acb375ac58ec69f434821af84df757ca8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e73f7d8c49b8e6dc283af0d21ed66d5"><td class="memItemLeft" align="right" valign="top"><a id="a5e73f7d8c49b8e6dc283af0d21ed66d5"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5e73f7d8c49b8e6dc283af0d21ed66d5">Log2</a> (double f)</td></tr>
<tr class="memdesc:a5e73f7d8c49b8e6dc283af0d21ed66d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 2. <br /></td></tr>
<tr class="separator:a5e73f7d8c49b8e6dc283af0d21ed66d5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad6b49aac4177ab42c2ad0e59a58bf637"><td class="memItemLeft" align="right" valign="top"><a id="ad6b49aac4177ab42c2ad0e59a58bf637"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ad6b49aac4177ab42c2ad0e59a58bf637">Log10</a> (double f)</td></tr>
<tr class="memdesc:ad6b49aac4177ab42c2ad0e59a58bf637"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 10. <br /></td></tr>
<tr class="separator:ad6b49aac4177ab42c2ad0e59a58bf637"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af2d9a82687cc08d8e52b1cfa92e97899"><td class="memItemLeft" align="right" valign="top"><a id="af2d9a82687cc08d8e52b1cfa92e97899"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#af2d9a82687cc08d8e52b1cfa92e97899">Log</a> (double fBase, double f)</td></tr>
<tr class="memdesc:af2d9a82687cc08d8e52b1cfa92e97899"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base fBase. <br /></td></tr>
<tr class="separator:af2d9a82687cc08d8e52b1cfa92e97899"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a09df335eb258cf1ed2260e20b1e7f259"><td class="memItemLeft" align="right" valign="top"><a id="a09df335eb258cf1ed2260e20b1e7f259"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a09df335eb258cf1ed2260e20b1e7f259">Pow2</a> (double f)</td></tr>
<tr class="memdesc:a09df335eb258cf1ed2260e20b1e7f259"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:a09df335eb258cf1ed2260e20b1e7f259"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:affaa843501c52942ae9074d478cd48cf"><td class="memItemLeft" align="right" valign="top"><a id="affaa843501c52942ae9074d478cd48cf"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#affaa843501c52942ae9074d478cd48cf">Pow</a> (double fBase, double fExp)</td></tr>
<tr class="memdesc:affaa843501c52942ae9074d478cd48cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:affaa843501c52942ae9074d478cd48cf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a64dcfd48dabc39310e9e4c9d71c4f6ca"><td class="memItemLeft" align="right" valign="top"><a id="a64dcfd48dabc39310e9e4c9d71c4f6ca"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><b>Root</b> (double f, double fNthRoot)</td></tr>
<tr class="separator:a64dcfd48dabc39310e9e4c9d71c4f6ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae7fbda648b6f9bcc4dc23962d06c93f4"><td class="memItemLeft" align="right" valign="top"><a id="ae7fbda648b6f9bcc4dc23962d06c93f4"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ae7fbda648b6f9bcc4dc23962d06c93f4">Sqrt</a> (double f)</td></tr>
<tr class="memdesc:ae7fbda648b6f9bcc4dc23962d06c93f4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the square root of f. <br /></td></tr>
<tr class="separator:ae7fbda648b6f9bcc4dc23962d06c93f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa2c31f2d1c2a6d67a3ba78cf4b38097c"><td class="memItemLeft" align="right" valign="top"><a id="aa2c31f2d1c2a6d67a3ba78cf4b38097c"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa2c31f2d1c2a6d67a3ba78cf4b38097c">Mod</a> (double f, double fDiv)</td></tr>
<tr class="memdesc:aa2c31f2d1c2a6d67a3ba78cf4b38097c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns "value mod div" for doubles. This also works with negative numbers, both for value and for div. <br /></td></tr>
<tr class="separator:aa2c31f2d1c2a6d67a3ba78cf4b38097c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e63ed2ebc617c166a6c427dce01a096"><td class="memItemLeft" align="right" valign="top"><a id="a6e63ed2ebc617c166a6c427dce01a096"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a6e63ed2ebc617c166a6c427dce01a096">Hypot</a> (double x, double y)</td></tr>
<tr class="memdesc:a6e63ed2ebc617c166a6c427dce01a096"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the hypotenuse of a given x and y term. <br /></td></tr>
<tr class="separator:a6e63ed2ebc617c166a6c427dce01a096"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa0e687884e02074cf3aa665f0c9eb917"><td class="memItemLeft" align="right" valign="top"><a id="aa0e687884e02074cf3aa665f0c9eb917"></a>
XII_ALWAYS_INLINE double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa0e687884e02074cf3aa665f0c9eb917">NormalizeToRange</a> (double value, double fMin, double fMax)</td></tr>
<tr class="memdesc:aa0e687884e02074cf3aa665f0c9eb917"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a value between 0 and 1, given the precondition that the value is between the min and the max. 0 means value = min and 1 means value = max. <br /></td></tr>
<tr class="separator:aa0e687884e02074cf3aa665f0c9eb917"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab293aa88c5333b5da8c78d14e73babec"><td class="memItemLeft" align="right" valign="top"><a id="ab293aa88c5333b5da8c78d14e73babec"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:ab293aa88c5333b5da8c78d14e73babec"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Sin</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; float &gt; a)</td></tr>
<tr class="separator:ab293aa88c5333b5da8c78d14e73babec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a40147f39117f826acf8cbec02da04569"><td class="memItemLeft" align="right" valign="top"><a id="a40147f39117f826acf8cbec02da04569"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a40147f39117f826acf8cbec02da04569"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Cos</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; float &gt; a)</td></tr>
<tr class="separator:a40147f39117f826acf8cbec02da04569"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bafc1a3582317bdc58a5eaf28744c4f"><td class="memItemLeft" align="right" valign="top"><a id="a1bafc1a3582317bdc58a5eaf28744c4f"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a1bafc1a3582317bdc58a5eaf28744c4f"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE float&#160;</td><td class="memTemplItemRight" valign="bottom"><b>Tan</b> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; float &gt; a)</td></tr>
<tr class="separator:a1bafc1a3582317bdc58a5eaf28744c4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a097b58bbddd3d88027a5f9d5002cfc35"><td class="memItemLeft" align="right" valign="top"><a id="a097b58bbddd3d88027a5f9d5002cfc35"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a097b58bbddd3d88027a5f9d5002cfc35"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; float &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ASin</b> (float f)</td></tr>
<tr class="separator:a097b58bbddd3d88027a5f9d5002cfc35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83757b3fa14716a32c6705cb57cee282"><td class="memItemLeft" align="right" valign="top"><a id="a83757b3fa14716a32c6705cb57cee282"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a83757b3fa14716a32c6705cb57cee282"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; float &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ACos</b> (float f)</td></tr>
<tr class="separator:a83757b3fa14716a32c6705cb57cee282"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9548ea1661f3b42642b8c363943b2924"><td class="memItemLeft" align="right" valign="top"><a id="a9548ea1661f3b42642b8c363943b2924"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a9548ea1661f3b42642b8c363943b2924"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; float &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ATan</b> (float f)</td></tr>
<tr class="separator:a9548ea1661f3b42642b8c363943b2924"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a158c8cadea1893a6dcc5809c7308c07f"><td class="memItemLeft" align="right" valign="top"><a id="a158c8cadea1893a6dcc5809c7308c07f"></a>
template&lt;&gt; </td></tr>
<tr class="memitem:a158c8cadea1893a6dcc5809c7308c07f"><td class="memTemplItemLeft" align="right" valign="top">XII_ALWAYS_INLINE <a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; float &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><b>ATan2</b> (float y, float x)</td></tr>
<tr class="separator:a158c8cadea1893a6dcc5809c7308c07f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0283569b9550cced30517eedc5c6ad01"><td class="memItemLeft" align="right" valign="top"><a id="a0283569b9550cced30517eedc5c6ad01"></a>
XII_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsFinite</b> (float value)</td></tr>
<tr class="separator:a0283569b9550cced30517eedc5c6ad01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a849e63f566a80abae6753ca362f4e466"><td class="memItemLeft" align="right" valign="top"><a id="a849e63f566a80abae6753ca362f4e466"></a>
XII_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> (float value)</td></tr>
<tr class="separator:a849e63f566a80abae6753ca362f4e466"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35e45d754ffff2c112f2b7c378b579bd"><td class="memItemLeft" align="right" valign="top"><a id="a35e45d754ffff2c112f2b7c378b579bd"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a35e45d754ffff2c112f2b7c378b579bd">Floor</a> (float f)</td></tr>
<tr class="memdesc:a35e45d754ffff2c112f2b7c378b579bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative. <br /></td></tr>
<tr class="separator:a35e45d754ffff2c112f2b7c378b579bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac8300a4be1ca71f931f28abb2b443ad8"><td class="memItemLeft" align="right" valign="top"><a id="ac8300a4be1ca71f931f28abb2b443ad8"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ac8300a4be1ca71f931f28abb2b443ad8">Ceil</a> (float f)</td></tr>
<tr class="memdesc:ac8300a4be1ca71f931f28abb2b443ad8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative. <br /></td></tr>
<tr class="separator:ac8300a4be1ca71f931f28abb2b443ad8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae1c8197fa3a7a5e8b463438018b101e"><td class="memItemLeft" align="right" valign="top">XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aae1c8197fa3a7a5e8b463438018b101e">Round</a> (float f)</td></tr>
<tr class="memdesc:aae1c8197fa3a7a5e8b463438018b101e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the next integer.  <a href="../../d1/d37/namespacexii_math.htm#aae1c8197fa3a7a5e8b463438018b101e">More...</a><br /></td></tr>
<tr class="separator:aae1c8197fa3a7a5e8b463438018b101e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac3249fc72a7862de21ec0b078ada3a1e"><td class="memItemLeft" align="right" valign="top"><a id="ac3249fc72a7862de21ec0b078ada3a1e"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ac3249fc72a7862de21ec0b078ada3a1e">RoundToMultiple</a> (float f, float fMultiple)</td></tr>
<tr class="memdesc:ac3249fc72a7862de21ec0b078ada3a1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rounds f to the closest value of multiple. <br /></td></tr>
<tr class="separator:ac3249fc72a7862de21ec0b078ada3a1e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5331851cefdb12f8895d1da85a10d021"><td class="memItemLeft" align="right" valign="top"><a id="a5331851cefdb12f8895d1da85a10d021"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5331851cefdb12f8895d1da85a10d021">RoundDown</a> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a5331851cefdb12f8895d1da85a10d021"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is smaller than f. <br /></td></tr>
<tr class="separator:a5331851cefdb12f8895d1da85a10d021"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5acd12a774badc8215636546948842f0"><td class="memItemLeft" align="right" valign="top"><a id="a5acd12a774badc8215636546948842f0"></a>
float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5acd12a774badc8215636546948842f0">RoundUp</a> (float f, float fMultiple)</td></tr>
<tr class="memdesc:a5acd12a774badc8215636546948842f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of fMultiple that is larger than f. <br /></td></tr>
<tr class="separator:a5acd12a774badc8215636546948842f0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb4eca14f623594f50349a229c2f47fc"><td class="memItemLeft" align="right" valign="top"><a id="afb4eca14f623594f50349a229c2f47fc"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#afb4eca14f623594f50349a229c2f47fc">Exp</a> (float f)</td></tr>
<tr class="memdesc:afb4eca14f623594f50349a229c2f47fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns e^f. <br /></td></tr>
<tr class="separator:afb4eca14f623594f50349a229c2f47fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4130449127ec5d43243401c7d06453c"><td class="memItemLeft" align="right" valign="top"><a id="ad4130449127ec5d43243401c7d06453c"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ad4130449127ec5d43243401c7d06453c">Ln</a> (float f)</td></tr>
<tr class="memdesc:ad4130449127ec5d43243401c7d06453c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the logarithmus naturalis of f. <br /></td></tr>
<tr class="separator:ad4130449127ec5d43243401c7d06453c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01849a0257a9035a3725774c7afa03a4"><td class="memItemLeft" align="right" valign="top"><a id="a01849a0257a9035a3725774c7afa03a4"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a01849a0257a9035a3725774c7afa03a4">Log2</a> (float f)</td></tr>
<tr class="memdesc:a01849a0257a9035a3725774c7afa03a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 2. <br /></td></tr>
<tr class="separator:a01849a0257a9035a3725774c7afa03a4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade267e9fe9e9039520d319cec2fed66f"><td class="memItemLeft" align="right" valign="top"><a id="ade267e9fe9e9039520d319cec2fed66f"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ade267e9fe9e9039520d319cec2fed66f">Log10</a> (float f)</td></tr>
<tr class="memdesc:ade267e9fe9e9039520d319cec2fed66f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base 10. <br /></td></tr>
<tr class="separator:ade267e9fe9e9039520d319cec2fed66f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7d771abb8961aa90c2ec7bd47ed7229d"><td class="memItemLeft" align="right" valign="top"><a id="a7d771abb8961aa90c2ec7bd47ed7229d"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a7d771abb8961aa90c2ec7bd47ed7229d">Log</a> (float fBase, float f)</td></tr>
<tr class="memdesc:a7d771abb8961aa90c2ec7bd47ed7229d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns log (f), to the base fBase. <br /></td></tr>
<tr class="separator:a7d771abb8961aa90c2ec7bd47ed7229d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5547623483a89ab31a1ff87562935c01"><td class="memItemLeft" align="right" valign="top"><a id="a5547623483a89ab31a1ff87562935c01"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5547623483a89ab31a1ff87562935c01">Pow2</a> (float f)</td></tr>
<tr class="memdesc:a5547623483a89ab31a1ff87562935c01"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:a5547623483a89ab31a1ff87562935c01"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a7e63b3dc135723755a93ec967b7d7d"><td class="memItemLeft" align="right" valign="top"><a id="a5a7e63b3dc135723755a93ec967b7d7d"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5a7e63b3dc135723755a93ec967b7d7d">Pow</a> (float fBase, float fExp)</td></tr>
<tr class="memdesc:a5a7e63b3dc135723755a93ec967b7d7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:a5a7e63b3dc135723755a93ec967b7d7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90aa866a7bd8d00fabfdb51cc2b5e050"><td class="memItemLeft" align="right" valign="top"><a id="a90aa866a7bd8d00fabfdb51cc2b5e050"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a90aa866a7bd8d00fabfdb51cc2b5e050">Root</a> (float f, float fNthRoot)</td></tr>
<tr class="memdesc:a90aa866a7bd8d00fabfdb51cc2b5e050"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the n-th root of f. <br /></td></tr>
<tr class="separator:a90aa866a7bd8d00fabfdb51cc2b5e050"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a2c29c8f32c1e50eb66775a81372d7b"><td class="memItemLeft" align="right" valign="top"><a id="a2a2c29c8f32c1e50eb66775a81372d7b"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a2a2c29c8f32c1e50eb66775a81372d7b">Sqrt</a> (float f)</td></tr>
<tr class="memdesc:a2a2c29c8f32c1e50eb66775a81372d7b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the square root of f. <br /></td></tr>
<tr class="separator:a2a2c29c8f32c1e50eb66775a81372d7b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38c2741218a08e2b2d5d08ff47b6ecf6"><td class="memItemLeft" align="right" valign="top"><a id="a38c2741218a08e2b2d5d08ff47b6ecf6"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a38c2741218a08e2b2d5d08ff47b6ecf6">Mod</a> (float value, float fDiv)</td></tr>
<tr class="memdesc:a38c2741218a08e2b2d5d08ff47b6ecf6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns "value mod div" for floats. This also works with negative numbers, both for value and for div. <br /></td></tr>
<tr class="separator:a38c2741218a08e2b2d5d08ff47b6ecf6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0c9b1ed4fce57cc1957e2a66ccf14b7"><td class="memItemLeft" align="right" valign="top"><a id="ab0c9b1ed4fce57cc1957e2a66ccf14b7"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ab0c9b1ed4fce57cc1957e2a66ccf14b7">Hypot</a> (float x, float y)</td></tr>
<tr class="memdesc:ab0c9b1ed4fce57cc1957e2a66ccf14b7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the hypotenuse of a given x and y term. <br /></td></tr>
<tr class="separator:ab0c9b1ed4fce57cc1957e2a66ccf14b7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aabbf9dcd776cbae82224f51a8d55c211"><td class="memItemLeft" align="right" valign="top"><a id="aabbf9dcd776cbae82224f51a8d55c211"></a>
XII_ALWAYS_INLINE float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aabbf9dcd776cbae82224f51a8d55c211">NormalizeToRange</a> (float value, float fMin, float fMax)</td></tr>
<tr class="memdesc:aabbf9dcd776cbae82224f51a8d55c211"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates a value between 0 and 1, given the precondition that the value is between the min and the max. 0 means value = min and 1 means value = max. <br /></td></tr>
<tr class="separator:aabbf9dcd776cbae82224f51a8d55c211"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aed3e7976aa397630f394391f3a65c819"><td class="memItemLeft" align="right" valign="top"><a id="aed3e7976aa397630f394391f3a65c819"></a>
constexpr XII_ALWAYS_INLINE xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aed3e7976aa397630f394391f3a65c819">RoundUp</a> (xiiInt32 value, xiiUInt16 uiMultiple)</td></tr>
<tr class="memdesc:aed3e7976aa397630f394391f3a65c819"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is larger than or equal to value. <br /></td></tr>
<tr class="separator:aed3e7976aa397630f394391f3a65c819"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a745776b77234f441aefb1f7a4d105fc7"><td class="memItemLeft" align="right" valign="top"><a id="a745776b77234f441aefb1f7a4d105fc7"></a>
constexpr XII_ALWAYS_INLINE xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a745776b77234f441aefb1f7a4d105fc7">RoundDown</a> (xiiInt32 value, xiiUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a745776b77234f441aefb1f7a4d105fc7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is smaller than or equal to value. <br /></td></tr>
<tr class="separator:a745776b77234f441aefb1f7a4d105fc7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf6a99b25c756191af9eeb50281d5c8d"><td class="memItemLeft" align="right" valign="top"><a id="aaf6a99b25c756191af9eeb50281d5c8d"></a>
constexpr XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aaf6a99b25c756191af9eeb50281d5c8d">RoundUp</a> (xiiUInt32 value, xiiUInt16 uiMultiple)</td></tr>
<tr class="memdesc:aaf6a99b25c756191af9eeb50281d5c8d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is greater than or equal to value. <br /></td></tr>
<tr class="separator:aaf6a99b25c756191af9eeb50281d5c8d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1b75751c2f1b47f5028bf1dbdb433e1a"><td class="memItemLeft" align="right" valign="top"><a id="a1b75751c2f1b47f5028bf1dbdb433e1a"></a>
constexpr XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a1b75751c2f1b47f5028bf1dbdb433e1a">RoundDown</a> (xiiUInt32 value, xiiUInt16 uiMultiple)</td></tr>
<tr class="memdesc:a1b75751c2f1b47f5028bf1dbdb433e1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a multiple of the given multiple that is smaller than or equal to value. <br /></td></tr>
<tr class="separator:a1b75751c2f1b47f5028bf1dbdb433e1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e395e60cd580e5b5b0b70c0cd2aee29"><td class="memItemLeft" align="right" valign="top"><a id="a1e395e60cd580e5b5b0b70c0cd2aee29"></a>
constexpr XII_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a1e395e60cd580e5b5b0b70c0cd2aee29">IsOdd</a> (xiiInt32 i)</td></tr>
<tr class="memdesc:a1e395e60cd580e5b5b0b70c0cd2aee29"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if i is an odd number. <br /></td></tr>
<tr class="separator:a1e395e60cd580e5b5b0b70c0cd2aee29"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad047c18fb9a65f92db2bd48100cfc926"><td class="memItemLeft" align="right" valign="top"><a id="ad047c18fb9a65f92db2bd48100cfc926"></a>
constexpr XII_ALWAYS_INLINE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ad047c18fb9a65f92db2bd48100cfc926">IsEven</a> (xiiInt32 i)</td></tr>
<tr class="memdesc:ad047c18fb9a65f92db2bd48100cfc926"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if i is an even number. <br /></td></tr>
<tr class="separator:ad047c18fb9a65f92db2bd48100cfc926"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aae654100da810abeac0d11e755a66d15"><td class="memItemLeft" align="right" valign="top"><a id="aae654100da810abeac0d11e755a66d15"></a>
XII_ALWAYS_INLINE xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aae654100da810abeac0d11e755a66d15">Log2i</a> (xiiUInt32 uiVal)</td></tr>
<tr class="memdesc:aae654100da810abeac0d11e755a66d15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integral logarithm to the base 2, that comes closest to the given integer. <br /></td></tr>
<tr class="separator:aae654100da810abeac0d11e755a66d15"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af230916c7860e92ed9076dd13f5c334a"><td class="memItemLeft" align="right" valign="top"><a id="af230916c7860e92ed9076dd13f5c334a"></a>
constexpr XII_ALWAYS_INLINE xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#af230916c7860e92ed9076dd13f5c334a">Pow2</a> (xiiInt32 i)</td></tr>
<tr class="memdesc:af230916c7860e92ed9076dd13f5c334a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 2^f. <br /></td></tr>
<tr class="separator:af230916c7860e92ed9076dd13f5c334a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5487ef469f7a95de54b82b19852a47ca"><td class="memItemLeft" align="right" valign="top"><a id="a5487ef469f7a95de54b82b19852a47ca"></a>
xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5487ef469f7a95de54b82b19852a47ca">Pow</a> (xiiInt32 iBase, xiiInt32 iExp)</td></tr>
<tr class="memdesc:a5487ef469f7a95de54b82b19852a47ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns base^exp. <br /></td></tr>
<tr class="separator:a5487ef469f7a95de54b82b19852a47ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a35180b061a4620fef9f6cb839a9c5736"><td class="memTemplParams" colspan="2">template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a35180b061a4620fef9f6cb839a9c5736"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a35180b061a4620fef9f6cb839a9c5736">Sin</a> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; a)</td></tr>
<tr class="memdesc:a35180b061a4620fef9f6cb839a9c5736"><td class="mdescLeft">&#160;</td><td class="mdescRight">***** Trigonometric Functions *****  <a href="../../d1/d37/namespacexii_math.htm#a35180b061a4620fef9f6cb839a9c5736">More...</a><br /></td></tr>
<tr class="separator:a35180b061a4620fef9f6cb839a9c5736"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a548ba67358020f40361806e56efac0ad"><td class="memTemplParams" colspan="2"><a id="a548ba67358020f40361806e56efac0ad"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a548ba67358020f40361806e56efac0ad"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a548ba67358020f40361806e56efac0ad">Cos</a> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; a)</td></tr>
<tr class="memdesc:a548ba67358020f40361806e56efac0ad"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its cosine. <br /></td></tr>
<tr class="separator:a548ba67358020f40361806e56efac0ad"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2abf15b2d469153995ed4f43ca579474"><td class="memTemplParams" colspan="2"><a id="a2abf15b2d469153995ed4f43ca579474"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a2abf15b2d469153995ed4f43ca579474"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a2abf15b2d469153995ed4f43ca579474">Tan</a> (<a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt; a)</td></tr>
<tr class="memdesc:a2abf15b2d469153995ed4f43ca579474"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes an angle, returns its tangent. <br /></td></tr>
<tr class="separator:a2abf15b2d469153995ed4f43ca579474"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a052c2138d2e16b5d4ef6e3eb8723e3e4"><td class="memTemplParams" colspan="2"><a id="a052c2138d2e16b5d4ef6e3eb8723e3e4"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a052c2138d2e16b5d4ef6e3eb8723e3e4"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a052c2138d2e16b5d4ef6e3eb8723e3e4">ASin</a> (Type f)</td></tr>
<tr class="memdesc:a052c2138d2e16b5d4ef6e3eb8723e3e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus sinus of f. <br /></td></tr>
<tr class="separator:a052c2138d2e16b5d4ef6e3eb8723e3e4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15e1455ec1b7935582b841c982b3b432"><td class="memTemplParams" colspan="2"><a id="a15e1455ec1b7935582b841c982b3b432"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a15e1455ec1b7935582b841c982b3b432"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a15e1455ec1b7935582b841c982b3b432">ACos</a> (Type f)</td></tr>
<tr class="memdesc:a15e1455ec1b7935582b841c982b3b432"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus cosinus of f. <br /></td></tr>
<tr class="separator:a15e1455ec1b7935582b841c982b3b432"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8d0809d423a070470416cf6d76c97f57"><td class="memTemplParams" colspan="2"><a id="a8d0809d423a070470416cf6d76c97f57"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a8d0809d423a070470416cf6d76c97f57"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a8d0809d423a070470416cf6d76c97f57">ATan</a> (Type f)</td></tr>
<tr class="memdesc:a8d0809d423a070470416cf6d76c97f57"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the arcus tangent of f. <br /></td></tr>
<tr class="separator:a8d0809d423a070470416cf6d76c97f57"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab3d168e00bd7b5ad221c7c9226dd7ed3"><td class="memTemplParams" colspan="2"><a id="ab3d168e00bd7b5ad221c7c9226dd7ed3"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:ab3d168e00bd7b5ad221c7c9226dd7ed3"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ab3d168e00bd7b5ad221c7c9226dd7ed3">ATan2</a> (Type y, Type x)</td></tr>
<tr class="memdesc:ab3d168e00bd7b5ad221c7c9226dd7ed3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the atan2 of x and y. <br /></td></tr>
<tr class="separator:ab3d168e00bd7b5ad221c7c9226dd7ed3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5f83a88442d55f44fb36cd05997a7c0c"><td class="memTemplParams" colspan="2"><a id="a5f83a88442d55f44fb36cd05997a7c0c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a5f83a88442d55f44fb36cd05997a7c0c"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a5f83a88442d55f44fb36cd05997a7c0c">Square</a> (T f)</td></tr>
<tr class="memdesc:a5f83a88442d55f44fb36cd05997a7c0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns f * f. <br /></td></tr>
<tr class="separator:a5f83a88442d55f44fb36cd05997a7c0c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a48a82e9e2ea5c2a49caf87967d4f2012"><td class="memTemplParams" colspan="2"><a id="a48a82e9e2ea5c2a49caf87967d4f2012"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a48a82e9e2ea5c2a49caf87967d4f2012"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a48a82e9e2ea5c2a49caf87967d4f2012">Sign</a> (T f)</td></tr>
<tr class="memdesc:a48a82e9e2ea5c2a49caf87967d4f2012"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the sign of f (i.e: -1, 1 or 0) <br /></td></tr>
<tr class="separator:a48a82e9e2ea5c2a49caf87967d4f2012"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a435f566484863fc1c1067acaf883c5f9"><td class="memTemplParams" colspan="2"><a id="a435f566484863fc1c1067acaf883c5f9"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a435f566484863fc1c1067acaf883c5f9"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a435f566484863fc1c1067acaf883c5f9">Abs</a> (T f)</td></tr>
<tr class="memdesc:a435f566484863fc1c1067acaf883c5f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the absolute value of f. <br /></td></tr>
<tr class="separator:a435f566484863fc1c1067acaf883c5f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8929563dccc303319b83389d048d8cec"><td class="memTemplParams" colspan="2"><a id="a8929563dccc303319b83389d048d8cec"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8929563dccc303319b83389d048d8cec"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a8929563dccc303319b83389d048d8cec">Min</a> (T f1, T f2)</td></tr>
<tr class="memdesc:a8929563dccc303319b83389d048d8cec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2. <br /></td></tr>
<tr class="separator:a8929563dccc303319b83389d048d8cec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acd77b0350e82d89ff2ff386c4f080bac"><td class="memTemplParams" colspan="2"><a id="acd77b0350e82d89ff2ff386c4f080bac"></a>
template&lt;typename T , typename... ARGS&gt; </td></tr>
<tr class="memitem:acd77b0350e82d89ff2ff386c4f080bac"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#acd77b0350e82d89ff2ff386c4f080bac">Min</a> (T f1, T f2, ARGS... f)</td></tr>
<tr class="memdesc:acd77b0350e82d89ff2ff386c4f080bac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the smaller value, f1 or f2 or ... <br /></td></tr>
<tr class="separator:acd77b0350e82d89ff2ff386c4f080bac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a54e3c11894c902cf3953f26436d607c6"><td class="memTemplParams" colspan="2"><a id="a54e3c11894c902cf3953f26436d607c6"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a54e3c11894c902cf3953f26436d607c6"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a54e3c11894c902cf3953f26436d607c6">Max</a> (T f1, T f2)</td></tr>
<tr class="memdesc:a54e3c11894c902cf3953f26436d607c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greater value, f1 or f2. <br /></td></tr>
<tr class="separator:a54e3c11894c902cf3953f26436d607c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c76fabcf8a1d7531a753cbf123d75a0"><td class="memTemplParams" colspan="2"><a id="a1c76fabcf8a1d7531a753cbf123d75a0"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a1c76fabcf8a1d7531a753cbf123d75a0"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a1c76fabcf8a1d7531a753cbf123d75a0">Clamp</a> (T value, T min_val, T max_val)</td></tr>
<tr class="memdesc:a1c76fabcf8a1d7531a753cbf123d75a0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [min; max]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a1c76fabcf8a1d7531a753cbf123d75a0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a628e3ee84f97e830030903fbb1d05075"><td class="memTemplParams" colspan="2"><a id="a628e3ee84f97e830030903fbb1d05075"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a628e3ee84f97e830030903fbb1d05075"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a628e3ee84f97e830030903fbb1d05075">Saturate</a> (T value)</td></tr>
<tr class="memdesc:a628e3ee84f97e830030903fbb1d05075"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clamps "value" to the range [0; 1]. Returns "value", if it is inside the range already. <br /></td></tr>
<tr class="separator:a628e3ee84f97e830030903fbb1d05075"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24d25cd66bd850d427a5771190704569"><td class="memTemplParams" colspan="2"><a id="a24d25cd66bd850d427a5771190704569"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a24d25cd66bd850d427a5771190704569"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a24d25cd66bd850d427a5771190704569">Trunc</a> (Type f)</td></tr>
<tr class="memdesc:a24d25cd66bd850d427a5771190704569"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the integer-part of f (removes the fraction). <br /></td></tr>
<tr class="separator:a24d25cd66bd850d427a5771190704569"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc31910bb6ad146a4bb3839ad4cba8d3"><td class="memItemLeft" align="right" valign="top">constexpr xiiInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#abc31910bb6ad146a4bb3839ad4cba8d3">FloatToInt</a> (float value)</td></tr>
<tr class="memdesc:abc31910bb6ad146a4bb3839ad4cba8d3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the float to an integer, removes the fractional part.  <a href="../../d1/d37/namespacexii_math.htm#abc31910bb6ad146a4bb3839ad4cba8d3">More...</a><br /></td></tr>
<tr class="separator:abc31910bb6ad146a4bb3839ad4cba8d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2fc23519cbc5095f43fc40275f35c418"><td class="memItemLeft" align="right" valign="top">constexpr xiiInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a2fc23519cbc5095f43fc40275f35c418">FloatToInt</a> (double value)</td></tr>
<tr class="memdesc:a2fc23519cbc5095f43fc40275f35c418"><td class="mdescLeft">&#160;</td><td class="mdescRight">Casts the float to an integer, removes the fractional part.  <a href="../../d1/d37/namespacexii_math.htm#a2fc23519cbc5095f43fc40275f35c418">More...</a><br /></td></tr>
<tr class="separator:a2fc23519cbc5095f43fc40275f35c418"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7561d38d2b6c372843eb7b1dcc30e75f"><td class="memTemplParams" colspan="2"><a id="a7561d38d2b6c372843eb7b1dcc30e75f"></a>
template&lt;typename Type &gt; </td></tr>
<tr class="memitem:a7561d38d2b6c372843eb7b1dcc30e75f"><td class="memTemplItemLeft" align="right" valign="top">Type&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a7561d38d2b6c372843eb7b1dcc30e75f">Fraction</a> (Type f)</td></tr>
<tr class="memdesc:a7561d38d2b6c372843eb7b1dcc30e75f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the fraction-part of f. <br /></td></tr>
<tr class="separator:a7561d38d2b6c372843eb7b1dcc30e75f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a57351f79281b6428f6b68135a9045c"><td class="memTemplParams" colspan="2"><a id="a8a57351f79281b6428f6b68135a9045c"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a8a57351f79281b6428f6b68135a9045c"><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a8a57351f79281b6428f6b68135a9045c">Swap</a> (T &amp;ref_f1, T &amp;ref_f2)</td></tr>
<tr class="memdesc:a8a57351f79281b6428f6b68135a9045c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Swaps the values in the two variables f1 and f2. <br /></td></tr>
<tr class="separator:a8a57351f79281b6428f6b68135a9045c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aea147de6b4795a54e22fb86c346aa033"><td class="memTemplParams" colspan="2"><a id="aea147de6b4795a54e22fb86c346aa033"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:aea147de6b4795a54e22fb86c346aa033"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aea147de6b4795a54e22fb86c346aa033">Lerp</a> (T f1, T f2, float fFactor)</td></tr>
<tr class="memdesc:aea147de6b4795a54e22fb86c346aa033"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:aea147de6b4795a54e22fb86c346aa033"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a678169c2e31b4c50802738533aa418ac"><td class="memTemplParams" colspan="2"><a id="a678169c2e31b4c50802738533aa418ac"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:a678169c2e31b4c50802738533aa418ac"><td class="memTemplItemLeft" align="right" valign="top">T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a678169c2e31b4c50802738533aa418ac">Lerp</a> (T f1, T f2, double fFactor)</td></tr>
<tr class="memdesc:a678169c2e31b4c50802738533aa418ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the linear interpolation of f1 and f2. factor is a value between 0 and 1. <br /></td></tr>
<tr class="separator:a678169c2e31b4c50802738533aa418ac"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab9653076dfd2066f3f585d9514aa74f2"><td class="memTemplParams" colspan="2"><a id="ab9653076dfd2066f3f585d9514aa74f2"></a>
template&lt;typename T &gt; </td></tr>
<tr class="memitem:ab9653076dfd2066f3f585d9514aa74f2"><td class="memTemplItemLeft" align="right" valign="top">constexpr T&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ab9653076dfd2066f3f585d9514aa74f2">Step</a> (T value, T edge)</td></tr>
<tr class="memdesc:ab9653076dfd2066f3f585d9514aa74f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns 0, if value &lt; edge, and 1, if value &gt;= edge. <br /></td></tr>
<tr class="separator:ab9653076dfd2066f3f585d9514aa74f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a2c2d957a614615b2973f3ff52fdbeb"><td class="memItemLeft" align="right" valign="top"><a id="a8a2c2d957a614615b2973f3ff52fdbeb"></a>
XII_FOUNDATION_DLL bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a8a2c2d957a614615b2973f3ff52fdbeb">IsPowerOf</a> (xiiInt32 value, xiiInt32 iBase)</td></tr>
<tr class="memdesc:a8a2c2d957a614615b2973f3ff52fdbeb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if there exists some x with base^x == value. <br /></td></tr>
<tr class="separator:a8a2c2d957a614615b2973f3ff52fdbeb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae50db46d8435765fed46d54af1d2c0e5"><td class="memItemLeft" align="right" valign="top"><a id="ae50db46d8435765fed46d54af1d2c0e5"></a>
XII_FOUNDATION_DLL xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#ae50db46d8435765fed46d54af1d2c0e5">PowerOfTwo_Floor</a> (xiiUInt32 value)</td></tr>
<tr class="memdesc:ae50db46d8435765fed46d54af1d2c0e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &lt;= value. <br /></td></tr>
<tr class="separator:ae50db46d8435765fed46d54af1d2c0e5"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9382e85ca22aab9c1929586b2ec9b38"><td class="memItemLeft" align="right" valign="top"><a id="aa9382e85ca22aab9c1929586b2ec9b38"></a>
XII_FOUNDATION_DLL xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa9382e85ca22aab9c1929586b2ec9b38">PowerOfTwo_Ceil</a> (xiiUInt32 value)</td></tr>
<tr class="memdesc:aa9382e85ca22aab9c1929586b2ec9b38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the next power-of-two that is &gt;= value. <br /></td></tr>
<tr class="separator:aa9382e85ca22aab9c1929586b2ec9b38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8c5773544a371b480ea74a7c5aa9dbaa"><td class="memItemLeft" align="right" valign="top"><a id="a8c5773544a371b480ea74a7c5aa9dbaa"></a>
XII_FOUNDATION_DLL xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a8c5773544a371b480ea74a7c5aa9dbaa">GreatestCommonDivisor</a> (xiiUInt32 a, xiiUInt32 b)</td></tr>
<tr class="memdesc:a8c5773544a371b480ea74a7c5aa9dbaa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the greatest common divisor. <br /></td></tr>
<tr class="separator:a8c5773544a371b480ea74a7c5aa9dbaa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1dda2b2e4ce73373288c883eb009714d"><td class="memItemLeft" align="right" valign="top"><a id="a1dda2b2e4ce73373288c883eb009714d"></a>
XII_FOUNDATION_DLL <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a1dda2b2e4ce73373288c883eb009714d">TryMultiply32</a> (xiiUInt32 &amp;out_uiResult, xiiUInt32 a, xiiUInt32 b, xiiUInt32 c=1, xiiUInt32 d=1)</td></tr>
<tr class="memdesc:a1dda2b2e4ce73373288c883eb009714d"><td class="mdescLeft">&#160;</td><td class="mdescRight">out_Result = <em>a</em> * <em>b</em>. If an overflow happens, XII_FAILURE is returned. <br /></td></tr>
<tr class="separator:a1dda2b2e4ce73373288c883eb009714d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a98f64b13ccec19c3305f1382bebcb2f8"><td class="memItemLeft" align="right" valign="top"><a id="a98f64b13ccec19c3305f1382bebcb2f8"></a>
XII_FOUNDATION_DLL xiiUInt32&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a98f64b13ccec19c3305f1382bebcb2f8">SafeMultiply32</a> (xiiUInt32 a, xiiUInt32 b, xiiUInt32 c=1, xiiUInt32 d=1)</td></tr>
<tr class="memdesc:a98f64b13ccec19c3305f1382bebcb2f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns <em>a</em> * <em>b</em>. If an overflow happens, the program is terminated. <br /></td></tr>
<tr class="separator:a98f64b13ccec19c3305f1382bebcb2f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a939c8e828a412b69f09b157987347b7d"><td class="memItemLeft" align="right" valign="top"><a id="a939c8e828a412b69f09b157987347b7d"></a>
XII_FOUNDATION_DLL <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a939c8e828a412b69f09b157987347b7d">TryMultiply64</a> (xiiUInt64 &amp;out_uiResult, xiiUInt64 a, xiiUInt64 b, xiiUInt64 c=1, xiiUInt64 d=1)</td></tr>
<tr class="memdesc:a939c8e828a412b69f09b157987347b7d"><td class="mdescLeft">&#160;</td><td class="mdescRight">out_Result = <em>a</em> * <em>b</em>. If an overflow happens, XII_FAILURE is returned. <br /></td></tr>
<tr class="separator:a939c8e828a412b69f09b157987347b7d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcf682136bea56d7c468baf6378af2a3"><td class="memItemLeft" align="right" valign="top"><a id="abcf682136bea56d7c468baf6378af2a3"></a>
XII_FOUNDATION_DLL xiiUInt64&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#abcf682136bea56d7c468baf6378af2a3">SafeMultiply64</a> (xiiUInt64 a, xiiUInt64 b, xiiUInt64 c=1, xiiUInt64 d=1)</td></tr>
<tr class="memdesc:abcf682136bea56d7c468baf6378af2a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">returns <em>a</em> * <em>b</em>. If an overflow happens, the program is terminated. <br /></td></tr>
<tr class="separator:abcf682136bea56d7c468baf6378af2a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3fe2efeb461edc5b3d4f5a18e020137e"><td class="memItemLeft" align="right" valign="top"><a id="a3fe2efeb461edc5b3d4f5a18e020137e"></a>
<a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a3fe2efeb461edc5b3d4f5a18e020137e">TryConvertToSizeT</a> (size_t &amp;out_uiResult, xiiUInt64 uiValue)</td></tr>
<tr class="memdesc:a3fe2efeb461edc5b3d4f5a18e020137e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given 64bit value actually fits into size_t, If it doesn't XII_FAILURE is returned. <br /></td></tr>
<tr class="separator:a3fe2efeb461edc5b3d4f5a18e020137e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad676bd26cdf94104fd880c2bc6802e8"><td class="memItemLeft" align="right" valign="top"><a id="aad676bd26cdf94104fd880c2bc6802e8"></a>
XII_FOUNDATION_DLL size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aad676bd26cdf94104fd880c2bc6802e8">SafeConvertToSizeT</a> (xiiUInt64 uiValue)</td></tr>
<tr class="memdesc:aad676bd26cdf94104fd880c2bc6802e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks whether the given 64bit value actually fits into size_t, If it doesn't the program is terminated. <br /></td></tr>
<tr class="separator:aad676bd26cdf94104fd880c2bc6802e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9044868daac6e8f40c0070bb7dffdd86"><td class="memItemLeft" align="right" valign="top"><a id="a9044868daac6e8f40c0070bb7dffdd86"></a>
XII_FOUNDATION_DLL float&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#a9044868daac6e8f40c0070bb7dffdd86">ReplaceNaN</a> (float value, float fFallback)</td></tr>
<tr class="memdesc:a9044868daac6e8f40c0070bb7dffdd86"><td class="mdescLeft">&#160;</td><td class="mdescRight">If 'value' is not-a-number (NaN) 'fallback' is returned, otherwise 'value' is passed through unmodified. <br /></td></tr>
<tr class="separator:a9044868daac6e8f40c0070bb7dffdd86"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa763005c6ac1ad3feebb8deac32819ec"><td class="memItemLeft" align="right" valign="top"><a id="aa763005c6ac1ad3feebb8deac32819ec"></a>
XII_FOUNDATION_DLL double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="../../d1/d37/namespacexii_math.htm#aa763005c6ac1ad3feebb8deac32819ec">ReplaceNaN</a> (double value, double fFallback)</td></tr>
<tr class="memdesc:aa763005c6ac1ad3feebb8deac32819ec"><td class="mdescLeft">&#160;</td><td class="mdescRight">If 'value' is not-a-number (NaN) 'fallback' is returned, otherwise 'value' is passed through unmodified. <br /></td></tr>
<tr class="separator:aa763005c6ac1ad3feebb8deac32819ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This namespace provides common math-functionality as functions. </p>
<p>It is a namespace, instead of a static class, because that allows it to be extended at other locations, which is especially useful when adding custom types. </p>
</div><h2 class="groupheader">Enumeration Type Documentation</h2>
<a id="a646b0ff6e3974612edf83c6401adb22d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a646b0ff6e3974612edf83c6401adb22d">&#9670;&nbsp;</a></span>xiiEasingFunctions</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="../../d1/d37/namespacexii_math.htm#a646b0ff6e3974612edf83c6401adb22d">xiiMath::xiiEasingFunctions</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Available Procedural Curve Generators. </p>
<p>Supported easing function types adapted from <a href="https://easings.net">https://easings.net</a>. To view some of these in action, please visit the above mentioned source link.</p>
<p>Types:</p><ul>
<li>EaseIn: Indicates a transition from the zero strength to full strength.</li>
<li>EaseOut: Indicates a transition from full strength to zero strength.</li>
<li>EaseInOut: Indicates a transition from zero strength to full strength halfway, then a transition back to zero strength.</li>
<li>EaseOutIn: Indicates a transition from full strength to zero strength halfway, then a transition back to full strength. </li>
</ul>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a id="a307af5bf30f7c96ec03c95f7db168acf"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a307af5bf30f7c96ec03c95f7db168acf">&#9670;&nbsp;</a></span>CountLeadingZeros()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiMath::CountLeadingZeros </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of zeros at the start (most significant part) of a bitmask.</p>
<p>E.g. 0b0111 -&gt; 29 0b0011 -&gt; 30 0b0001 -&gt; 31 0b0000 -&gt; 32 Returns 32 when the input is 0 </p>

</div>
</div>
<a id="af0b1f1262ce64f475256f1fd30d7a509"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af0b1f1262ce64f475256f1fd30d7a509">&#9670;&nbsp;</a></span>CountTrailingZeros()</h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiMath::CountTrailingZeros </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">
<p>Returns the number of zeros at the end (least significant part) of a bitmask.</p>
<p>E.g. 0b0111 -&gt; 0 0b0110 -&gt; 1 0b0100 -&gt; 2 Returns 32 when the input is 0 </p>

</div>
</div>
<a id="a7e3584835296e437fd4c4c0354576c5a"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a7e3584835296e437fd4c4c0354576c5a">&#9670;&nbsp;</a></span>FirstBitHigh() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiMath::FirstBitHigh </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the most significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="aa6adf5776953bc6fc8745c1a47f084fa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aa6adf5776953bc6fc8745c1a47f084fa">&#9670;&nbsp;</a></span>FirstBitHigh() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiMath::FirstBitHigh </td>
          <td>(</td>
          <td class="paramtype">xiiUInt64&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the most significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="afb37092634e9c088d935bc573bd0081e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afb37092634e9c088d935bc573bd0081e">&#9670;&nbsp;</a></span>FirstBitLow() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiMath::FirstBitLow </td>
          <td>(</td>
          <td class="paramtype">xiiUInt32&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the least significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a64edf87d7df0f91c265eddac6f79fe45"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a64edf87d7df0f91c265eddac6f79fe45">&#9670;&nbsp;</a></span>FirstBitLow() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">xiiUInt32 xiiMath::FirstBitLow </td>
          <td>(</td>
          <td class="paramtype">xiiUInt64&#160;</td>
          <td class="paramname"><em>uiBitmask</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns the index of the least significant bit set. </p>
<p>Asserts that bitmask is not 0. </p>

</div>
</div>
<a id="a2fc23519cbc5095f43fc40275f35c418"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a2fc23519cbc5095f43fc40275f35c418">&#9670;&nbsp;</a></span>FloatToInt() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr XII_FORCE_INLINE xiiInt64 xiiMath::FloatToInt </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the float to an integer, removes the fractional part. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d1/d37/namespacexii_math.htm#ac0e5bf7b2d32e5ea41f69e6f70b60aaf" title="Returns the integer-part of f (removes the fraction).">Trunc</a>, <a class="el" href="../../d1/d37/namespacexii_math.htm#a575d6ad80be9c4332a8c3fbf01ff8963" title="Rounds f to the next integer.">Round</a>, <a class="el" href="../../d1/d37/namespacexii_math.htm#ad6842f0ad7ab4a71e50cc9b7944f45a1" title="Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative.">Floor</a>, <a class="el" href="../../d1/d37/namespacexii_math.htm#aa43339fe6b184ea3acef846dc90f6147" title="Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative.">Ceil</a> </dd></dl>

</div>
</div>
<a id="abc31910bb6ad146a4bb3839ad4cba8d3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abc31910bb6ad146a4bb3839ad4cba8d3">&#9670;&nbsp;</a></span>FloatToInt() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr XII_FORCE_INLINE xiiInt32 xiiMath::FloatToInt </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>value</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Casts the float to an integer, removes the fractional part. </p>
<dl class="section see"><dt>See also</dt><dd><a class="el" href="../../d1/d37/namespacexii_math.htm#ac0e5bf7b2d32e5ea41f69e6f70b60aaf" title="Returns the integer-part of f (removes the fraction).">Trunc</a>, <a class="el" href="../../d1/d37/namespacexii_math.htm#a575d6ad80be9c4332a8c3fbf01ff8963" title="Rounds f to the next integer.">Round</a>, <a class="el" href="../../d1/d37/namespacexii_math.htm#ad6842f0ad7ab4a71e50cc9b7944f45a1" title="Returns the next smaller integer, closest to f. Also the SMALLER value, if f is negative.">Floor</a>, <a class="el" href="../../d1/d37/namespacexii_math.htm#aa43339fe6b184ea3acef846dc90f6147" title="Returns the next higher integer, closest to f. Also the HIGHER value, if f is negative.">Ceil</a> </dd></dl>

</div>
</div>
<a id="a6649388742960c27aedf478c33548cfd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6649388742960c27aedf478c33548cfd">&#9670;&nbsp;</a></span>GetEasingValue()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type xiiMath::GetEasingValue </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d1/d37/namespacexii_math.htm#a646b0ff6e3974612edf83c6401adb22d">xiiEasingFunctions</a>&#160;</td>
          <td class="paramname"><em>easingFunction</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">Type&#160;</td>
          <td class="paramname"><em>input</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>bInverse</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Helper function that returns the function value at the given x coordinate. </p>
<p>If <em>inverse</em> is true, the value (1-Y) is returned. </p>

</div>
</div>
<a id="aaef30261db876ade1c53d907aaa68828"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aaef30261db876ade1c53d907aaa68828">&#9670;&nbsp;</a></span>HighValue() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr TYPE xiiMath::HighValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A very large value, that is slightly smaller than sqrt(MaxValue()). </p>
<p>Useful to default initialize values, that may get squared in subsequent operations. </p>

</div>
</div>
<a id="a77f43ac858d07a85b8a4042c2a0fdb3e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a77f43ac858d07a85b8a4042c2a0fdb3e">&#9670;&nbsp;</a></span>HighValue() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;&gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr double xiiMath::HighValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>A very large value, that is slightly smaller than sqrt(MaxValue()). </p>
<p>Useful to default initialize values, that may get squared in subsequent operations. </p>

</div>
</div>
<a id="a794f0339ad168c57748133cd2687fe4d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a794f0339ad168c57748133cd2687fe4d">&#9670;&nbsp;</a></span>NaN()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename TYPE &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">constexpr TYPE xiiMath::NaN </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns the value for NaN as the template type. Returns zero, if the type does not support NaN. </p>
<p>Do not use this for comparisons, it will fail. Use it to initialize data (e.g. in debug builds), to detect uninitialized variables. Use the function IsNaN() to check whether a value is not a number. </p>

</div>
</div>
<a id="a575d6ad80be9c4332a8c3fbf01ff8963"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a575d6ad80be9c4332a8c3fbf01ff8963">&#9670;&nbsp;</a></span>Round() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double xiiMath::Round </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1). </p>

</div>
</div>
<a id="aae1c8197fa3a7a5e8b463438018b101e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aae1c8197fa3a7a5e8b463438018b101e">&#9670;&nbsp;</a></span>Round() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">float xiiMath::Round </td>
          <td>(</td>
          <td class="paramtype">float&#160;</td>
          <td class="paramname"><em>f</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Rounds f to the next integer. </p>
<p>If f is positive 0.5 is rounded UP (i.e. to 1), if f is negative, -0.5 is rounded DOWN (i.e. to -1). </p>

</div>
</div>
<a id="afbbbae240e0cea673cd16646b5142e06"></a>
<h2 class="memtitle"><span class="permalink"><a href="#afbbbae240e0cea673cd16646b5142e06">&#9670;&nbsp;</a></span>Sin() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">XII_ALWAYS_INLINE Type xiiMath::Sin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>***** Trigonometric Functions ***** </p>
<p>Takes an angle, returns its sine </p>

</div>
</div>
<a id="a35180b061a4620fef9f6cb839a9c5736"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a35180b061a4620fef9f6cb839a9c5736">&#9670;&nbsp;</a></span>Sin() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">Type xiiMath::Sin </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="../../d3/ddb/classxii_angle_template.htm">xiiAngleTemplate</a>&lt; Type &gt;&#160;</td>
          <td class="paramname"><em>a</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>***** Trigonometric Functions ***** </p>
<p>Takes an angle, returns its sine </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/d37/namespacexii_math.htm">xiiMath</a></li>
    <li class="footer">Generated on Sat Jul 1 2023 22:50:36 for XIIEngine by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="../../doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>

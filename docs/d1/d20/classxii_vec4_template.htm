<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=11"/>
<meta name="generator" content="Doxygen 1.11.0"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>XII Engine: xiiVec4Template&lt; Type &gt; Class Template Reference</title>
<link href="../../tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../jquery.js"></script>
<script type="text/javascript" src="../../dynsections.js"></script>
<script type="text/javascript" src="../../clipboard.js"></script>
<link href="../../navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../navtreedata.js"></script>
<script type="text/javascript" src="../../navtree.js"></script>
<script type="text/javascript" src="../../resize.js"></script>
<script type="text/javascript" src="../../cookie.js"></script>
<link href="../../search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="../../search/searchdata.js"></script>
<script type="text/javascript" src="../../search/search.js"></script>
<link href="../../doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr id="projectrow">
  <td id="projectlogo"><img alt="Logo" src="../../XII-Logo.png"/></td>
  <td id="projectalign">
   <div id="projectname">XII Engine<span id="projectnumber">&#160;1.0.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.11.0 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
var searchBox = new SearchBox("searchBox", "../../search/",'.htm');
/* @license-end */
</script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() { codefold.init(1); });
/* @license-end */
</script>
<script type="text/javascript" src="../../menudata.js"></script>
<script type="text/javascript" src="../../menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function() {
  initMenu('../../',true,false,'search.htm','Search',true);
  $(function() { init_search(); });
});
/* @license-end */
</script>
<div id="main-nav"></div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&amp;dn=expat.txt MIT */
$(function(){initNavTree('d1/d20/classxii_vec4_template.htm','../../'); initResizable(true); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<div id="MSearchResults">
<div class="SRPage">
<div id="SRIndex">
<div id="SRResults"></div>
<div class="SRStatus" id="Loading">Loading...</div>
<div class="SRStatus" id="Searching">Searching...</div>
<div class="SRStatus" id="NoMatches">No Matches</div>
</div>
</div>
</div>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="../../d4/d03/classxii_vec4_template-members.htm">List of all members</a>  </div>
  <div class="headertitle"><div class="title">xiiVec4Template&lt; Type &gt; Class Template Reference</div></div>
</div><!--header-->
<div class="contents">

<p>A 4-component vector class.  
 <a href="#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="../../df/d6a/_vec4_8h_source.htm">Vec4.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-types" name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ae35b96b6505791e4c182acca457156a1" id="r_ae35b96b6505791e4c182acca457156a1"><td class="memItemLeft" align="right" valign="top"><a id="ae35b96b6505791e4c182acca457156a1" name="ae35b96b6505791e4c182acca457156a1"></a>
using&#160;</td><td class="memItemRight" valign="bottom"><b>ComponentType</b> = Type</td></tr>
<tr class="separator:ae35b96b6505791e4c182acca457156a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-methods" name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4540b7c5cde152a976002ce6a24b7e97" id="r_a4540b7c5cde152a976002ce6a24b7e97"><td class="memItemLeft" align="right" valign="top"><a id="a4540b7c5cde152a976002ce6a24b7e97" name="a4540b7c5cde152a976002ce6a24b7e97"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>XII_DECLARE_POD_TYPE</b> ()</td></tr>
<tr class="separator:a4540b7c5cde152a976002ce6a24b7e97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9b235b061d34b1d9dd51dfaf3f8484fe" id="r_a9b235b061d34b1d9dd51dfaf3f8484fe"><td class="memItemLeft" align="right" valign="top"><a id="a9b235b061d34b1d9dd51dfaf3f8484fe" name="a9b235b061d34b1d9dd51dfaf3f8484fe"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVec4Template</b> ()</td></tr>
<tr class="memdesc:a9b235b061d34b1d9dd51dfaf3f8484fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default-constructed vector is uninitialized (for speed) <br /></td></tr>
<tr class="separator:a9b235b061d34b1d9dd51dfaf3f8484fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab5d88b1f5f8d9b65fd72dad4c7d81399" id="r_ab5d88b1f5f8d9b65fd72dad4c7d81399"><td class="memItemLeft" align="right" valign="top"><a id="ab5d88b1f5f8d9b65fd72dad4c7d81399" name="ab5d88b1f5f8d9b65fd72dad4c7d81399"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVec4Template</b> (Type x, Type y, Type z, Type w)</td></tr>
<tr class="memdesc:ab5d88b1f5f8d9b65fd72dad4c7d81399"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the vector with x,y,z,w. <br /></td></tr>
<tr class="separator:ab5d88b1f5f8d9b65fd72dad4c7d81399"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab1ca57c950409037056ab9c06e212690" id="r_ab1ca57c950409037056ab9c06e212690"><td class="memItemLeft" align="right" valign="top"><a id="ab1ca57c950409037056ab9c06e212690" name="ab1ca57c950409037056ab9c06e212690"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVec4Template</b> (<a class="el" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template</a>&lt; Type &gt; vXyz, Type w)</td></tr>
<tr class="memdesc:ab1ca57c950409037056ab9c06e212690"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes the vector from a vec3 and a float. <br /></td></tr>
<tr class="separator:ab1ca57c950409037056ab9c06e212690"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af8ac3e79fe15b7145bc285b19b7f8dc3" id="r_af8ac3e79fe15b7145bc285b19b7f8dc3"><td class="memItemLeft" align="right" valign="top"><a id="af8ac3e79fe15b7145bc285b19b7f8dc3" name="af8ac3e79fe15b7145bc285b19b7f8dc3"></a>
&#160;</td><td class="memItemRight" valign="bottom"><b>xiiVec4Template</b> (Type v)</td></tr>
<tr class="memdesc:af8ac3e79fe15b7145bc285b19b7f8dc3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Initializes all 4 components with xyzw. <br /></td></tr>
<tr class="separator:af8ac3e79fe15b7145bc285b19b7f8dc3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad13e755bd37f957eb287c4ded747b847" id="r_ad13e755bd37f957eb287c4ded747b847"><td class="memItemLeft" align="right" valign="top"><a id="ad13e755bd37f957eb287c4ded747b847" name="ad13e755bd37f957eb287c4ded747b847"></a>
const <a class="el" href="../../d1/d0d/classxii_vec2_template.htm">xiiVec2Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetAsVec2</b> () const</td></tr>
<tr class="memdesc:ad13e755bd37f957eb287c4ded747b847"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a <a class="el" href="../../d1/d0d/classxii_vec2_template.htm" title="A 2-component vector class.">xiiVec2Template</a> with x and y from this vector. <br /></td></tr>
<tr class="separator:ad13e755bd37f957eb287c4ded747b847"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8a990b0011cde6f31e21062f6c628590" id="r_a8a990b0011cde6f31e21062f6c628590"><td class="memItemLeft" align="right" valign="top"><a id="a8a990b0011cde6f31e21062f6c628590" name="a8a990b0011cde6f31e21062f6c628590"></a>
const <a class="el" href="../../d9/d9a/classxii_vec3_template.htm">xiiVec3Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetAsVec3</b> () const</td></tr>
<tr class="memdesc:a8a990b0011cde6f31e21062f6c628590"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a <a class="el" href="../../d9/d9a/classxii_vec3_template.htm" title="A 3-component vector class.">xiiVec3Template</a> with x,y and z from this vector. <br /></td></tr>
<tr class="separator:a8a990b0011cde6f31e21062f6c628590"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad9790fc6db2ddba483e8d1e726a625af" id="r_ad9790fc6db2ddba483e8d1e726a625af"><td class="memItemLeft" align="right" valign="top"><a id="ad9790fc6db2ddba483e8d1e726a625af" name="ad9790fc6db2ddba483e8d1e726a625af"></a>
const Type *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> () const</td></tr>
<tr class="memdesc:ad9790fc6db2ddba483e8d1e726a625af"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data as an array. <br /></td></tr>
<tr class="separator:ad9790fc6db2ddba483e8d1e726a625af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a04ac43c35e9da3a9d9d4d5c1042b2b08" id="r_a04ac43c35e9da3a9d9d4d5c1042b2b08"><td class="memItemLeft" align="right" valign="top"><a id="a04ac43c35e9da3a9d9d4d5c1042b2b08" name="a04ac43c35e9da3a9d9d4d5c1042b2b08"></a>
Type *&#160;</td><td class="memItemRight" valign="bottom"><b>GetData</b> ()</td></tr>
<tr class="memdesc:a04ac43c35e9da3a9d9d4d5c1042b2b08"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the data as an array. <br /></td></tr>
<tr class="separator:a04ac43c35e9da3a9d9d4d5c1042b2b08"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adc3f43eb01d70bc3f02b3f61e2a28743" id="r_adc3f43eb01d70bc3f02b3f61e2a28743"><td class="memItemLeft" align="right" valign="top"><a id="adc3f43eb01d70bc3f02b3f61e2a28743" name="adc3f43eb01d70bc3f02b3f61e2a28743"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (Type xyzw)</td></tr>
<tr class="memdesc:adc3f43eb01d70bc3f02b3f61e2a28743"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets all 4 components to this value. <br /></td></tr>
<tr class="separator:adc3f43eb01d70bc3f02b3f61e2a28743"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8e1e7ce103fec635d618cfd8b5bc60a1" id="r_a8e1e7ce103fec635d618cfd8b5bc60a1"><td class="memItemLeft" align="right" valign="top"><a id="a8e1e7ce103fec635d618cfd8b5bc60a1" name="a8e1e7ce103fec635d618cfd8b5bc60a1"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>Set</b> (Type x, Type y, Type z, Type w)</td></tr>
<tr class="memdesc:a8e1e7ce103fec635d618cfd8b5bc60a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the vector to these values. <br /></td></tr>
<tr class="separator:a8e1e7ce103fec635d618cfd8b5bc60a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2dd46e17b61d664cfad9dbbad875a1de" id="r_a2dd46e17b61d664cfad9dbbad875a1de"><td class="memItemLeft" align="right" valign="top"><a id="a2dd46e17b61d664cfad9dbbad875a1de" name="a2dd46e17b61d664cfad9dbbad875a1de"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>SetZero</b> ()</td></tr>
<tr class="memdesc:a2dd46e17b61d664cfad9dbbad875a1de"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the vector to all zero. <br /></td></tr>
<tr class="separator:a2dd46e17b61d664cfad9dbbad875a1de"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d91b49c30c0bda3e6697a531de0a707" id="r_a2d91b49c30c0bda3e6697a531de0a707"><td class="memItemLeft" align="right" valign="top"><a id="a2d91b49c30c0bda3e6697a531de0a707" name="a2d91b49c30c0bda3e6697a531de0a707"></a>
XII_DECLARE_IF_FLOAT_TYPE Type&#160;</td><td class="memItemRight" valign="bottom"><b>GetLength</b> () const</td></tr>
<tr class="memdesc:a2d91b49c30c0bda3e6697a531de0a707"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the length of the vector. <br /></td></tr>
<tr class="separator:a2d91b49c30c0bda3e6697a531de0a707"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19fe0eb0b8d775d2cabf4006675fd964" id="r_a19fe0eb0b8d775d2cabf4006675fd964"><td class="memItemLeft" align="right" valign="top"><a id="a19fe0eb0b8d775d2cabf4006675fd964" name="a19fe0eb0b8d775d2cabf4006675fd964"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>GetLengthSquared</b> () const</td></tr>
<tr class="memdesc:a19fe0eb0b8d775d2cabf4006675fd964"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the squared length. Faster, since no square-root is taken. Useful, if one only wants to compare the lengths of two vectors. <br /></td></tr>
<tr class="separator:a19fe0eb0b8d775d2cabf4006675fd964"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a300ae2c5356209d38e2c4af0ee269b65" id="r_a300ae2c5356209d38e2c4af0ee269b65"><td class="memItemLeft" align="right" valign="top"><a id="a300ae2c5356209d38e2c4af0ee269b65" name="a300ae2c5356209d38e2c4af0ee269b65"></a>
XII_DECLARE_IF_FLOAT_TYPE Type&#160;</td><td class="memItemRight" valign="bottom"><b>GetLengthAndNormalize</b> ()</td></tr>
<tr class="memdesc:a300ae2c5356209d38e2c4af0ee269b65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes this vector and returns its previous length in one operation. More efficient than calling GetLength and then Normalize. <br /></td></tr>
<tr class="separator:a300ae2c5356209d38e2c4af0ee269b65"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad38de7566e6cb86e74564c87e5aefdfc" id="r_ad38de7566e6cb86e74564c87e5aefdfc"><td class="memItemLeft" align="right" valign="top"><a id="ad38de7566e6cb86e74564c87e5aefdfc" name="ad38de7566e6cb86e74564c87e5aefdfc"></a>
XII_DECLARE_IF_FLOAT_TYPE const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>GetNormalized</b> () const</td></tr>
<tr class="memdesc:ad38de7566e6cb86e74564c87e5aefdfc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a normalized version of this vector, leaves the vector itself unchanged. <br /></td></tr>
<tr class="separator:ad38de7566e6cb86e74564c87e5aefdfc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c9ae81f744ac7e3404e3dae70509970" id="r_a2c9ae81f744ac7e3404e3dae70509970"><td class="memItemLeft" align="right" valign="top"><a id="a2c9ae81f744ac7e3404e3dae70509970" name="a2c9ae81f744ac7e3404e3dae70509970"></a>
XII_DECLARE_IF_FLOAT_TYPE void&#160;</td><td class="memItemRight" valign="bottom"><b>Normalize</b> ()</td></tr>
<tr class="memdesc:a2c9ae81f744ac7e3404e3dae70509970"><td class="mdescLeft">&#160;</td><td class="mdescRight">Normalizes this vector. <br /></td></tr>
<tr class="separator:a2c9ae81f744ac7e3404e3dae70509970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0d8b3d97be39e93f832418040ed11bb7" id="r_a0d8b3d97be39e93f832418040ed11bb7"><td class="memItemLeft" align="right" valign="top"><a id="a0d8b3d97be39e93f832418040ed11bb7" name="a0d8b3d97be39e93f832418040ed11bb7"></a>
XII_DECLARE_IF_FLOAT_TYPE <a class="el" href="../../dd/dad/structxii_result.htm">xiiResult</a>&#160;</td><td class="memItemRight" valign="bottom"><b>NormalizeIfNotZero</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;vFallback=<a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;(1, 0, 0, 0), Type fEpsilon=xiiMath::SmallEpsilon&lt; Type &gt;())</td></tr>
<tr class="memdesc:a0d8b3d97be39e93f832418040ed11bb7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to normalize this vector. If the vector is too close to zero, XII_FAILURE is returned and the vector is set to the given fallback value. <br /></td></tr>
<tr class="separator:a0d8b3d97be39e93f832418040ed11bb7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90fd738a8d86863cd0671368f2f6274c" id="r_a90fd738a8d86863cd0671368f2f6274c"><td class="memItemLeft" align="right" valign="top"><a id="a90fd738a8d86863cd0671368f2f6274c" name="a90fd738a8d86863cd0671368f2f6274c"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsZero</b> () const</td></tr>
<tr class="memdesc:a90fd738a8d86863cd0671368f2f6274c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether this vector is (0, 0, 0, 0). <br /></td></tr>
<tr class="separator:a90fd738a8d86863cd0671368f2f6274c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80890459bcfc38f332a2bc3f6a72af31" id="r_a80890459bcfc38f332a2bc3f6a72af31"><td class="memItemLeft" align="right" valign="top"><a id="a80890459bcfc38f332a2bc3f6a72af31" name="a80890459bcfc38f332a2bc3f6a72af31"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsZero</b> (Type fEpsilon) const</td></tr>
<tr class="memdesc:a80890459bcfc38f332a2bc3f6a72af31"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether this vector is (0, 0, 0, 0). <br /></td></tr>
<tr class="separator:a80890459bcfc38f332a2bc3f6a72af31"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a081978651179d83244e78901125a01d8" id="r_a081978651179d83244e78901125a01d8"><td class="memItemLeft" align="right" valign="top">XII_DECLARE_IF_FLOAT_TYPE bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="#a081978651179d83244e78901125a01d8">IsNormalized</a> (Type fEpsilon=xiiMath::HugeEpsilon&lt; Type &gt;()) const</td></tr>
<tr class="memdesc:a081978651179d83244e78901125a01d8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns, whether the squared length of this vector is between 0.999f and 1.001f.  <br /></td></tr>
<tr class="separator:a081978651179d83244e78901125a01d8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ada72f035c7f66fc97e374c90013b20fd" id="r_ada72f035c7f66fc97e374c90013b20fd"><td class="memItemLeft" align="right" valign="top"><a id="ada72f035c7f66fc97e374c90013b20fd" name="ada72f035c7f66fc97e374c90013b20fd"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsNaN</b> () const</td></tr>
<tr class="memdesc:ada72f035c7f66fc97e374c90013b20fd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns true, if any of x, y, z or w is NaN. <br /></td></tr>
<tr class="separator:ada72f035c7f66fc97e374c90013b20fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34a28e70e6c1a2b7c3856215ec9a3f38" id="r_a34a28e70e6c1a2b7c3856215ec9a3f38"><td class="memItemLeft" align="right" valign="top"><a id="a34a28e70e6c1a2b7c3856215ec9a3f38" name="a34a28e70e6c1a2b7c3856215ec9a3f38"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsValid</b> () const</td></tr>
<tr class="memdesc:a34a28e70e6c1a2b7c3856215ec9a3f38"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks that all components are finite numbers. <br /></td></tr>
<tr class="separator:a34a28e70e6c1a2b7c3856215ec9a3f38"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4df333ff3585fd0122a704658d671589" id="r_a4df333ff3585fd0122a704658d671589"><td class="memItemLeft" align="right" valign="top"><a id="a4df333ff3585fd0122a704658d671589" name="a4df333ff3585fd0122a704658d671589"></a>
XII_DECLARE_IF_FLOAT_TYPE Type&#160;</td><td class="memItemRight" valign="bottom"><b>Distance</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;vPoint) const</td></tr>
<tr class="memdesc:a4df333ff3585fd0122a704658d671589"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the distance between two 3D Vectors. <br /></td></tr>
<tr class="separator:a4df333ff3585fd0122a704658d671589"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a702b32e7788c9964a70d3042da27c51d" id="r_a702b32e7788c9964a70d3042da27c51d"><td class="memItemLeft" align="right" valign="top"><a id="a702b32e7788c9964a70d3042da27c51d" name="a702b32e7788c9964a70d3042da27c51d"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>DistanceSquared</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;vPoint) const</td></tr>
<tr class="memdesc:a702b32e7788c9964a70d3042da27c51d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the squared distance between two 3D Vectors. Faster, since no square-root is taken. Useful, if one only wants to compare the distance of two vectors regardless of the magnitude. <br /></td></tr>
<tr class="separator:a702b32e7788c9964a70d3042da27c51d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf53c84ad5ffae1cd79021254bb93bfd" id="r_abf53c84ad5ffae1cd79021254bb93bfd"><td class="memItemLeft" align="right" valign="top"><a id="abf53c84ad5ffae1cd79021254bb93bfd" name="abf53c84ad5ffae1cd79021254bb93bfd"></a>
const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>operator-</b> () const</td></tr>
<tr class="memdesc:abf53c84ad5ffae1cd79021254bb93bfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the negation of this vector. <br /></td></tr>
<tr class="separator:abf53c84ad5ffae1cd79021254bb93bfd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aff9fdbc856af85e03114d779181699ff" id="r_aff9fdbc856af85e03114d779181699ff"><td class="memItemLeft" align="right" valign="top"><a id="aff9fdbc856af85e03114d779181699ff" name="aff9fdbc856af85e03114d779181699ff"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator+=</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;vCc)</td></tr>
<tr class="memdesc:aff9fdbc856af85e03114d779181699ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds cc component-wise to this vector. <br /></td></tr>
<tr class="separator:aff9fdbc856af85e03114d779181699ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5844e543d82e0c1c570a6a507f8370f8" id="r_a5844e543d82e0c1c570a6a507f8370f8"><td class="memItemLeft" align="right" valign="top"><a id="a5844e543d82e0c1c570a6a507f8370f8" name="a5844e543d82e0c1c570a6a507f8370f8"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator-=</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;vCc)</td></tr>
<tr class="memdesc:a5844e543d82e0c1c570a6a507f8370f8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtracts cc component-wise from this vector. <br /></td></tr>
<tr class="separator:a5844e543d82e0c1c570a6a507f8370f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2a86e4775d786205a99f05c16fdd22c0" id="r_a2a86e4775d786205a99f05c16fdd22c0"><td class="memItemLeft" align="right" valign="top"><a id="a2a86e4775d786205a99f05c16fdd22c0" name="a2a86e4775d786205a99f05c16fdd22c0"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator*=</b> (Type f)</td></tr>
<tr class="memdesc:a2a86e4775d786205a99f05c16fdd22c0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplies all components of this vector with f. <br /></td></tr>
<tr class="separator:a2a86e4775d786205a99f05c16fdd22c0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaa19646e0e1d001c6547db64b6dd4d2b" id="r_aaa19646e0e1d001c6547db64b6dd4d2b"><td class="memItemLeft" align="right" valign="top"><a id="aaa19646e0e1d001c6547db64b6dd4d2b" name="aaa19646e0e1d001c6547db64b6dd4d2b"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><b>operator/=</b> (Type f)</td></tr>
<tr class="memdesc:aaa19646e0e1d001c6547db64b6dd4d2b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Divides all components of this vector by f. <br /></td></tr>
<tr class="separator:aaa19646e0e1d001c6547db64b6dd4d2b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a280a58b2ac97192072c5d01855702635" id="r_a280a58b2ac97192072c5d01855702635"><td class="memItemLeft" align="right" valign="top"><a id="a280a58b2ac97192072c5d01855702635" name="a280a58b2ac97192072c5d01855702635"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsIdentical</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a280a58b2ac97192072c5d01855702635"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality Check (bitwise). <br /></td></tr>
<tr class="separator:a280a58b2ac97192072c5d01855702635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5fb940e9f11a3292a47180a6c9e0312" id="r_ad5fb940e9f11a3292a47180a6c9e0312"><td class="memItemLeft" align="right" valign="top"><a id="ad5fb940e9f11a3292a47180a6c9e0312" name="ad5fb940e9f11a3292a47180a6c9e0312"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IsEqual</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;rhs, Type fEpsilon) const</td></tr>
<tr class="memdesc:ad5fb940e9f11a3292a47180a6c9e0312"><td class="mdescLeft">&#160;</td><td class="mdescRight">Equality Check with epsilon. <br /></td></tr>
<tr class="separator:ad5fb940e9f11a3292a47180a6c9e0312"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abcd870cce46276520fcb38712748af50" id="r_abcd870cce46276520fcb38712748af50"><td class="memItemLeft" align="right" valign="top"><a id="abcd870cce46276520fcb38712748af50" name="abcd870cce46276520fcb38712748af50"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>Dot</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:abcd870cce46276520fcb38712748af50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the dot-product of the two vectors (commutative, order does not matter). <br /></td></tr>
<tr class="separator:abcd870cce46276520fcb38712748af50"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a13f044190648770d6f34dbeebda054f2" id="r_a13f044190648770d6f34dbeebda054f2"><td class="memItemLeft" align="right" valign="top"><a id="a13f044190648770d6f34dbeebda054f2" name="a13f044190648770d6f34dbeebda054f2"></a>
const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompMin</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a13f044190648770d6f34dbeebda054f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise minimum of *this and rhs. <br /></td></tr>
<tr class="separator:a13f044190648770d6f34dbeebda054f2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44c4bb0f7237f6337a8839e7937205a2" id="r_a44c4bb0f7237f6337a8839e7937205a2"><td class="memItemLeft" align="right" valign="top"><a id="a44c4bb0f7237f6337a8839e7937205a2" name="a44c4bb0f7237f6337a8839e7937205a2"></a>
const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompMax</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a44c4bb0f7237f6337a8839e7937205a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise maximum of *this and rhs. <br /></td></tr>
<tr class="separator:a44c4bb0f7237f6337a8839e7937205a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa28213893fbcb128d7695412cc9c1510" id="r_aa28213893fbcb128d7695412cc9c1510"><td class="memItemLeft" align="right" valign="top"><a id="aa28213893fbcb128d7695412cc9c1510" name="aa28213893fbcb128d7695412cc9c1510"></a>
const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompClamp</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;vLow, const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;vHigh) const</td></tr>
<tr class="memdesc:aa28213893fbcb128d7695412cc9c1510"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise clamped value of *this between low and high. <br /></td></tr>
<tr class="separator:aa28213893fbcb128d7695412cc9c1510"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58aa3ec6f5ba10c51c54706ed9a298da" id="r_a58aa3ec6f5ba10c51c54706ed9a298da"><td class="memItemLeft" align="right" valign="top"><a id="a58aa3ec6f5ba10c51c54706ed9a298da" name="a58aa3ec6f5ba10c51c54706ed9a298da"></a>
const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompMul</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:a58aa3ec6f5ba10c51c54706ed9a298da"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise multiplication of *this and rhs. <br /></td></tr>
<tr class="separator:a58aa3ec6f5ba10c51c54706ed9a298da"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa29bda4941a93f33e502564dd1872f48" id="r_aa29bda4941a93f33e502564dd1872f48"><td class="memItemLeft" align="right" valign="top"><a id="aa29bda4941a93f33e502564dd1872f48" name="aa29bda4941a93f33e502564dd1872f48"></a>
const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>CompDiv</b> (const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt; &amp;rhs) const</td></tr>
<tr class="memdesc:aa29bda4941a93f33e502564dd1872f48"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the component-wise division of *this and rhs. <br /></td></tr>
<tr class="separator:aa29bda4941a93f33e502564dd1872f48"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a00ca3c93711032c658bf9a51738bbc55" id="r_a00ca3c93711032c658bf9a51738bbc55"><td class="memItemLeft" align="right" valign="top"><a id="a00ca3c93711032c658bf9a51738bbc55" name="a00ca3c93711032c658bf9a51738bbc55"></a>
const <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>Abs</b> () const</td></tr>
<tr class="memdesc:a00ca3c93711032c658bf9a51738bbc55"><td class="mdescLeft">&#160;</td><td class="mdescRight">brief Returns the component-wise absolute of *this. <br /></td></tr>
<tr class="separator:a00ca3c93711032c658bf9a51738bbc55"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-static-methods" name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:ae4c92de26854d24a75045058a12f8379" id="r_ae4c92de26854d24a75045058a12f8379"><td class="memItemLeft" align="right" valign="top"><a id="ae4c92de26854d24a75045058a12f8379" name="ae4c92de26854d24a75045058a12f8379"></a>
static XII_DECLARE_IF_FLOAT_TYPE <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MakeNaN</b> ()</td></tr>
<tr class="memdesc:ae4c92de26854d24a75045058a12f8379"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector with all components set to Not-a-Number (NaN). <br /></td></tr>
<tr class="separator:ae4c92de26854d24a75045058a12f8379"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2c1f62d9883d0442d677502525455d2a" id="r_a2c1f62d9883d0442d677502525455d2a"><td class="memItemLeft" align="right" valign="top"><a id="a2c1f62d9883d0442d677502525455d2a" name="a2c1f62d9883d0442d677502525455d2a"></a>
static <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>MakeZero</b> ()</td></tr>
<tr class="memdesc:a2c1f62d9883d0442d677502525455d2a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector with all components set to zero. <br /></td></tr>
<tr class="separator:a2c1f62d9883d0442d677502525455d2a"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a id="pub-attribs" name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:ac246a4380148a305ac51419306424956" id="r_ac246a4380148a305ac51419306424956"><td class="memItemLeft" align="right" valign="top"><a id="ac246a4380148a305ac51419306424956" name="ac246a4380148a305ac51419306424956"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>x</b></td></tr>
<tr class="separator:ac246a4380148a305ac51419306424956"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adf3a98760ccbaa9233cf59d0709185f8" id="r_adf3a98760ccbaa9233cf59d0709185f8"><td class="memItemLeft" align="right" valign="top"><a id="adf3a98760ccbaa9233cf59d0709185f8" name="adf3a98760ccbaa9233cf59d0709185f8"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>y</b></td></tr>
<tr class="separator:adf3a98760ccbaa9233cf59d0709185f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a61186a385f35037c2b5925ef89b1db26" id="r_a61186a385f35037c2b5925ef89b1db26"><td class="memItemLeft" align="right" valign="top"><a id="a61186a385f35037c2b5925ef89b1db26" name="a61186a385f35037c2b5925ef89b1db26"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>z</b></td></tr>
<tr class="separator:a61186a385f35037c2b5925ef89b1db26"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a146e4bd97a36b997c59fb1f67ad9b504" id="r_a146e4bd97a36b997c59fb1f67ad9b504"><td class="memItemLeft" align="right" valign="top"><a id="a146e4bd97a36b997c59fb1f67ad9b504" name="a146e4bd97a36b997c59fb1f67ad9b504"></a>
Type&#160;</td><td class="memItemRight" valign="bottom"><b>w</b></td></tr>
<tr class="separator:a146e4bd97a36b997c59fb1f67ad9b504"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><div class="compoundTemplParams">template&lt;typename Type&gt;<br />
class xiiVec4Template&lt; Type &gt;</div><p>A 4-component vector class. </p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a081978651179d83244e78901125a01d8" name="a081978651179d83244e78901125a01d8"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a081978651179d83244e78901125a01d8">&#9670;&#160;</a></span>IsNormalized()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename Type &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">XII_IMPLEMENT_IF_FLOAT_TYPE bool <a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a>&lt; Type &gt;::IsNormalized </td>
          <td>(</td>
          <td class="paramtype">Type</td>          <td class="paramname"><span class="paramname"><em>fEpsilon</em></span><span class="paramdefsep"> = </span><span class="paramdefval">xiiMath::HugeEpsilon&lt;Type&gt;()</span></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Returns, whether the squared length of this vector is between 0.999f and 1.001f. </p>
<dl class="section note"><dt>Note</dt><dd>Normalization, especially with SSE is not very precise. So this function checks whether the (squared) length is between a lower and upper limit. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Math/<a class="el" href="../../d4/dbc/_engine_2_foundation_2_math_2_declarations_8h_source.htm">Declarations.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Math/<a class="el" href="../../df/d6a/_vec4_8h_source.htm">Vec4.h</a></li>
<li>/home/runner/work/XII/XII/Source/Engine/Foundation/Math/Implementation/<a class="el" href="../../db/dba/_vec4__inl_8h_source.htm">Vec4_inl.h</a></li>
</ul>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="../../d1/d20/classxii_vec4_template.htm">xiiVec4Template</a></li>
    <li class="footer">Generated on Mon Jul 1 2024 22:02:17 for XII Engine by <a href="https://www.doxygen.org/index.html"><img class="footer" src="../../doxygen.svg" width="104" height="31" alt="doxygen"/></a> 1.11.0 </li>
  </ul>
</div>
</body>
</html>
